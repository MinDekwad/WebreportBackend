// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/logexport"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Logexport is the model entity for the Logexport schema.
type Logexport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserName holds the value of the "UserName" field.
	UserName string `json:"UserName,omitempty"`
	// FileName holds the value of the "FileName" field.
	FileName string `json:"FileName,omitempty"`
	// ExportDate holds the value of the "ExportDate" field.
	ExportDate time.Time `json:"ExportDate,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Logexport) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case logexport.FieldID:
			values[i] = &sql.NullInt64{}
		case logexport.FieldUserName, logexport.FieldFileName:
			values[i] = &sql.NullString{}
		case logexport.FieldExportDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Logexport", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Logexport fields.
func (l *Logexport) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logexport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case logexport.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserName", values[i])
			} else if value.Valid {
				l.UserName = value.String
			}
		case logexport.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FileName", values[i])
			} else if value.Valid {
				l.FileName = value.String
			}
		case logexport.FieldExportDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ExportDate", values[i])
			} else if value.Valid {
				l.ExportDate = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Logexport.
// Note that you need to call Logexport.Unwrap() before calling this method if this Logexport
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Logexport) Update() *LogexportUpdateOne {
	return (&LogexportClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Logexport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Logexport) Unwrap() *Logexport {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Logexport is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Logexport) String() string {
	var builder strings.Builder
	builder.WriteString("Logexport(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", UserName=")
	builder.WriteString(l.UserName)
	builder.WriteString(", FileName=")
	builder.WriteString(l.FileName)
	builder.WriteString(", ExportDate=")
	builder.WriteString(l.ExportDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Logexports is a parsable slice of Logexport.
type Logexports []*Logexport

func (l Logexports) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
