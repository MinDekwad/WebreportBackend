// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/areahistory"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreahistoryUpdate is the builder for updating Areahistory entities.
type AreahistoryUpdate struct {
	config
	hooks    []Hook
	mutation *AreahistoryMutation
}

// Where adds a new predicate for the AreahistoryUpdate builder.
func (au *AreahistoryUpdate) Where(ps ...predicate.Areahistory) *AreahistoryUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetWalletID sets the "WalletID" field.
func (au *AreahistoryUpdate) SetWalletID(s string) *AreahistoryUpdate {
	au.mutation.SetWalletID(s)
	return au
}

// SetProvinceNameTH sets the "ProvinceNameTH" field.
func (au *AreahistoryUpdate) SetProvinceNameTH(s string) *AreahistoryUpdate {
	au.mutation.SetProvinceNameTH(s)
	return au
}

// SetNillableProvinceNameTH sets the "ProvinceNameTH" field if the given value is not nil.
func (au *AreahistoryUpdate) SetNillableProvinceNameTH(s *string) *AreahistoryUpdate {
	if s != nil {
		au.SetProvinceNameTH(*s)
	}
	return au
}

// ClearProvinceNameTH clears the value of the "ProvinceNameTH" field.
func (au *AreahistoryUpdate) ClearProvinceNameTH() *AreahistoryUpdate {
	au.mutation.ClearProvinceNameTH()
	return au
}

// SetDistrictNameTH sets the "DistrictNameTH" field.
func (au *AreahistoryUpdate) SetDistrictNameTH(s string) *AreahistoryUpdate {
	au.mutation.SetDistrictNameTH(s)
	return au
}

// SetNillableDistrictNameTH sets the "DistrictNameTH" field if the given value is not nil.
func (au *AreahistoryUpdate) SetNillableDistrictNameTH(s *string) *AreahistoryUpdate {
	if s != nil {
		au.SetDistrictNameTH(*s)
	}
	return au
}

// ClearDistrictNameTH clears the value of the "DistrictNameTH" field.
func (au *AreahistoryUpdate) ClearDistrictNameTH() *AreahistoryUpdate {
	au.mutation.ClearDistrictNameTH()
	return au
}

// SetSubDistrict sets the "SubDistrict" field.
func (au *AreahistoryUpdate) SetSubDistrict(s string) *AreahistoryUpdate {
	au.mutation.SetSubDistrict(s)
	return au
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (au *AreahistoryUpdate) SetNillableSubDistrict(s *string) *AreahistoryUpdate {
	if s != nil {
		au.SetSubDistrict(*s)
	}
	return au
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (au *AreahistoryUpdate) ClearSubDistrict() *AreahistoryUpdate {
	au.mutation.ClearSubDistrict()
	return au
}

// SetRankArea sets the "RankArea" field.
func (au *AreahistoryUpdate) SetRankArea(i int) *AreahistoryUpdate {
	au.mutation.ResetRankArea()
	au.mutation.SetRankArea(i)
	return au
}

// SetNillableRankArea sets the "RankArea" field if the given value is not nil.
func (au *AreahistoryUpdate) SetNillableRankArea(i *int) *AreahistoryUpdate {
	if i != nil {
		au.SetRankArea(*i)
	}
	return au
}

// AddRankArea adds i to the "RankArea" field.
func (au *AreahistoryUpdate) AddRankArea(i int) *AreahistoryUpdate {
	au.mutation.AddRankArea(i)
	return au
}

// ClearRankArea clears the value of the "RankArea" field.
func (au *AreahistoryUpdate) ClearRankArea() *AreahistoryUpdate {
	au.mutation.ClearRankArea()
	return au
}

// SetDateCalRank sets the "DateCalRank" field.
func (au *AreahistoryUpdate) SetDateCalRank(t time.Time) *AreahistoryUpdate {
	au.mutation.SetDateCalRank(t)
	return au
}

// SetNillableDateCalRank sets the "DateCalRank" field if the given value is not nil.
func (au *AreahistoryUpdate) SetNillableDateCalRank(t *time.Time) *AreahistoryUpdate {
	if t != nil {
		au.SetDateCalRank(*t)
	}
	return au
}

// ClearDateCalRank clears the value of the "DateCalRank" field.
func (au *AreahistoryUpdate) ClearDateCalRank() *AreahistoryUpdate {
	au.mutation.ClearDateCalRank()
	return au
}

// Mutation returns the AreahistoryMutation object of the builder.
func (au *AreahistoryUpdate) Mutation() *AreahistoryMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AreahistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AreahistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AreahistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AreahistoryUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AreahistoryUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AreahistoryUpdate) check() error {
	if v, ok := au.mutation.WalletID(); ok {
		if err := areahistory.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := au.mutation.ProvinceNameTH(); ok {
		if err := areahistory.ProvinceNameTHValidator(v); err != nil {
			return &ValidationError{Name: "ProvinceNameTH", err: fmt.Errorf("ent: validator failed for field \"ProvinceNameTH\": %w", err)}
		}
	}
	if v, ok := au.mutation.DistrictNameTH(); ok {
		if err := areahistory.DistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"DistrictNameTH\": %w", err)}
		}
	}
	if v, ok := au.mutation.SubDistrict(); ok {
		if err := areahistory.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf("ent: validator failed for field \"SubDistrict\": %w", err)}
		}
	}
	return nil
}

func (au *AreahistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   areahistory.Table,
			Columns: areahistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: areahistory.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldWalletID,
		})
	}
	if value, ok := au.mutation.ProvinceNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldProvinceNameTH,
		})
	}
	if au.mutation.ProvinceNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: areahistory.FieldProvinceNameTH,
		})
	}
	if value, ok := au.mutation.DistrictNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldDistrictNameTH,
		})
	}
	if au.mutation.DistrictNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: areahistory.FieldDistrictNameTH,
		})
	}
	if value, ok := au.mutation.SubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldSubDistrict,
		})
	}
	if au.mutation.SubDistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: areahistory.FieldSubDistrict,
		})
	}
	if value, ok := au.mutation.RankArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: areahistory.FieldRankArea,
		})
	}
	if value, ok := au.mutation.AddedRankArea(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: areahistory.FieldRankArea,
		})
	}
	if au.mutation.RankAreaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: areahistory.FieldRankArea,
		})
	}
	if value, ok := au.mutation.DateCalRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: areahistory.FieldDateCalRank,
		})
	}
	if au.mutation.DateCalRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: areahistory.FieldDateCalRank,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{areahistory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AreahistoryUpdateOne is the builder for updating a single Areahistory entity.
type AreahistoryUpdateOne struct {
	config
	hooks    []Hook
	mutation *AreahistoryMutation
}

// SetWalletID sets the "WalletID" field.
func (auo *AreahistoryUpdateOne) SetWalletID(s string) *AreahistoryUpdateOne {
	auo.mutation.SetWalletID(s)
	return auo
}

// SetProvinceNameTH sets the "ProvinceNameTH" field.
func (auo *AreahistoryUpdateOne) SetProvinceNameTH(s string) *AreahistoryUpdateOne {
	auo.mutation.SetProvinceNameTH(s)
	return auo
}

// SetNillableProvinceNameTH sets the "ProvinceNameTH" field if the given value is not nil.
func (auo *AreahistoryUpdateOne) SetNillableProvinceNameTH(s *string) *AreahistoryUpdateOne {
	if s != nil {
		auo.SetProvinceNameTH(*s)
	}
	return auo
}

// ClearProvinceNameTH clears the value of the "ProvinceNameTH" field.
func (auo *AreahistoryUpdateOne) ClearProvinceNameTH() *AreahistoryUpdateOne {
	auo.mutation.ClearProvinceNameTH()
	return auo
}

// SetDistrictNameTH sets the "DistrictNameTH" field.
func (auo *AreahistoryUpdateOne) SetDistrictNameTH(s string) *AreahistoryUpdateOne {
	auo.mutation.SetDistrictNameTH(s)
	return auo
}

// SetNillableDistrictNameTH sets the "DistrictNameTH" field if the given value is not nil.
func (auo *AreahistoryUpdateOne) SetNillableDistrictNameTH(s *string) *AreahistoryUpdateOne {
	if s != nil {
		auo.SetDistrictNameTH(*s)
	}
	return auo
}

// ClearDistrictNameTH clears the value of the "DistrictNameTH" field.
func (auo *AreahistoryUpdateOne) ClearDistrictNameTH() *AreahistoryUpdateOne {
	auo.mutation.ClearDistrictNameTH()
	return auo
}

// SetSubDistrict sets the "SubDistrict" field.
func (auo *AreahistoryUpdateOne) SetSubDistrict(s string) *AreahistoryUpdateOne {
	auo.mutation.SetSubDistrict(s)
	return auo
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (auo *AreahistoryUpdateOne) SetNillableSubDistrict(s *string) *AreahistoryUpdateOne {
	if s != nil {
		auo.SetSubDistrict(*s)
	}
	return auo
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (auo *AreahistoryUpdateOne) ClearSubDistrict() *AreahistoryUpdateOne {
	auo.mutation.ClearSubDistrict()
	return auo
}

// SetRankArea sets the "RankArea" field.
func (auo *AreahistoryUpdateOne) SetRankArea(i int) *AreahistoryUpdateOne {
	auo.mutation.ResetRankArea()
	auo.mutation.SetRankArea(i)
	return auo
}

// SetNillableRankArea sets the "RankArea" field if the given value is not nil.
func (auo *AreahistoryUpdateOne) SetNillableRankArea(i *int) *AreahistoryUpdateOne {
	if i != nil {
		auo.SetRankArea(*i)
	}
	return auo
}

// AddRankArea adds i to the "RankArea" field.
func (auo *AreahistoryUpdateOne) AddRankArea(i int) *AreahistoryUpdateOne {
	auo.mutation.AddRankArea(i)
	return auo
}

// ClearRankArea clears the value of the "RankArea" field.
func (auo *AreahistoryUpdateOne) ClearRankArea() *AreahistoryUpdateOne {
	auo.mutation.ClearRankArea()
	return auo
}

// SetDateCalRank sets the "DateCalRank" field.
func (auo *AreahistoryUpdateOne) SetDateCalRank(t time.Time) *AreahistoryUpdateOne {
	auo.mutation.SetDateCalRank(t)
	return auo
}

// SetNillableDateCalRank sets the "DateCalRank" field if the given value is not nil.
func (auo *AreahistoryUpdateOne) SetNillableDateCalRank(t *time.Time) *AreahistoryUpdateOne {
	if t != nil {
		auo.SetDateCalRank(*t)
	}
	return auo
}

// ClearDateCalRank clears the value of the "DateCalRank" field.
func (auo *AreahistoryUpdateOne) ClearDateCalRank() *AreahistoryUpdateOne {
	auo.mutation.ClearDateCalRank()
	return auo
}

// Mutation returns the AreahistoryMutation object of the builder.
func (auo *AreahistoryUpdateOne) Mutation() *AreahistoryMutation {
	return auo.mutation
}

// Save executes the query and returns the updated Areahistory entity.
func (auo *AreahistoryUpdateOne) Save(ctx context.Context) (*Areahistory, error) {
	var (
		err  error
		node *Areahistory
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AreahistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AreahistoryUpdateOne) SaveX(ctx context.Context) *Areahistory {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AreahistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AreahistoryUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AreahistoryUpdateOne) check() error {
	if v, ok := auo.mutation.WalletID(); ok {
		if err := areahistory.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := auo.mutation.ProvinceNameTH(); ok {
		if err := areahistory.ProvinceNameTHValidator(v); err != nil {
			return &ValidationError{Name: "ProvinceNameTH", err: fmt.Errorf("ent: validator failed for field \"ProvinceNameTH\": %w", err)}
		}
	}
	if v, ok := auo.mutation.DistrictNameTH(); ok {
		if err := areahistory.DistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"DistrictNameTH\": %w", err)}
		}
	}
	if v, ok := auo.mutation.SubDistrict(); ok {
		if err := areahistory.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf("ent: validator failed for field \"SubDistrict\": %w", err)}
		}
	}
	return nil
}

func (auo *AreahistoryUpdateOne) sqlSave(ctx context.Context) (_node *Areahistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   areahistory.Table,
			Columns: areahistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: areahistory.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Areahistory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldWalletID,
		})
	}
	if value, ok := auo.mutation.ProvinceNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldProvinceNameTH,
		})
	}
	if auo.mutation.ProvinceNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: areahistory.FieldProvinceNameTH,
		})
	}
	if value, ok := auo.mutation.DistrictNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldDistrictNameTH,
		})
	}
	if auo.mutation.DistrictNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: areahistory.FieldDistrictNameTH,
		})
	}
	if value, ok := auo.mutation.SubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldSubDistrict,
		})
	}
	if auo.mutation.SubDistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: areahistory.FieldSubDistrict,
		})
	}
	if value, ok := auo.mutation.RankArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: areahistory.FieldRankArea,
		})
	}
	if value, ok := auo.mutation.AddedRankArea(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: areahistory.FieldRankArea,
		})
	}
	if auo.mutation.RankAreaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: areahistory.FieldRankArea,
		})
	}
	if value, ok := auo.mutation.DateCalRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: areahistory.FieldDateCalRank,
		})
	}
	if auo.mutation.DateCalRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: areahistory.FieldDateCalRank,
		})
	}
	_node = &Areahistory{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{areahistory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
