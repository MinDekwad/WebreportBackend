// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pointpendingkyctransaction"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PointpendingkyctransactionUpdate is the builder for updating Pointpendingkyctransaction entities.
type PointpendingkyctransactionUpdate struct {
	config
	hooks    []Hook
	mutation *PointpendingkyctransactionMutation
}

// Where adds a new predicate for the PointpendingkyctransactionUpdate builder.
func (pu *PointpendingkyctransactionUpdate) Where(ps ...predicate.Pointpendingkyctransaction) *PointpendingkyctransactionUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetWalletId sets the "WalletId" field.
func (pu *PointpendingkyctransactionUpdate) SetWalletId(s string) *PointpendingkyctransactionUpdate {
	pu.mutation.SetWalletId(s)
	return pu
}

// SetNillableWalletId sets the "WalletId" field if the given value is not nil.
func (pu *PointpendingkyctransactionUpdate) SetNillableWalletId(s *string) *PointpendingkyctransactionUpdate {
	if s != nil {
		pu.SetWalletId(*s)
	}
	return pu
}

// ClearWalletId clears the value of the "WalletId" field.
func (pu *PointpendingkyctransactionUpdate) ClearWalletId() *PointpendingkyctransactionUpdate {
	pu.mutation.ClearWalletId()
	return pu
}

// SetPoint sets the "Point" field.
func (pu *PointpendingkyctransactionUpdate) SetPoint(i int) *PointpendingkyctransactionUpdate {
	pu.mutation.ResetPoint()
	pu.mutation.SetPoint(i)
	return pu
}

// SetNillablePoint sets the "Point" field if the given value is not nil.
func (pu *PointpendingkyctransactionUpdate) SetNillablePoint(i *int) *PointpendingkyctransactionUpdate {
	if i != nil {
		pu.SetPoint(*i)
	}
	return pu
}

// AddPoint adds i to the "Point" field.
func (pu *PointpendingkyctransactionUpdate) AddPoint(i int) *PointpendingkyctransactionUpdate {
	pu.mutation.AddPoint(i)
	return pu
}

// ClearPoint clears the value of the "Point" field.
func (pu *PointpendingkyctransactionUpdate) ClearPoint() *PointpendingkyctransactionUpdate {
	pu.mutation.ClearPoint()
	return pu
}

// SetDateExport sets the "DateExport" field.
func (pu *PointpendingkyctransactionUpdate) SetDateExport(t time.Time) *PointpendingkyctransactionUpdate {
	pu.mutation.SetDateExport(t)
	return pu
}

// SetNillableDateExport sets the "DateExport" field if the given value is not nil.
func (pu *PointpendingkyctransactionUpdate) SetNillableDateExport(t *time.Time) *PointpendingkyctransactionUpdate {
	if t != nil {
		pu.SetDateExport(*t)
	}
	return pu
}

// ClearDateExport clears the value of the "DateExport" field.
func (pu *PointpendingkyctransactionUpdate) ClearDateExport() *PointpendingkyctransactionUpdate {
	pu.mutation.ClearDateExport()
	return pu
}

// SetDateGen sets the "DateGen" field.
func (pu *PointpendingkyctransactionUpdate) SetDateGen(t time.Time) *PointpendingkyctransactionUpdate {
	pu.mutation.SetDateGen(t)
	return pu
}

// SetNillableDateGen sets the "DateGen" field if the given value is not nil.
func (pu *PointpendingkyctransactionUpdate) SetNillableDateGen(t *time.Time) *PointpendingkyctransactionUpdate {
	if t != nil {
		pu.SetDateGen(*t)
	}
	return pu
}

// ClearDateGen clears the value of the "DateGen" field.
func (pu *PointpendingkyctransactionUpdate) ClearDateGen() *PointpendingkyctransactionUpdate {
	pu.mutation.ClearDateGen()
	return pu
}

// SetNote sets the "Note" field.
func (pu *PointpendingkyctransactionUpdate) SetNote(s string) *PointpendingkyctransactionUpdate {
	pu.mutation.SetNote(s)
	return pu
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (pu *PointpendingkyctransactionUpdate) SetNillableNote(s *string) *PointpendingkyctransactionUpdate {
	if s != nil {
		pu.SetNote(*s)
	}
	return pu
}

// ClearNote clears the value of the "Note" field.
func (pu *PointpendingkyctransactionUpdate) ClearNote() *PointpendingkyctransactionUpdate {
	pu.mutation.ClearNote()
	return pu
}

// SetStatusExport sets the "StatusExport" field.
func (pu *PointpendingkyctransactionUpdate) SetStatusExport(b bool) *PointpendingkyctransactionUpdate {
	pu.mutation.SetStatusExport(b)
	return pu
}

// SetNillableStatusExport sets the "StatusExport" field if the given value is not nil.
func (pu *PointpendingkyctransactionUpdate) SetNillableStatusExport(b *bool) *PointpendingkyctransactionUpdate {
	if b != nil {
		pu.SetStatusExport(*b)
	}
	return pu
}

// ClearStatusExport clears the value of the "StatusExport" field.
func (pu *PointpendingkyctransactionUpdate) ClearStatusExport() *PointpendingkyctransactionUpdate {
	pu.mutation.ClearStatusExport()
	return pu
}

// SetKYCDate sets the "KYCDate" field.
func (pu *PointpendingkyctransactionUpdate) SetKYCDate(s string) *PointpendingkyctransactionUpdate {
	pu.mutation.SetKYCDate(s)
	return pu
}

// SetNillableKYCDate sets the "KYCDate" field if the given value is not nil.
func (pu *PointpendingkyctransactionUpdate) SetNillableKYCDate(s *string) *PointpendingkyctransactionUpdate {
	if s != nil {
		pu.SetKYCDate(*s)
	}
	return pu
}

// ClearKYCDate clears the value of the "KYCDate" field.
func (pu *PointpendingkyctransactionUpdate) ClearKYCDate() *PointpendingkyctransactionUpdate {
	pu.mutation.ClearKYCDate()
	return pu
}

// Mutation returns the PointpendingkyctransactionMutation object of the builder.
func (pu *PointpendingkyctransactionUpdate) Mutation() *PointpendingkyctransactionMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PointpendingkyctransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointpendingkyctransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PointpendingkyctransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PointpendingkyctransactionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PointpendingkyctransactionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PointpendingkyctransactionUpdate) check() error {
	if v, ok := pu.mutation.WalletId(); ok {
		if err := pointpendingkyctransaction.WalletIdValidator(v); err != nil {
			return &ValidationError{Name: "WalletId", err: fmt.Errorf("ent: validator failed for field \"WalletId\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Note(); ok {
		if err := pointpendingkyctransaction.NoteValidator(v); err != nil {
			return &ValidationError{Name: "Note", err: fmt.Errorf("ent: validator failed for field \"Note\": %w", err)}
		}
	}
	if v, ok := pu.mutation.KYCDate(); ok {
		if err := pointpendingkyctransaction.KYCDateValidator(v); err != nil {
			return &ValidationError{Name: "KYCDate", err: fmt.Errorf("ent: validator failed for field \"KYCDate\": %w", err)}
		}
	}
	return nil
}

func (pu *PointpendingkyctransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pointpendingkyctransaction.Table,
			Columns: pointpendingkyctransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointpendingkyctransaction.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.WalletId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendingkyctransaction.FieldWalletId,
		})
	}
	if pu.mutation.WalletIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointpendingkyctransaction.FieldWalletId,
		})
	}
	if value, ok := pu.mutation.Point(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointpendingkyctransaction.FieldPoint,
		})
	}
	if value, ok := pu.mutation.AddedPoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointpendingkyctransaction.FieldPoint,
		})
	}
	if pu.mutation.PointCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointpendingkyctransaction.FieldPoint,
		})
	}
	if value, ok := pu.mutation.DateExport(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendingkyctransaction.FieldDateExport,
		})
	}
	if pu.mutation.DateExportCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointpendingkyctransaction.FieldDateExport,
		})
	}
	if value, ok := pu.mutation.DateGen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendingkyctransaction.FieldDateGen,
		})
	}
	if pu.mutation.DateGenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointpendingkyctransaction.FieldDateGen,
		})
	}
	if value, ok := pu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendingkyctransaction.FieldNote,
		})
	}
	if pu.mutation.NoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointpendingkyctransaction.FieldNote,
		})
	}
	if value, ok := pu.mutation.StatusExport(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pointpendingkyctransaction.FieldStatusExport,
		})
	}
	if pu.mutation.StatusExportCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: pointpendingkyctransaction.FieldStatusExport,
		})
	}
	if value, ok := pu.mutation.KYCDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendingkyctransaction.FieldKYCDate,
		})
	}
	if pu.mutation.KYCDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointpendingkyctransaction.FieldKYCDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointpendingkyctransaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PointpendingkyctransactionUpdateOne is the builder for updating a single Pointpendingkyctransaction entity.
type PointpendingkyctransactionUpdateOne struct {
	config
	hooks    []Hook
	mutation *PointpendingkyctransactionMutation
}

// SetWalletId sets the "WalletId" field.
func (puo *PointpendingkyctransactionUpdateOne) SetWalletId(s string) *PointpendingkyctransactionUpdateOne {
	puo.mutation.SetWalletId(s)
	return puo
}

// SetNillableWalletId sets the "WalletId" field if the given value is not nil.
func (puo *PointpendingkyctransactionUpdateOne) SetNillableWalletId(s *string) *PointpendingkyctransactionUpdateOne {
	if s != nil {
		puo.SetWalletId(*s)
	}
	return puo
}

// ClearWalletId clears the value of the "WalletId" field.
func (puo *PointpendingkyctransactionUpdateOne) ClearWalletId() *PointpendingkyctransactionUpdateOne {
	puo.mutation.ClearWalletId()
	return puo
}

// SetPoint sets the "Point" field.
func (puo *PointpendingkyctransactionUpdateOne) SetPoint(i int) *PointpendingkyctransactionUpdateOne {
	puo.mutation.ResetPoint()
	puo.mutation.SetPoint(i)
	return puo
}

// SetNillablePoint sets the "Point" field if the given value is not nil.
func (puo *PointpendingkyctransactionUpdateOne) SetNillablePoint(i *int) *PointpendingkyctransactionUpdateOne {
	if i != nil {
		puo.SetPoint(*i)
	}
	return puo
}

// AddPoint adds i to the "Point" field.
func (puo *PointpendingkyctransactionUpdateOne) AddPoint(i int) *PointpendingkyctransactionUpdateOne {
	puo.mutation.AddPoint(i)
	return puo
}

// ClearPoint clears the value of the "Point" field.
func (puo *PointpendingkyctransactionUpdateOne) ClearPoint() *PointpendingkyctransactionUpdateOne {
	puo.mutation.ClearPoint()
	return puo
}

// SetDateExport sets the "DateExport" field.
func (puo *PointpendingkyctransactionUpdateOne) SetDateExport(t time.Time) *PointpendingkyctransactionUpdateOne {
	puo.mutation.SetDateExport(t)
	return puo
}

// SetNillableDateExport sets the "DateExport" field if the given value is not nil.
func (puo *PointpendingkyctransactionUpdateOne) SetNillableDateExport(t *time.Time) *PointpendingkyctransactionUpdateOne {
	if t != nil {
		puo.SetDateExport(*t)
	}
	return puo
}

// ClearDateExport clears the value of the "DateExport" field.
func (puo *PointpendingkyctransactionUpdateOne) ClearDateExport() *PointpendingkyctransactionUpdateOne {
	puo.mutation.ClearDateExport()
	return puo
}

// SetDateGen sets the "DateGen" field.
func (puo *PointpendingkyctransactionUpdateOne) SetDateGen(t time.Time) *PointpendingkyctransactionUpdateOne {
	puo.mutation.SetDateGen(t)
	return puo
}

// SetNillableDateGen sets the "DateGen" field if the given value is not nil.
func (puo *PointpendingkyctransactionUpdateOne) SetNillableDateGen(t *time.Time) *PointpendingkyctransactionUpdateOne {
	if t != nil {
		puo.SetDateGen(*t)
	}
	return puo
}

// ClearDateGen clears the value of the "DateGen" field.
func (puo *PointpendingkyctransactionUpdateOne) ClearDateGen() *PointpendingkyctransactionUpdateOne {
	puo.mutation.ClearDateGen()
	return puo
}

// SetNote sets the "Note" field.
func (puo *PointpendingkyctransactionUpdateOne) SetNote(s string) *PointpendingkyctransactionUpdateOne {
	puo.mutation.SetNote(s)
	return puo
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (puo *PointpendingkyctransactionUpdateOne) SetNillableNote(s *string) *PointpendingkyctransactionUpdateOne {
	if s != nil {
		puo.SetNote(*s)
	}
	return puo
}

// ClearNote clears the value of the "Note" field.
func (puo *PointpendingkyctransactionUpdateOne) ClearNote() *PointpendingkyctransactionUpdateOne {
	puo.mutation.ClearNote()
	return puo
}

// SetStatusExport sets the "StatusExport" field.
func (puo *PointpendingkyctransactionUpdateOne) SetStatusExport(b bool) *PointpendingkyctransactionUpdateOne {
	puo.mutation.SetStatusExport(b)
	return puo
}

// SetNillableStatusExport sets the "StatusExport" field if the given value is not nil.
func (puo *PointpendingkyctransactionUpdateOne) SetNillableStatusExport(b *bool) *PointpendingkyctransactionUpdateOne {
	if b != nil {
		puo.SetStatusExport(*b)
	}
	return puo
}

// ClearStatusExport clears the value of the "StatusExport" field.
func (puo *PointpendingkyctransactionUpdateOne) ClearStatusExport() *PointpendingkyctransactionUpdateOne {
	puo.mutation.ClearStatusExport()
	return puo
}

// SetKYCDate sets the "KYCDate" field.
func (puo *PointpendingkyctransactionUpdateOne) SetKYCDate(s string) *PointpendingkyctransactionUpdateOne {
	puo.mutation.SetKYCDate(s)
	return puo
}

// SetNillableKYCDate sets the "KYCDate" field if the given value is not nil.
func (puo *PointpendingkyctransactionUpdateOne) SetNillableKYCDate(s *string) *PointpendingkyctransactionUpdateOne {
	if s != nil {
		puo.SetKYCDate(*s)
	}
	return puo
}

// ClearKYCDate clears the value of the "KYCDate" field.
func (puo *PointpendingkyctransactionUpdateOne) ClearKYCDate() *PointpendingkyctransactionUpdateOne {
	puo.mutation.ClearKYCDate()
	return puo
}

// Mutation returns the PointpendingkyctransactionMutation object of the builder.
func (puo *PointpendingkyctransactionUpdateOne) Mutation() *PointpendingkyctransactionMutation {
	return puo.mutation
}

// Save executes the query and returns the updated Pointpendingkyctransaction entity.
func (puo *PointpendingkyctransactionUpdateOne) Save(ctx context.Context) (*Pointpendingkyctransaction, error) {
	var (
		err  error
		node *Pointpendingkyctransaction
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointpendingkyctransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PointpendingkyctransactionUpdateOne) SaveX(ctx context.Context) *Pointpendingkyctransaction {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PointpendingkyctransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PointpendingkyctransactionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PointpendingkyctransactionUpdateOne) check() error {
	if v, ok := puo.mutation.WalletId(); ok {
		if err := pointpendingkyctransaction.WalletIdValidator(v); err != nil {
			return &ValidationError{Name: "WalletId", err: fmt.Errorf("ent: validator failed for field \"WalletId\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Note(); ok {
		if err := pointpendingkyctransaction.NoteValidator(v); err != nil {
			return &ValidationError{Name: "Note", err: fmt.Errorf("ent: validator failed for field \"Note\": %w", err)}
		}
	}
	if v, ok := puo.mutation.KYCDate(); ok {
		if err := pointpendingkyctransaction.KYCDateValidator(v); err != nil {
			return &ValidationError{Name: "KYCDate", err: fmt.Errorf("ent: validator failed for field \"KYCDate\": %w", err)}
		}
	}
	return nil
}

func (puo *PointpendingkyctransactionUpdateOne) sqlSave(ctx context.Context) (_node *Pointpendingkyctransaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pointpendingkyctransaction.Table,
			Columns: pointpendingkyctransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointpendingkyctransaction.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pointpendingkyctransaction.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.WalletId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendingkyctransaction.FieldWalletId,
		})
	}
	if puo.mutation.WalletIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointpendingkyctransaction.FieldWalletId,
		})
	}
	if value, ok := puo.mutation.Point(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointpendingkyctransaction.FieldPoint,
		})
	}
	if value, ok := puo.mutation.AddedPoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointpendingkyctransaction.FieldPoint,
		})
	}
	if puo.mutation.PointCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointpendingkyctransaction.FieldPoint,
		})
	}
	if value, ok := puo.mutation.DateExport(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendingkyctransaction.FieldDateExport,
		})
	}
	if puo.mutation.DateExportCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointpendingkyctransaction.FieldDateExport,
		})
	}
	if value, ok := puo.mutation.DateGen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendingkyctransaction.FieldDateGen,
		})
	}
	if puo.mutation.DateGenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointpendingkyctransaction.FieldDateGen,
		})
	}
	if value, ok := puo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendingkyctransaction.FieldNote,
		})
	}
	if puo.mutation.NoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointpendingkyctransaction.FieldNote,
		})
	}
	if value, ok := puo.mutation.StatusExport(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pointpendingkyctransaction.FieldStatusExport,
		})
	}
	if puo.mutation.StatusExportCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: pointpendingkyctransaction.FieldStatusExport,
		})
	}
	if value, ok := puo.mutation.KYCDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendingkyctransaction.FieldKYCDate,
		})
	}
	if puo.mutation.KYCDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointpendingkyctransaction.FieldKYCDate,
		})
	}
	_node = &Pointpendingkyctransaction{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointpendingkyctransaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
