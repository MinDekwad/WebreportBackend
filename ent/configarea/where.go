// Code generated by entc, DO NOT EDIT.

package configarea

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProvinceID applies equality check predicate on the "ProvinceID" field. It's identical to ProvinceIDEQ.
func ProvinceID(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvinceID), v))
	})
}

// ProvinceNameTH applies equality check predicate on the "ProvinceNameTH" field. It's identical to ProvinceNameTHEQ.
func ProvinceNameTH(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvinceNameTH), v))
	})
}

// DistrictID applies equality check predicate on the "DistrictID" field. It's identical to DistrictIDEQ.
func DistrictID(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictID), v))
	})
}

// DistrictNameTH applies equality check predicate on the "DistrictNameTH" field. It's identical to DistrictNameTHEQ.
func DistrictNameTH(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameEN applies equality check predicate on the "DistrictNameEN" field. It's identical to DistrictNameENEQ.
func DistrictNameEN(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictNameEN), v))
	})
}

// Rank applies equality check predicate on the "Rank" field. It's identical to RankEQ.
func Rank(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// RankTmp applies equality check predicate on the "RankTmp" field. It's identical to RankTmpEQ.
func RankTmp(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankTmp), v))
	})
}

// UpdateDate applies equality check predicate on the "UpdateDate" field. It's identical to UpdateDateEQ.
func UpdateDate(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateDate), v))
	})
}

// ZipCode applies equality check predicate on the "ZipCode" field. It's identical to ZipCodeEQ.
func ZipCode(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZipCode), v))
	})
}

// SubDistrictNameTH applies equality check predicate on the "SubDistrictNameTH" field. It's identical to SubDistrictNameTHEQ.
func SubDistrictNameTH(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubDistrictNameTH), v))
	})
}

// ApproveBy applies equality check predicate on the "ApproveBy" field. It's identical to ApproveByEQ.
func ApproveBy(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApproveBy), v))
	})
}

// ApproveDate applies equality check predicate on the "ApproveDate" field. It's identical to ApproveDateEQ.
func ApproveDate(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApproveDate), v))
	})
}

// ProvinceIDEQ applies the EQ predicate on the "ProvinceID" field.
func ProvinceIDEQ(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvinceID), v))
	})
}

// ProvinceIDNEQ applies the NEQ predicate on the "ProvinceID" field.
func ProvinceIDNEQ(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvinceID), v))
	})
}

// ProvinceIDIn applies the In predicate on the "ProvinceID" field.
func ProvinceIDIn(vs ...int) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvinceID), v...))
	})
}

// ProvinceIDNotIn applies the NotIn predicate on the "ProvinceID" field.
func ProvinceIDNotIn(vs ...int) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvinceID), v...))
	})
}

// ProvinceIDGT applies the GT predicate on the "ProvinceID" field.
func ProvinceIDGT(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvinceID), v))
	})
}

// ProvinceIDGTE applies the GTE predicate on the "ProvinceID" field.
func ProvinceIDGTE(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvinceID), v))
	})
}

// ProvinceIDLT applies the LT predicate on the "ProvinceID" field.
func ProvinceIDLT(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvinceID), v))
	})
}

// ProvinceIDLTE applies the LTE predicate on the "ProvinceID" field.
func ProvinceIDLTE(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvinceID), v))
	})
}

// ProvinceIDIsNil applies the IsNil predicate on the "ProvinceID" field.
func ProvinceIDIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProvinceID)))
	})
}

// ProvinceIDNotNil applies the NotNil predicate on the "ProvinceID" field.
func ProvinceIDNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProvinceID)))
	})
}

// ProvinceNameTHEQ applies the EQ predicate on the "ProvinceNameTH" field.
func ProvinceNameTHEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHNEQ applies the NEQ predicate on the "ProvinceNameTH" field.
func ProvinceNameTHNEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHIn applies the In predicate on the "ProvinceNameTH" field.
func ProvinceNameTHIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvinceNameTH), v...))
	})
}

// ProvinceNameTHNotIn applies the NotIn predicate on the "ProvinceNameTH" field.
func ProvinceNameTHNotIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvinceNameTH), v...))
	})
}

// ProvinceNameTHGT applies the GT predicate on the "ProvinceNameTH" field.
func ProvinceNameTHGT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHGTE applies the GTE predicate on the "ProvinceNameTH" field.
func ProvinceNameTHGTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHLT applies the LT predicate on the "ProvinceNameTH" field.
func ProvinceNameTHLT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHLTE applies the LTE predicate on the "ProvinceNameTH" field.
func ProvinceNameTHLTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHContains applies the Contains predicate on the "ProvinceNameTH" field.
func ProvinceNameTHContains(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHHasPrefix applies the HasPrefix predicate on the "ProvinceNameTH" field.
func ProvinceNameTHHasPrefix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHHasSuffix applies the HasSuffix predicate on the "ProvinceNameTH" field.
func ProvinceNameTHHasSuffix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHIsNil applies the IsNil predicate on the "ProvinceNameTH" field.
func ProvinceNameTHIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProvinceNameTH)))
	})
}

// ProvinceNameTHNotNil applies the NotNil predicate on the "ProvinceNameTH" field.
func ProvinceNameTHNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProvinceNameTH)))
	})
}

// ProvinceNameTHEqualFold applies the EqualFold predicate on the "ProvinceNameTH" field.
func ProvinceNameTHEqualFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHContainsFold applies the ContainsFold predicate on the "ProvinceNameTH" field.
func ProvinceNameTHContainsFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvinceNameTH), v))
	})
}

// DistrictIDEQ applies the EQ predicate on the "DistrictID" field.
func DistrictIDEQ(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictID), v))
	})
}

// DistrictIDNEQ applies the NEQ predicate on the "DistrictID" field.
func DistrictIDNEQ(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrictID), v))
	})
}

// DistrictIDIn applies the In predicate on the "DistrictID" field.
func DistrictIDIn(vs ...int) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrictID), v...))
	})
}

// DistrictIDNotIn applies the NotIn predicate on the "DistrictID" field.
func DistrictIDNotIn(vs ...int) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrictID), v...))
	})
}

// DistrictIDGT applies the GT predicate on the "DistrictID" field.
func DistrictIDGT(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrictID), v))
	})
}

// DistrictIDGTE applies the GTE predicate on the "DistrictID" field.
func DistrictIDGTE(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrictID), v))
	})
}

// DistrictIDLT applies the LT predicate on the "DistrictID" field.
func DistrictIDLT(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrictID), v))
	})
}

// DistrictIDLTE applies the LTE predicate on the "DistrictID" field.
func DistrictIDLTE(v int) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrictID), v))
	})
}

// DistrictIDIsNil applies the IsNil predicate on the "DistrictID" field.
func DistrictIDIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistrictID)))
	})
}

// DistrictIDNotNil applies the NotNil predicate on the "DistrictID" field.
func DistrictIDNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistrictID)))
	})
}

// DistrictNameTHEQ applies the EQ predicate on the "DistrictNameTH" field.
func DistrictNameTHEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHNEQ applies the NEQ predicate on the "DistrictNameTH" field.
func DistrictNameTHNEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHIn applies the In predicate on the "DistrictNameTH" field.
func DistrictNameTHIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrictNameTH), v...))
	})
}

// DistrictNameTHNotIn applies the NotIn predicate on the "DistrictNameTH" field.
func DistrictNameTHNotIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrictNameTH), v...))
	})
}

// DistrictNameTHGT applies the GT predicate on the "DistrictNameTH" field.
func DistrictNameTHGT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHGTE applies the GTE predicate on the "DistrictNameTH" field.
func DistrictNameTHGTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHLT applies the LT predicate on the "DistrictNameTH" field.
func DistrictNameTHLT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHLTE applies the LTE predicate on the "DistrictNameTH" field.
func DistrictNameTHLTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHContains applies the Contains predicate on the "DistrictNameTH" field.
func DistrictNameTHContains(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHHasPrefix applies the HasPrefix predicate on the "DistrictNameTH" field.
func DistrictNameTHHasPrefix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHHasSuffix applies the HasSuffix predicate on the "DistrictNameTH" field.
func DistrictNameTHHasSuffix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHIsNil applies the IsNil predicate on the "DistrictNameTH" field.
func DistrictNameTHIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistrictNameTH)))
	})
}

// DistrictNameTHNotNil applies the NotNil predicate on the "DistrictNameTH" field.
func DistrictNameTHNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistrictNameTH)))
	})
}

// DistrictNameTHEqualFold applies the EqualFold predicate on the "DistrictNameTH" field.
func DistrictNameTHEqualFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHContainsFold applies the ContainsFold predicate on the "DistrictNameTH" field.
func DistrictNameTHContainsFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameENEQ applies the EQ predicate on the "DistrictNameEN" field.
func DistrictNameENEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENNEQ applies the NEQ predicate on the "DistrictNameEN" field.
func DistrictNameENNEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENIn applies the In predicate on the "DistrictNameEN" field.
func DistrictNameENIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrictNameEN), v...))
	})
}

// DistrictNameENNotIn applies the NotIn predicate on the "DistrictNameEN" field.
func DistrictNameENNotIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrictNameEN), v...))
	})
}

// DistrictNameENGT applies the GT predicate on the "DistrictNameEN" field.
func DistrictNameENGT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENGTE applies the GTE predicate on the "DistrictNameEN" field.
func DistrictNameENGTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENLT applies the LT predicate on the "DistrictNameEN" field.
func DistrictNameENLT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENLTE applies the LTE predicate on the "DistrictNameEN" field.
func DistrictNameENLTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENContains applies the Contains predicate on the "DistrictNameEN" field.
func DistrictNameENContains(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENHasPrefix applies the HasPrefix predicate on the "DistrictNameEN" field.
func DistrictNameENHasPrefix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENHasSuffix applies the HasSuffix predicate on the "DistrictNameEN" field.
func DistrictNameENHasSuffix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENIsNil applies the IsNil predicate on the "DistrictNameEN" field.
func DistrictNameENIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistrictNameEN)))
	})
}

// DistrictNameENNotNil applies the NotNil predicate on the "DistrictNameEN" field.
func DistrictNameENNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistrictNameEN)))
	})
}

// DistrictNameENEqualFold applies the EqualFold predicate on the "DistrictNameEN" field.
func DistrictNameENEqualFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENContainsFold applies the ContainsFold predicate on the "DistrictNameEN" field.
func DistrictNameENContainsFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrictNameEN), v))
	})
}

// RankEQ applies the EQ predicate on the "Rank" field.
func RankEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// RankNEQ applies the NEQ predicate on the "Rank" field.
func RankNEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRank), v))
	})
}

// RankIn applies the In predicate on the "Rank" field.
func RankIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRank), v...))
	})
}

// RankNotIn applies the NotIn predicate on the "Rank" field.
func RankNotIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRank), v...))
	})
}

// RankGT applies the GT predicate on the "Rank" field.
func RankGT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRank), v))
	})
}

// RankGTE applies the GTE predicate on the "Rank" field.
func RankGTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRank), v))
	})
}

// RankLT applies the LT predicate on the "Rank" field.
func RankLT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRank), v))
	})
}

// RankLTE applies the LTE predicate on the "Rank" field.
func RankLTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRank), v))
	})
}

// RankContains applies the Contains predicate on the "Rank" field.
func RankContains(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRank), v))
	})
}

// RankHasPrefix applies the HasPrefix predicate on the "Rank" field.
func RankHasPrefix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRank), v))
	})
}

// RankHasSuffix applies the HasSuffix predicate on the "Rank" field.
func RankHasSuffix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRank), v))
	})
}

// RankIsNil applies the IsNil predicate on the "Rank" field.
func RankIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRank)))
	})
}

// RankNotNil applies the NotNil predicate on the "Rank" field.
func RankNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRank)))
	})
}

// RankEqualFold applies the EqualFold predicate on the "Rank" field.
func RankEqualFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRank), v))
	})
}

// RankContainsFold applies the ContainsFold predicate on the "Rank" field.
func RankContainsFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRank), v))
	})
}

// RankTmpEQ applies the EQ predicate on the "RankTmp" field.
func RankTmpEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankTmp), v))
	})
}

// RankTmpNEQ applies the NEQ predicate on the "RankTmp" field.
func RankTmpNEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRankTmp), v))
	})
}

// RankTmpIn applies the In predicate on the "RankTmp" field.
func RankTmpIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRankTmp), v...))
	})
}

// RankTmpNotIn applies the NotIn predicate on the "RankTmp" field.
func RankTmpNotIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRankTmp), v...))
	})
}

// RankTmpGT applies the GT predicate on the "RankTmp" field.
func RankTmpGT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRankTmp), v))
	})
}

// RankTmpGTE applies the GTE predicate on the "RankTmp" field.
func RankTmpGTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRankTmp), v))
	})
}

// RankTmpLT applies the LT predicate on the "RankTmp" field.
func RankTmpLT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRankTmp), v))
	})
}

// RankTmpLTE applies the LTE predicate on the "RankTmp" field.
func RankTmpLTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRankTmp), v))
	})
}

// RankTmpContains applies the Contains predicate on the "RankTmp" field.
func RankTmpContains(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRankTmp), v))
	})
}

// RankTmpHasPrefix applies the HasPrefix predicate on the "RankTmp" field.
func RankTmpHasPrefix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRankTmp), v))
	})
}

// RankTmpHasSuffix applies the HasSuffix predicate on the "RankTmp" field.
func RankTmpHasSuffix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRankTmp), v))
	})
}

// RankTmpIsNil applies the IsNil predicate on the "RankTmp" field.
func RankTmpIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRankTmp)))
	})
}

// RankTmpNotNil applies the NotNil predicate on the "RankTmp" field.
func RankTmpNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRankTmp)))
	})
}

// RankTmpEqualFold applies the EqualFold predicate on the "RankTmp" field.
func RankTmpEqualFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRankTmp), v))
	})
}

// RankTmpContainsFold applies the ContainsFold predicate on the "RankTmp" field.
func RankTmpContainsFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRankTmp), v))
	})
}

// UpdateDateEQ applies the EQ predicate on the "UpdateDate" field.
func UpdateDateEQ(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateNEQ applies the NEQ predicate on the "UpdateDate" field.
func UpdateDateNEQ(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateIn applies the In predicate on the "UpdateDate" field.
func UpdateDateIn(vs ...time.Time) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateDate), v...))
	})
}

// UpdateDateNotIn applies the NotIn predicate on the "UpdateDate" field.
func UpdateDateNotIn(vs ...time.Time) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateDate), v...))
	})
}

// UpdateDateGT applies the GT predicate on the "UpdateDate" field.
func UpdateDateGT(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateGTE applies the GTE predicate on the "UpdateDate" field.
func UpdateDateGTE(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateLT applies the LT predicate on the "UpdateDate" field.
func UpdateDateLT(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateLTE applies the LTE predicate on the "UpdateDate" field.
func UpdateDateLTE(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateIsNil applies the IsNil predicate on the "UpdateDate" field.
func UpdateDateIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateDate)))
	})
}

// UpdateDateNotNil applies the NotNil predicate on the "UpdateDate" field.
func UpdateDateNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateDate)))
	})
}

// ZipCodeEQ applies the EQ predicate on the "ZipCode" field.
func ZipCodeEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZipCode), v))
	})
}

// ZipCodeNEQ applies the NEQ predicate on the "ZipCode" field.
func ZipCodeNEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZipCode), v))
	})
}

// ZipCodeIn applies the In predicate on the "ZipCode" field.
func ZipCodeIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldZipCode), v...))
	})
}

// ZipCodeNotIn applies the NotIn predicate on the "ZipCode" field.
func ZipCodeNotIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldZipCode), v...))
	})
}

// ZipCodeGT applies the GT predicate on the "ZipCode" field.
func ZipCodeGT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldZipCode), v))
	})
}

// ZipCodeGTE applies the GTE predicate on the "ZipCode" field.
func ZipCodeGTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldZipCode), v))
	})
}

// ZipCodeLT applies the LT predicate on the "ZipCode" field.
func ZipCodeLT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldZipCode), v))
	})
}

// ZipCodeLTE applies the LTE predicate on the "ZipCode" field.
func ZipCodeLTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldZipCode), v))
	})
}

// ZipCodeContains applies the Contains predicate on the "ZipCode" field.
func ZipCodeContains(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldZipCode), v))
	})
}

// ZipCodeHasPrefix applies the HasPrefix predicate on the "ZipCode" field.
func ZipCodeHasPrefix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldZipCode), v))
	})
}

// ZipCodeHasSuffix applies the HasSuffix predicate on the "ZipCode" field.
func ZipCodeHasSuffix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldZipCode), v))
	})
}

// ZipCodeIsNil applies the IsNil predicate on the "ZipCode" field.
func ZipCodeIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldZipCode)))
	})
}

// ZipCodeNotNil applies the NotNil predicate on the "ZipCode" field.
func ZipCodeNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldZipCode)))
	})
}

// ZipCodeEqualFold applies the EqualFold predicate on the "ZipCode" field.
func ZipCodeEqualFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldZipCode), v))
	})
}

// ZipCodeContainsFold applies the ContainsFold predicate on the "ZipCode" field.
func ZipCodeContainsFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldZipCode), v))
	})
}

// SubDistrictNameTHEQ applies the EQ predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubDistrictNameTH), v))
	})
}

// SubDistrictNameTHNEQ applies the NEQ predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHNEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubDistrictNameTH), v))
	})
}

// SubDistrictNameTHIn applies the In predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubDistrictNameTH), v...))
	})
}

// SubDistrictNameTHNotIn applies the NotIn predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHNotIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubDistrictNameTH), v...))
	})
}

// SubDistrictNameTHGT applies the GT predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHGT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubDistrictNameTH), v))
	})
}

// SubDistrictNameTHGTE applies the GTE predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHGTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubDistrictNameTH), v))
	})
}

// SubDistrictNameTHLT applies the LT predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHLT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubDistrictNameTH), v))
	})
}

// SubDistrictNameTHLTE applies the LTE predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHLTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubDistrictNameTH), v))
	})
}

// SubDistrictNameTHContains applies the Contains predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHContains(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubDistrictNameTH), v))
	})
}

// SubDistrictNameTHHasPrefix applies the HasPrefix predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHHasPrefix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubDistrictNameTH), v))
	})
}

// SubDistrictNameTHHasSuffix applies the HasSuffix predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHHasSuffix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubDistrictNameTH), v))
	})
}

// SubDistrictNameTHIsNil applies the IsNil predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubDistrictNameTH)))
	})
}

// SubDistrictNameTHNotNil applies the NotNil predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubDistrictNameTH)))
	})
}

// SubDistrictNameTHEqualFold applies the EqualFold predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHEqualFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubDistrictNameTH), v))
	})
}

// SubDistrictNameTHContainsFold applies the ContainsFold predicate on the "SubDistrictNameTH" field.
func SubDistrictNameTHContainsFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubDistrictNameTH), v))
	})
}

// ApproveByEQ applies the EQ predicate on the "ApproveBy" field.
func ApproveByEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApproveBy), v))
	})
}

// ApproveByNEQ applies the NEQ predicate on the "ApproveBy" field.
func ApproveByNEQ(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApproveBy), v))
	})
}

// ApproveByIn applies the In predicate on the "ApproveBy" field.
func ApproveByIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApproveBy), v...))
	})
}

// ApproveByNotIn applies the NotIn predicate on the "ApproveBy" field.
func ApproveByNotIn(vs ...string) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApproveBy), v...))
	})
}

// ApproveByGT applies the GT predicate on the "ApproveBy" field.
func ApproveByGT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApproveBy), v))
	})
}

// ApproveByGTE applies the GTE predicate on the "ApproveBy" field.
func ApproveByGTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApproveBy), v))
	})
}

// ApproveByLT applies the LT predicate on the "ApproveBy" field.
func ApproveByLT(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApproveBy), v))
	})
}

// ApproveByLTE applies the LTE predicate on the "ApproveBy" field.
func ApproveByLTE(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApproveBy), v))
	})
}

// ApproveByContains applies the Contains predicate on the "ApproveBy" field.
func ApproveByContains(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldApproveBy), v))
	})
}

// ApproveByHasPrefix applies the HasPrefix predicate on the "ApproveBy" field.
func ApproveByHasPrefix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldApproveBy), v))
	})
}

// ApproveByHasSuffix applies the HasSuffix predicate on the "ApproveBy" field.
func ApproveByHasSuffix(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldApproveBy), v))
	})
}

// ApproveByIsNil applies the IsNil predicate on the "ApproveBy" field.
func ApproveByIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldApproveBy)))
	})
}

// ApproveByNotNil applies the NotNil predicate on the "ApproveBy" field.
func ApproveByNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldApproveBy)))
	})
}

// ApproveByEqualFold applies the EqualFold predicate on the "ApproveBy" field.
func ApproveByEqualFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldApproveBy), v))
	})
}

// ApproveByContainsFold applies the ContainsFold predicate on the "ApproveBy" field.
func ApproveByContainsFold(v string) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldApproveBy), v))
	})
}

// ApproveDateEQ applies the EQ predicate on the "ApproveDate" field.
func ApproveDateEQ(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApproveDate), v))
	})
}

// ApproveDateNEQ applies the NEQ predicate on the "ApproveDate" field.
func ApproveDateNEQ(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApproveDate), v))
	})
}

// ApproveDateIn applies the In predicate on the "ApproveDate" field.
func ApproveDateIn(vs ...time.Time) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApproveDate), v...))
	})
}

// ApproveDateNotIn applies the NotIn predicate on the "ApproveDate" field.
func ApproveDateNotIn(vs ...time.Time) predicate.Configarea {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configarea(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApproveDate), v...))
	})
}

// ApproveDateGT applies the GT predicate on the "ApproveDate" field.
func ApproveDateGT(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApproveDate), v))
	})
}

// ApproveDateGTE applies the GTE predicate on the "ApproveDate" field.
func ApproveDateGTE(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApproveDate), v))
	})
}

// ApproveDateLT applies the LT predicate on the "ApproveDate" field.
func ApproveDateLT(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApproveDate), v))
	})
}

// ApproveDateLTE applies the LTE predicate on the "ApproveDate" field.
func ApproveDateLTE(v time.Time) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApproveDate), v))
	})
}

// ApproveDateIsNil applies the IsNil predicate on the "ApproveDate" field.
func ApproveDateIsNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldApproveDate)))
	})
}

// ApproveDateNotNil applies the NotNil predicate on the "ApproveDate" field.
func ApproveDateNotNil() predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldApproveDate)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Configarea) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Configarea) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Configarea) predicate.Configarea {
	return predicate.Configarea(func(s *sql.Selector) {
		p(s.Not())
	})
}
