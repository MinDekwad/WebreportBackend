// Code generated by entc, DO NOT EDIT.

package bankdetail

import (
	"go-api-report2/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// BankAccountNo applies equality check predicate on the "Bank_AccountNo" field. It's identical to BankAccountNoEQ.
func BankAccountNo(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountNo), v))
	})
}

// BankName applies equality check predicate on the "Bank_Name" field. It's identical to BankNameEQ.
func BankName(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankName), v))
	})
}

// BankAccountName applies equality check predicate on the "Bank_AccountName" field. It's identical to BankAccountNameEQ.
func BankAccountName(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNoEQ applies the EQ predicate on the "Bank_AccountNo" field.
func BankAccountNoEQ(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountNo), v))
	})
}

// BankAccountNoNEQ applies the NEQ predicate on the "Bank_AccountNo" field.
func BankAccountNoNEQ(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankAccountNo), v))
	})
}

// BankAccountNoIn applies the In predicate on the "Bank_AccountNo" field.
func BankAccountNoIn(vs ...string) predicate.Bankdetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bankdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankAccountNo), v...))
	})
}

// BankAccountNoNotIn applies the NotIn predicate on the "Bank_AccountNo" field.
func BankAccountNoNotIn(vs ...string) predicate.Bankdetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bankdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankAccountNo), v...))
	})
}

// BankAccountNoGT applies the GT predicate on the "Bank_AccountNo" field.
func BankAccountNoGT(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankAccountNo), v))
	})
}

// BankAccountNoGTE applies the GTE predicate on the "Bank_AccountNo" field.
func BankAccountNoGTE(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankAccountNo), v))
	})
}

// BankAccountNoLT applies the LT predicate on the "Bank_AccountNo" field.
func BankAccountNoLT(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankAccountNo), v))
	})
}

// BankAccountNoLTE applies the LTE predicate on the "Bank_AccountNo" field.
func BankAccountNoLTE(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankAccountNo), v))
	})
}

// BankAccountNoContains applies the Contains predicate on the "Bank_AccountNo" field.
func BankAccountNoContains(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankAccountNo), v))
	})
}

// BankAccountNoHasPrefix applies the HasPrefix predicate on the "Bank_AccountNo" field.
func BankAccountNoHasPrefix(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankAccountNo), v))
	})
}

// BankAccountNoHasSuffix applies the HasSuffix predicate on the "Bank_AccountNo" field.
func BankAccountNoHasSuffix(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankAccountNo), v))
	})
}

// BankAccountNoIsNil applies the IsNil predicate on the "Bank_AccountNo" field.
func BankAccountNoIsNil() predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBankAccountNo)))
	})
}

// BankAccountNoNotNil applies the NotNil predicate on the "Bank_AccountNo" field.
func BankAccountNoNotNil() predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBankAccountNo)))
	})
}

// BankAccountNoEqualFold applies the EqualFold predicate on the "Bank_AccountNo" field.
func BankAccountNoEqualFold(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankAccountNo), v))
	})
}

// BankAccountNoContainsFold applies the ContainsFold predicate on the "Bank_AccountNo" field.
func BankAccountNoContainsFold(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankAccountNo), v))
	})
}

// BankNameEQ applies the EQ predicate on the "Bank_Name" field.
func BankNameEQ(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankName), v))
	})
}

// BankNameNEQ applies the NEQ predicate on the "Bank_Name" field.
func BankNameNEQ(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankName), v))
	})
}

// BankNameIn applies the In predicate on the "Bank_Name" field.
func BankNameIn(vs ...string) predicate.Bankdetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bankdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankName), v...))
	})
}

// BankNameNotIn applies the NotIn predicate on the "Bank_Name" field.
func BankNameNotIn(vs ...string) predicate.Bankdetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bankdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankName), v...))
	})
}

// BankNameGT applies the GT predicate on the "Bank_Name" field.
func BankNameGT(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankName), v))
	})
}

// BankNameGTE applies the GTE predicate on the "Bank_Name" field.
func BankNameGTE(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankName), v))
	})
}

// BankNameLT applies the LT predicate on the "Bank_Name" field.
func BankNameLT(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankName), v))
	})
}

// BankNameLTE applies the LTE predicate on the "Bank_Name" field.
func BankNameLTE(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankName), v))
	})
}

// BankNameContains applies the Contains predicate on the "Bank_Name" field.
func BankNameContains(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankName), v))
	})
}

// BankNameHasPrefix applies the HasPrefix predicate on the "Bank_Name" field.
func BankNameHasPrefix(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankName), v))
	})
}

// BankNameHasSuffix applies the HasSuffix predicate on the "Bank_Name" field.
func BankNameHasSuffix(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankName), v))
	})
}

// BankNameIsNil applies the IsNil predicate on the "Bank_Name" field.
func BankNameIsNil() predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBankName)))
	})
}

// BankNameNotNil applies the NotNil predicate on the "Bank_Name" field.
func BankNameNotNil() predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBankName)))
	})
}

// BankNameEqualFold applies the EqualFold predicate on the "Bank_Name" field.
func BankNameEqualFold(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankName), v))
	})
}

// BankNameContainsFold applies the ContainsFold predicate on the "Bank_Name" field.
func BankNameContainsFold(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankName), v))
	})
}

// BankAccountNameEQ applies the EQ predicate on the "Bank_AccountName" field.
func BankAccountNameEQ(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameNEQ applies the NEQ predicate on the "Bank_AccountName" field.
func BankAccountNameNEQ(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameIn applies the In predicate on the "Bank_AccountName" field.
func BankAccountNameIn(vs ...string) predicate.Bankdetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bankdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankAccountName), v...))
	})
}

// BankAccountNameNotIn applies the NotIn predicate on the "Bank_AccountName" field.
func BankAccountNameNotIn(vs ...string) predicate.Bankdetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bankdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankAccountName), v...))
	})
}

// BankAccountNameGT applies the GT predicate on the "Bank_AccountName" field.
func BankAccountNameGT(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameGTE applies the GTE predicate on the "Bank_AccountName" field.
func BankAccountNameGTE(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameLT applies the LT predicate on the "Bank_AccountName" field.
func BankAccountNameLT(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameLTE applies the LTE predicate on the "Bank_AccountName" field.
func BankAccountNameLTE(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameContains applies the Contains predicate on the "Bank_AccountName" field.
func BankAccountNameContains(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameHasPrefix applies the HasPrefix predicate on the "Bank_AccountName" field.
func BankAccountNameHasPrefix(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameHasSuffix applies the HasSuffix predicate on the "Bank_AccountName" field.
func BankAccountNameHasSuffix(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameIsNil applies the IsNil predicate on the "Bank_AccountName" field.
func BankAccountNameIsNil() predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBankAccountName)))
	})
}

// BankAccountNameNotNil applies the NotNil predicate on the "Bank_AccountName" field.
func BankAccountNameNotNil() predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBankAccountName)))
	})
}

// BankAccountNameEqualFold applies the EqualFold predicate on the "Bank_AccountName" field.
func BankAccountNameEqualFold(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameContainsFold applies the ContainsFold predicate on the "Bank_AccountName" field.
func BankAccountNameContainsFold(v string) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankAccountName), v))
	})
}

// HasStatements applies the HasEdge predicate on the "statements" edge.
func HasStatements() predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatementsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatementsTable, StatementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatementsWith applies the HasEdge predicate on the "statements" edge with a given conditions (other predicates).
func HasStatementsWith(preds ...predicate.StatementEndingBalanc) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatementsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatementsTable, StatementsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bankdetail) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bankdetail) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bankdetail) predicate.Bankdetail {
	return predicate.Bankdetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
