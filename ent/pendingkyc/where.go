// Code generated by entc, DO NOT EDIT.

package pendingkyc

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WalletID applies equality check predicate on the "WalletID" field. It's identical to WalletIDEQ.
func WalletID(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletID), v))
	})
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// AgentID applies equality check predicate on the "AgentID" field. It's identical to AgentIDEQ.
func AgentID(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentID), v))
	})
}

// AgentNameLastname applies equality check predicate on the "AgentNameLastname" field. It's identical to AgentNameLastnameEQ.
func AgentNameLastname(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentNameLastname), v))
	})
}

// KYCDate applies equality check predicate on the "KYCDate" field. It's identical to KYCDateEQ.
func KYCDate(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCDate), v))
	})
}

// DateGen applies equality check predicate on the "DateGen" field. It's identical to DateGenEQ.
func DateGen(v time.Time) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateGen), v))
	})
}

// StatusGen applies equality check predicate on the "StatusGen" field. It's identical to StatusGenEQ.
func StatusGen(v bool) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusGen), v))
	})
}

// Point applies equality check predicate on the "Point" field. It's identical to PointEQ.
func Point(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoint), v))
	})
}

// FileimportID applies equality check predicate on the "FileimportID" field. It's identical to FileimportIDEQ.
func FileimportID(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileimportID), v))
	})
}

// WalletIDEQ applies the EQ predicate on the "WalletID" field.
func WalletIDEQ(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletID), v))
	})
}

// WalletIDNEQ applies the NEQ predicate on the "WalletID" field.
func WalletIDNEQ(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletID), v))
	})
}

// WalletIDIn applies the In predicate on the "WalletID" field.
func WalletIDIn(vs ...string) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalletID), v...))
	})
}

// WalletIDNotIn applies the NotIn predicate on the "WalletID" field.
func WalletIDNotIn(vs ...string) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalletID), v...))
	})
}

// WalletIDGT applies the GT predicate on the "WalletID" field.
func WalletIDGT(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletID), v))
	})
}

// WalletIDGTE applies the GTE predicate on the "WalletID" field.
func WalletIDGTE(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletID), v))
	})
}

// WalletIDLT applies the LT predicate on the "WalletID" field.
func WalletIDLT(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletID), v))
	})
}

// WalletIDLTE applies the LTE predicate on the "WalletID" field.
func WalletIDLTE(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletID), v))
	})
}

// WalletIDContains applies the Contains predicate on the "WalletID" field.
func WalletIDContains(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletID), v))
	})
}

// WalletIDHasPrefix applies the HasPrefix predicate on the "WalletID" field.
func WalletIDHasPrefix(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletID), v))
	})
}

// WalletIDHasSuffix applies the HasSuffix predicate on the "WalletID" field.
func WalletIDHasSuffix(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletID), v))
	})
}

// WalletIDIsNil applies the IsNil predicate on the "WalletID" field.
func WalletIDIsNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWalletID)))
	})
}

// WalletIDNotNil applies the NotNil predicate on the "WalletID" field.
func WalletIDNotNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWalletID)))
	})
}

// WalletIDEqualFold applies the EqualFold predicate on the "WalletID" field.
func WalletIDEqualFold(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletID), v))
	})
}

// WalletIDContainsFold applies the ContainsFold predicate on the "WalletID" field.
func WalletIDContainsFold(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletID), v))
	})
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "Name" field.
func NameIsNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "Name" field.
func NameNotNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// AgentIDEQ applies the EQ predicate on the "AgentID" field.
func AgentIDEQ(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentID), v))
	})
}

// AgentIDNEQ applies the NEQ predicate on the "AgentID" field.
func AgentIDNEQ(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgentID), v))
	})
}

// AgentIDIn applies the In predicate on the "AgentID" field.
func AgentIDIn(vs ...string) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgentID), v...))
	})
}

// AgentIDNotIn applies the NotIn predicate on the "AgentID" field.
func AgentIDNotIn(vs ...string) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgentID), v...))
	})
}

// AgentIDGT applies the GT predicate on the "AgentID" field.
func AgentIDGT(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgentID), v))
	})
}

// AgentIDGTE applies the GTE predicate on the "AgentID" field.
func AgentIDGTE(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgentID), v))
	})
}

// AgentIDLT applies the LT predicate on the "AgentID" field.
func AgentIDLT(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgentID), v))
	})
}

// AgentIDLTE applies the LTE predicate on the "AgentID" field.
func AgentIDLTE(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgentID), v))
	})
}

// AgentIDContains applies the Contains predicate on the "AgentID" field.
func AgentIDContains(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAgentID), v))
	})
}

// AgentIDHasPrefix applies the HasPrefix predicate on the "AgentID" field.
func AgentIDHasPrefix(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAgentID), v))
	})
}

// AgentIDHasSuffix applies the HasSuffix predicate on the "AgentID" field.
func AgentIDHasSuffix(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAgentID), v))
	})
}

// AgentIDIsNil applies the IsNil predicate on the "AgentID" field.
func AgentIDIsNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgentID)))
	})
}

// AgentIDNotNil applies the NotNil predicate on the "AgentID" field.
func AgentIDNotNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgentID)))
	})
}

// AgentIDEqualFold applies the EqualFold predicate on the "AgentID" field.
func AgentIDEqualFold(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAgentID), v))
	})
}

// AgentIDContainsFold applies the ContainsFold predicate on the "AgentID" field.
func AgentIDContainsFold(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAgentID), v))
	})
}

// AgentNameLastnameEQ applies the EQ predicate on the "AgentNameLastname" field.
func AgentNameLastnameEQ(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameNEQ applies the NEQ predicate on the "AgentNameLastname" field.
func AgentNameLastnameNEQ(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameIn applies the In predicate on the "AgentNameLastname" field.
func AgentNameLastnameIn(vs ...string) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgentNameLastname), v...))
	})
}

// AgentNameLastnameNotIn applies the NotIn predicate on the "AgentNameLastname" field.
func AgentNameLastnameNotIn(vs ...string) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgentNameLastname), v...))
	})
}

// AgentNameLastnameGT applies the GT predicate on the "AgentNameLastname" field.
func AgentNameLastnameGT(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameGTE applies the GTE predicate on the "AgentNameLastname" field.
func AgentNameLastnameGTE(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameLT applies the LT predicate on the "AgentNameLastname" field.
func AgentNameLastnameLT(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameLTE applies the LTE predicate on the "AgentNameLastname" field.
func AgentNameLastnameLTE(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameContains applies the Contains predicate on the "AgentNameLastname" field.
func AgentNameLastnameContains(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameHasPrefix applies the HasPrefix predicate on the "AgentNameLastname" field.
func AgentNameLastnameHasPrefix(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameHasSuffix applies the HasSuffix predicate on the "AgentNameLastname" field.
func AgentNameLastnameHasSuffix(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameIsNil applies the IsNil predicate on the "AgentNameLastname" field.
func AgentNameLastnameIsNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgentNameLastname)))
	})
}

// AgentNameLastnameNotNil applies the NotNil predicate on the "AgentNameLastname" field.
func AgentNameLastnameNotNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgentNameLastname)))
	})
}

// AgentNameLastnameEqualFold applies the EqualFold predicate on the "AgentNameLastname" field.
func AgentNameLastnameEqualFold(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameContainsFold applies the ContainsFold predicate on the "AgentNameLastname" field.
func AgentNameLastnameContainsFold(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAgentNameLastname), v))
	})
}

// KYCDateEQ applies the EQ predicate on the "KYCDate" field.
func KYCDateEQ(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCDate), v))
	})
}

// KYCDateNEQ applies the NEQ predicate on the "KYCDate" field.
func KYCDateNEQ(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKYCDate), v))
	})
}

// KYCDateIn applies the In predicate on the "KYCDate" field.
func KYCDateIn(vs ...string) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKYCDate), v...))
	})
}

// KYCDateNotIn applies the NotIn predicate on the "KYCDate" field.
func KYCDateNotIn(vs ...string) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKYCDate), v...))
	})
}

// KYCDateGT applies the GT predicate on the "KYCDate" field.
func KYCDateGT(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKYCDate), v))
	})
}

// KYCDateGTE applies the GTE predicate on the "KYCDate" field.
func KYCDateGTE(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKYCDate), v))
	})
}

// KYCDateLT applies the LT predicate on the "KYCDate" field.
func KYCDateLT(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKYCDate), v))
	})
}

// KYCDateLTE applies the LTE predicate on the "KYCDate" field.
func KYCDateLTE(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKYCDate), v))
	})
}

// KYCDateContains applies the Contains predicate on the "KYCDate" field.
func KYCDateContains(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKYCDate), v))
	})
}

// KYCDateHasPrefix applies the HasPrefix predicate on the "KYCDate" field.
func KYCDateHasPrefix(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKYCDate), v))
	})
}

// KYCDateHasSuffix applies the HasSuffix predicate on the "KYCDate" field.
func KYCDateHasSuffix(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKYCDate), v))
	})
}

// KYCDateIsNil applies the IsNil predicate on the "KYCDate" field.
func KYCDateIsNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKYCDate)))
	})
}

// KYCDateNotNil applies the NotNil predicate on the "KYCDate" field.
func KYCDateNotNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKYCDate)))
	})
}

// KYCDateEqualFold applies the EqualFold predicate on the "KYCDate" field.
func KYCDateEqualFold(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKYCDate), v))
	})
}

// KYCDateContainsFold applies the ContainsFold predicate on the "KYCDate" field.
func KYCDateContainsFold(v string) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKYCDate), v))
	})
}

// DateGenEQ applies the EQ predicate on the "DateGen" field.
func DateGenEQ(v time.Time) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateGen), v))
	})
}

// DateGenNEQ applies the NEQ predicate on the "DateGen" field.
func DateGenNEQ(v time.Time) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateGen), v))
	})
}

// DateGenIn applies the In predicate on the "DateGen" field.
func DateGenIn(vs ...time.Time) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateGen), v...))
	})
}

// DateGenNotIn applies the NotIn predicate on the "DateGen" field.
func DateGenNotIn(vs ...time.Time) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateGen), v...))
	})
}

// DateGenGT applies the GT predicate on the "DateGen" field.
func DateGenGT(v time.Time) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateGen), v))
	})
}

// DateGenGTE applies the GTE predicate on the "DateGen" field.
func DateGenGTE(v time.Time) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateGen), v))
	})
}

// DateGenLT applies the LT predicate on the "DateGen" field.
func DateGenLT(v time.Time) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateGen), v))
	})
}

// DateGenLTE applies the LTE predicate on the "DateGen" field.
func DateGenLTE(v time.Time) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateGen), v))
	})
}

// DateGenIsNil applies the IsNil predicate on the "DateGen" field.
func DateGenIsNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateGen)))
	})
}

// DateGenNotNil applies the NotNil predicate on the "DateGen" field.
func DateGenNotNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateGen)))
	})
}

// StatusGenEQ applies the EQ predicate on the "StatusGen" field.
func StatusGenEQ(v bool) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusGen), v))
	})
}

// StatusGenNEQ applies the NEQ predicate on the "StatusGen" field.
func StatusGenNEQ(v bool) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusGen), v))
	})
}

// StatusGenIsNil applies the IsNil predicate on the "StatusGen" field.
func StatusGenIsNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusGen)))
	})
}

// StatusGenNotNil applies the NotNil predicate on the "StatusGen" field.
func StatusGenNotNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusGen)))
	})
}

// PointEQ applies the EQ predicate on the "Point" field.
func PointEQ(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoint), v))
	})
}

// PointNEQ applies the NEQ predicate on the "Point" field.
func PointNEQ(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPoint), v))
	})
}

// PointIn applies the In predicate on the "Point" field.
func PointIn(vs ...int) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPoint), v...))
	})
}

// PointNotIn applies the NotIn predicate on the "Point" field.
func PointNotIn(vs ...int) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPoint), v...))
	})
}

// PointGT applies the GT predicate on the "Point" field.
func PointGT(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPoint), v))
	})
}

// PointGTE applies the GTE predicate on the "Point" field.
func PointGTE(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPoint), v))
	})
}

// PointLT applies the LT predicate on the "Point" field.
func PointLT(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPoint), v))
	})
}

// PointLTE applies the LTE predicate on the "Point" field.
func PointLTE(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPoint), v))
	})
}

// PointIsNil applies the IsNil predicate on the "Point" field.
func PointIsNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPoint)))
	})
}

// PointNotNil applies the NotNil predicate on the "Point" field.
func PointNotNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPoint)))
	})
}

// FileimportIDEQ applies the EQ predicate on the "FileimportID" field.
func FileimportIDEQ(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileimportID), v))
	})
}

// FileimportIDNEQ applies the NEQ predicate on the "FileimportID" field.
func FileimportIDNEQ(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileimportID), v))
	})
}

// FileimportIDIn applies the In predicate on the "FileimportID" field.
func FileimportIDIn(vs ...int) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileimportID), v...))
	})
}

// FileimportIDNotIn applies the NotIn predicate on the "FileimportID" field.
func FileimportIDNotIn(vs ...int) predicate.Pendingkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pendingkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileimportID), v...))
	})
}

// FileimportIDGT applies the GT predicate on the "FileimportID" field.
func FileimportIDGT(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileimportID), v))
	})
}

// FileimportIDGTE applies the GTE predicate on the "FileimportID" field.
func FileimportIDGTE(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileimportID), v))
	})
}

// FileimportIDLT applies the LT predicate on the "FileimportID" field.
func FileimportIDLT(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileimportID), v))
	})
}

// FileimportIDLTE applies the LTE predicate on the "FileimportID" field.
func FileimportIDLTE(v int) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileimportID), v))
	})
}

// FileimportIDIsNil applies the IsNil predicate on the "FileimportID" field.
func FileimportIDIsNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFileimportID)))
	})
}

// FileimportIDNotNil applies the NotNil predicate on the "FileimportID" field.
func FileimportIDNotNil() predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFileimportID)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pendingkyc) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pendingkyc) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pendingkyc) predicate.Pendingkyc {
	return predicate.Pendingkyc(func(s *sql.Selector) {
		p(s.Not())
	})
}
