// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/bankdetail"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Bankdetail is the model entity for the Bankdetail schema.
type Bankdetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BankAccountNo holds the value of the "Bank_AccountNo" field.
	BankAccountNo *string `json:"Bank_AccountNo,omitempty"`
	// BankName holds the value of the "Bank_Name" field.
	BankName *string `json:"Bank_Name,omitempty"`
	// BankAccountName holds the value of the "Bank_AccountName" field.
	BankAccountName *string `json:"Bank_AccountName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BankdetailQuery when eager-loading is set.
	Edges BankdetailEdges `json:"edges"`
}

// BankdetailEdges holds the relations/edges for other nodes in the graph.
type BankdetailEdges struct {
	// Statements holds the value of the statements edge.
	Statements []*StatementEndingBalanc `json:"statements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StatementsOrErr returns the Statements value or an error if the edge
// was not loaded in eager-loading.
func (e BankdetailEdges) StatementsOrErr() ([]*StatementEndingBalanc, error) {
	if e.loadedTypes[0] {
		return e.Statements, nil
	}
	return nil, &NotLoadedError{edge: "statements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bankdetail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bankdetail.FieldID:
			values[i] = &sql.NullInt64{}
		case bankdetail.FieldBankAccountNo, bankdetail.FieldBankName, bankdetail.FieldBankAccountName:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bankdetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bankdetail fields.
func (b *Bankdetail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bankdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bankdetail.FieldBankAccountNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Bank_AccountNo", values[i])
			} else if value.Valid {
				b.BankAccountNo = new(string)
				*b.BankAccountNo = value.String
			}
		case bankdetail.FieldBankName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Bank_Name", values[i])
			} else if value.Valid {
				b.BankName = new(string)
				*b.BankName = value.String
			}
		case bankdetail.FieldBankAccountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Bank_AccountName", values[i])
			} else if value.Valid {
				b.BankAccountName = new(string)
				*b.BankAccountName = value.String
			}
		}
	}
	return nil
}

// QueryStatements queries the "statements" edge of the Bankdetail entity.
func (b *Bankdetail) QueryStatements() *StatementEndingBalancQuery {
	return (&BankdetailClient{config: b.config}).QueryStatements(b)
}

// Update returns a builder for updating this Bankdetail.
// Note that you need to call Bankdetail.Unwrap() before calling this method if this Bankdetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bankdetail) Update() *BankdetailUpdateOne {
	return (&BankdetailClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Bankdetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bankdetail) Unwrap() *Bankdetail {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bankdetail is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bankdetail) String() string {
	var builder strings.Builder
	builder.WriteString("Bankdetail(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	if v := b.BankAccountNo; v != nil {
		builder.WriteString(", Bank_AccountNo=")
		builder.WriteString(*v)
	}
	if v := b.BankName; v != nil {
		builder.WriteString(", Bank_Name=")
		builder.WriteString(*v)
	}
	if v := b.BankAccountName; v != nil {
		builder.WriteString(", Bank_AccountName=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Bankdetails is a parsable slice of Bankdetail.
type Bankdetails []*Bankdetail

func (b Bankdetails) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
