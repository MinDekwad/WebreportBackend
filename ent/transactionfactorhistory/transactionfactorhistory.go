// Code generated by entc, DO NOT EDIT.

package transactionfactorhistory

const (
	// Label holds the string label denoting the transactionfactorhistory type in the database.
	Label = "transactionfactorhistory"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWalletID holds the string denoting the walletid field in the database.
	FieldWalletID = "WalletID"
	// FieldRankTransactionFactor holds the string denoting the ranktransactionfactor field in the database.
	FieldRankTransactionFactor = "RankTransactionFactor"
	// FieldDateCalRank holds the string denoting the datecalrank field in the database.
	FieldDateCalRank = "DateCalRank"

	// EdgeTransactionfactor holds the string denoting the transactionfactor edge name in mutations.
	EdgeTransactionfactor = "Transactionfactor"

	// Table holds the table name of the transactionfactorhistory in the database.
	Table = "transaction_factor_history"
	// TransactionfactorTable is the table the holds the Transactionfactor relation/edge.
	TransactionfactorTable = "transaction_factor_history"
	// TransactionfactorInverseTable is the table name for the Transactionfactor entity.
	// It exists in this package in order to avoid circular dependency with the "transactionfactor" package.
	TransactionfactorInverseTable = "transaction_factor"
	// TransactionfactorColumn is the table column denoting the Transactionfactor relation/edge.
	TransactionfactorColumn = "TransactionFactorID"
)

// Columns holds all SQL columns for transactionfactorhistory fields.
var Columns = []string{
	FieldID,
	FieldWalletID,
	FieldRankTransactionFactor,
	FieldDateCalRank,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Transactionfactorhistory type.
var ForeignKeys = []string{
	"TransactionFactorID",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// WalletIDValidator is a validator for the "WalletID" field. It is called by the builders before save.
	WalletIDValidator func(string) error
)
