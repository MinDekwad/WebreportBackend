// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/reportwallet"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReportWalletUpdate is the builder for updating ReportWallet entities.
type ReportWalletUpdate struct {
	config
	hooks    []Hook
	mutation *ReportWalletMutation
}

// Where adds a new predicate for the ReportWalletUpdate builder.
func (rwu *ReportWalletUpdate) Where(ps ...predicate.ReportWallet) *ReportWalletUpdate {
	rwu.mutation.predicates = append(rwu.mutation.predicates, ps...)
	return rwu
}

// SetWalletid sets the "walletid" field.
func (rwu *ReportWalletUpdate) SetWalletid(s string) *ReportWalletUpdate {
	rwu.mutation.SetWalletid(s)
	return rwu
}

// SetWalletTypeName sets the "WalletTypeName" field.
func (rwu *ReportWalletUpdate) SetWalletTypeName(s string) *ReportWalletUpdate {
	rwu.mutation.SetWalletTypeName(s)
	return rwu
}

// SetNillableWalletTypeName sets the "WalletTypeName" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableWalletTypeName(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetWalletTypeName(*s)
	}
	return rwu
}

// ClearWalletTypeName clears the value of the "WalletTypeName" field.
func (rwu *ReportWalletUpdate) ClearWalletTypeName() *ReportWalletUpdate {
	rwu.mutation.ClearWalletTypeName()
	return rwu
}

// SetWalletPhoneno sets the "WalletPhoneno" field.
func (rwu *ReportWalletUpdate) SetWalletPhoneno(s string) *ReportWalletUpdate {
	rwu.mutation.SetWalletPhoneno(s)
	return rwu
}

// SetNillableWalletPhoneno sets the "WalletPhoneno" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableWalletPhoneno(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetWalletPhoneno(*s)
	}
	return rwu
}

// ClearWalletPhoneno clears the value of the "WalletPhoneno" field.
func (rwu *ReportWalletUpdate) ClearWalletPhoneno() *ReportWalletUpdate {
	rwu.mutation.ClearWalletPhoneno()
	return rwu
}

// SetWalletName sets the "WalletName" field.
func (rwu *ReportWalletUpdate) SetWalletName(s string) *ReportWalletUpdate {
	rwu.mutation.SetWalletName(s)
	return rwu
}

// SetNillableWalletName sets the "WalletName" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableWalletName(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetWalletName(*s)
	}
	return rwu
}

// ClearWalletName clears the value of the "WalletName" field.
func (rwu *ReportWalletUpdate) ClearWalletName() *ReportWalletUpdate {
	rwu.mutation.ClearWalletName()
	return rwu
}

// SetCitizenId sets the "CitizenId" field.
func (rwu *ReportWalletUpdate) SetCitizenId(s string) *ReportWalletUpdate {
	rwu.mutation.SetCitizenId(s)
	return rwu
}

// SetNillableCitizenId sets the "CitizenId" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableCitizenId(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetCitizenId(*s)
	}
	return rwu
}

// ClearCitizenId clears the value of the "CitizenId" field.
func (rwu *ReportWalletUpdate) ClearCitizenId() *ReportWalletUpdate {
	rwu.mutation.ClearCitizenId()
	return rwu
}

// SetStatus sets the "Status" field.
func (rwu *ReportWalletUpdate) SetStatus(s string) *ReportWalletUpdate {
	rwu.mutation.SetStatus(s)
	return rwu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableStatus(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetStatus(*s)
	}
	return rwu
}

// ClearStatus clears the value of the "Status" field.
func (rwu *ReportWalletUpdate) ClearStatus() *ReportWalletUpdate {
	rwu.mutation.ClearStatus()
	return rwu
}

// SetDateTime sets the "dateTime" field.
func (rwu *ReportWalletUpdate) SetDateTime(t time.Time) *ReportWalletUpdate {
	rwu.mutation.SetDateTime(t)
	return rwu
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableDateTime(t *time.Time) *ReportWalletUpdate {
	if t != nil {
		rwu.SetDateTime(*t)
	}
	return rwu
}

// ClearDateTime clears the value of the "dateTime" field.
func (rwu *ReportWalletUpdate) ClearDateTime() *ReportWalletUpdate {
	rwu.mutation.ClearDateTime()
	return rwu
}

// SetBalance sets the "Balance" field.
func (rwu *ReportWalletUpdate) SetBalance(f float64) *ReportWalletUpdate {
	rwu.mutation.ResetBalance()
	rwu.mutation.SetBalance(f)
	return rwu
}

// SetNillableBalance sets the "Balance" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableBalance(f *float64) *ReportWalletUpdate {
	if f != nil {
		rwu.SetBalance(*f)
	}
	return rwu
}

// AddBalance adds f to the "Balance" field.
func (rwu *ReportWalletUpdate) AddBalance(f float64) *ReportWalletUpdate {
	rwu.mutation.AddBalance(f)
	return rwu
}

// ClearBalance clears the value of the "Balance" field.
func (rwu *ReportWalletUpdate) ClearBalance() *ReportWalletUpdate {
	rwu.mutation.ClearBalance()
	return rwu
}

// SetEmail sets the "Email" field.
func (rwu *ReportWalletUpdate) SetEmail(s string) *ReportWalletUpdate {
	rwu.mutation.SetEmail(s)
	return rwu
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableEmail(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetEmail(*s)
	}
	return rwu
}

// ClearEmail clears the value of the "Email" field.
func (rwu *ReportWalletUpdate) ClearEmail() *ReportWalletUpdate {
	rwu.mutation.ClearEmail()
	return rwu
}

// SetIsForgetPin sets the "IsForgetPin" field.
func (rwu *ReportWalletUpdate) SetIsForgetPin(s string) *ReportWalletUpdate {
	rwu.mutation.SetIsForgetPin(s)
	return rwu
}

// SetNillableIsForgetPin sets the "IsForgetPin" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableIsForgetPin(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetIsForgetPin(*s)
	}
	return rwu
}

// ClearIsForgetPin clears the value of the "IsForgetPin" field.
func (rwu *ReportWalletUpdate) ClearIsForgetPin() *ReportWalletUpdate {
	rwu.mutation.ClearIsForgetPin()
	return rwu
}

// SetATMCard sets the "ATMCard" field.
func (rwu *ReportWalletUpdate) SetATMCard(s string) *ReportWalletUpdate {
	rwu.mutation.SetATMCard(s)
	return rwu
}

// SetNillableATMCard sets the "ATMCard" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableATMCard(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetATMCard(*s)
	}
	return rwu
}

// ClearATMCard clears the value of the "ATMCard" field.
func (rwu *ReportWalletUpdate) ClearATMCard() *ReportWalletUpdate {
	rwu.mutation.ClearATMCard()
	return rwu
}

// SetAccountNo sets the "AccountNo" field.
func (rwu *ReportWalletUpdate) SetAccountNo(s string) *ReportWalletUpdate {
	rwu.mutation.SetAccountNo(s)
	return rwu
}

// SetNillableAccountNo sets the "AccountNo" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableAccountNo(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetAccountNo(*s)
	}
	return rwu
}

// ClearAccountNo clears the value of the "AccountNo" field.
func (rwu *ReportWalletUpdate) ClearAccountNo() *ReportWalletUpdate {
	rwu.mutation.ClearAccountNo()
	return rwu
}

// SetAddressDetail sets the "AddressDetail" field.
func (rwu *ReportWalletUpdate) SetAddressDetail(s string) *ReportWalletUpdate {
	rwu.mutation.SetAddressDetail(s)
	return rwu
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableAddressDetail(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetAddressDetail(*s)
	}
	return rwu
}

// ClearAddressDetail clears the value of the "AddressDetail" field.
func (rwu *ReportWalletUpdate) ClearAddressDetail() *ReportWalletUpdate {
	rwu.mutation.ClearAddressDetail()
	return rwu
}

// SetStreet sets the "Street" field.
func (rwu *ReportWalletUpdate) SetStreet(s string) *ReportWalletUpdate {
	rwu.mutation.SetStreet(s)
	return rwu
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableStreet(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetStreet(*s)
	}
	return rwu
}

// ClearStreet clears the value of the "Street" field.
func (rwu *ReportWalletUpdate) ClearStreet() *ReportWalletUpdate {
	rwu.mutation.ClearStreet()
	return rwu
}

// SetDistrict sets the "District" field.
func (rwu *ReportWalletUpdate) SetDistrict(s string) *ReportWalletUpdate {
	rwu.mutation.SetDistrict(s)
	return rwu
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableDistrict(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetDistrict(*s)
	}
	return rwu
}

// ClearDistrict clears the value of the "District" field.
func (rwu *ReportWalletUpdate) ClearDistrict() *ReportWalletUpdate {
	rwu.mutation.ClearDistrict()
	return rwu
}

// SetSubDistrict sets the "SubDistrict" field.
func (rwu *ReportWalletUpdate) SetSubDistrict(s string) *ReportWalletUpdate {
	rwu.mutation.SetSubDistrict(s)
	return rwu
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableSubDistrict(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetSubDistrict(*s)
	}
	return rwu
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (rwu *ReportWalletUpdate) ClearSubDistrict() *ReportWalletUpdate {
	rwu.mutation.ClearSubDistrict()
	return rwu
}

// SetProvince sets the "Province" field.
func (rwu *ReportWalletUpdate) SetProvince(s string) *ReportWalletUpdate {
	rwu.mutation.SetProvince(s)
	return rwu
}

// SetNillableProvince sets the "Province" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableProvince(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetProvince(*s)
	}
	return rwu
}

// ClearProvince clears the value of the "Province" field.
func (rwu *ReportWalletUpdate) ClearProvince() *ReportWalletUpdate {
	rwu.mutation.ClearProvince()
	return rwu
}

// SetPostalCode sets the "PostalCode" field.
func (rwu *ReportWalletUpdate) SetPostalCode(s string) *ReportWalletUpdate {
	rwu.mutation.SetPostalCode(s)
	return rwu
}

// SetNillablePostalCode sets the "PostalCode" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillablePostalCode(s *string) *ReportWalletUpdate {
	if s != nil {
		rwu.SetPostalCode(*s)
	}
	return rwu
}

// ClearPostalCode clears the value of the "PostalCode" field.
func (rwu *ReportWalletUpdate) ClearPostalCode() *ReportWalletUpdate {
	rwu.mutation.ClearPostalCode()
	return rwu
}

// SetRegisterDateTime sets the "RegisterDateTime" field.
func (rwu *ReportWalletUpdate) SetRegisterDateTime(t time.Time) *ReportWalletUpdate {
	rwu.mutation.SetRegisterDateTime(t)
	return rwu
}

// SetNillableRegisterDateTime sets the "RegisterDateTime" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableRegisterDateTime(t *time.Time) *ReportWalletUpdate {
	if t != nil {
		rwu.SetRegisterDateTime(*t)
	}
	return rwu
}

// ClearRegisterDateTime clears the value of the "RegisterDateTime" field.
func (rwu *ReportWalletUpdate) ClearRegisterDateTime() *ReportWalletUpdate {
	rwu.mutation.ClearRegisterDateTime()
	return rwu
}

// SetFileimportID sets the "FileimportID" field.
func (rwu *ReportWalletUpdate) SetFileimportID(i int) *ReportWalletUpdate {
	rwu.mutation.ResetFileimportID()
	rwu.mutation.SetFileimportID(i)
	return rwu
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (rwu *ReportWalletUpdate) SetNillableFileimportID(i *int) *ReportWalletUpdate {
	if i != nil {
		rwu.SetFileimportID(*i)
	}
	return rwu
}

// AddFileimportID adds i to the "FileimportID" field.
func (rwu *ReportWalletUpdate) AddFileimportID(i int) *ReportWalletUpdate {
	rwu.mutation.AddFileimportID(i)
	return rwu
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (rwu *ReportWalletUpdate) ClearFileimportID() *ReportWalletUpdate {
	rwu.mutation.ClearFileimportID()
	return rwu
}

// Mutation returns the ReportWalletMutation object of the builder.
func (rwu *ReportWalletUpdate) Mutation() *ReportWalletMutation {
	return rwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rwu *ReportWalletUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rwu.hooks) == 0 {
		if err = rwu.check(); err != nil {
			return 0, err
		}
		affected, err = rwu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rwu.check(); err != nil {
				return 0, err
			}
			rwu.mutation = mutation
			affected, err = rwu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rwu.hooks) - 1; i >= 0; i-- {
			mut = rwu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rwu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rwu *ReportWalletUpdate) SaveX(ctx context.Context) int {
	affected, err := rwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rwu *ReportWalletUpdate) Exec(ctx context.Context) error {
	_, err := rwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwu *ReportWalletUpdate) ExecX(ctx context.Context) {
	if err := rwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rwu *ReportWalletUpdate) check() error {
	if v, ok := rwu.mutation.Walletid(); ok {
		if err := reportwallet.WalletidValidator(v); err != nil {
			return &ValidationError{Name: "walletid", err: fmt.Errorf("ent: validator failed for field \"walletid\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.WalletTypeName(); ok {
		if err := reportwallet.WalletTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletTypeName", err: fmt.Errorf("ent: validator failed for field \"WalletTypeName\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.WalletPhoneno(); ok {
		if err := reportwallet.WalletPhonenoValidator(v); err != nil {
			return &ValidationError{Name: "WalletPhoneno", err: fmt.Errorf("ent: validator failed for field \"WalletPhoneno\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.WalletName(); ok {
		if err := reportwallet.WalletNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletName", err: fmt.Errorf("ent: validator failed for field \"WalletName\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.CitizenId(); ok {
		if err := reportwallet.CitizenIdValidator(v); err != nil {
			return &ValidationError{Name: "CitizenId", err: fmt.Errorf("ent: validator failed for field \"CitizenId\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.Status(); ok {
		if err := reportwallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.Email(); ok {
		if err := reportwallet.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf("ent: validator failed for field \"Email\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.IsForgetPin(); ok {
		if err := reportwallet.IsForgetPinValidator(v); err != nil {
			return &ValidationError{Name: "IsForgetPin", err: fmt.Errorf("ent: validator failed for field \"IsForgetPin\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.ATMCard(); ok {
		if err := reportwallet.ATMCardValidator(v); err != nil {
			return &ValidationError{Name: "ATMCard", err: fmt.Errorf("ent: validator failed for field \"ATMCard\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.AccountNo(); ok {
		if err := reportwallet.AccountNoValidator(v); err != nil {
			return &ValidationError{Name: "AccountNo", err: fmt.Errorf("ent: validator failed for field \"AccountNo\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.Street(); ok {
		if err := reportwallet.StreetValidator(v); err != nil {
			return &ValidationError{Name: "Street", err: fmt.Errorf("ent: validator failed for field \"Street\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.District(); ok {
		if err := reportwallet.DistrictValidator(v); err != nil {
			return &ValidationError{Name: "District", err: fmt.Errorf("ent: validator failed for field \"District\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.SubDistrict(); ok {
		if err := reportwallet.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf("ent: validator failed for field \"SubDistrict\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.Province(); ok {
		if err := reportwallet.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "Province", err: fmt.Errorf("ent: validator failed for field \"Province\": %w", err)}
		}
	}
	if v, ok := rwu.mutation.PostalCode(); ok {
		if err := reportwallet.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "PostalCode", err: fmt.Errorf("ent: validator failed for field \"PostalCode\": %w", err)}
		}
	}
	return nil
}

func (rwu *ReportWalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reportwallet.Table,
			Columns: reportwallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reportwallet.FieldID,
			},
		},
	}
	if ps := rwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rwu.mutation.Walletid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletid,
		})
	}
	if value, ok := rwu.mutation.WalletTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletTypeName,
		})
	}
	if rwu.mutation.WalletTypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldWalletTypeName,
		})
	}
	if value, ok := rwu.mutation.WalletPhoneno(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletPhoneno,
		})
	}
	if rwu.mutation.WalletPhonenoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldWalletPhoneno,
		})
	}
	if value, ok := rwu.mutation.WalletName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletName,
		})
	}
	if rwu.mutation.WalletNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldWalletName,
		})
	}
	if value, ok := rwu.mutation.CitizenId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldCitizenId,
		})
	}
	if rwu.mutation.CitizenIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldCitizenId,
		})
	}
	if value, ok := rwu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldStatus,
		})
	}
	if rwu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldStatus,
		})
	}
	if value, ok := rwu.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallet.FieldDateTime,
		})
	}
	if rwu.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reportwallet.FieldDateTime,
		})
	}
	if value, ok := rwu.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reportwallet.FieldBalance,
		})
	}
	if value, ok := rwu.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reportwallet.FieldBalance,
		})
	}
	if rwu.mutation.BalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: reportwallet.FieldBalance,
		})
	}
	if value, ok := rwu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldEmail,
		})
	}
	if rwu.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldEmail,
		})
	}
	if value, ok := rwu.mutation.IsForgetPin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldIsForgetPin,
		})
	}
	if rwu.mutation.IsForgetPinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldIsForgetPin,
		})
	}
	if value, ok := rwu.mutation.ATMCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldATMCard,
		})
	}
	if rwu.mutation.ATMCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldATMCard,
		})
	}
	if value, ok := rwu.mutation.AccountNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldAccountNo,
		})
	}
	if rwu.mutation.AccountNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldAccountNo,
		})
	}
	if value, ok := rwu.mutation.AddressDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldAddressDetail,
		})
	}
	if rwu.mutation.AddressDetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldAddressDetail,
		})
	}
	if value, ok := rwu.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldStreet,
		})
	}
	if rwu.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldStreet,
		})
	}
	if value, ok := rwu.mutation.District(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldDistrict,
		})
	}
	if rwu.mutation.DistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldDistrict,
		})
	}
	if value, ok := rwu.mutation.SubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldSubDistrict,
		})
	}
	if rwu.mutation.SubDistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldSubDistrict,
		})
	}
	if value, ok := rwu.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldProvince,
		})
	}
	if rwu.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldProvince,
		})
	}
	if value, ok := rwu.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldPostalCode,
		})
	}
	if rwu.mutation.PostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldPostalCode,
		})
	}
	if value, ok := rwu.mutation.RegisterDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallet.FieldRegisterDateTime,
		})
	}
	if rwu.mutation.RegisterDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reportwallet.FieldRegisterDateTime,
		})
	}
	if value, ok := rwu.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reportwallet.FieldFileimportID,
		})
	}
	if value, ok := rwu.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reportwallet.FieldFileimportID,
		})
	}
	if rwu.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: reportwallet.FieldFileimportID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportwallet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ReportWalletUpdateOne is the builder for updating a single ReportWallet entity.
type ReportWalletUpdateOne struct {
	config
	hooks    []Hook
	mutation *ReportWalletMutation
}

// SetWalletid sets the "walletid" field.
func (rwuo *ReportWalletUpdateOne) SetWalletid(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetWalletid(s)
	return rwuo
}

// SetWalletTypeName sets the "WalletTypeName" field.
func (rwuo *ReportWalletUpdateOne) SetWalletTypeName(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetWalletTypeName(s)
	return rwuo
}

// SetNillableWalletTypeName sets the "WalletTypeName" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableWalletTypeName(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetWalletTypeName(*s)
	}
	return rwuo
}

// ClearWalletTypeName clears the value of the "WalletTypeName" field.
func (rwuo *ReportWalletUpdateOne) ClearWalletTypeName() *ReportWalletUpdateOne {
	rwuo.mutation.ClearWalletTypeName()
	return rwuo
}

// SetWalletPhoneno sets the "WalletPhoneno" field.
func (rwuo *ReportWalletUpdateOne) SetWalletPhoneno(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetWalletPhoneno(s)
	return rwuo
}

// SetNillableWalletPhoneno sets the "WalletPhoneno" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableWalletPhoneno(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetWalletPhoneno(*s)
	}
	return rwuo
}

// ClearWalletPhoneno clears the value of the "WalletPhoneno" field.
func (rwuo *ReportWalletUpdateOne) ClearWalletPhoneno() *ReportWalletUpdateOne {
	rwuo.mutation.ClearWalletPhoneno()
	return rwuo
}

// SetWalletName sets the "WalletName" field.
func (rwuo *ReportWalletUpdateOne) SetWalletName(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetWalletName(s)
	return rwuo
}

// SetNillableWalletName sets the "WalletName" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableWalletName(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetWalletName(*s)
	}
	return rwuo
}

// ClearWalletName clears the value of the "WalletName" field.
func (rwuo *ReportWalletUpdateOne) ClearWalletName() *ReportWalletUpdateOne {
	rwuo.mutation.ClearWalletName()
	return rwuo
}

// SetCitizenId sets the "CitizenId" field.
func (rwuo *ReportWalletUpdateOne) SetCitizenId(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetCitizenId(s)
	return rwuo
}

// SetNillableCitizenId sets the "CitizenId" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableCitizenId(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetCitizenId(*s)
	}
	return rwuo
}

// ClearCitizenId clears the value of the "CitizenId" field.
func (rwuo *ReportWalletUpdateOne) ClearCitizenId() *ReportWalletUpdateOne {
	rwuo.mutation.ClearCitizenId()
	return rwuo
}

// SetStatus sets the "Status" field.
func (rwuo *ReportWalletUpdateOne) SetStatus(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetStatus(s)
	return rwuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableStatus(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetStatus(*s)
	}
	return rwuo
}

// ClearStatus clears the value of the "Status" field.
func (rwuo *ReportWalletUpdateOne) ClearStatus() *ReportWalletUpdateOne {
	rwuo.mutation.ClearStatus()
	return rwuo
}

// SetDateTime sets the "dateTime" field.
func (rwuo *ReportWalletUpdateOne) SetDateTime(t time.Time) *ReportWalletUpdateOne {
	rwuo.mutation.SetDateTime(t)
	return rwuo
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableDateTime(t *time.Time) *ReportWalletUpdateOne {
	if t != nil {
		rwuo.SetDateTime(*t)
	}
	return rwuo
}

// ClearDateTime clears the value of the "dateTime" field.
func (rwuo *ReportWalletUpdateOne) ClearDateTime() *ReportWalletUpdateOne {
	rwuo.mutation.ClearDateTime()
	return rwuo
}

// SetBalance sets the "Balance" field.
func (rwuo *ReportWalletUpdateOne) SetBalance(f float64) *ReportWalletUpdateOne {
	rwuo.mutation.ResetBalance()
	rwuo.mutation.SetBalance(f)
	return rwuo
}

// SetNillableBalance sets the "Balance" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableBalance(f *float64) *ReportWalletUpdateOne {
	if f != nil {
		rwuo.SetBalance(*f)
	}
	return rwuo
}

// AddBalance adds f to the "Balance" field.
func (rwuo *ReportWalletUpdateOne) AddBalance(f float64) *ReportWalletUpdateOne {
	rwuo.mutation.AddBalance(f)
	return rwuo
}

// ClearBalance clears the value of the "Balance" field.
func (rwuo *ReportWalletUpdateOne) ClearBalance() *ReportWalletUpdateOne {
	rwuo.mutation.ClearBalance()
	return rwuo
}

// SetEmail sets the "Email" field.
func (rwuo *ReportWalletUpdateOne) SetEmail(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetEmail(s)
	return rwuo
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableEmail(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetEmail(*s)
	}
	return rwuo
}

// ClearEmail clears the value of the "Email" field.
func (rwuo *ReportWalletUpdateOne) ClearEmail() *ReportWalletUpdateOne {
	rwuo.mutation.ClearEmail()
	return rwuo
}

// SetIsForgetPin sets the "IsForgetPin" field.
func (rwuo *ReportWalletUpdateOne) SetIsForgetPin(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetIsForgetPin(s)
	return rwuo
}

// SetNillableIsForgetPin sets the "IsForgetPin" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableIsForgetPin(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetIsForgetPin(*s)
	}
	return rwuo
}

// ClearIsForgetPin clears the value of the "IsForgetPin" field.
func (rwuo *ReportWalletUpdateOne) ClearIsForgetPin() *ReportWalletUpdateOne {
	rwuo.mutation.ClearIsForgetPin()
	return rwuo
}

// SetATMCard sets the "ATMCard" field.
func (rwuo *ReportWalletUpdateOne) SetATMCard(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetATMCard(s)
	return rwuo
}

// SetNillableATMCard sets the "ATMCard" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableATMCard(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetATMCard(*s)
	}
	return rwuo
}

// ClearATMCard clears the value of the "ATMCard" field.
func (rwuo *ReportWalletUpdateOne) ClearATMCard() *ReportWalletUpdateOne {
	rwuo.mutation.ClearATMCard()
	return rwuo
}

// SetAccountNo sets the "AccountNo" field.
func (rwuo *ReportWalletUpdateOne) SetAccountNo(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetAccountNo(s)
	return rwuo
}

// SetNillableAccountNo sets the "AccountNo" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableAccountNo(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetAccountNo(*s)
	}
	return rwuo
}

// ClearAccountNo clears the value of the "AccountNo" field.
func (rwuo *ReportWalletUpdateOne) ClearAccountNo() *ReportWalletUpdateOne {
	rwuo.mutation.ClearAccountNo()
	return rwuo
}

// SetAddressDetail sets the "AddressDetail" field.
func (rwuo *ReportWalletUpdateOne) SetAddressDetail(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetAddressDetail(s)
	return rwuo
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableAddressDetail(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetAddressDetail(*s)
	}
	return rwuo
}

// ClearAddressDetail clears the value of the "AddressDetail" field.
func (rwuo *ReportWalletUpdateOne) ClearAddressDetail() *ReportWalletUpdateOne {
	rwuo.mutation.ClearAddressDetail()
	return rwuo
}

// SetStreet sets the "Street" field.
func (rwuo *ReportWalletUpdateOne) SetStreet(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetStreet(s)
	return rwuo
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableStreet(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetStreet(*s)
	}
	return rwuo
}

// ClearStreet clears the value of the "Street" field.
func (rwuo *ReportWalletUpdateOne) ClearStreet() *ReportWalletUpdateOne {
	rwuo.mutation.ClearStreet()
	return rwuo
}

// SetDistrict sets the "District" field.
func (rwuo *ReportWalletUpdateOne) SetDistrict(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetDistrict(s)
	return rwuo
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableDistrict(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetDistrict(*s)
	}
	return rwuo
}

// ClearDistrict clears the value of the "District" field.
func (rwuo *ReportWalletUpdateOne) ClearDistrict() *ReportWalletUpdateOne {
	rwuo.mutation.ClearDistrict()
	return rwuo
}

// SetSubDistrict sets the "SubDistrict" field.
func (rwuo *ReportWalletUpdateOne) SetSubDistrict(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetSubDistrict(s)
	return rwuo
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableSubDistrict(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetSubDistrict(*s)
	}
	return rwuo
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (rwuo *ReportWalletUpdateOne) ClearSubDistrict() *ReportWalletUpdateOne {
	rwuo.mutation.ClearSubDistrict()
	return rwuo
}

// SetProvince sets the "Province" field.
func (rwuo *ReportWalletUpdateOne) SetProvince(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetProvince(s)
	return rwuo
}

// SetNillableProvince sets the "Province" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableProvince(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetProvince(*s)
	}
	return rwuo
}

// ClearProvince clears the value of the "Province" field.
func (rwuo *ReportWalletUpdateOne) ClearProvince() *ReportWalletUpdateOne {
	rwuo.mutation.ClearProvince()
	return rwuo
}

// SetPostalCode sets the "PostalCode" field.
func (rwuo *ReportWalletUpdateOne) SetPostalCode(s string) *ReportWalletUpdateOne {
	rwuo.mutation.SetPostalCode(s)
	return rwuo
}

// SetNillablePostalCode sets the "PostalCode" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillablePostalCode(s *string) *ReportWalletUpdateOne {
	if s != nil {
		rwuo.SetPostalCode(*s)
	}
	return rwuo
}

// ClearPostalCode clears the value of the "PostalCode" field.
func (rwuo *ReportWalletUpdateOne) ClearPostalCode() *ReportWalletUpdateOne {
	rwuo.mutation.ClearPostalCode()
	return rwuo
}

// SetRegisterDateTime sets the "RegisterDateTime" field.
func (rwuo *ReportWalletUpdateOne) SetRegisterDateTime(t time.Time) *ReportWalletUpdateOne {
	rwuo.mutation.SetRegisterDateTime(t)
	return rwuo
}

// SetNillableRegisterDateTime sets the "RegisterDateTime" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableRegisterDateTime(t *time.Time) *ReportWalletUpdateOne {
	if t != nil {
		rwuo.SetRegisterDateTime(*t)
	}
	return rwuo
}

// ClearRegisterDateTime clears the value of the "RegisterDateTime" field.
func (rwuo *ReportWalletUpdateOne) ClearRegisterDateTime() *ReportWalletUpdateOne {
	rwuo.mutation.ClearRegisterDateTime()
	return rwuo
}

// SetFileimportID sets the "FileimportID" field.
func (rwuo *ReportWalletUpdateOne) SetFileimportID(i int) *ReportWalletUpdateOne {
	rwuo.mutation.ResetFileimportID()
	rwuo.mutation.SetFileimportID(i)
	return rwuo
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (rwuo *ReportWalletUpdateOne) SetNillableFileimportID(i *int) *ReportWalletUpdateOne {
	if i != nil {
		rwuo.SetFileimportID(*i)
	}
	return rwuo
}

// AddFileimportID adds i to the "FileimportID" field.
func (rwuo *ReportWalletUpdateOne) AddFileimportID(i int) *ReportWalletUpdateOne {
	rwuo.mutation.AddFileimportID(i)
	return rwuo
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (rwuo *ReportWalletUpdateOne) ClearFileimportID() *ReportWalletUpdateOne {
	rwuo.mutation.ClearFileimportID()
	return rwuo
}

// Mutation returns the ReportWalletMutation object of the builder.
func (rwuo *ReportWalletUpdateOne) Mutation() *ReportWalletMutation {
	return rwuo.mutation
}

// Save executes the query and returns the updated ReportWallet entity.
func (rwuo *ReportWalletUpdateOne) Save(ctx context.Context) (*ReportWallet, error) {
	var (
		err  error
		node *ReportWallet
	)
	if len(rwuo.hooks) == 0 {
		if err = rwuo.check(); err != nil {
			return nil, err
		}
		node, err = rwuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rwuo.check(); err != nil {
				return nil, err
			}
			rwuo.mutation = mutation
			node, err = rwuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rwuo.hooks) - 1; i >= 0; i-- {
			mut = rwuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rwuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rwuo *ReportWalletUpdateOne) SaveX(ctx context.Context) *ReportWallet {
	node, err := rwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rwuo *ReportWalletUpdateOne) Exec(ctx context.Context) error {
	_, err := rwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwuo *ReportWalletUpdateOne) ExecX(ctx context.Context) {
	if err := rwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rwuo *ReportWalletUpdateOne) check() error {
	if v, ok := rwuo.mutation.Walletid(); ok {
		if err := reportwallet.WalletidValidator(v); err != nil {
			return &ValidationError{Name: "walletid", err: fmt.Errorf("ent: validator failed for field \"walletid\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.WalletTypeName(); ok {
		if err := reportwallet.WalletTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletTypeName", err: fmt.Errorf("ent: validator failed for field \"WalletTypeName\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.WalletPhoneno(); ok {
		if err := reportwallet.WalletPhonenoValidator(v); err != nil {
			return &ValidationError{Name: "WalletPhoneno", err: fmt.Errorf("ent: validator failed for field \"WalletPhoneno\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.WalletName(); ok {
		if err := reportwallet.WalletNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletName", err: fmt.Errorf("ent: validator failed for field \"WalletName\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.CitizenId(); ok {
		if err := reportwallet.CitizenIdValidator(v); err != nil {
			return &ValidationError{Name: "CitizenId", err: fmt.Errorf("ent: validator failed for field \"CitizenId\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.Status(); ok {
		if err := reportwallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.Email(); ok {
		if err := reportwallet.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf("ent: validator failed for field \"Email\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.IsForgetPin(); ok {
		if err := reportwallet.IsForgetPinValidator(v); err != nil {
			return &ValidationError{Name: "IsForgetPin", err: fmt.Errorf("ent: validator failed for field \"IsForgetPin\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.ATMCard(); ok {
		if err := reportwallet.ATMCardValidator(v); err != nil {
			return &ValidationError{Name: "ATMCard", err: fmt.Errorf("ent: validator failed for field \"ATMCard\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.AccountNo(); ok {
		if err := reportwallet.AccountNoValidator(v); err != nil {
			return &ValidationError{Name: "AccountNo", err: fmt.Errorf("ent: validator failed for field \"AccountNo\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.Street(); ok {
		if err := reportwallet.StreetValidator(v); err != nil {
			return &ValidationError{Name: "Street", err: fmt.Errorf("ent: validator failed for field \"Street\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.District(); ok {
		if err := reportwallet.DistrictValidator(v); err != nil {
			return &ValidationError{Name: "District", err: fmt.Errorf("ent: validator failed for field \"District\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.SubDistrict(); ok {
		if err := reportwallet.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf("ent: validator failed for field \"SubDistrict\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.Province(); ok {
		if err := reportwallet.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "Province", err: fmt.Errorf("ent: validator failed for field \"Province\": %w", err)}
		}
	}
	if v, ok := rwuo.mutation.PostalCode(); ok {
		if err := reportwallet.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "PostalCode", err: fmt.Errorf("ent: validator failed for field \"PostalCode\": %w", err)}
		}
	}
	return nil
}

func (rwuo *ReportWalletUpdateOne) sqlSave(ctx context.Context) (_node *ReportWallet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reportwallet.Table,
			Columns: reportwallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reportwallet.FieldID,
			},
		},
	}
	id, ok := rwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReportWallet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := rwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rwuo.mutation.Walletid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletid,
		})
	}
	if value, ok := rwuo.mutation.WalletTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletTypeName,
		})
	}
	if rwuo.mutation.WalletTypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldWalletTypeName,
		})
	}
	if value, ok := rwuo.mutation.WalletPhoneno(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletPhoneno,
		})
	}
	if rwuo.mutation.WalletPhonenoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldWalletPhoneno,
		})
	}
	if value, ok := rwuo.mutation.WalletName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletName,
		})
	}
	if rwuo.mutation.WalletNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldWalletName,
		})
	}
	if value, ok := rwuo.mutation.CitizenId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldCitizenId,
		})
	}
	if rwuo.mutation.CitizenIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldCitizenId,
		})
	}
	if value, ok := rwuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldStatus,
		})
	}
	if rwuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldStatus,
		})
	}
	if value, ok := rwuo.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallet.FieldDateTime,
		})
	}
	if rwuo.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reportwallet.FieldDateTime,
		})
	}
	if value, ok := rwuo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reportwallet.FieldBalance,
		})
	}
	if value, ok := rwuo.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reportwallet.FieldBalance,
		})
	}
	if rwuo.mutation.BalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: reportwallet.FieldBalance,
		})
	}
	if value, ok := rwuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldEmail,
		})
	}
	if rwuo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldEmail,
		})
	}
	if value, ok := rwuo.mutation.IsForgetPin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldIsForgetPin,
		})
	}
	if rwuo.mutation.IsForgetPinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldIsForgetPin,
		})
	}
	if value, ok := rwuo.mutation.ATMCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldATMCard,
		})
	}
	if rwuo.mutation.ATMCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldATMCard,
		})
	}
	if value, ok := rwuo.mutation.AccountNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldAccountNo,
		})
	}
	if rwuo.mutation.AccountNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldAccountNo,
		})
	}
	if value, ok := rwuo.mutation.AddressDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldAddressDetail,
		})
	}
	if rwuo.mutation.AddressDetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldAddressDetail,
		})
	}
	if value, ok := rwuo.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldStreet,
		})
	}
	if rwuo.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldStreet,
		})
	}
	if value, ok := rwuo.mutation.District(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldDistrict,
		})
	}
	if rwuo.mutation.DistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldDistrict,
		})
	}
	if value, ok := rwuo.mutation.SubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldSubDistrict,
		})
	}
	if rwuo.mutation.SubDistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldSubDistrict,
		})
	}
	if value, ok := rwuo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldProvince,
		})
	}
	if rwuo.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldProvince,
		})
	}
	if value, ok := rwuo.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldPostalCode,
		})
	}
	if rwuo.mutation.PostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallet.FieldPostalCode,
		})
	}
	if value, ok := rwuo.mutation.RegisterDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallet.FieldRegisterDateTime,
		})
	}
	if rwuo.mutation.RegisterDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reportwallet.FieldRegisterDateTime,
		})
	}
	if value, ok := rwuo.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reportwallet.FieldFileimportID,
		})
	}
	if value, ok := rwuo.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reportwallet.FieldFileimportID,
		})
	}
	if rwuo.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: reportwallet.FieldFileimportID,
		})
	}
	_node = &ReportWallet{config: rwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportwallet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
