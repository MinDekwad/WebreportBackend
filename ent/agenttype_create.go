// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/agenttype"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgenttypeCreate is the builder for creating a Agenttype entity.
type AgenttypeCreate struct {
	config
	mutation *AgenttypeMutation
	hooks    []Hook
}

// SetAgentid sets the "agentid" field.
func (ac *AgenttypeCreate) SetAgentid(s string) *AgenttypeCreate {
	ac.mutation.SetAgentid(s)
	return ac
}

// SetNillableAgentid sets the "agentid" field if the given value is not nil.
func (ac *AgenttypeCreate) SetNillableAgentid(s *string) *AgenttypeCreate {
	if s != nil {
		ac.SetAgentid(*s)
	}
	return ac
}

// SetAgentname sets the "agentname" field.
func (ac *AgenttypeCreate) SetAgentname(s string) *AgenttypeCreate {
	ac.mutation.SetAgentname(s)
	return ac
}

// SetNillableAgentname sets the "agentname" field if the given value is not nil.
func (ac *AgenttypeCreate) SetNillableAgentname(s *string) *AgenttypeCreate {
	if s != nil {
		ac.SetAgentname(*s)
	}
	return ac
}

// SetAgenttype sets the "agenttype" field.
func (ac *AgenttypeCreate) SetAgenttype(s string) *AgenttypeCreate {
	ac.mutation.SetAgenttype(s)
	return ac
}

// SetNillableAgenttype sets the "agenttype" field if the given value is not nil.
func (ac *AgenttypeCreate) SetNillableAgenttype(s *string) *AgenttypeCreate {
	if s != nil {
		ac.SetAgenttype(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AgenttypeCreate) SetID(i int) *AgenttypeCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the AgenttypeMutation object of the builder.
func (ac *AgenttypeCreate) Mutation() *AgenttypeMutation {
	return ac.mutation
}

// Save creates the Agenttype in the database.
func (ac *AgenttypeCreate) Save(ctx context.Context) (*Agenttype, error) {
	var (
		err  error
		node *Agenttype
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgenttypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgenttypeCreate) SaveX(ctx context.Context) *Agenttype {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ac *AgenttypeCreate) check() error {
	if v, ok := ac.mutation.Agentid(); ok {
		if err := agenttype.AgentidValidator(v); err != nil {
			return &ValidationError{Name: "agentid", err: fmt.Errorf("ent: validator failed for field \"agentid\": %w", err)}
		}
	}
	if v, ok := ac.mutation.Agentname(); ok {
		if err := agenttype.AgentnameValidator(v); err != nil {
			return &ValidationError{Name: "agentname", err: fmt.Errorf("ent: validator failed for field \"agentname\": %w", err)}
		}
	}
	if v, ok := ac.mutation.Agenttype(); ok {
		if err := agenttype.AgenttypeValidator(v); err != nil {
			return &ValidationError{Name: "agenttype", err: fmt.Errorf("ent: validator failed for field \"agenttype\": %w", err)}
		}
	}
	return nil
}

func (ac *AgenttypeCreate) sqlSave(ctx context.Context) (*Agenttype, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (ac *AgenttypeCreate) createSpec() (*Agenttype, *sqlgraph.CreateSpec) {
	var (
		_node = &Agenttype{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: agenttype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: agenttype.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Agentid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agenttype.FieldAgentid,
		})
		_node.Agentid = &value
	}
	if value, ok := ac.mutation.Agentname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agenttype.FieldAgentname,
		})
		_node.Agentname = &value
	}
	if value, ok := ac.mutation.Agenttype(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agenttype.FieldAgenttype,
		})
		_node.Agenttype = &value
	}
	return _node, _spec
}

// AgenttypeCreateBulk is the builder for creating many Agenttype entities in bulk.
type AgenttypeCreateBulk struct {
	config
	builders []*AgenttypeCreate
}

// Save creates the Agenttype entities in the database.
func (acb *AgenttypeCreateBulk) Save(ctx context.Context) ([]*Agenttype, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Agenttype, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgenttypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AgenttypeCreateBulk) SaveX(ctx context.Context) []*Agenttype {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
