// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/loanbinding"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoanbindingCreate is the builder for creating a Loanbinding entity.
type LoanbindingCreate struct {
	config
	mutation *LoanbindingMutation
	hooks    []Hook
}

// SetStatus sets the "Status" field.
func (lc *LoanbindingCreate) SetStatus(s string) *LoanbindingCreate {
	lc.mutation.SetStatus(s)
	return lc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (lc *LoanbindingCreate) SetNillableStatus(s *string) *LoanbindingCreate {
	if s != nil {
		lc.SetStatus(*s)
	}
	return lc
}

// SetDateTime sets the "dateTime" field.
func (lc *LoanbindingCreate) SetDateTime(t time.Time) *LoanbindingCreate {
	lc.mutation.SetDateTime(t)
	return lc
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (lc *LoanbindingCreate) SetNillableDateTime(t *time.Time) *LoanbindingCreate {
	if t != nil {
		lc.SetDateTime(*t)
	}
	return lc
}

// SetWalletId sets the "WalletId" field.
func (lc *LoanbindingCreate) SetWalletId(s string) *LoanbindingCreate {
	lc.mutation.SetWalletId(s)
	return lc
}

// SetNillableWalletId sets the "WalletId" field if the given value is not nil.
func (lc *LoanbindingCreate) SetNillableWalletId(s *string) *LoanbindingCreate {
	if s != nil {
		lc.SetWalletId(*s)
	}
	return lc
}

// SetAccountReference sets the "AccountReference" field.
func (lc *LoanbindingCreate) SetAccountReference(s string) *LoanbindingCreate {
	lc.mutation.SetAccountReference(s)
	return lc
}

// SetNillableAccountReference sets the "AccountReference" field if the given value is not nil.
func (lc *LoanbindingCreate) SetNillableAccountReference(s *string) *LoanbindingCreate {
	if s != nil {
		lc.SetAccountReference(*s)
	}
	return lc
}

// SetLoanAccountNo sets the "LoanAccountNo" field.
func (lc *LoanbindingCreate) SetLoanAccountNo(s string) *LoanbindingCreate {
	lc.mutation.SetLoanAccountNo(s)
	return lc
}

// SetNillableLoanAccountNo sets the "LoanAccountNo" field if the given value is not nil.
func (lc *LoanbindingCreate) SetNillableLoanAccountNo(s *string) *LoanbindingCreate {
	if s != nil {
		lc.SetLoanAccountNo(*s)
	}
	return lc
}

// SetRequestDateTime sets the "RequestDateTime" field.
func (lc *LoanbindingCreate) SetRequestDateTime(t time.Time) *LoanbindingCreate {
	lc.mutation.SetRequestDateTime(t)
	return lc
}

// SetNillableRequestDateTime sets the "RequestDateTime" field if the given value is not nil.
func (lc *LoanbindingCreate) SetNillableRequestDateTime(t *time.Time) *LoanbindingCreate {
	if t != nil {
		lc.SetRequestDateTime(*t)
	}
	return lc
}

// SetFileimportID sets the "FileimportID" field.
func (lc *LoanbindingCreate) SetFileimportID(i int) *LoanbindingCreate {
	lc.mutation.SetFileimportID(i)
	return lc
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (lc *LoanbindingCreate) SetNillableFileimportID(i *int) *LoanbindingCreate {
	if i != nil {
		lc.SetFileimportID(*i)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LoanbindingCreate) SetID(i int) *LoanbindingCreate {
	lc.mutation.SetID(i)
	return lc
}

// Mutation returns the LoanbindingMutation object of the builder.
func (lc *LoanbindingCreate) Mutation() *LoanbindingMutation {
	return lc.mutation
}

// Save creates the Loanbinding in the database.
func (lc *LoanbindingCreate) Save(ctx context.Context) (*Loanbinding, error) {
	var (
		err  error
		node *Loanbinding
	)
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoanbindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			node, err = lc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LoanbindingCreate) SaveX(ctx context.Context) *Loanbinding {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (lc *LoanbindingCreate) check() error {
	if v, ok := lc.mutation.Status(); ok {
		if err := loanbinding.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := lc.mutation.WalletId(); ok {
		if err := loanbinding.WalletIdValidator(v); err != nil {
			return &ValidationError{Name: "WalletId", err: fmt.Errorf("ent: validator failed for field \"WalletId\": %w", err)}
		}
	}
	if v, ok := lc.mutation.AccountReference(); ok {
		if err := loanbinding.AccountReferenceValidator(v); err != nil {
			return &ValidationError{Name: "AccountReference", err: fmt.Errorf("ent: validator failed for field \"AccountReference\": %w", err)}
		}
	}
	if v, ok := lc.mutation.LoanAccountNo(); ok {
		if err := loanbinding.LoanAccountNoValidator(v); err != nil {
			return &ValidationError{Name: "LoanAccountNo", err: fmt.Errorf("ent: validator failed for field \"LoanAccountNo\": %w", err)}
		}
	}
	return nil
}

func (lc *LoanbindingCreate) sqlSave(ctx context.Context) (*Loanbinding, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (lc *LoanbindingCreate) createSpec() (*Loanbinding, *sqlgraph.CreateSpec) {
	var (
		_node = &Loanbinding{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: loanbinding.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: loanbinding.FieldID,
			},
		}
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldStatus,
		})
		_node.Status = &value
	}
	if value, ok := lc.mutation.DateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loanbinding.FieldDateTime,
		})
		_node.DateTime = &value
	}
	if value, ok := lc.mutation.WalletId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldWalletId,
		})
		_node.WalletId = &value
	}
	if value, ok := lc.mutation.AccountReference(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldAccountReference,
		})
		_node.AccountReference = &value
	}
	if value, ok := lc.mutation.LoanAccountNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldLoanAccountNo,
		})
		_node.LoanAccountNo = &value
	}
	if value, ok := lc.mutation.RequestDateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loanbinding.FieldRequestDateTime,
		})
		_node.RequestDateTime = &value
	}
	if value, ok := lc.mutation.FileimportID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loanbinding.FieldFileimportID,
		})
		_node.FileimportID = &value
	}
	return _node, _spec
}

// LoanbindingCreateBulk is the builder for creating many Loanbinding entities in bulk.
type LoanbindingCreateBulk struct {
	config
	builders []*LoanbindingCreate
}

// Save creates the Loanbinding entities in the database.
func (lcb *LoanbindingCreateBulk) Save(ctx context.Context) ([]*Loanbinding, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Loanbinding, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoanbindingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LoanbindingCreateBulk) SaveX(ctx context.Context) []*Loanbinding {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
