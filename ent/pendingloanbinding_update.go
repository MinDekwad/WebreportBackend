// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pendingloanbinding"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PendingloanbindingUpdate is the builder for updating Pendingloanbinding entities.
type PendingloanbindingUpdate struct {
	config
	hooks    []Hook
	mutation *PendingloanbindingMutation
}

// Where adds a new predicate for the PendingloanbindingUpdate builder.
func (pu *PendingloanbindingUpdate) Where(ps ...predicate.Pendingloanbinding) *PendingloanbindingUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetWalletID sets the "WalletID" field.
func (pu *PendingloanbindingUpdate) SetWalletID(s string) *PendingloanbindingUpdate {
	pu.mutation.SetWalletID(s)
	return pu
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (pu *PendingloanbindingUpdate) SetNillableWalletID(s *string) *PendingloanbindingUpdate {
	if s != nil {
		pu.SetWalletID(*s)
	}
	return pu
}

// ClearWalletID clears the value of the "WalletID" field.
func (pu *PendingloanbindingUpdate) ClearWalletID() *PendingloanbindingUpdate {
	pu.mutation.ClearWalletID()
	return pu
}

// SetNameLB sets the "NameLB" field.
func (pu *PendingloanbindingUpdate) SetNameLB(s string) *PendingloanbindingUpdate {
	pu.mutation.SetNameLB(s)
	return pu
}

// SetNillableNameLB sets the "NameLB" field if the given value is not nil.
func (pu *PendingloanbindingUpdate) SetNillableNameLB(s *string) *PendingloanbindingUpdate {
	if s != nil {
		pu.SetNameLB(*s)
	}
	return pu
}

// ClearNameLB clears the value of the "NameLB" field.
func (pu *PendingloanbindingUpdate) ClearNameLB() *PendingloanbindingUpdate {
	pu.mutation.ClearNameLB()
	return pu
}

// SetStatusGenLB sets the "StatusGenLB" field.
func (pu *PendingloanbindingUpdate) SetStatusGenLB(b bool) *PendingloanbindingUpdate {
	pu.mutation.SetStatusGenLB(b)
	return pu
}

// SetNillableStatusGenLB sets the "StatusGenLB" field if the given value is not nil.
func (pu *PendingloanbindingUpdate) SetNillableStatusGenLB(b *bool) *PendingloanbindingUpdate {
	if b != nil {
		pu.SetStatusGenLB(*b)
	}
	return pu
}

// ClearStatusGenLB clears the value of the "StatusGenLB" field.
func (pu *PendingloanbindingUpdate) ClearStatusGenLB() *PendingloanbindingUpdate {
	pu.mutation.ClearStatusGenLB()
	return pu
}

// SetPointLB sets the "PointLB" field.
func (pu *PendingloanbindingUpdate) SetPointLB(i int) *PendingloanbindingUpdate {
	pu.mutation.ResetPointLB()
	pu.mutation.SetPointLB(i)
	return pu
}

// SetNillablePointLB sets the "PointLB" field if the given value is not nil.
func (pu *PendingloanbindingUpdate) SetNillablePointLB(i *int) *PendingloanbindingUpdate {
	if i != nil {
		pu.SetPointLB(*i)
	}
	return pu
}

// AddPointLB adds i to the "PointLB" field.
func (pu *PendingloanbindingUpdate) AddPointLB(i int) *PendingloanbindingUpdate {
	pu.mutation.AddPointLB(i)
	return pu
}

// ClearPointLB clears the value of the "PointLB" field.
func (pu *PendingloanbindingUpdate) ClearPointLB() *PendingloanbindingUpdate {
	pu.mutation.ClearPointLB()
	return pu
}

// SetDateTime sets the "DateTime" field.
func (pu *PendingloanbindingUpdate) SetDateTime(t time.Time) *PendingloanbindingUpdate {
	pu.mutation.SetDateTime(t)
	return pu
}

// SetNillableDateTime sets the "DateTime" field if the given value is not nil.
func (pu *PendingloanbindingUpdate) SetNillableDateTime(t *time.Time) *PendingloanbindingUpdate {
	if t != nil {
		pu.SetDateTime(*t)
	}
	return pu
}

// ClearDateTime clears the value of the "DateTime" field.
func (pu *PendingloanbindingUpdate) ClearDateTime() *PendingloanbindingUpdate {
	pu.mutation.ClearDateTime()
	return pu
}

// SetDateGenLB sets the "DateGenLB" field.
func (pu *PendingloanbindingUpdate) SetDateGenLB(t time.Time) *PendingloanbindingUpdate {
	pu.mutation.SetDateGenLB(t)
	return pu
}

// SetNillableDateGenLB sets the "DateGenLB" field if the given value is not nil.
func (pu *PendingloanbindingUpdate) SetNillableDateGenLB(t *time.Time) *PendingloanbindingUpdate {
	if t != nil {
		pu.SetDateGenLB(*t)
	}
	return pu
}

// ClearDateGenLB clears the value of the "DateGenLB" field.
func (pu *PendingloanbindingUpdate) ClearDateGenLB() *PendingloanbindingUpdate {
	pu.mutation.ClearDateGenLB()
	return pu
}

// SetFileimportID sets the "FileimportID" field.
func (pu *PendingloanbindingUpdate) SetFileimportID(i int) *PendingloanbindingUpdate {
	pu.mutation.ResetFileimportID()
	pu.mutation.SetFileimportID(i)
	return pu
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (pu *PendingloanbindingUpdate) SetNillableFileimportID(i *int) *PendingloanbindingUpdate {
	if i != nil {
		pu.SetFileimportID(*i)
	}
	return pu
}

// AddFileimportID adds i to the "FileimportID" field.
func (pu *PendingloanbindingUpdate) AddFileimportID(i int) *PendingloanbindingUpdate {
	pu.mutation.AddFileimportID(i)
	return pu
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (pu *PendingloanbindingUpdate) ClearFileimportID() *PendingloanbindingUpdate {
	pu.mutation.ClearFileimportID()
	return pu
}

// SetCAWalletID sets the "CAWalletID" field.
func (pu *PendingloanbindingUpdate) SetCAWalletID(s string) *PendingloanbindingUpdate {
	pu.mutation.SetCAWalletID(s)
	return pu
}

// SetNillableCAWalletID sets the "CAWalletID" field if the given value is not nil.
func (pu *PendingloanbindingUpdate) SetNillableCAWalletID(s *string) *PendingloanbindingUpdate {
	if s != nil {
		pu.SetCAWalletID(*s)
	}
	return pu
}

// ClearCAWalletID clears the value of the "CAWalletID" field.
func (pu *PendingloanbindingUpdate) ClearCAWalletID() *PendingloanbindingUpdate {
	pu.mutation.ClearCAWalletID()
	return pu
}

// SetCAPort sets the "CAPort" field.
func (pu *PendingloanbindingUpdate) SetCAPort(s string) *PendingloanbindingUpdate {
	pu.mutation.SetCAPort(s)
	return pu
}

// SetNillableCAPort sets the "CAPort" field if the given value is not nil.
func (pu *PendingloanbindingUpdate) SetNillableCAPort(s *string) *PendingloanbindingUpdate {
	if s != nil {
		pu.SetCAPort(*s)
	}
	return pu
}

// ClearCAPort clears the value of the "CAPort" field.
func (pu *PendingloanbindingUpdate) ClearCAPort() *PendingloanbindingUpdate {
	pu.mutation.ClearCAPort()
	return pu
}

// SetMainBranch sets the "MainBranch" field.
func (pu *PendingloanbindingUpdate) SetMainBranch(s string) *PendingloanbindingUpdate {
	pu.mutation.SetMainBranch(s)
	return pu
}

// SetNillableMainBranch sets the "MainBranch" field if the given value is not nil.
func (pu *PendingloanbindingUpdate) SetNillableMainBranch(s *string) *PendingloanbindingUpdate {
	if s != nil {
		pu.SetMainBranch(*s)
	}
	return pu
}

// ClearMainBranch clears the value of the "MainBranch" field.
func (pu *PendingloanbindingUpdate) ClearMainBranch() *PendingloanbindingUpdate {
	pu.mutation.ClearMainBranch()
	return pu
}

// Mutation returns the PendingloanbindingMutation object of the builder.
func (pu *PendingloanbindingUpdate) Mutation() *PendingloanbindingMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PendingloanbindingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PendingloanbindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PendingloanbindingUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PendingloanbindingUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PendingloanbindingUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PendingloanbindingUpdate) check() error {
	if v, ok := pu.mutation.WalletID(); ok {
		if err := pendingloanbinding.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := pu.mutation.NameLB(); ok {
		if err := pendingloanbinding.NameLBValidator(v); err != nil {
			return &ValidationError{Name: "NameLB", err: fmt.Errorf("ent: validator failed for field \"NameLB\": %w", err)}
		}
	}
	if v, ok := pu.mutation.CAWalletID(); ok {
		if err := pendingloanbinding.CAWalletIDValidator(v); err != nil {
			return &ValidationError{Name: "CAWalletID", err: fmt.Errorf("ent: validator failed for field \"CAWalletID\": %w", err)}
		}
	}
	if v, ok := pu.mutation.CAPort(); ok {
		if err := pendingloanbinding.CAPortValidator(v); err != nil {
			return &ValidationError{Name: "CAPort", err: fmt.Errorf("ent: validator failed for field \"CAPort\": %w", err)}
		}
	}
	if v, ok := pu.mutation.MainBranch(); ok {
		if err := pendingloanbinding.MainBranchValidator(v); err != nil {
			return &ValidationError{Name: "MainBranch", err: fmt.Errorf("ent: validator failed for field \"MainBranch\": %w", err)}
		}
	}
	return nil
}

func (pu *PendingloanbindingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pendingloanbinding.Table,
			Columns: pendingloanbinding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pendingloanbinding.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldWalletID,
		})
	}
	if pu.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingloanbinding.FieldWalletID,
		})
	}
	if value, ok := pu.mutation.NameLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldNameLB,
		})
	}
	if pu.mutation.NameLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingloanbinding.FieldNameLB,
		})
	}
	if value, ok := pu.mutation.StatusGenLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pendingloanbinding.FieldStatusGenLB,
		})
	}
	if pu.mutation.StatusGenLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: pendingloanbinding.FieldStatusGenLB,
		})
	}
	if value, ok := pu.mutation.PointLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingloanbinding.FieldPointLB,
		})
	}
	if value, ok := pu.mutation.AddedPointLB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingloanbinding.FieldPointLB,
		})
	}
	if pu.mutation.PointLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pendingloanbinding.FieldPointLB,
		})
	}
	if value, ok := pu.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pendingloanbinding.FieldDateTime,
		})
	}
	if pu.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pendingloanbinding.FieldDateTime,
		})
	}
	if value, ok := pu.mutation.DateGenLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pendingloanbinding.FieldDateGenLB,
		})
	}
	if pu.mutation.DateGenLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pendingloanbinding.FieldDateGenLB,
		})
	}
	if value, ok := pu.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingloanbinding.FieldFileimportID,
		})
	}
	if value, ok := pu.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingloanbinding.FieldFileimportID,
		})
	}
	if pu.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pendingloanbinding.FieldFileimportID,
		})
	}
	if value, ok := pu.mutation.CAWalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldCAWalletID,
		})
	}
	if pu.mutation.CAWalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingloanbinding.FieldCAWalletID,
		})
	}
	if value, ok := pu.mutation.CAPort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldCAPort,
		})
	}
	if pu.mutation.CAPortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingloanbinding.FieldCAPort,
		})
	}
	if value, ok := pu.mutation.MainBranch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldMainBranch,
		})
	}
	if pu.mutation.MainBranchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingloanbinding.FieldMainBranch,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pendingloanbinding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PendingloanbindingUpdateOne is the builder for updating a single Pendingloanbinding entity.
type PendingloanbindingUpdateOne struct {
	config
	hooks    []Hook
	mutation *PendingloanbindingMutation
}

// SetWalletID sets the "WalletID" field.
func (puo *PendingloanbindingUpdateOne) SetWalletID(s string) *PendingloanbindingUpdateOne {
	puo.mutation.SetWalletID(s)
	return puo
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (puo *PendingloanbindingUpdateOne) SetNillableWalletID(s *string) *PendingloanbindingUpdateOne {
	if s != nil {
		puo.SetWalletID(*s)
	}
	return puo
}

// ClearWalletID clears the value of the "WalletID" field.
func (puo *PendingloanbindingUpdateOne) ClearWalletID() *PendingloanbindingUpdateOne {
	puo.mutation.ClearWalletID()
	return puo
}

// SetNameLB sets the "NameLB" field.
func (puo *PendingloanbindingUpdateOne) SetNameLB(s string) *PendingloanbindingUpdateOne {
	puo.mutation.SetNameLB(s)
	return puo
}

// SetNillableNameLB sets the "NameLB" field if the given value is not nil.
func (puo *PendingloanbindingUpdateOne) SetNillableNameLB(s *string) *PendingloanbindingUpdateOne {
	if s != nil {
		puo.SetNameLB(*s)
	}
	return puo
}

// ClearNameLB clears the value of the "NameLB" field.
func (puo *PendingloanbindingUpdateOne) ClearNameLB() *PendingloanbindingUpdateOne {
	puo.mutation.ClearNameLB()
	return puo
}

// SetStatusGenLB sets the "StatusGenLB" field.
func (puo *PendingloanbindingUpdateOne) SetStatusGenLB(b bool) *PendingloanbindingUpdateOne {
	puo.mutation.SetStatusGenLB(b)
	return puo
}

// SetNillableStatusGenLB sets the "StatusGenLB" field if the given value is not nil.
func (puo *PendingloanbindingUpdateOne) SetNillableStatusGenLB(b *bool) *PendingloanbindingUpdateOne {
	if b != nil {
		puo.SetStatusGenLB(*b)
	}
	return puo
}

// ClearStatusGenLB clears the value of the "StatusGenLB" field.
func (puo *PendingloanbindingUpdateOne) ClearStatusGenLB() *PendingloanbindingUpdateOne {
	puo.mutation.ClearStatusGenLB()
	return puo
}

// SetPointLB sets the "PointLB" field.
func (puo *PendingloanbindingUpdateOne) SetPointLB(i int) *PendingloanbindingUpdateOne {
	puo.mutation.ResetPointLB()
	puo.mutation.SetPointLB(i)
	return puo
}

// SetNillablePointLB sets the "PointLB" field if the given value is not nil.
func (puo *PendingloanbindingUpdateOne) SetNillablePointLB(i *int) *PendingloanbindingUpdateOne {
	if i != nil {
		puo.SetPointLB(*i)
	}
	return puo
}

// AddPointLB adds i to the "PointLB" field.
func (puo *PendingloanbindingUpdateOne) AddPointLB(i int) *PendingloanbindingUpdateOne {
	puo.mutation.AddPointLB(i)
	return puo
}

// ClearPointLB clears the value of the "PointLB" field.
func (puo *PendingloanbindingUpdateOne) ClearPointLB() *PendingloanbindingUpdateOne {
	puo.mutation.ClearPointLB()
	return puo
}

// SetDateTime sets the "DateTime" field.
func (puo *PendingloanbindingUpdateOne) SetDateTime(t time.Time) *PendingloanbindingUpdateOne {
	puo.mutation.SetDateTime(t)
	return puo
}

// SetNillableDateTime sets the "DateTime" field if the given value is not nil.
func (puo *PendingloanbindingUpdateOne) SetNillableDateTime(t *time.Time) *PendingloanbindingUpdateOne {
	if t != nil {
		puo.SetDateTime(*t)
	}
	return puo
}

// ClearDateTime clears the value of the "DateTime" field.
func (puo *PendingloanbindingUpdateOne) ClearDateTime() *PendingloanbindingUpdateOne {
	puo.mutation.ClearDateTime()
	return puo
}

// SetDateGenLB sets the "DateGenLB" field.
func (puo *PendingloanbindingUpdateOne) SetDateGenLB(t time.Time) *PendingloanbindingUpdateOne {
	puo.mutation.SetDateGenLB(t)
	return puo
}

// SetNillableDateGenLB sets the "DateGenLB" field if the given value is not nil.
func (puo *PendingloanbindingUpdateOne) SetNillableDateGenLB(t *time.Time) *PendingloanbindingUpdateOne {
	if t != nil {
		puo.SetDateGenLB(*t)
	}
	return puo
}

// ClearDateGenLB clears the value of the "DateGenLB" field.
func (puo *PendingloanbindingUpdateOne) ClearDateGenLB() *PendingloanbindingUpdateOne {
	puo.mutation.ClearDateGenLB()
	return puo
}

// SetFileimportID sets the "FileimportID" field.
func (puo *PendingloanbindingUpdateOne) SetFileimportID(i int) *PendingloanbindingUpdateOne {
	puo.mutation.ResetFileimportID()
	puo.mutation.SetFileimportID(i)
	return puo
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (puo *PendingloanbindingUpdateOne) SetNillableFileimportID(i *int) *PendingloanbindingUpdateOne {
	if i != nil {
		puo.SetFileimportID(*i)
	}
	return puo
}

// AddFileimportID adds i to the "FileimportID" field.
func (puo *PendingloanbindingUpdateOne) AddFileimportID(i int) *PendingloanbindingUpdateOne {
	puo.mutation.AddFileimportID(i)
	return puo
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (puo *PendingloanbindingUpdateOne) ClearFileimportID() *PendingloanbindingUpdateOne {
	puo.mutation.ClearFileimportID()
	return puo
}

// SetCAWalletID sets the "CAWalletID" field.
func (puo *PendingloanbindingUpdateOne) SetCAWalletID(s string) *PendingloanbindingUpdateOne {
	puo.mutation.SetCAWalletID(s)
	return puo
}

// SetNillableCAWalletID sets the "CAWalletID" field if the given value is not nil.
func (puo *PendingloanbindingUpdateOne) SetNillableCAWalletID(s *string) *PendingloanbindingUpdateOne {
	if s != nil {
		puo.SetCAWalletID(*s)
	}
	return puo
}

// ClearCAWalletID clears the value of the "CAWalletID" field.
func (puo *PendingloanbindingUpdateOne) ClearCAWalletID() *PendingloanbindingUpdateOne {
	puo.mutation.ClearCAWalletID()
	return puo
}

// SetCAPort sets the "CAPort" field.
func (puo *PendingloanbindingUpdateOne) SetCAPort(s string) *PendingloanbindingUpdateOne {
	puo.mutation.SetCAPort(s)
	return puo
}

// SetNillableCAPort sets the "CAPort" field if the given value is not nil.
func (puo *PendingloanbindingUpdateOne) SetNillableCAPort(s *string) *PendingloanbindingUpdateOne {
	if s != nil {
		puo.SetCAPort(*s)
	}
	return puo
}

// ClearCAPort clears the value of the "CAPort" field.
func (puo *PendingloanbindingUpdateOne) ClearCAPort() *PendingloanbindingUpdateOne {
	puo.mutation.ClearCAPort()
	return puo
}

// SetMainBranch sets the "MainBranch" field.
func (puo *PendingloanbindingUpdateOne) SetMainBranch(s string) *PendingloanbindingUpdateOne {
	puo.mutation.SetMainBranch(s)
	return puo
}

// SetNillableMainBranch sets the "MainBranch" field if the given value is not nil.
func (puo *PendingloanbindingUpdateOne) SetNillableMainBranch(s *string) *PendingloanbindingUpdateOne {
	if s != nil {
		puo.SetMainBranch(*s)
	}
	return puo
}

// ClearMainBranch clears the value of the "MainBranch" field.
func (puo *PendingloanbindingUpdateOne) ClearMainBranch() *PendingloanbindingUpdateOne {
	puo.mutation.ClearMainBranch()
	return puo
}

// Mutation returns the PendingloanbindingMutation object of the builder.
func (puo *PendingloanbindingUpdateOne) Mutation() *PendingloanbindingMutation {
	return puo.mutation
}

// Save executes the query and returns the updated Pendingloanbinding entity.
func (puo *PendingloanbindingUpdateOne) Save(ctx context.Context) (*Pendingloanbinding, error) {
	var (
		err  error
		node *Pendingloanbinding
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PendingloanbindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PendingloanbindingUpdateOne) SaveX(ctx context.Context) *Pendingloanbinding {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PendingloanbindingUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PendingloanbindingUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PendingloanbindingUpdateOne) check() error {
	if v, ok := puo.mutation.WalletID(); ok {
		if err := pendingloanbinding.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := puo.mutation.NameLB(); ok {
		if err := pendingloanbinding.NameLBValidator(v); err != nil {
			return &ValidationError{Name: "NameLB", err: fmt.Errorf("ent: validator failed for field \"NameLB\": %w", err)}
		}
	}
	if v, ok := puo.mutation.CAWalletID(); ok {
		if err := pendingloanbinding.CAWalletIDValidator(v); err != nil {
			return &ValidationError{Name: "CAWalletID", err: fmt.Errorf("ent: validator failed for field \"CAWalletID\": %w", err)}
		}
	}
	if v, ok := puo.mutation.CAPort(); ok {
		if err := pendingloanbinding.CAPortValidator(v); err != nil {
			return &ValidationError{Name: "CAPort", err: fmt.Errorf("ent: validator failed for field \"CAPort\": %w", err)}
		}
	}
	if v, ok := puo.mutation.MainBranch(); ok {
		if err := pendingloanbinding.MainBranchValidator(v); err != nil {
			return &ValidationError{Name: "MainBranch", err: fmt.Errorf("ent: validator failed for field \"MainBranch\": %w", err)}
		}
	}
	return nil
}

func (puo *PendingloanbindingUpdateOne) sqlSave(ctx context.Context) (_node *Pendingloanbinding, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pendingloanbinding.Table,
			Columns: pendingloanbinding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pendingloanbinding.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pendingloanbinding.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldWalletID,
		})
	}
	if puo.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingloanbinding.FieldWalletID,
		})
	}
	if value, ok := puo.mutation.NameLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldNameLB,
		})
	}
	if puo.mutation.NameLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingloanbinding.FieldNameLB,
		})
	}
	if value, ok := puo.mutation.StatusGenLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pendingloanbinding.FieldStatusGenLB,
		})
	}
	if puo.mutation.StatusGenLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: pendingloanbinding.FieldStatusGenLB,
		})
	}
	if value, ok := puo.mutation.PointLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingloanbinding.FieldPointLB,
		})
	}
	if value, ok := puo.mutation.AddedPointLB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingloanbinding.FieldPointLB,
		})
	}
	if puo.mutation.PointLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pendingloanbinding.FieldPointLB,
		})
	}
	if value, ok := puo.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pendingloanbinding.FieldDateTime,
		})
	}
	if puo.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pendingloanbinding.FieldDateTime,
		})
	}
	if value, ok := puo.mutation.DateGenLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pendingloanbinding.FieldDateGenLB,
		})
	}
	if puo.mutation.DateGenLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pendingloanbinding.FieldDateGenLB,
		})
	}
	if value, ok := puo.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingloanbinding.FieldFileimportID,
		})
	}
	if value, ok := puo.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingloanbinding.FieldFileimportID,
		})
	}
	if puo.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pendingloanbinding.FieldFileimportID,
		})
	}
	if value, ok := puo.mutation.CAWalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldCAWalletID,
		})
	}
	if puo.mutation.CAWalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingloanbinding.FieldCAWalletID,
		})
	}
	if value, ok := puo.mutation.CAPort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldCAPort,
		})
	}
	if puo.mutation.CAPortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingloanbinding.FieldCAPort,
		})
	}
	if value, ok := puo.mutation.MainBranch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldMainBranch,
		})
	}
	if puo.mutation.MainBranchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingloanbinding.FieldMainBranch,
		})
	}
	_node = &Pendingloanbinding{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pendingloanbinding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
