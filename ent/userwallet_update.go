// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/userwallet"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserwalletUpdate is the builder for updating Userwallet entities.
type UserwalletUpdate struct {
	config
	hooks    []Hook
	mutation *UserwalletMutation
}

// Where adds a new predicate for the UserwalletUpdate builder.
func (uu *UserwalletUpdate) Where(ps ...predicate.Userwallet) *UserwalletUpdate {
	uu.mutation.predicates = append(uu.mutation.predicates, ps...)
	return uu
}

// SetWalletid sets the "walletid" field.
func (uu *UserwalletUpdate) SetWalletid(s string) *UserwalletUpdate {
	uu.mutation.SetWalletid(s)
	return uu
}

// SetWalletTypeName sets the "WalletTypeName" field.
func (uu *UserwalletUpdate) SetWalletTypeName(s string) *UserwalletUpdate {
	uu.mutation.SetWalletTypeName(s)
	return uu
}

// SetNillableWalletTypeName sets the "WalletTypeName" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableWalletTypeName(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetWalletTypeName(*s)
	}
	return uu
}

// ClearWalletTypeName clears the value of the "WalletTypeName" field.
func (uu *UserwalletUpdate) ClearWalletTypeName() *UserwalletUpdate {
	uu.mutation.ClearWalletTypeName()
	return uu
}

// SetWalletPhoneno sets the "WalletPhoneno" field.
func (uu *UserwalletUpdate) SetWalletPhoneno(s string) *UserwalletUpdate {
	uu.mutation.SetWalletPhoneno(s)
	return uu
}

// SetNillableWalletPhoneno sets the "WalletPhoneno" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableWalletPhoneno(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetWalletPhoneno(*s)
	}
	return uu
}

// ClearWalletPhoneno clears the value of the "WalletPhoneno" field.
func (uu *UserwalletUpdate) ClearWalletPhoneno() *UserwalletUpdate {
	uu.mutation.ClearWalletPhoneno()
	return uu
}

// SetWalletName sets the "WalletName" field.
func (uu *UserwalletUpdate) SetWalletName(s string) *UserwalletUpdate {
	uu.mutation.SetWalletName(s)
	return uu
}

// SetNillableWalletName sets the "WalletName" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableWalletName(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetWalletName(*s)
	}
	return uu
}

// ClearWalletName clears the value of the "WalletName" field.
func (uu *UserwalletUpdate) ClearWalletName() *UserwalletUpdate {
	uu.mutation.ClearWalletName()
	return uu
}

// SetCitizenId sets the "CitizenId" field.
func (uu *UserwalletUpdate) SetCitizenId(s string) *UserwalletUpdate {
	uu.mutation.SetCitizenId(s)
	return uu
}

// SetNillableCitizenId sets the "CitizenId" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableCitizenId(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetCitizenId(*s)
	}
	return uu
}

// ClearCitizenId clears the value of the "CitizenId" field.
func (uu *UserwalletUpdate) ClearCitizenId() *UserwalletUpdate {
	uu.mutation.ClearCitizenId()
	return uu
}

// SetStatus sets the "Status" field.
func (uu *UserwalletUpdate) SetStatus(s string) *UserwalletUpdate {
	uu.mutation.SetStatus(s)
	return uu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableStatus(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetStatus(*s)
	}
	return uu
}

// ClearStatus clears the value of the "Status" field.
func (uu *UserwalletUpdate) ClearStatus() *UserwalletUpdate {
	uu.mutation.ClearStatus()
	return uu
}

// SetRegisterDate sets the "RegisterDate" field.
func (uu *UserwalletUpdate) SetRegisterDate(t time.Time) *UserwalletUpdate {
	uu.mutation.SetRegisterDate(t)
	return uu
}

// SetNillableRegisterDate sets the "RegisterDate" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableRegisterDate(t *time.Time) *UserwalletUpdate {
	if t != nil {
		uu.SetRegisterDate(*t)
	}
	return uu
}

// ClearRegisterDate clears the value of the "RegisterDate" field.
func (uu *UserwalletUpdate) ClearRegisterDate() *UserwalletUpdate {
	uu.mutation.ClearRegisterDate()
	return uu
}

// SetGroupUser sets the "GroupUser" field.
func (uu *UserwalletUpdate) SetGroupUser(i int) *UserwalletUpdate {
	uu.mutation.ResetGroupUser()
	uu.mutation.SetGroupUser(i)
	return uu
}

// SetNillableGroupUser sets the "GroupUser" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableGroupUser(i *int) *UserwalletUpdate {
	if i != nil {
		uu.SetGroupUser(*i)
	}
	return uu
}

// AddGroupUser adds i to the "GroupUser" field.
func (uu *UserwalletUpdate) AddGroupUser(i int) *UserwalletUpdate {
	uu.mutation.AddGroupUser(i)
	return uu
}

// ClearGroupUser clears the value of the "GroupUser" field.
func (uu *UserwalletUpdate) ClearGroupUser() *UserwalletUpdate {
	uu.mutation.ClearGroupUser()
	return uu
}

// SetUserAgent sets the "UserAgent" field.
func (uu *UserwalletUpdate) SetUserAgent(s string) *UserwalletUpdate {
	uu.mutation.SetUserAgent(s)
	return uu
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableUserAgent(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetUserAgent(*s)
	}
	return uu
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (uu *UserwalletUpdate) ClearUserAgent() *UserwalletUpdate {
	uu.mutation.ClearUserAgent()
	return uu
}

// SetKYCDate sets the "KYC_Date" field.
func (uu *UserwalletUpdate) SetKYCDate(t time.Time) *UserwalletUpdate {
	uu.mutation.SetKYCDate(t)
	return uu
}

// SetNillableKYCDate sets the "KYC_Date" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableKYCDate(t *time.Time) *UserwalletUpdate {
	if t != nil {
		uu.SetKYCDate(*t)
	}
	return uu
}

// ClearKYCDate clears the value of the "KYC_Date" field.
func (uu *UserwalletUpdate) ClearKYCDate() *UserwalletUpdate {
	uu.mutation.ClearKYCDate()
	return uu
}

// SetATMCard sets the "ATMCard" field.
func (uu *UserwalletUpdate) SetATMCard(s string) *UserwalletUpdate {
	uu.mutation.SetATMCard(s)
	return uu
}

// SetNillableATMCard sets the "ATMCard" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableATMCard(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetATMCard(*s)
	}
	return uu
}

// ClearATMCard clears the value of the "ATMCard" field.
func (uu *UserwalletUpdate) ClearATMCard() *UserwalletUpdate {
	uu.mutation.ClearATMCard()
	return uu
}

// SetAccountNo sets the "AccountNo" field.
func (uu *UserwalletUpdate) SetAccountNo(s string) *UserwalletUpdate {
	uu.mutation.SetAccountNo(s)
	return uu
}

// SetNillableAccountNo sets the "AccountNo" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableAccountNo(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetAccountNo(*s)
	}
	return uu
}

// ClearAccountNo clears the value of the "AccountNo" field.
func (uu *UserwalletUpdate) ClearAccountNo() *UserwalletUpdate {
	uu.mutation.ClearAccountNo()
	return uu
}

// SetAddressDetail sets the "AddressDetail" field.
func (uu *UserwalletUpdate) SetAddressDetail(s string) *UserwalletUpdate {
	uu.mutation.SetAddressDetail(s)
	return uu
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableAddressDetail(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetAddressDetail(*s)
	}
	return uu
}

// ClearAddressDetail clears the value of the "AddressDetail" field.
func (uu *UserwalletUpdate) ClearAddressDetail() *UserwalletUpdate {
	uu.mutation.ClearAddressDetail()
	return uu
}

// SetStreet sets the "Street" field.
func (uu *UserwalletUpdate) SetStreet(s string) *UserwalletUpdate {
	uu.mutation.SetStreet(s)
	return uu
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableStreet(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetStreet(*s)
	}
	return uu
}

// ClearStreet clears the value of the "Street" field.
func (uu *UserwalletUpdate) ClearStreet() *UserwalletUpdate {
	uu.mutation.ClearStreet()
	return uu
}

// SetDistrict sets the "District" field.
func (uu *UserwalletUpdate) SetDistrict(s string) *UserwalletUpdate {
	uu.mutation.SetDistrict(s)
	return uu
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableDistrict(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetDistrict(*s)
	}
	return uu
}

// ClearDistrict clears the value of the "District" field.
func (uu *UserwalletUpdate) ClearDistrict() *UserwalletUpdate {
	uu.mutation.ClearDistrict()
	return uu
}

// SetSubDistrict sets the "SubDistrict" field.
func (uu *UserwalletUpdate) SetSubDistrict(s string) *UserwalletUpdate {
	uu.mutation.SetSubDistrict(s)
	return uu
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableSubDistrict(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetSubDistrict(*s)
	}
	return uu
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (uu *UserwalletUpdate) ClearSubDistrict() *UserwalletUpdate {
	uu.mutation.ClearSubDistrict()
	return uu
}

// SetProvince sets the "Province" field.
func (uu *UserwalletUpdate) SetProvince(s string) *UserwalletUpdate {
	uu.mutation.SetProvince(s)
	return uu
}

// SetNillableProvince sets the "Province" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableProvince(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetProvince(*s)
	}
	return uu
}

// ClearProvince clears the value of the "Province" field.
func (uu *UserwalletUpdate) ClearProvince() *UserwalletUpdate {
	uu.mutation.ClearProvince()
	return uu
}

// SetPostalCode sets the "PostalCode" field.
func (uu *UserwalletUpdate) SetPostalCode(s string) *UserwalletUpdate {
	uu.mutation.SetPostalCode(s)
	return uu
}

// SetNillablePostalCode sets the "PostalCode" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillablePostalCode(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetPostalCode(*s)
	}
	return uu
}

// ClearPostalCode clears the value of the "PostalCode" field.
func (uu *UserwalletUpdate) ClearPostalCode() *UserwalletUpdate {
	uu.mutation.ClearPostalCode()
	return uu
}

// SetIsKYC sets the "isKYC" field.
func (uu *UserwalletUpdate) SetIsKYC(s string) *UserwalletUpdate {
	uu.mutation.SetIsKYC(s)
	return uu
}

// SetNillableIsKYC sets the "isKYC" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableIsKYC(s *string) *UserwalletUpdate {
	if s != nil {
		uu.SetIsKYC(*s)
	}
	return uu
}

// ClearIsKYC clears the value of the "isKYC" field.
func (uu *UserwalletUpdate) ClearIsKYC() *UserwalletUpdate {
	uu.mutation.ClearIsKYC()
	return uu
}

// SetUpdateDate sets the "UpdateDate" field.
func (uu *UserwalletUpdate) SetUpdateDate(t time.Time) *UserwalletUpdate {
	uu.mutation.SetUpdateDate(t)
	return uu
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableUpdateDate(t *time.Time) *UserwalletUpdate {
	if t != nil {
		uu.SetUpdateDate(*t)
	}
	return uu
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (uu *UserwalletUpdate) ClearUpdateDate() *UserwalletUpdate {
	uu.mutation.ClearUpdateDate()
	return uu
}

// SetOccupationId sets the "OccupationId" field.
func (uu *UserwalletUpdate) SetOccupationId(i int) *UserwalletUpdate {
	uu.mutation.ResetOccupationId()
	uu.mutation.SetOccupationId(i)
	return uu
}

// SetNillableOccupationId sets the "OccupationId" field if the given value is not nil.
func (uu *UserwalletUpdate) SetNillableOccupationId(i *int) *UserwalletUpdate {
	if i != nil {
		uu.SetOccupationId(*i)
	}
	return uu
}

// AddOccupationId adds i to the "OccupationId" field.
func (uu *UserwalletUpdate) AddOccupationId(i int) *UserwalletUpdate {
	uu.mutation.AddOccupationId(i)
	return uu
}

// ClearOccupationId clears the value of the "OccupationId" field.
func (uu *UserwalletUpdate) ClearOccupationId() *UserwalletUpdate {
	uu.mutation.ClearOccupationId()
	return uu
}

// Mutation returns the UserwalletMutation object of the builder.
func (uu *UserwalletUpdate) Mutation() *UserwalletMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserwalletUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserwalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserwalletUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserwalletUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserwalletUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserwalletUpdate) check() error {
	if v, ok := uu.mutation.Walletid(); ok {
		if err := userwallet.WalletidValidator(v); err != nil {
			return &ValidationError{Name: "walletid", err: fmt.Errorf("ent: validator failed for field \"walletid\": %w", err)}
		}
	}
	if v, ok := uu.mutation.WalletTypeName(); ok {
		if err := userwallet.WalletTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletTypeName", err: fmt.Errorf("ent: validator failed for field \"WalletTypeName\": %w", err)}
		}
	}
	if v, ok := uu.mutation.WalletPhoneno(); ok {
		if err := userwallet.WalletPhonenoValidator(v); err != nil {
			return &ValidationError{Name: "WalletPhoneno", err: fmt.Errorf("ent: validator failed for field \"WalletPhoneno\": %w", err)}
		}
	}
	if v, ok := uu.mutation.WalletName(); ok {
		if err := userwallet.WalletNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletName", err: fmt.Errorf("ent: validator failed for field \"WalletName\": %w", err)}
		}
	}
	if v, ok := uu.mutation.CitizenId(); ok {
		if err := userwallet.CitizenIdValidator(v); err != nil {
			return &ValidationError{Name: "CitizenId", err: fmt.Errorf("ent: validator failed for field \"CitizenId\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Status(); ok {
		if err := userwallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := uu.mutation.UserAgent(); ok {
		if err := userwallet.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "UserAgent", err: fmt.Errorf("ent: validator failed for field \"UserAgent\": %w", err)}
		}
	}
	if v, ok := uu.mutation.ATMCard(); ok {
		if err := userwallet.ATMCardValidator(v); err != nil {
			return &ValidationError{Name: "ATMCard", err: fmt.Errorf("ent: validator failed for field \"ATMCard\": %w", err)}
		}
	}
	if v, ok := uu.mutation.AccountNo(); ok {
		if err := userwallet.AccountNoValidator(v); err != nil {
			return &ValidationError{Name: "AccountNo", err: fmt.Errorf("ent: validator failed for field \"AccountNo\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Province(); ok {
		if err := userwallet.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "Province", err: fmt.Errorf("ent: validator failed for field \"Province\": %w", err)}
		}
	}
	if v, ok := uu.mutation.PostalCode(); ok {
		if err := userwallet.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "PostalCode", err: fmt.Errorf("ent: validator failed for field \"PostalCode\": %w", err)}
		}
	}
	if v, ok := uu.mutation.IsKYC(); ok {
		if err := userwallet.IsKYCValidator(v); err != nil {
			return &ValidationError{Name: "isKYC", err: fmt.Errorf("ent: validator failed for field \"isKYC\": %w", err)}
		}
	}
	return nil
}

func (uu *UserwalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userwallet.Table,
			Columns: userwallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userwallet.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Walletid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldWalletid,
		})
	}
	if value, ok := uu.mutation.WalletTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldWalletTypeName,
		})
	}
	if uu.mutation.WalletTypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldWalletTypeName,
		})
	}
	if value, ok := uu.mutation.WalletPhoneno(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldWalletPhoneno,
		})
	}
	if uu.mutation.WalletPhonenoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldWalletPhoneno,
		})
	}
	if value, ok := uu.mutation.WalletName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldWalletName,
		})
	}
	if uu.mutation.WalletNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldWalletName,
		})
	}
	if value, ok := uu.mutation.CitizenId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldCitizenId,
		})
	}
	if uu.mutation.CitizenIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldCitizenId,
		})
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldStatus,
		})
	}
	if uu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldStatus,
		})
	}
	if value, ok := uu.mutation.RegisterDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldRegisterDate,
		})
	}
	if uu.mutation.RegisterDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userwallet.FieldRegisterDate,
		})
	}
	if value, ok := uu.mutation.GroupUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldGroupUser,
		})
	}
	if value, ok := uu.mutation.AddedGroupUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldGroupUser,
		})
	}
	if uu.mutation.GroupUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: userwallet.FieldGroupUser,
		})
	}
	if value, ok := uu.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldUserAgent,
		})
	}
	if uu.mutation.UserAgentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldUserAgent,
		})
	}
	if value, ok := uu.mutation.KYCDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldKYCDate,
		})
	}
	if uu.mutation.KYCDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userwallet.FieldKYCDate,
		})
	}
	if value, ok := uu.mutation.ATMCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldATMCard,
		})
	}
	if uu.mutation.ATMCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldATMCard,
		})
	}
	if value, ok := uu.mutation.AccountNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldAccountNo,
		})
	}
	if uu.mutation.AccountNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldAccountNo,
		})
	}
	if value, ok := uu.mutation.AddressDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldAddressDetail,
		})
	}
	if uu.mutation.AddressDetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldAddressDetail,
		})
	}
	if value, ok := uu.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldStreet,
		})
	}
	if uu.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldStreet,
		})
	}
	if value, ok := uu.mutation.District(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldDistrict,
		})
	}
	if uu.mutation.DistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldDistrict,
		})
	}
	if value, ok := uu.mutation.SubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldSubDistrict,
		})
	}
	if uu.mutation.SubDistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldSubDistrict,
		})
	}
	if value, ok := uu.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldProvince,
		})
	}
	if uu.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldProvince,
		})
	}
	if value, ok := uu.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldPostalCode,
		})
	}
	if uu.mutation.PostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldPostalCode,
		})
	}
	if value, ok := uu.mutation.IsKYC(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldIsKYC,
		})
	}
	if uu.mutation.IsKYCCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldIsKYC,
		})
	}
	if value, ok := uu.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldUpdateDate,
		})
	}
	if uu.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userwallet.FieldUpdateDate,
		})
	}
	if value, ok := uu.mutation.OccupationId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldOccupationId,
		})
	}
	if value, ok := uu.mutation.AddedOccupationId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldOccupationId,
		})
	}
	if uu.mutation.OccupationIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: userwallet.FieldOccupationId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userwallet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserwalletUpdateOne is the builder for updating a single Userwallet entity.
type UserwalletUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserwalletMutation
}

// SetWalletid sets the "walletid" field.
func (uuo *UserwalletUpdateOne) SetWalletid(s string) *UserwalletUpdateOne {
	uuo.mutation.SetWalletid(s)
	return uuo
}

// SetWalletTypeName sets the "WalletTypeName" field.
func (uuo *UserwalletUpdateOne) SetWalletTypeName(s string) *UserwalletUpdateOne {
	uuo.mutation.SetWalletTypeName(s)
	return uuo
}

// SetNillableWalletTypeName sets the "WalletTypeName" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableWalletTypeName(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetWalletTypeName(*s)
	}
	return uuo
}

// ClearWalletTypeName clears the value of the "WalletTypeName" field.
func (uuo *UserwalletUpdateOne) ClearWalletTypeName() *UserwalletUpdateOne {
	uuo.mutation.ClearWalletTypeName()
	return uuo
}

// SetWalletPhoneno sets the "WalletPhoneno" field.
func (uuo *UserwalletUpdateOne) SetWalletPhoneno(s string) *UserwalletUpdateOne {
	uuo.mutation.SetWalletPhoneno(s)
	return uuo
}

// SetNillableWalletPhoneno sets the "WalletPhoneno" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableWalletPhoneno(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetWalletPhoneno(*s)
	}
	return uuo
}

// ClearWalletPhoneno clears the value of the "WalletPhoneno" field.
func (uuo *UserwalletUpdateOne) ClearWalletPhoneno() *UserwalletUpdateOne {
	uuo.mutation.ClearWalletPhoneno()
	return uuo
}

// SetWalletName sets the "WalletName" field.
func (uuo *UserwalletUpdateOne) SetWalletName(s string) *UserwalletUpdateOne {
	uuo.mutation.SetWalletName(s)
	return uuo
}

// SetNillableWalletName sets the "WalletName" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableWalletName(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetWalletName(*s)
	}
	return uuo
}

// ClearWalletName clears the value of the "WalletName" field.
func (uuo *UserwalletUpdateOne) ClearWalletName() *UserwalletUpdateOne {
	uuo.mutation.ClearWalletName()
	return uuo
}

// SetCitizenId sets the "CitizenId" field.
func (uuo *UserwalletUpdateOne) SetCitizenId(s string) *UserwalletUpdateOne {
	uuo.mutation.SetCitizenId(s)
	return uuo
}

// SetNillableCitizenId sets the "CitizenId" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableCitizenId(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetCitizenId(*s)
	}
	return uuo
}

// ClearCitizenId clears the value of the "CitizenId" field.
func (uuo *UserwalletUpdateOne) ClearCitizenId() *UserwalletUpdateOne {
	uuo.mutation.ClearCitizenId()
	return uuo
}

// SetStatus sets the "Status" field.
func (uuo *UserwalletUpdateOne) SetStatus(s string) *UserwalletUpdateOne {
	uuo.mutation.SetStatus(s)
	return uuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableStatus(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetStatus(*s)
	}
	return uuo
}

// ClearStatus clears the value of the "Status" field.
func (uuo *UserwalletUpdateOne) ClearStatus() *UserwalletUpdateOne {
	uuo.mutation.ClearStatus()
	return uuo
}

// SetRegisterDate sets the "RegisterDate" field.
func (uuo *UserwalletUpdateOne) SetRegisterDate(t time.Time) *UserwalletUpdateOne {
	uuo.mutation.SetRegisterDate(t)
	return uuo
}

// SetNillableRegisterDate sets the "RegisterDate" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableRegisterDate(t *time.Time) *UserwalletUpdateOne {
	if t != nil {
		uuo.SetRegisterDate(*t)
	}
	return uuo
}

// ClearRegisterDate clears the value of the "RegisterDate" field.
func (uuo *UserwalletUpdateOne) ClearRegisterDate() *UserwalletUpdateOne {
	uuo.mutation.ClearRegisterDate()
	return uuo
}

// SetGroupUser sets the "GroupUser" field.
func (uuo *UserwalletUpdateOne) SetGroupUser(i int) *UserwalletUpdateOne {
	uuo.mutation.ResetGroupUser()
	uuo.mutation.SetGroupUser(i)
	return uuo
}

// SetNillableGroupUser sets the "GroupUser" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableGroupUser(i *int) *UserwalletUpdateOne {
	if i != nil {
		uuo.SetGroupUser(*i)
	}
	return uuo
}

// AddGroupUser adds i to the "GroupUser" field.
func (uuo *UserwalletUpdateOne) AddGroupUser(i int) *UserwalletUpdateOne {
	uuo.mutation.AddGroupUser(i)
	return uuo
}

// ClearGroupUser clears the value of the "GroupUser" field.
func (uuo *UserwalletUpdateOne) ClearGroupUser() *UserwalletUpdateOne {
	uuo.mutation.ClearGroupUser()
	return uuo
}

// SetUserAgent sets the "UserAgent" field.
func (uuo *UserwalletUpdateOne) SetUserAgent(s string) *UserwalletUpdateOne {
	uuo.mutation.SetUserAgent(s)
	return uuo
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableUserAgent(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetUserAgent(*s)
	}
	return uuo
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (uuo *UserwalletUpdateOne) ClearUserAgent() *UserwalletUpdateOne {
	uuo.mutation.ClearUserAgent()
	return uuo
}

// SetKYCDate sets the "KYC_Date" field.
func (uuo *UserwalletUpdateOne) SetKYCDate(t time.Time) *UserwalletUpdateOne {
	uuo.mutation.SetKYCDate(t)
	return uuo
}

// SetNillableKYCDate sets the "KYC_Date" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableKYCDate(t *time.Time) *UserwalletUpdateOne {
	if t != nil {
		uuo.SetKYCDate(*t)
	}
	return uuo
}

// ClearKYCDate clears the value of the "KYC_Date" field.
func (uuo *UserwalletUpdateOne) ClearKYCDate() *UserwalletUpdateOne {
	uuo.mutation.ClearKYCDate()
	return uuo
}

// SetATMCard sets the "ATMCard" field.
func (uuo *UserwalletUpdateOne) SetATMCard(s string) *UserwalletUpdateOne {
	uuo.mutation.SetATMCard(s)
	return uuo
}

// SetNillableATMCard sets the "ATMCard" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableATMCard(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetATMCard(*s)
	}
	return uuo
}

// ClearATMCard clears the value of the "ATMCard" field.
func (uuo *UserwalletUpdateOne) ClearATMCard() *UserwalletUpdateOne {
	uuo.mutation.ClearATMCard()
	return uuo
}

// SetAccountNo sets the "AccountNo" field.
func (uuo *UserwalletUpdateOne) SetAccountNo(s string) *UserwalletUpdateOne {
	uuo.mutation.SetAccountNo(s)
	return uuo
}

// SetNillableAccountNo sets the "AccountNo" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableAccountNo(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetAccountNo(*s)
	}
	return uuo
}

// ClearAccountNo clears the value of the "AccountNo" field.
func (uuo *UserwalletUpdateOne) ClearAccountNo() *UserwalletUpdateOne {
	uuo.mutation.ClearAccountNo()
	return uuo
}

// SetAddressDetail sets the "AddressDetail" field.
func (uuo *UserwalletUpdateOne) SetAddressDetail(s string) *UserwalletUpdateOne {
	uuo.mutation.SetAddressDetail(s)
	return uuo
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableAddressDetail(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetAddressDetail(*s)
	}
	return uuo
}

// ClearAddressDetail clears the value of the "AddressDetail" field.
func (uuo *UserwalletUpdateOne) ClearAddressDetail() *UserwalletUpdateOne {
	uuo.mutation.ClearAddressDetail()
	return uuo
}

// SetStreet sets the "Street" field.
func (uuo *UserwalletUpdateOne) SetStreet(s string) *UserwalletUpdateOne {
	uuo.mutation.SetStreet(s)
	return uuo
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableStreet(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetStreet(*s)
	}
	return uuo
}

// ClearStreet clears the value of the "Street" field.
func (uuo *UserwalletUpdateOne) ClearStreet() *UserwalletUpdateOne {
	uuo.mutation.ClearStreet()
	return uuo
}

// SetDistrict sets the "District" field.
func (uuo *UserwalletUpdateOne) SetDistrict(s string) *UserwalletUpdateOne {
	uuo.mutation.SetDistrict(s)
	return uuo
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableDistrict(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetDistrict(*s)
	}
	return uuo
}

// ClearDistrict clears the value of the "District" field.
func (uuo *UserwalletUpdateOne) ClearDistrict() *UserwalletUpdateOne {
	uuo.mutation.ClearDistrict()
	return uuo
}

// SetSubDistrict sets the "SubDistrict" field.
func (uuo *UserwalletUpdateOne) SetSubDistrict(s string) *UserwalletUpdateOne {
	uuo.mutation.SetSubDistrict(s)
	return uuo
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableSubDistrict(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetSubDistrict(*s)
	}
	return uuo
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (uuo *UserwalletUpdateOne) ClearSubDistrict() *UserwalletUpdateOne {
	uuo.mutation.ClearSubDistrict()
	return uuo
}

// SetProvince sets the "Province" field.
func (uuo *UserwalletUpdateOne) SetProvince(s string) *UserwalletUpdateOne {
	uuo.mutation.SetProvince(s)
	return uuo
}

// SetNillableProvince sets the "Province" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableProvince(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetProvince(*s)
	}
	return uuo
}

// ClearProvince clears the value of the "Province" field.
func (uuo *UserwalletUpdateOne) ClearProvince() *UserwalletUpdateOne {
	uuo.mutation.ClearProvince()
	return uuo
}

// SetPostalCode sets the "PostalCode" field.
func (uuo *UserwalletUpdateOne) SetPostalCode(s string) *UserwalletUpdateOne {
	uuo.mutation.SetPostalCode(s)
	return uuo
}

// SetNillablePostalCode sets the "PostalCode" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillablePostalCode(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetPostalCode(*s)
	}
	return uuo
}

// ClearPostalCode clears the value of the "PostalCode" field.
func (uuo *UserwalletUpdateOne) ClearPostalCode() *UserwalletUpdateOne {
	uuo.mutation.ClearPostalCode()
	return uuo
}

// SetIsKYC sets the "isKYC" field.
func (uuo *UserwalletUpdateOne) SetIsKYC(s string) *UserwalletUpdateOne {
	uuo.mutation.SetIsKYC(s)
	return uuo
}

// SetNillableIsKYC sets the "isKYC" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableIsKYC(s *string) *UserwalletUpdateOne {
	if s != nil {
		uuo.SetIsKYC(*s)
	}
	return uuo
}

// ClearIsKYC clears the value of the "isKYC" field.
func (uuo *UserwalletUpdateOne) ClearIsKYC() *UserwalletUpdateOne {
	uuo.mutation.ClearIsKYC()
	return uuo
}

// SetUpdateDate sets the "UpdateDate" field.
func (uuo *UserwalletUpdateOne) SetUpdateDate(t time.Time) *UserwalletUpdateOne {
	uuo.mutation.SetUpdateDate(t)
	return uuo
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableUpdateDate(t *time.Time) *UserwalletUpdateOne {
	if t != nil {
		uuo.SetUpdateDate(*t)
	}
	return uuo
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (uuo *UserwalletUpdateOne) ClearUpdateDate() *UserwalletUpdateOne {
	uuo.mutation.ClearUpdateDate()
	return uuo
}

// SetOccupationId sets the "OccupationId" field.
func (uuo *UserwalletUpdateOne) SetOccupationId(i int) *UserwalletUpdateOne {
	uuo.mutation.ResetOccupationId()
	uuo.mutation.SetOccupationId(i)
	return uuo
}

// SetNillableOccupationId sets the "OccupationId" field if the given value is not nil.
func (uuo *UserwalletUpdateOne) SetNillableOccupationId(i *int) *UserwalletUpdateOne {
	if i != nil {
		uuo.SetOccupationId(*i)
	}
	return uuo
}

// AddOccupationId adds i to the "OccupationId" field.
func (uuo *UserwalletUpdateOne) AddOccupationId(i int) *UserwalletUpdateOne {
	uuo.mutation.AddOccupationId(i)
	return uuo
}

// ClearOccupationId clears the value of the "OccupationId" field.
func (uuo *UserwalletUpdateOne) ClearOccupationId() *UserwalletUpdateOne {
	uuo.mutation.ClearOccupationId()
	return uuo
}

// Mutation returns the UserwalletMutation object of the builder.
func (uuo *UserwalletUpdateOne) Mutation() *UserwalletMutation {
	return uuo.mutation
}

// Save executes the query and returns the updated Userwallet entity.
func (uuo *UserwalletUpdateOne) Save(ctx context.Context) (*Userwallet, error) {
	var (
		err  error
		node *Userwallet
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserwalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserwalletUpdateOne) SaveX(ctx context.Context) *Userwallet {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserwalletUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserwalletUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserwalletUpdateOne) check() error {
	if v, ok := uuo.mutation.Walletid(); ok {
		if err := userwallet.WalletidValidator(v); err != nil {
			return &ValidationError{Name: "walletid", err: fmt.Errorf("ent: validator failed for field \"walletid\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.WalletTypeName(); ok {
		if err := userwallet.WalletTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletTypeName", err: fmt.Errorf("ent: validator failed for field \"WalletTypeName\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.WalletPhoneno(); ok {
		if err := userwallet.WalletPhonenoValidator(v); err != nil {
			return &ValidationError{Name: "WalletPhoneno", err: fmt.Errorf("ent: validator failed for field \"WalletPhoneno\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.WalletName(); ok {
		if err := userwallet.WalletNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletName", err: fmt.Errorf("ent: validator failed for field \"WalletName\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.CitizenId(); ok {
		if err := userwallet.CitizenIdValidator(v); err != nil {
			return &ValidationError{Name: "CitizenId", err: fmt.Errorf("ent: validator failed for field \"CitizenId\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Status(); ok {
		if err := userwallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.UserAgent(); ok {
		if err := userwallet.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "UserAgent", err: fmt.Errorf("ent: validator failed for field \"UserAgent\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.ATMCard(); ok {
		if err := userwallet.ATMCardValidator(v); err != nil {
			return &ValidationError{Name: "ATMCard", err: fmt.Errorf("ent: validator failed for field \"ATMCard\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.AccountNo(); ok {
		if err := userwallet.AccountNoValidator(v); err != nil {
			return &ValidationError{Name: "AccountNo", err: fmt.Errorf("ent: validator failed for field \"AccountNo\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Province(); ok {
		if err := userwallet.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "Province", err: fmt.Errorf("ent: validator failed for field \"Province\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.PostalCode(); ok {
		if err := userwallet.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "PostalCode", err: fmt.Errorf("ent: validator failed for field \"PostalCode\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.IsKYC(); ok {
		if err := userwallet.IsKYCValidator(v); err != nil {
			return &ValidationError{Name: "isKYC", err: fmt.Errorf("ent: validator failed for field \"isKYC\": %w", err)}
		}
	}
	return nil
}

func (uuo *UserwalletUpdateOne) sqlSave(ctx context.Context) (_node *Userwallet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userwallet.Table,
			Columns: userwallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userwallet.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Userwallet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Walletid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldWalletid,
		})
	}
	if value, ok := uuo.mutation.WalletTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldWalletTypeName,
		})
	}
	if uuo.mutation.WalletTypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldWalletTypeName,
		})
	}
	if value, ok := uuo.mutation.WalletPhoneno(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldWalletPhoneno,
		})
	}
	if uuo.mutation.WalletPhonenoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldWalletPhoneno,
		})
	}
	if value, ok := uuo.mutation.WalletName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldWalletName,
		})
	}
	if uuo.mutation.WalletNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldWalletName,
		})
	}
	if value, ok := uuo.mutation.CitizenId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldCitizenId,
		})
	}
	if uuo.mutation.CitizenIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldCitizenId,
		})
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldStatus,
		})
	}
	if uuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldStatus,
		})
	}
	if value, ok := uuo.mutation.RegisterDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldRegisterDate,
		})
	}
	if uuo.mutation.RegisterDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userwallet.FieldRegisterDate,
		})
	}
	if value, ok := uuo.mutation.GroupUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldGroupUser,
		})
	}
	if value, ok := uuo.mutation.AddedGroupUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldGroupUser,
		})
	}
	if uuo.mutation.GroupUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: userwallet.FieldGroupUser,
		})
	}
	if value, ok := uuo.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldUserAgent,
		})
	}
	if uuo.mutation.UserAgentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldUserAgent,
		})
	}
	if value, ok := uuo.mutation.KYCDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldKYCDate,
		})
	}
	if uuo.mutation.KYCDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userwallet.FieldKYCDate,
		})
	}
	if value, ok := uuo.mutation.ATMCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldATMCard,
		})
	}
	if uuo.mutation.ATMCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldATMCard,
		})
	}
	if value, ok := uuo.mutation.AccountNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldAccountNo,
		})
	}
	if uuo.mutation.AccountNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldAccountNo,
		})
	}
	if value, ok := uuo.mutation.AddressDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldAddressDetail,
		})
	}
	if uuo.mutation.AddressDetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldAddressDetail,
		})
	}
	if value, ok := uuo.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldStreet,
		})
	}
	if uuo.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldStreet,
		})
	}
	if value, ok := uuo.mutation.District(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldDistrict,
		})
	}
	if uuo.mutation.DistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldDistrict,
		})
	}
	if value, ok := uuo.mutation.SubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldSubDistrict,
		})
	}
	if uuo.mutation.SubDistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldSubDistrict,
		})
	}
	if value, ok := uuo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldProvince,
		})
	}
	if uuo.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldProvince,
		})
	}
	if value, ok := uuo.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldPostalCode,
		})
	}
	if uuo.mutation.PostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldPostalCode,
		})
	}
	if value, ok := uuo.mutation.IsKYC(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwallet.FieldIsKYC,
		})
	}
	if uuo.mutation.IsKYCCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userwallet.FieldIsKYC,
		})
	}
	if value, ok := uuo.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldUpdateDate,
		})
	}
	if uuo.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userwallet.FieldUpdateDate,
		})
	}
	if value, ok := uuo.mutation.OccupationId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldOccupationId,
		})
	}
	if value, ok := uuo.mutation.AddedOccupationId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userwallet.FieldOccupationId,
		})
	}
	if uuo.mutation.OccupationIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: userwallet.FieldOccupationId,
		})
	}
	_node = &Userwallet{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userwallet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
