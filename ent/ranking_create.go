// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-report2/ent/ranking"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RankingCreate is the builder for creating a Ranking entity.
type RankingCreate struct {
	config
	mutation *RankingMutation
	hooks    []Hook
}

// SetWalletID sets the "WalletID" field.
func (rc *RankingCreate) SetWalletID(s string) *RankingCreate {
	rc.mutation.SetWalletID(s)
	return rc
}

// SetName sets the "Name" field.
func (rc *RankingCreate) SetName(s string) *RankingCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (rc *RankingCreate) SetNillableName(s *string) *RankingCreate {
	if s != nil {
		rc.SetName(*s)
	}
	return rc
}

// SetTaxID sets the "TaxID" field.
func (rc *RankingCreate) SetTaxID(s string) *RankingCreate {
	rc.mutation.SetTaxID(s)
	return rc
}

// SetNillableTaxID sets the "TaxID" field if the given value is not nil.
func (rc *RankingCreate) SetNillableTaxID(s *string) *RankingCreate {
	if s != nil {
		rc.SetTaxID(*s)
	}
	return rc
}

// SetProvinceNameTH sets the "ProvinceNameTH" field.
func (rc *RankingCreate) SetProvinceNameTH(s string) *RankingCreate {
	rc.mutation.SetProvinceNameTH(s)
	return rc
}

// SetNillableProvinceNameTH sets the "ProvinceNameTH" field if the given value is not nil.
func (rc *RankingCreate) SetNillableProvinceNameTH(s *string) *RankingCreate {
	if s != nil {
		rc.SetProvinceNameTH(*s)
	}
	return rc
}

// SetDistrictNameTH sets the "DistrictNameTH" field.
func (rc *RankingCreate) SetDistrictNameTH(s string) *RankingCreate {
	rc.mutation.SetDistrictNameTH(s)
	return rc
}

// SetNillableDistrictNameTH sets the "DistrictNameTH" field if the given value is not nil.
func (rc *RankingCreate) SetNillableDistrictNameTH(s *string) *RankingCreate {
	if s != nil {
		rc.SetDistrictNameTH(*s)
	}
	return rc
}

// SetDistrictNameEN sets the "DistrictNameEN" field.
func (rc *RankingCreate) SetDistrictNameEN(s string) *RankingCreate {
	rc.mutation.SetDistrictNameEN(s)
	return rc
}

// SetNillableDistrictNameEN sets the "DistrictNameEN" field if the given value is not nil.
func (rc *RankingCreate) SetNillableDistrictNameEN(s *string) *RankingCreate {
	if s != nil {
		rc.SetDistrictNameEN(*s)
	}
	return rc
}

// SetOccupationName sets the "OccupationName" field.
func (rc *RankingCreate) SetOccupationName(s string) *RankingCreate {
	rc.mutation.SetOccupationName(s)
	return rc
}

// SetNillableOccupationName sets the "OccupationName" field if the given value is not nil.
func (rc *RankingCreate) SetNillableOccupationName(s *string) *RankingCreate {
	if s != nil {
		rc.SetOccupationName(*s)
	}
	return rc
}

// SetLastRank sets the "LastRank" field.
func (rc *RankingCreate) SetLastRank(i int) *RankingCreate {
	rc.mutation.SetLastRank(i)
	return rc
}

// SetNillableLastRank sets the "LastRank" field if the given value is not nil.
func (rc *RankingCreate) SetNillableLastRank(i *int) *RankingCreate {
	if i != nil {
		rc.SetLastRank(*i)
	}
	return rc
}

// SetCurrentRank sets the "CurrentRank" field.
func (rc *RankingCreate) SetCurrentRank(i int) *RankingCreate {
	rc.mutation.SetCurrentRank(i)
	return rc
}

// SetNillableCurrentRank sets the "CurrentRank" field if the given value is not nil.
func (rc *RankingCreate) SetNillableCurrentRank(i *int) *RankingCreate {
	if i != nil {
		rc.SetCurrentRank(*i)
	}
	return rc
}

// SetStatusRanking sets the "StatusRanking" field.
func (rc *RankingCreate) SetStatusRanking(s string) *RankingCreate {
	rc.mutation.SetStatusRanking(s)
	return rc
}

// SetNillableStatusRanking sets the "StatusRanking" field if the given value is not nil.
func (rc *RankingCreate) SetNillableStatusRanking(s *string) *RankingCreate {
	if s != nil {
		rc.SetStatusRanking(*s)
	}
	return rc
}

// SetLastDateCalRank sets the "LastDateCalRank" field.
func (rc *RankingCreate) SetLastDateCalRank(s string) *RankingCreate {
	rc.mutation.SetLastDateCalRank(s)
	return rc
}

// SetNillableLastDateCalRank sets the "LastDateCalRank" field if the given value is not nil.
func (rc *RankingCreate) SetNillableLastDateCalRank(s *string) *RankingCreate {
	if s != nil {
		rc.SetLastDateCalRank(*s)
	}
	return rc
}

// SetNextDateCalRank sets the "NextDateCalRank" field.
func (rc *RankingCreate) SetNextDateCalRank(s string) *RankingCreate {
	rc.mutation.SetNextDateCalRank(s)
	return rc
}

// SetNillableNextDateCalRank sets the "NextDateCalRank" field if the given value is not nil.
func (rc *RankingCreate) SetNillableNextDateCalRank(s *string) *RankingCreate {
	if s != nil {
		rc.SetNextDateCalRank(*s)
	}
	return rc
}

// SetStateCal sets the "StateCal" field.
func (rc *RankingCreate) SetStateCal(i int) *RankingCreate {
	rc.mutation.SetStateCal(i)
	return rc
}

// SetNillableStateCal sets the "StateCal" field if the given value is not nil.
func (rc *RankingCreate) SetNillableStateCal(i *int) *RankingCreate {
	if i != nil {
		rc.SetStateCal(*i)
	}
	return rc
}

// SetZipCode sets the "ZipCode" field.
func (rc *RankingCreate) SetZipCode(s string) *RankingCreate {
	rc.mutation.SetZipCode(s)
	return rc
}

// SetNillableZipCode sets the "ZipCode" field if the given value is not nil.
func (rc *RankingCreate) SetNillableZipCode(s *string) *RankingCreate {
	if s != nil {
		rc.SetZipCode(*s)
	}
	return rc
}

// SetTransactionFactorRank sets the "TransactionFactorRank" field.
func (rc *RankingCreate) SetTransactionFactorRank(i int) *RankingCreate {
	rc.mutation.SetTransactionFactorRank(i)
	return rc
}

// SetNillableTransactionFactorRank sets the "TransactionFactorRank" field if the given value is not nil.
func (rc *RankingCreate) SetNillableTransactionFactorRank(i *int) *RankingCreate {
	if i != nil {
		rc.SetTransactionFactorRank(*i)
	}
	return rc
}

// SetRegisDate sets the "RegisDate" field.
func (rc *RankingCreate) SetRegisDate(t time.Time) *RankingCreate {
	rc.mutation.SetRegisDate(t)
	return rc
}

// SetNillableRegisDate sets the "RegisDate" field if the given value is not nil.
func (rc *RankingCreate) SetNillableRegisDate(t *time.Time) *RankingCreate {
	if t != nil {
		rc.SetRegisDate(*t)
	}
	return rc
}

// SetSubDistrict sets the "SubDistrict" field.
func (rc *RankingCreate) SetSubDistrict(s string) *RankingCreate {
	rc.mutation.SetSubDistrict(s)
	return rc
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (rc *RankingCreate) SetNillableSubDistrict(s *string) *RankingCreate {
	if s != nil {
		rc.SetSubDistrict(*s)
	}
	return rc
}

// SetPhoneno sets the "Phoneno" field.
func (rc *RankingCreate) SetPhoneno(s string) *RankingCreate {
	rc.mutation.SetPhoneno(s)
	return rc
}

// SetNillablePhoneno sets the "Phoneno" field if the given value is not nil.
func (rc *RankingCreate) SetNillablePhoneno(s *string) *RankingCreate {
	if s != nil {
		rc.SetPhoneno(*s)
	}
	return rc
}

// SetAddressDetail sets the "AddressDetail" field.
func (rc *RankingCreate) SetAddressDetail(s string) *RankingCreate {
	rc.mutation.SetAddressDetail(s)
	return rc
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (rc *RankingCreate) SetNillableAddressDetail(s *string) *RankingCreate {
	if s != nil {
		rc.SetAddressDetail(*s)
	}
	return rc
}

// SetStreet sets the "Street" field.
func (rc *RankingCreate) SetStreet(s string) *RankingCreate {
	rc.mutation.SetStreet(s)
	return rc
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (rc *RankingCreate) SetNillableStreet(s *string) *RankingCreate {
	if s != nil {
		rc.SetStreet(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RankingCreate) SetID(i int) *RankingCreate {
	rc.mutation.SetID(i)
	return rc
}

// Mutation returns the RankingMutation object of the builder.
func (rc *RankingCreate) Mutation() *RankingMutation {
	return rc.mutation
}

// Save creates the Ranking in the database.
func (rc *RankingCreate) Save(ctx context.Context) (*Ranking, error) {
	var (
		err  error
		node *Ranking
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RankingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RankingCreate) SaveX(ctx context.Context) *Ranking {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rc *RankingCreate) check() error {
	if _, ok := rc.mutation.WalletID(); !ok {
		return &ValidationError{Name: "WalletID", err: errors.New("ent: missing required field \"WalletID\"")}
	}
	if v, ok := rc.mutation.WalletID(); ok {
		if err := ranking.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := ranking.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := rc.mutation.TaxID(); ok {
		if err := ranking.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "TaxID", err: fmt.Errorf("ent: validator failed for field \"TaxID\": %w", err)}
		}
	}
	if v, ok := rc.mutation.ProvinceNameTH(); ok {
		if err := ranking.ProvinceNameTHValidator(v); err != nil {
			return &ValidationError{Name: "ProvinceNameTH", err: fmt.Errorf("ent: validator failed for field \"ProvinceNameTH\": %w", err)}
		}
	}
	if v, ok := rc.mutation.DistrictNameTH(); ok {
		if err := ranking.DistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"DistrictNameTH\": %w", err)}
		}
	}
	if v, ok := rc.mutation.DistrictNameEN(); ok {
		if err := ranking.DistrictNameENValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameEN", err: fmt.Errorf("ent: validator failed for field \"DistrictNameEN\": %w", err)}
		}
	}
	if v, ok := rc.mutation.OccupationName(); ok {
		if err := ranking.OccupationNameValidator(v); err != nil {
			return &ValidationError{Name: "OccupationName", err: fmt.Errorf("ent: validator failed for field \"OccupationName\": %w", err)}
		}
	}
	if v, ok := rc.mutation.StatusRanking(); ok {
		if err := ranking.StatusRankingValidator(v); err != nil {
			return &ValidationError{Name: "StatusRanking", err: fmt.Errorf("ent: validator failed for field \"StatusRanking\": %w", err)}
		}
	}
	if v, ok := rc.mutation.LastDateCalRank(); ok {
		if err := ranking.LastDateCalRankValidator(v); err != nil {
			return &ValidationError{Name: "LastDateCalRank", err: fmt.Errorf("ent: validator failed for field \"LastDateCalRank\": %w", err)}
		}
	}
	if v, ok := rc.mutation.NextDateCalRank(); ok {
		if err := ranking.NextDateCalRankValidator(v); err != nil {
			return &ValidationError{Name: "NextDateCalRank", err: fmt.Errorf("ent: validator failed for field \"NextDateCalRank\": %w", err)}
		}
	}
	if v, ok := rc.mutation.ZipCode(); ok {
		if err := ranking.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "ZipCode", err: fmt.Errorf("ent: validator failed for field \"ZipCode\": %w", err)}
		}
	}
	if v, ok := rc.mutation.SubDistrict(); ok {
		if err := ranking.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf("ent: validator failed for field \"SubDistrict\": %w", err)}
		}
	}
	if v, ok := rc.mutation.Phoneno(); ok {
		if err := ranking.PhonenoValidator(v); err != nil {
			return &ValidationError{Name: "Phoneno", err: fmt.Errorf("ent: validator failed for field \"Phoneno\": %w", err)}
		}
	}
	if v, ok := rc.mutation.AddressDetail(); ok {
		if err := ranking.AddressDetailValidator(v); err != nil {
			return &ValidationError{Name: "AddressDetail", err: fmt.Errorf("ent: validator failed for field \"AddressDetail\": %w", err)}
		}
	}
	if v, ok := rc.mutation.Street(); ok {
		if err := ranking.StreetValidator(v); err != nil {
			return &ValidationError{Name: "Street", err: fmt.Errorf("ent: validator failed for field \"Street\": %w", err)}
		}
	}
	return nil
}

func (rc *RankingCreate) sqlSave(ctx context.Context) (*Ranking, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (rc *RankingCreate) createSpec() (*Ranking, *sqlgraph.CreateSpec) {
	var (
		_node = &Ranking{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ranking.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ranking.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.WalletID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldWalletID,
		})
		_node.WalletID = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rc.mutation.TaxID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldTaxID,
		})
		_node.TaxID = value
	}
	if value, ok := rc.mutation.ProvinceNameTH(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldProvinceNameTH,
		})
		_node.ProvinceNameTH = value
	}
	if value, ok := rc.mutation.DistrictNameTH(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldDistrictNameTH,
		})
		_node.DistrictNameTH = value
	}
	if value, ok := rc.mutation.DistrictNameEN(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldDistrictNameEN,
		})
		_node.DistrictNameEN = value
	}
	if value, ok := rc.mutation.OccupationName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldOccupationName,
		})
		_node.OccupationName = value
	}
	if value, ok := rc.mutation.LastRank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldLastRank,
		})
		_node.LastRank = value
	}
	if value, ok := rc.mutation.CurrentRank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldCurrentRank,
		})
		_node.CurrentRank = value
	}
	if value, ok := rc.mutation.StatusRanking(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldStatusRanking,
		})
		_node.StatusRanking = value
	}
	if value, ok := rc.mutation.LastDateCalRank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldLastDateCalRank,
		})
		_node.LastDateCalRank = value
	}
	if value, ok := rc.mutation.NextDateCalRank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldNextDateCalRank,
		})
		_node.NextDateCalRank = value
	}
	if value, ok := rc.mutation.StateCal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldStateCal,
		})
		_node.StateCal = value
	}
	if value, ok := rc.mutation.ZipCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldZipCode,
		})
		_node.ZipCode = &value
	}
	if value, ok := rc.mutation.TransactionFactorRank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldTransactionFactorRank,
		})
		_node.TransactionFactorRank = value
	}
	if value, ok := rc.mutation.RegisDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ranking.FieldRegisDate,
		})
		_node.RegisDate = &value
	}
	if value, ok := rc.mutation.SubDistrict(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldSubDistrict,
		})
		_node.SubDistrict = value
	}
	if value, ok := rc.mutation.Phoneno(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldPhoneno,
		})
		_node.Phoneno = &value
	}
	if value, ok := rc.mutation.AddressDetail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldAddressDetail,
		})
		_node.AddressDetail = &value
	}
	if value, ok := rc.mutation.Street(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldStreet,
		})
		_node.Street = &value
	}
	return _node, _spec
}

// RankingCreateBulk is the builder for creating many Ranking entities in bulk.
type RankingCreateBulk struct {
	config
	builders []*RankingCreate
}

// Save creates the Ranking entities in the database.
func (rcb *RankingCreateBulk) Save(ctx context.Context) ([]*Ranking, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Ranking, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RankingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RankingCreateBulk) SaveX(ctx context.Context) []*Ranking {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
