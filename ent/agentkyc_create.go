// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/agentkyc"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgentkycCreate is the builder for creating a Agentkyc entity.
type AgentkycCreate struct {
	config
	mutation *AgentkycMutation
	hooks    []Hook
}

// SetKYCDate sets the "KYCDate" field.
func (ac *AgentkycCreate) SetKYCDate(s string) *AgentkycCreate {
	ac.mutation.SetKYCDate(s)
	return ac
}

// SetNillableKYCDate sets the "KYCDate" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableKYCDate(s *string) *AgentkycCreate {
	if s != nil {
		ac.SetKYCDate(*s)
	}
	return ac
}

// SetKYCTime sets the "KYCTime" field.
func (ac *AgentkycCreate) SetKYCTime(s string) *AgentkycCreate {
	ac.mutation.SetKYCTime(s)
	return ac
}

// SetNillableKYCTime sets the "KYCTime" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableKYCTime(s *string) *AgentkycCreate {
	if s != nil {
		ac.SetKYCTime(*s)
	}
	return ac
}

// SetAgentID sets the "AgentID" field.
func (ac *AgentkycCreate) SetAgentID(s string) *AgentkycCreate {
	ac.mutation.SetAgentID(s)
	return ac
}

// SetNillableAgentID sets the "AgentID" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableAgentID(s *string) *AgentkycCreate {
	if s != nil {
		ac.SetAgentID(*s)
	}
	return ac
}

// SetAgentemail sets the "Agentemail" field.
func (ac *AgentkycCreate) SetAgentemail(s string) *AgentkycCreate {
	ac.mutation.SetAgentemail(s)
	return ac
}

// SetNillableAgentemail sets the "Agentemail" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableAgentemail(s *string) *AgentkycCreate {
	if s != nil {
		ac.SetAgentemail(*s)
	}
	return ac
}

// SetAgentNameLastname sets the "AgentNameLastname" field.
func (ac *AgentkycCreate) SetAgentNameLastname(s string) *AgentkycCreate {
	ac.mutation.SetAgentNameLastname(s)
	return ac
}

// SetNillableAgentNameLastname sets the "AgentNameLastname" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableAgentNameLastname(s *string) *AgentkycCreate {
	if s != nil {
		ac.SetAgentNameLastname(*s)
	}
	return ac
}

// SetKYCStatus sets the "KYCStatus" field.
func (ac *AgentkycCreate) SetKYCStatus(s string) *AgentkycCreate {
	ac.mutation.SetKYCStatus(s)
	return ac
}

// SetNillableKYCStatus sets the "KYCStatus" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableKYCStatus(s *string) *AgentkycCreate {
	if s != nil {
		ac.SetKYCStatus(*s)
	}
	return ac
}

// SetConsumerwalletid sets the "Consumerwalletid" field.
func (ac *AgentkycCreate) SetConsumerwalletid(s string) *AgentkycCreate {
	ac.mutation.SetConsumerwalletid(s)
	return ac
}

// SetNillableConsumerwalletid sets the "Consumerwalletid" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableConsumerwalletid(s *string) *AgentkycCreate {
	if s != nil {
		ac.SetConsumerwalletid(*s)
	}
	return ac
}

// SetKYCRespond sets the "KYCRespond" field.
func (ac *AgentkycCreate) SetKYCRespond(s string) *AgentkycCreate {
	ac.mutation.SetKYCRespond(s)
	return ac
}

// SetNillableKYCRespond sets the "KYCRespond" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableKYCRespond(s *string) *AgentkycCreate {
	if s != nil {
		ac.SetKYCRespond(*s)
	}
	return ac
}

// SetDOPARespond sets the "DOPARespond" field.
func (ac *AgentkycCreate) SetDOPARespond(s string) *AgentkycCreate {
	ac.mutation.SetDOPARespond(s)
	return ac
}

// SetNillableDOPARespond sets the "DOPARespond" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableDOPARespond(s *string) *AgentkycCreate {
	if s != nil {
		ac.SetDOPARespond(*s)
	}
	return ac
}

// SetAgentType sets the "AgentType" field.
func (ac *AgentkycCreate) SetAgentType(s string) *AgentkycCreate {
	ac.mutation.SetAgentType(s)
	return ac
}

// SetNillableAgentType sets the "AgentType" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableAgentType(s *string) *AgentkycCreate {
	if s != nil {
		ac.SetAgentType(*s)
	}
	return ac
}

// SetFileimportID sets the "FileimportID" field.
func (ac *AgentkycCreate) SetFileimportID(i int) *AgentkycCreate {
	ac.mutation.SetFileimportID(i)
	return ac
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (ac *AgentkycCreate) SetNillableFileimportID(i *int) *AgentkycCreate {
	if i != nil {
		ac.SetFileimportID(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AgentkycCreate) SetID(i int) *AgentkycCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the AgentkycMutation object of the builder.
func (ac *AgentkycCreate) Mutation() *AgentkycMutation {
	return ac.mutation
}

// Save creates the Agentkyc in the database.
func (ac *AgentkycCreate) Save(ctx context.Context) (*Agentkyc, error) {
	var (
		err  error
		node *Agentkyc
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgentkycMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgentkycCreate) SaveX(ctx context.Context) *Agentkyc {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ac *AgentkycCreate) check() error {
	if v, ok := ac.mutation.KYCDate(); ok {
		if err := agentkyc.KYCDateValidator(v); err != nil {
			return &ValidationError{Name: "KYCDate", err: fmt.Errorf("ent: validator failed for field \"KYCDate\": %w", err)}
		}
	}
	if v, ok := ac.mutation.KYCTime(); ok {
		if err := agentkyc.KYCTimeValidator(v); err != nil {
			return &ValidationError{Name: "KYCTime", err: fmt.Errorf("ent: validator failed for field \"KYCTime\": %w", err)}
		}
	}
	if v, ok := ac.mutation.AgentID(); ok {
		if err := agentkyc.AgentIDValidator(v); err != nil {
			return &ValidationError{Name: "AgentID", err: fmt.Errorf("ent: validator failed for field \"AgentID\": %w", err)}
		}
	}
	if v, ok := ac.mutation.Agentemail(); ok {
		if err := agentkyc.AgentemailValidator(v); err != nil {
			return &ValidationError{Name: "Agentemail", err: fmt.Errorf("ent: validator failed for field \"Agentemail\": %w", err)}
		}
	}
	if v, ok := ac.mutation.AgentNameLastname(); ok {
		if err := agentkyc.AgentNameLastnameValidator(v); err != nil {
			return &ValidationError{Name: "AgentNameLastname", err: fmt.Errorf("ent: validator failed for field \"AgentNameLastname\": %w", err)}
		}
	}
	if v, ok := ac.mutation.KYCStatus(); ok {
		if err := agentkyc.KYCStatusValidator(v); err != nil {
			return &ValidationError{Name: "KYCStatus", err: fmt.Errorf("ent: validator failed for field \"KYCStatus\": %w", err)}
		}
	}
	if v, ok := ac.mutation.Consumerwalletid(); ok {
		if err := agentkyc.ConsumerwalletidValidator(v); err != nil {
			return &ValidationError{Name: "Consumerwalletid", err: fmt.Errorf("ent: validator failed for field \"Consumerwalletid\": %w", err)}
		}
	}
	if v, ok := ac.mutation.KYCRespond(); ok {
		if err := agentkyc.KYCRespondValidator(v); err != nil {
			return &ValidationError{Name: "KYCRespond", err: fmt.Errorf("ent: validator failed for field \"KYCRespond\": %w", err)}
		}
	}
	if v, ok := ac.mutation.DOPARespond(); ok {
		if err := agentkyc.DOPARespondValidator(v); err != nil {
			return &ValidationError{Name: "DOPARespond", err: fmt.Errorf("ent: validator failed for field \"DOPARespond\": %w", err)}
		}
	}
	if v, ok := ac.mutation.AgentType(); ok {
		if err := agentkyc.AgentTypeValidator(v); err != nil {
			return &ValidationError{Name: "AgentType", err: fmt.Errorf("ent: validator failed for field \"AgentType\": %w", err)}
		}
	}
	return nil
}

func (ac *AgentkycCreate) sqlSave(ctx context.Context) (*Agentkyc, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (ac *AgentkycCreate) createSpec() (*Agentkyc, *sqlgraph.CreateSpec) {
	var (
		_node = &Agentkyc{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: agentkyc.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: agentkyc.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.KYCDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agentkyc.FieldKYCDate,
		})
		_node.KYCDate = &value
	}
	if value, ok := ac.mutation.KYCTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agentkyc.FieldKYCTime,
		})
		_node.KYCTime = &value
	}
	if value, ok := ac.mutation.AgentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agentkyc.FieldAgentID,
		})
		_node.AgentID = &value
	}
	if value, ok := ac.mutation.Agentemail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agentkyc.FieldAgentemail,
		})
		_node.Agentemail = &value
	}
	if value, ok := ac.mutation.AgentNameLastname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agentkyc.FieldAgentNameLastname,
		})
		_node.AgentNameLastname = &value
	}
	if value, ok := ac.mutation.KYCStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agentkyc.FieldKYCStatus,
		})
		_node.KYCStatus = &value
	}
	if value, ok := ac.mutation.Consumerwalletid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agentkyc.FieldConsumerwalletid,
		})
		_node.Consumerwalletid = &value
	}
	if value, ok := ac.mutation.KYCRespond(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agentkyc.FieldKYCRespond,
		})
		_node.KYCRespond = &value
	}
	if value, ok := ac.mutation.DOPARespond(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agentkyc.FieldDOPARespond,
		})
		_node.DOPARespond = &value
	}
	if value, ok := ac.mutation.AgentType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agentkyc.FieldAgentType,
		})
		_node.AgentType = &value
	}
	if value, ok := ac.mutation.FileimportID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: agentkyc.FieldFileimportID,
		})
		_node.FileimportID = &value
	}
	return _node, _spec
}

// AgentkycCreateBulk is the builder for creating many Agentkyc entities in bulk.
type AgentkycCreateBulk struct {
	config
	builders []*AgentkycCreate
}

// Save creates the Agentkyc entities in the database.
func (acb *AgentkycCreateBulk) Save(ctx context.Context) ([]*Agentkyc, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Agentkyc, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentkycMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AgentkycCreateBulk) SaveX(ctx context.Context) []*Agentkyc {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
