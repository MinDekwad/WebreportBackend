// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pointtransaction"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PointtransactionUpdate is the builder for updating Pointtransaction entities.
type PointtransactionUpdate struct {
	config
	hooks    []Hook
	mutation *PointtransactionMutation
}

// Where adds a new predicate for the PointtransactionUpdate builder.
func (pu *PointtransactionUpdate) Where(ps ...predicate.Pointtransaction) *PointtransactionUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetDate sets the "Date" field.
func (pu *PointtransactionUpdate) SetDate(t time.Time) *PointtransactionUpdate {
	pu.mutation.SetDate(t)
	return pu
}

// SetNillableDate sets the "Date" field if the given value is not nil.
func (pu *PointtransactionUpdate) SetNillableDate(t *time.Time) *PointtransactionUpdate {
	if t != nil {
		pu.SetDate(*t)
	}
	return pu
}

// ClearDate clears the value of the "Date" field.
func (pu *PointtransactionUpdate) ClearDate() *PointtransactionUpdate {
	pu.mutation.ClearDate()
	return pu
}

// SetWalletID sets the "WalletID" field.
func (pu *PointtransactionUpdate) SetWalletID(s string) *PointtransactionUpdate {
	pu.mutation.SetWalletID(s)
	return pu
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (pu *PointtransactionUpdate) SetNillableWalletID(s *string) *PointtransactionUpdate {
	if s != nil {
		pu.SetWalletID(*s)
	}
	return pu
}

// ClearWalletID clears the value of the "WalletID" field.
func (pu *PointtransactionUpdate) ClearWalletID() *PointtransactionUpdate {
	pu.mutation.ClearWalletID()
	return pu
}

// SetTransactionName sets the "TransactionName" field.
func (pu *PointtransactionUpdate) SetTransactionName(s string) *PointtransactionUpdate {
	pu.mutation.SetTransactionName(s)
	return pu
}

// SetNillableTransactionName sets the "TransactionName" field if the given value is not nil.
func (pu *PointtransactionUpdate) SetNillableTransactionName(s *string) *PointtransactionUpdate {
	if s != nil {
		pu.SetTransactionName(*s)
	}
	return pu
}

// ClearTransactionName clears the value of the "TransactionName" field.
func (pu *PointtransactionUpdate) ClearTransactionName() *PointtransactionUpdate {
	pu.mutation.ClearTransactionName()
	return pu
}

// SetPoint sets the "Point" field.
func (pu *PointtransactionUpdate) SetPoint(i int) *PointtransactionUpdate {
	pu.mutation.ResetPoint()
	pu.mutation.SetPoint(i)
	return pu
}

// SetNillablePoint sets the "Point" field if the given value is not nil.
func (pu *PointtransactionUpdate) SetNillablePoint(i *int) *PointtransactionUpdate {
	if i != nil {
		pu.SetPoint(*i)
	}
	return pu
}

// AddPoint adds i to the "Point" field.
func (pu *PointtransactionUpdate) AddPoint(i int) *PointtransactionUpdate {
	pu.mutation.AddPoint(i)
	return pu
}

// ClearPoint clears the value of the "Point" field.
func (pu *PointtransactionUpdate) ClearPoint() *PointtransactionUpdate {
	pu.mutation.ClearPoint()
	return pu
}

// SetReference sets the "Reference" field.
func (pu *PointtransactionUpdate) SetReference(s string) *PointtransactionUpdate {
	pu.mutation.SetReference(s)
	return pu
}

// SetNillableReference sets the "Reference" field if the given value is not nil.
func (pu *PointtransactionUpdate) SetNillableReference(s *string) *PointtransactionUpdate {
	if s != nil {
		pu.SetReference(*s)
	}
	return pu
}

// ClearReference clears the value of the "Reference" field.
func (pu *PointtransactionUpdate) ClearReference() *PointtransactionUpdate {
	pu.mutation.ClearReference()
	return pu
}

// Mutation returns the PointtransactionMutation object of the builder.
func (pu *PointtransactionUpdate) Mutation() *PointtransactionMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PointtransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointtransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PointtransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PointtransactionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PointtransactionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PointtransactionUpdate) check() error {
	if v, ok := pu.mutation.WalletID(); ok {
		if err := pointtransaction.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := pu.mutation.TransactionName(); ok {
		if err := pointtransaction.TransactionNameValidator(v); err != nil {
			return &ValidationError{Name: "TransactionName", err: fmt.Errorf("ent: validator failed for field \"TransactionName\": %w", err)}
		}
	}
	return nil
}

func (pu *PointtransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pointtransaction.Table,
			Columns: pointtransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointtransaction.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointtransaction.FieldDate,
		})
	}
	if pu.mutation.DateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointtransaction.FieldDate,
		})
	}
	if value, ok := pu.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointtransaction.FieldWalletID,
		})
	}
	if pu.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointtransaction.FieldWalletID,
		})
	}
	if value, ok := pu.mutation.TransactionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointtransaction.FieldTransactionName,
		})
	}
	if pu.mutation.TransactionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointtransaction.FieldTransactionName,
		})
	}
	if value, ok := pu.mutation.Point(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointtransaction.FieldPoint,
		})
	}
	if value, ok := pu.mutation.AddedPoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointtransaction.FieldPoint,
		})
	}
	if pu.mutation.PointCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointtransaction.FieldPoint,
		})
	}
	if value, ok := pu.mutation.Reference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointtransaction.FieldReference,
		})
	}
	if pu.mutation.ReferenceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointtransaction.FieldReference,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointtransaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PointtransactionUpdateOne is the builder for updating a single Pointtransaction entity.
type PointtransactionUpdateOne struct {
	config
	hooks    []Hook
	mutation *PointtransactionMutation
}

// SetDate sets the "Date" field.
func (puo *PointtransactionUpdateOne) SetDate(t time.Time) *PointtransactionUpdateOne {
	puo.mutation.SetDate(t)
	return puo
}

// SetNillableDate sets the "Date" field if the given value is not nil.
func (puo *PointtransactionUpdateOne) SetNillableDate(t *time.Time) *PointtransactionUpdateOne {
	if t != nil {
		puo.SetDate(*t)
	}
	return puo
}

// ClearDate clears the value of the "Date" field.
func (puo *PointtransactionUpdateOne) ClearDate() *PointtransactionUpdateOne {
	puo.mutation.ClearDate()
	return puo
}

// SetWalletID sets the "WalletID" field.
func (puo *PointtransactionUpdateOne) SetWalletID(s string) *PointtransactionUpdateOne {
	puo.mutation.SetWalletID(s)
	return puo
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (puo *PointtransactionUpdateOne) SetNillableWalletID(s *string) *PointtransactionUpdateOne {
	if s != nil {
		puo.SetWalletID(*s)
	}
	return puo
}

// ClearWalletID clears the value of the "WalletID" field.
func (puo *PointtransactionUpdateOne) ClearWalletID() *PointtransactionUpdateOne {
	puo.mutation.ClearWalletID()
	return puo
}

// SetTransactionName sets the "TransactionName" field.
func (puo *PointtransactionUpdateOne) SetTransactionName(s string) *PointtransactionUpdateOne {
	puo.mutation.SetTransactionName(s)
	return puo
}

// SetNillableTransactionName sets the "TransactionName" field if the given value is not nil.
func (puo *PointtransactionUpdateOne) SetNillableTransactionName(s *string) *PointtransactionUpdateOne {
	if s != nil {
		puo.SetTransactionName(*s)
	}
	return puo
}

// ClearTransactionName clears the value of the "TransactionName" field.
func (puo *PointtransactionUpdateOne) ClearTransactionName() *PointtransactionUpdateOne {
	puo.mutation.ClearTransactionName()
	return puo
}

// SetPoint sets the "Point" field.
func (puo *PointtransactionUpdateOne) SetPoint(i int) *PointtransactionUpdateOne {
	puo.mutation.ResetPoint()
	puo.mutation.SetPoint(i)
	return puo
}

// SetNillablePoint sets the "Point" field if the given value is not nil.
func (puo *PointtransactionUpdateOne) SetNillablePoint(i *int) *PointtransactionUpdateOne {
	if i != nil {
		puo.SetPoint(*i)
	}
	return puo
}

// AddPoint adds i to the "Point" field.
func (puo *PointtransactionUpdateOne) AddPoint(i int) *PointtransactionUpdateOne {
	puo.mutation.AddPoint(i)
	return puo
}

// ClearPoint clears the value of the "Point" field.
func (puo *PointtransactionUpdateOne) ClearPoint() *PointtransactionUpdateOne {
	puo.mutation.ClearPoint()
	return puo
}

// SetReference sets the "Reference" field.
func (puo *PointtransactionUpdateOne) SetReference(s string) *PointtransactionUpdateOne {
	puo.mutation.SetReference(s)
	return puo
}

// SetNillableReference sets the "Reference" field if the given value is not nil.
func (puo *PointtransactionUpdateOne) SetNillableReference(s *string) *PointtransactionUpdateOne {
	if s != nil {
		puo.SetReference(*s)
	}
	return puo
}

// ClearReference clears the value of the "Reference" field.
func (puo *PointtransactionUpdateOne) ClearReference() *PointtransactionUpdateOne {
	puo.mutation.ClearReference()
	return puo
}

// Mutation returns the PointtransactionMutation object of the builder.
func (puo *PointtransactionUpdateOne) Mutation() *PointtransactionMutation {
	return puo.mutation
}

// Save executes the query and returns the updated Pointtransaction entity.
func (puo *PointtransactionUpdateOne) Save(ctx context.Context) (*Pointtransaction, error) {
	var (
		err  error
		node *Pointtransaction
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointtransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PointtransactionUpdateOne) SaveX(ctx context.Context) *Pointtransaction {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PointtransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PointtransactionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PointtransactionUpdateOne) check() error {
	if v, ok := puo.mutation.WalletID(); ok {
		if err := pointtransaction.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := puo.mutation.TransactionName(); ok {
		if err := pointtransaction.TransactionNameValidator(v); err != nil {
			return &ValidationError{Name: "TransactionName", err: fmt.Errorf("ent: validator failed for field \"TransactionName\": %w", err)}
		}
	}
	return nil
}

func (puo *PointtransactionUpdateOne) sqlSave(ctx context.Context) (_node *Pointtransaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pointtransaction.Table,
			Columns: pointtransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointtransaction.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pointtransaction.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointtransaction.FieldDate,
		})
	}
	if puo.mutation.DateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointtransaction.FieldDate,
		})
	}
	if value, ok := puo.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointtransaction.FieldWalletID,
		})
	}
	if puo.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointtransaction.FieldWalletID,
		})
	}
	if value, ok := puo.mutation.TransactionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointtransaction.FieldTransactionName,
		})
	}
	if puo.mutation.TransactionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointtransaction.FieldTransactionName,
		})
	}
	if value, ok := puo.mutation.Point(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointtransaction.FieldPoint,
		})
	}
	if value, ok := puo.mutation.AddedPoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointtransaction.FieldPoint,
		})
	}
	if puo.mutation.PointCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointtransaction.FieldPoint,
		})
	}
	if value, ok := puo.mutation.Reference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointtransaction.FieldReference,
		})
	}
	if puo.mutation.ReferenceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointtransaction.FieldReference,
		})
	}
	_node = &Pointtransaction{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointtransaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
