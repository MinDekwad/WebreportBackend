// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pointtransaction"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PointtransactionCreate is the builder for creating a Pointtransaction entity.
type PointtransactionCreate struct {
	config
	mutation *PointtransactionMutation
	hooks    []Hook
}

// SetDate sets the "Date" field.
func (pc *PointtransactionCreate) SetDate(t time.Time) *PointtransactionCreate {
	pc.mutation.SetDate(t)
	return pc
}

// SetNillableDate sets the "Date" field if the given value is not nil.
func (pc *PointtransactionCreate) SetNillableDate(t *time.Time) *PointtransactionCreate {
	if t != nil {
		pc.SetDate(*t)
	}
	return pc
}

// SetWalletID sets the "WalletID" field.
func (pc *PointtransactionCreate) SetWalletID(s string) *PointtransactionCreate {
	pc.mutation.SetWalletID(s)
	return pc
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (pc *PointtransactionCreate) SetNillableWalletID(s *string) *PointtransactionCreate {
	if s != nil {
		pc.SetWalletID(*s)
	}
	return pc
}

// SetTransactionName sets the "TransactionName" field.
func (pc *PointtransactionCreate) SetTransactionName(s string) *PointtransactionCreate {
	pc.mutation.SetTransactionName(s)
	return pc
}

// SetNillableTransactionName sets the "TransactionName" field if the given value is not nil.
func (pc *PointtransactionCreate) SetNillableTransactionName(s *string) *PointtransactionCreate {
	if s != nil {
		pc.SetTransactionName(*s)
	}
	return pc
}

// SetPoint sets the "Point" field.
func (pc *PointtransactionCreate) SetPoint(i int) *PointtransactionCreate {
	pc.mutation.SetPoint(i)
	return pc
}

// SetNillablePoint sets the "Point" field if the given value is not nil.
func (pc *PointtransactionCreate) SetNillablePoint(i *int) *PointtransactionCreate {
	if i != nil {
		pc.SetPoint(*i)
	}
	return pc
}

// SetReference sets the "Reference" field.
func (pc *PointtransactionCreate) SetReference(s string) *PointtransactionCreate {
	pc.mutation.SetReference(s)
	return pc
}

// SetNillableReference sets the "Reference" field if the given value is not nil.
func (pc *PointtransactionCreate) SetNillableReference(s *string) *PointtransactionCreate {
	if s != nil {
		pc.SetReference(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PointtransactionCreate) SetID(i int) *PointtransactionCreate {
	pc.mutation.SetID(i)
	return pc
}

// Mutation returns the PointtransactionMutation object of the builder.
func (pc *PointtransactionCreate) Mutation() *PointtransactionMutation {
	return pc.mutation
}

// Save creates the Pointtransaction in the database.
func (pc *PointtransactionCreate) Save(ctx context.Context) (*Pointtransaction, error) {
	var (
		err  error
		node *Pointtransaction
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointtransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PointtransactionCreate) SaveX(ctx context.Context) *Pointtransaction {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (pc *PointtransactionCreate) check() error {
	if v, ok := pc.mutation.WalletID(); ok {
		if err := pointtransaction.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := pc.mutation.TransactionName(); ok {
		if err := pointtransaction.TransactionNameValidator(v); err != nil {
			return &ValidationError{Name: "TransactionName", err: fmt.Errorf("ent: validator failed for field \"TransactionName\": %w", err)}
		}
	}
	return nil
}

func (pc *PointtransactionCreate) sqlSave(ctx context.Context) (*Pointtransaction, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (pc *PointtransactionCreate) createSpec() (*Pointtransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Pointtransaction{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pointtransaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointtransaction.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointtransaction.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := pc.mutation.WalletID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointtransaction.FieldWalletID,
		})
		_node.WalletID = value
	}
	if value, ok := pc.mutation.TransactionName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointtransaction.FieldTransactionName,
		})
		_node.TransactionName = value
	}
	if value, ok := pc.mutation.Point(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointtransaction.FieldPoint,
		})
		_node.Point = value
	}
	if value, ok := pc.mutation.Reference(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointtransaction.FieldReference,
		})
		_node.Reference = value
	}
	return _node, _spec
}

// PointtransactionCreateBulk is the builder for creating many Pointtransaction entities in bulk.
type PointtransactionCreateBulk struct {
	config
	builders []*PointtransactionCreate
}

// Save creates the Pointtransaction entities in the database.
func (pcb *PointtransactionCreateBulk) Save(ctx context.Context) ([]*Pointtransaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pointtransaction, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PointtransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PointtransactionCreateBulk) SaveX(ctx context.Context) []*Pointtransaction {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
