// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pendingloanbinding"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PendingloanbindingCreate is the builder for creating a Pendingloanbinding entity.
type PendingloanbindingCreate struct {
	config
	mutation *PendingloanbindingMutation
	hooks    []Hook
}

// SetWalletID sets the "WalletID" field.
func (pc *PendingloanbindingCreate) SetWalletID(s string) *PendingloanbindingCreate {
	pc.mutation.SetWalletID(s)
	return pc
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (pc *PendingloanbindingCreate) SetNillableWalletID(s *string) *PendingloanbindingCreate {
	if s != nil {
		pc.SetWalletID(*s)
	}
	return pc
}

// SetNameLB sets the "NameLB" field.
func (pc *PendingloanbindingCreate) SetNameLB(s string) *PendingloanbindingCreate {
	pc.mutation.SetNameLB(s)
	return pc
}

// SetNillableNameLB sets the "NameLB" field if the given value is not nil.
func (pc *PendingloanbindingCreate) SetNillableNameLB(s *string) *PendingloanbindingCreate {
	if s != nil {
		pc.SetNameLB(*s)
	}
	return pc
}

// SetStatusGenLB sets the "StatusGenLB" field.
func (pc *PendingloanbindingCreate) SetStatusGenLB(b bool) *PendingloanbindingCreate {
	pc.mutation.SetStatusGenLB(b)
	return pc
}

// SetNillableStatusGenLB sets the "StatusGenLB" field if the given value is not nil.
func (pc *PendingloanbindingCreate) SetNillableStatusGenLB(b *bool) *PendingloanbindingCreate {
	if b != nil {
		pc.SetStatusGenLB(*b)
	}
	return pc
}

// SetPointLB sets the "PointLB" field.
func (pc *PendingloanbindingCreate) SetPointLB(i int) *PendingloanbindingCreate {
	pc.mutation.SetPointLB(i)
	return pc
}

// SetNillablePointLB sets the "PointLB" field if the given value is not nil.
func (pc *PendingloanbindingCreate) SetNillablePointLB(i *int) *PendingloanbindingCreate {
	if i != nil {
		pc.SetPointLB(*i)
	}
	return pc
}

// SetDateTime sets the "DateTime" field.
func (pc *PendingloanbindingCreate) SetDateTime(t time.Time) *PendingloanbindingCreate {
	pc.mutation.SetDateTime(t)
	return pc
}

// SetNillableDateTime sets the "DateTime" field if the given value is not nil.
func (pc *PendingloanbindingCreate) SetNillableDateTime(t *time.Time) *PendingloanbindingCreate {
	if t != nil {
		pc.SetDateTime(*t)
	}
	return pc
}

// SetDateGenLB sets the "DateGenLB" field.
func (pc *PendingloanbindingCreate) SetDateGenLB(t time.Time) *PendingloanbindingCreate {
	pc.mutation.SetDateGenLB(t)
	return pc
}

// SetNillableDateGenLB sets the "DateGenLB" field if the given value is not nil.
func (pc *PendingloanbindingCreate) SetNillableDateGenLB(t *time.Time) *PendingloanbindingCreate {
	if t != nil {
		pc.SetDateGenLB(*t)
	}
	return pc
}

// SetFileimportID sets the "FileimportID" field.
func (pc *PendingloanbindingCreate) SetFileimportID(i int) *PendingloanbindingCreate {
	pc.mutation.SetFileimportID(i)
	return pc
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (pc *PendingloanbindingCreate) SetNillableFileimportID(i *int) *PendingloanbindingCreate {
	if i != nil {
		pc.SetFileimportID(*i)
	}
	return pc
}

// SetCAWalletID sets the "CAWalletID" field.
func (pc *PendingloanbindingCreate) SetCAWalletID(s string) *PendingloanbindingCreate {
	pc.mutation.SetCAWalletID(s)
	return pc
}

// SetNillableCAWalletID sets the "CAWalletID" field if the given value is not nil.
func (pc *PendingloanbindingCreate) SetNillableCAWalletID(s *string) *PendingloanbindingCreate {
	if s != nil {
		pc.SetCAWalletID(*s)
	}
	return pc
}

// SetCAPort sets the "CAPort" field.
func (pc *PendingloanbindingCreate) SetCAPort(s string) *PendingloanbindingCreate {
	pc.mutation.SetCAPort(s)
	return pc
}

// SetNillableCAPort sets the "CAPort" field if the given value is not nil.
func (pc *PendingloanbindingCreate) SetNillableCAPort(s *string) *PendingloanbindingCreate {
	if s != nil {
		pc.SetCAPort(*s)
	}
	return pc
}

// SetMainBranch sets the "MainBranch" field.
func (pc *PendingloanbindingCreate) SetMainBranch(s string) *PendingloanbindingCreate {
	pc.mutation.SetMainBranch(s)
	return pc
}

// SetNillableMainBranch sets the "MainBranch" field if the given value is not nil.
func (pc *PendingloanbindingCreate) SetNillableMainBranch(s *string) *PendingloanbindingCreate {
	if s != nil {
		pc.SetMainBranch(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PendingloanbindingCreate) SetID(i int) *PendingloanbindingCreate {
	pc.mutation.SetID(i)
	return pc
}

// Mutation returns the PendingloanbindingMutation object of the builder.
func (pc *PendingloanbindingCreate) Mutation() *PendingloanbindingMutation {
	return pc.mutation
}

// Save creates the Pendingloanbinding in the database.
func (pc *PendingloanbindingCreate) Save(ctx context.Context) (*Pendingloanbinding, error) {
	var (
		err  error
		node *Pendingloanbinding
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PendingloanbindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PendingloanbindingCreate) SaveX(ctx context.Context) *Pendingloanbinding {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pc *PendingloanbindingCreate) defaults() {
	if _, ok := pc.mutation.StatusGenLB(); !ok {
		v := pendingloanbinding.DefaultStatusGenLB
		pc.mutation.SetStatusGenLB(v)
	}
	if _, ok := pc.mutation.PointLB(); !ok {
		v := pendingloanbinding.DefaultPointLB
		pc.mutation.SetPointLB(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PendingloanbindingCreate) check() error {
	if v, ok := pc.mutation.WalletID(); ok {
		if err := pendingloanbinding.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := pc.mutation.NameLB(); ok {
		if err := pendingloanbinding.NameLBValidator(v); err != nil {
			return &ValidationError{Name: "NameLB", err: fmt.Errorf("ent: validator failed for field \"NameLB\": %w", err)}
		}
	}
	if v, ok := pc.mutation.CAWalletID(); ok {
		if err := pendingloanbinding.CAWalletIDValidator(v); err != nil {
			return &ValidationError{Name: "CAWalletID", err: fmt.Errorf("ent: validator failed for field \"CAWalletID\": %w", err)}
		}
	}
	if v, ok := pc.mutation.CAPort(); ok {
		if err := pendingloanbinding.CAPortValidator(v); err != nil {
			return &ValidationError{Name: "CAPort", err: fmt.Errorf("ent: validator failed for field \"CAPort\": %w", err)}
		}
	}
	if v, ok := pc.mutation.MainBranch(); ok {
		if err := pendingloanbinding.MainBranchValidator(v); err != nil {
			return &ValidationError{Name: "MainBranch", err: fmt.Errorf("ent: validator failed for field \"MainBranch\": %w", err)}
		}
	}
	return nil
}

func (pc *PendingloanbindingCreate) sqlSave(ctx context.Context) (*Pendingloanbinding, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (pc *PendingloanbindingCreate) createSpec() (*Pendingloanbinding, *sqlgraph.CreateSpec) {
	var (
		_node = &Pendingloanbinding{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pendingloanbinding.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pendingloanbinding.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.WalletID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldWalletID,
		})
		_node.WalletID = value
	}
	if value, ok := pc.mutation.NameLB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldNameLB,
		})
		_node.NameLB = value
	}
	if value, ok := pc.mutation.StatusGenLB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pendingloanbinding.FieldStatusGenLB,
		})
		_node.StatusGenLB = value
	}
	if value, ok := pc.mutation.PointLB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingloanbinding.FieldPointLB,
		})
		_node.PointLB = value
	}
	if value, ok := pc.mutation.DateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pendingloanbinding.FieldDateTime,
		})
		_node.DateTime = &value
	}
	if value, ok := pc.mutation.DateGenLB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pendingloanbinding.FieldDateGenLB,
		})
		_node.DateGenLB = &value
	}
	if value, ok := pc.mutation.FileimportID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingloanbinding.FieldFileimportID,
		})
		_node.FileimportID = &value
	}
	if value, ok := pc.mutation.CAWalletID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldCAWalletID,
		})
		_node.CAWalletID = &value
	}
	if value, ok := pc.mutation.CAPort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldCAPort,
		})
		_node.CAPort = &value
	}
	if value, ok := pc.mutation.MainBranch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingloanbinding.FieldMainBranch,
		})
		_node.MainBranch = &value
	}
	return _node, _spec
}

// PendingloanbindingCreateBulk is the builder for creating many Pendingloanbinding entities in bulk.
type PendingloanbindingCreateBulk struct {
	config
	builders []*PendingloanbindingCreate
}

// Save creates the Pendingloanbinding entities in the database.
func (pcb *PendingloanbindingCreateBulk) Save(ctx context.Context) ([]*Pendingloanbinding, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pendingloanbinding, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PendingloanbindingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PendingloanbindingCreateBulk) SaveX(ctx context.Context) []*Pendingloanbinding {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
