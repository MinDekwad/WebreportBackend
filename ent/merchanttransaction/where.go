// Code generated by entc, DO NOT EDIT.

package merchanttransaction

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// DateTime applies equality check predicate on the "dateTime" field. It's identical to DateTimeEQ.
func DateTime(v time.Time) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateTime), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// PaymentType applies equality check predicate on the "PaymentType" field. It's identical to PaymentTypeEQ.
func PaymentType(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentType), v))
	})
}

// PaymentChannel applies equality check predicate on the "PaymentChannel" field. It's identical to PaymentChannelEQ.
func PaymentChannel(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentChannel), v))
	})
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// MerchantID applies equality check predicate on the "MerchantID" field. It's identical to MerchantIDEQ.
func MerchantID(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantID), v))
	})
}

// TerminalID applies equality check predicate on the "TerminalID" field. It's identical to TerminalIDEQ.
func TerminalID(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTerminalID), v))
	})
}

// MerchantFullName applies equality check predicate on the "MerchantFullName" field. It's identical to MerchantFullNameEQ.
func MerchantFullName(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantFullName), v))
	})
}

// FromAccount applies equality check predicate on the "FromAccount" field. It's identical to FromAccountEQ.
func FromAccount(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromAccount), v))
	})
}

// SettlementAccount applies equality check predicate on the "SettlementAccount" field. It's identical to SettlementAccountEQ.
func SettlementAccount(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettlementAccount), v))
	})
}

// MDRFEETHB applies equality check predicate on the "MDR_FEETHB" field. It's identical to MDRFEETHBEQ.
func MDRFEETHB(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMDRFEETHB), v))
	})
}

// TransactionFEETHB applies equality check predicate on the "TransactionFEETHB" field. It's identical to TransactionFEETHBEQ.
func TransactionFEETHB(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionFEETHB), v))
	})
}

// TotalFeeincVAT applies equality check predicate on the "TotalFeeincVAT" field. It's identical to TotalFeeincVATEQ.
func TotalFeeincVAT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalFeeincVAT), v))
	})
}

// VATTHB applies equality check predicate on the "VATTHB" field. It's identical to VATTHBEQ.
func VATTHB(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVATTHB), v))
	})
}

// TotalFeeExcVAT applies equality check predicate on the "TotalFeeExcVAT" field. It's identical to TotalFeeExcVATEQ.
func TotalFeeExcVAT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalFeeExcVAT), v))
	})
}

// WHTTHB applies equality check predicate on the "WHTTHB" field. It's identical to WHTTHBEQ.
func WHTTHB(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWHTTHB), v))
	})
}

// NetPayTHB applies equality check predicate on the "NetPayTHB" field. It's identical to NetPayTHBEQ.
func NetPayTHB(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetPayTHB), v))
	})
}

// TransactionType applies equality check predicate on the "TransactionType" field. It's identical to TransactionTypeEQ.
func TransactionType(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionType), v))
	})
}

// BankCode applies equality check predicate on the "BankCode" field. It's identical to BankCodeEQ.
func BankCode(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankCode), v))
	})
}

// FileimportID applies equality check predicate on the "FileimportID" field. It's identical to FileimportIDEQ.
func FileimportID(v int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileimportID), v))
	})
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDGT applies the GT predicate on the "transaction_id" field.
func TransactionIDGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDGTE applies the GTE predicate on the "transaction_id" field.
func TransactionIDGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLT applies the LT predicate on the "transaction_id" field.
func TransactionIDLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLTE applies the LTE predicate on the "transaction_id" field.
func TransactionIDLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDContains applies the Contains predicate on the "transaction_id" field.
func TransactionIDContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionID), v))
	})
}

// TransactionIDHasPrefix applies the HasPrefix predicate on the "transaction_id" field.
func TransactionIDHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionID), v))
	})
}

// TransactionIDHasSuffix applies the HasSuffix predicate on the "transaction_id" field.
func TransactionIDHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionID), v))
	})
}

// TransactionIDIsNil applies the IsNil predicate on the "transaction_id" field.
func TransactionIDIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransactionID)))
	})
}

// TransactionIDNotNil applies the NotNil predicate on the "transaction_id" field.
func TransactionIDNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransactionID)))
	})
}

// TransactionIDEqualFold applies the EqualFold predicate on the "transaction_id" field.
func TransactionIDEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionID), v))
	})
}

// TransactionIDContainsFold applies the ContainsFold predicate on the "transaction_id" field.
func TransactionIDContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionID), v))
	})
}

// DateTimeEQ applies the EQ predicate on the "dateTime" field.
func DateTimeEQ(v time.Time) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateTime), v))
	})
}

// DateTimeNEQ applies the NEQ predicate on the "dateTime" field.
func DateTimeNEQ(v time.Time) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateTime), v))
	})
}

// DateTimeIn applies the In predicate on the "dateTime" field.
func DateTimeIn(vs ...time.Time) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateTime), v...))
	})
}

// DateTimeNotIn applies the NotIn predicate on the "dateTime" field.
func DateTimeNotIn(vs ...time.Time) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateTime), v...))
	})
}

// DateTimeGT applies the GT predicate on the "dateTime" field.
func DateTimeGT(v time.Time) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateTime), v))
	})
}

// DateTimeGTE applies the GTE predicate on the "dateTime" field.
func DateTimeGTE(v time.Time) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateTime), v))
	})
}

// DateTimeLT applies the LT predicate on the "dateTime" field.
func DateTimeLT(v time.Time) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateTime), v))
	})
}

// DateTimeLTE applies the LTE predicate on the "dateTime" field.
func DateTimeLTE(v time.Time) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateTime), v))
	})
}

// DateTimeIsNil applies the IsNil predicate on the "dateTime" field.
func DateTimeIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateTime)))
	})
}

// DateTimeNotNil applies the NotNil predicate on the "dateTime" field.
func DateTimeNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateTime)))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// PaymentTypeEQ applies the EQ predicate on the "PaymentType" field.
func PaymentTypeEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentType), v))
	})
}

// PaymentTypeNEQ applies the NEQ predicate on the "PaymentType" field.
func PaymentTypeNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentType), v))
	})
}

// PaymentTypeIn applies the In predicate on the "PaymentType" field.
func PaymentTypeIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentType), v...))
	})
}

// PaymentTypeNotIn applies the NotIn predicate on the "PaymentType" field.
func PaymentTypeNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentType), v...))
	})
}

// PaymentTypeGT applies the GT predicate on the "PaymentType" field.
func PaymentTypeGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentType), v))
	})
}

// PaymentTypeGTE applies the GTE predicate on the "PaymentType" field.
func PaymentTypeGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentType), v))
	})
}

// PaymentTypeLT applies the LT predicate on the "PaymentType" field.
func PaymentTypeLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentType), v))
	})
}

// PaymentTypeLTE applies the LTE predicate on the "PaymentType" field.
func PaymentTypeLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentType), v))
	})
}

// PaymentTypeContains applies the Contains predicate on the "PaymentType" field.
func PaymentTypeContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaymentType), v))
	})
}

// PaymentTypeHasPrefix applies the HasPrefix predicate on the "PaymentType" field.
func PaymentTypeHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaymentType), v))
	})
}

// PaymentTypeHasSuffix applies the HasSuffix predicate on the "PaymentType" field.
func PaymentTypeHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaymentType), v))
	})
}

// PaymentTypeIsNil applies the IsNil predicate on the "PaymentType" field.
func PaymentTypeIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentType)))
	})
}

// PaymentTypeNotNil applies the NotNil predicate on the "PaymentType" field.
func PaymentTypeNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentType)))
	})
}

// PaymentTypeEqualFold applies the EqualFold predicate on the "PaymentType" field.
func PaymentTypeEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaymentType), v))
	})
}

// PaymentTypeContainsFold applies the ContainsFold predicate on the "PaymentType" field.
func PaymentTypeContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaymentType), v))
	})
}

// PaymentChannelEQ applies the EQ predicate on the "PaymentChannel" field.
func PaymentChannelEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentChannel), v))
	})
}

// PaymentChannelNEQ applies the NEQ predicate on the "PaymentChannel" field.
func PaymentChannelNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentChannel), v))
	})
}

// PaymentChannelIn applies the In predicate on the "PaymentChannel" field.
func PaymentChannelIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentChannel), v...))
	})
}

// PaymentChannelNotIn applies the NotIn predicate on the "PaymentChannel" field.
func PaymentChannelNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentChannel), v...))
	})
}

// PaymentChannelGT applies the GT predicate on the "PaymentChannel" field.
func PaymentChannelGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentChannel), v))
	})
}

// PaymentChannelGTE applies the GTE predicate on the "PaymentChannel" field.
func PaymentChannelGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentChannel), v))
	})
}

// PaymentChannelLT applies the LT predicate on the "PaymentChannel" field.
func PaymentChannelLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentChannel), v))
	})
}

// PaymentChannelLTE applies the LTE predicate on the "PaymentChannel" field.
func PaymentChannelLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentChannel), v))
	})
}

// PaymentChannelContains applies the Contains predicate on the "PaymentChannel" field.
func PaymentChannelContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaymentChannel), v))
	})
}

// PaymentChannelHasPrefix applies the HasPrefix predicate on the "PaymentChannel" field.
func PaymentChannelHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaymentChannel), v))
	})
}

// PaymentChannelHasSuffix applies the HasSuffix predicate on the "PaymentChannel" field.
func PaymentChannelHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaymentChannel), v))
	})
}

// PaymentChannelIsNil applies the IsNil predicate on the "PaymentChannel" field.
func PaymentChannelIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentChannel)))
	})
}

// PaymentChannelNotNil applies the NotNil predicate on the "PaymentChannel" field.
func PaymentChannelNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentChannel)))
	})
}

// PaymentChannelEqualFold applies the EqualFold predicate on the "PaymentChannel" field.
func PaymentChannelEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaymentChannel), v))
	})
}

// PaymentChannelContainsFold applies the ContainsFold predicate on the "PaymentChannel" field.
func PaymentChannelContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaymentChannel), v))
	})
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// MerchantIDEQ applies the EQ predicate on the "MerchantID" field.
func MerchantIDEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantID), v))
	})
}

// MerchantIDNEQ applies the NEQ predicate on the "MerchantID" field.
func MerchantIDNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMerchantID), v))
	})
}

// MerchantIDIn applies the In predicate on the "MerchantID" field.
func MerchantIDIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMerchantID), v...))
	})
}

// MerchantIDNotIn applies the NotIn predicate on the "MerchantID" field.
func MerchantIDNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMerchantID), v...))
	})
}

// MerchantIDGT applies the GT predicate on the "MerchantID" field.
func MerchantIDGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMerchantID), v))
	})
}

// MerchantIDGTE applies the GTE predicate on the "MerchantID" field.
func MerchantIDGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMerchantID), v))
	})
}

// MerchantIDLT applies the LT predicate on the "MerchantID" field.
func MerchantIDLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMerchantID), v))
	})
}

// MerchantIDLTE applies the LTE predicate on the "MerchantID" field.
func MerchantIDLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMerchantID), v))
	})
}

// MerchantIDContains applies the Contains predicate on the "MerchantID" field.
func MerchantIDContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMerchantID), v))
	})
}

// MerchantIDHasPrefix applies the HasPrefix predicate on the "MerchantID" field.
func MerchantIDHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMerchantID), v))
	})
}

// MerchantIDHasSuffix applies the HasSuffix predicate on the "MerchantID" field.
func MerchantIDHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMerchantID), v))
	})
}

// MerchantIDIsNil applies the IsNil predicate on the "MerchantID" field.
func MerchantIDIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMerchantID)))
	})
}

// MerchantIDNotNil applies the NotNil predicate on the "MerchantID" field.
func MerchantIDNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMerchantID)))
	})
}

// MerchantIDEqualFold applies the EqualFold predicate on the "MerchantID" field.
func MerchantIDEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMerchantID), v))
	})
}

// MerchantIDContainsFold applies the ContainsFold predicate on the "MerchantID" field.
func MerchantIDContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMerchantID), v))
	})
}

// TerminalIDEQ applies the EQ predicate on the "TerminalID" field.
func TerminalIDEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTerminalID), v))
	})
}

// TerminalIDNEQ applies the NEQ predicate on the "TerminalID" field.
func TerminalIDNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTerminalID), v))
	})
}

// TerminalIDIn applies the In predicate on the "TerminalID" field.
func TerminalIDIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTerminalID), v...))
	})
}

// TerminalIDNotIn applies the NotIn predicate on the "TerminalID" field.
func TerminalIDNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTerminalID), v...))
	})
}

// TerminalIDGT applies the GT predicate on the "TerminalID" field.
func TerminalIDGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTerminalID), v))
	})
}

// TerminalIDGTE applies the GTE predicate on the "TerminalID" field.
func TerminalIDGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTerminalID), v))
	})
}

// TerminalIDLT applies the LT predicate on the "TerminalID" field.
func TerminalIDLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTerminalID), v))
	})
}

// TerminalIDLTE applies the LTE predicate on the "TerminalID" field.
func TerminalIDLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTerminalID), v))
	})
}

// TerminalIDContains applies the Contains predicate on the "TerminalID" field.
func TerminalIDContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTerminalID), v))
	})
}

// TerminalIDHasPrefix applies the HasPrefix predicate on the "TerminalID" field.
func TerminalIDHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTerminalID), v))
	})
}

// TerminalIDHasSuffix applies the HasSuffix predicate on the "TerminalID" field.
func TerminalIDHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTerminalID), v))
	})
}

// TerminalIDIsNil applies the IsNil predicate on the "TerminalID" field.
func TerminalIDIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTerminalID)))
	})
}

// TerminalIDNotNil applies the NotNil predicate on the "TerminalID" field.
func TerminalIDNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTerminalID)))
	})
}

// TerminalIDEqualFold applies the EqualFold predicate on the "TerminalID" field.
func TerminalIDEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTerminalID), v))
	})
}

// TerminalIDContainsFold applies the ContainsFold predicate on the "TerminalID" field.
func TerminalIDContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTerminalID), v))
	})
}

// MerchantFullNameEQ applies the EQ predicate on the "MerchantFullName" field.
func MerchantFullNameEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantFullName), v))
	})
}

// MerchantFullNameNEQ applies the NEQ predicate on the "MerchantFullName" field.
func MerchantFullNameNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMerchantFullName), v))
	})
}

// MerchantFullNameIn applies the In predicate on the "MerchantFullName" field.
func MerchantFullNameIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMerchantFullName), v...))
	})
}

// MerchantFullNameNotIn applies the NotIn predicate on the "MerchantFullName" field.
func MerchantFullNameNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMerchantFullName), v...))
	})
}

// MerchantFullNameGT applies the GT predicate on the "MerchantFullName" field.
func MerchantFullNameGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMerchantFullName), v))
	})
}

// MerchantFullNameGTE applies the GTE predicate on the "MerchantFullName" field.
func MerchantFullNameGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMerchantFullName), v))
	})
}

// MerchantFullNameLT applies the LT predicate on the "MerchantFullName" field.
func MerchantFullNameLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMerchantFullName), v))
	})
}

// MerchantFullNameLTE applies the LTE predicate on the "MerchantFullName" field.
func MerchantFullNameLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMerchantFullName), v))
	})
}

// MerchantFullNameContains applies the Contains predicate on the "MerchantFullName" field.
func MerchantFullNameContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMerchantFullName), v))
	})
}

// MerchantFullNameHasPrefix applies the HasPrefix predicate on the "MerchantFullName" field.
func MerchantFullNameHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMerchantFullName), v))
	})
}

// MerchantFullNameHasSuffix applies the HasSuffix predicate on the "MerchantFullName" field.
func MerchantFullNameHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMerchantFullName), v))
	})
}

// MerchantFullNameIsNil applies the IsNil predicate on the "MerchantFullName" field.
func MerchantFullNameIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMerchantFullName)))
	})
}

// MerchantFullNameNotNil applies the NotNil predicate on the "MerchantFullName" field.
func MerchantFullNameNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMerchantFullName)))
	})
}

// MerchantFullNameEqualFold applies the EqualFold predicate on the "MerchantFullName" field.
func MerchantFullNameEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMerchantFullName), v))
	})
}

// MerchantFullNameContainsFold applies the ContainsFold predicate on the "MerchantFullName" field.
func MerchantFullNameContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMerchantFullName), v))
	})
}

// FromAccountEQ applies the EQ predicate on the "FromAccount" field.
func FromAccountEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromAccount), v))
	})
}

// FromAccountNEQ applies the NEQ predicate on the "FromAccount" field.
func FromAccountNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFromAccount), v))
	})
}

// FromAccountIn applies the In predicate on the "FromAccount" field.
func FromAccountIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFromAccount), v...))
	})
}

// FromAccountNotIn applies the NotIn predicate on the "FromAccount" field.
func FromAccountNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFromAccount), v...))
	})
}

// FromAccountGT applies the GT predicate on the "FromAccount" field.
func FromAccountGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFromAccount), v))
	})
}

// FromAccountGTE applies the GTE predicate on the "FromAccount" field.
func FromAccountGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFromAccount), v))
	})
}

// FromAccountLT applies the LT predicate on the "FromAccount" field.
func FromAccountLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFromAccount), v))
	})
}

// FromAccountLTE applies the LTE predicate on the "FromAccount" field.
func FromAccountLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFromAccount), v))
	})
}

// FromAccountContains applies the Contains predicate on the "FromAccount" field.
func FromAccountContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFromAccount), v))
	})
}

// FromAccountHasPrefix applies the HasPrefix predicate on the "FromAccount" field.
func FromAccountHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFromAccount), v))
	})
}

// FromAccountHasSuffix applies the HasSuffix predicate on the "FromAccount" field.
func FromAccountHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFromAccount), v))
	})
}

// FromAccountIsNil applies the IsNil predicate on the "FromAccount" field.
func FromAccountIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFromAccount)))
	})
}

// FromAccountNotNil applies the NotNil predicate on the "FromAccount" field.
func FromAccountNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFromAccount)))
	})
}

// FromAccountEqualFold applies the EqualFold predicate on the "FromAccount" field.
func FromAccountEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFromAccount), v))
	})
}

// FromAccountContainsFold applies the ContainsFold predicate on the "FromAccount" field.
func FromAccountContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFromAccount), v))
	})
}

// SettlementAccountEQ applies the EQ predicate on the "SettlementAccount" field.
func SettlementAccountEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettlementAccount), v))
	})
}

// SettlementAccountNEQ applies the NEQ predicate on the "SettlementAccount" field.
func SettlementAccountNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSettlementAccount), v))
	})
}

// SettlementAccountIn applies the In predicate on the "SettlementAccount" field.
func SettlementAccountIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSettlementAccount), v...))
	})
}

// SettlementAccountNotIn applies the NotIn predicate on the "SettlementAccount" field.
func SettlementAccountNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSettlementAccount), v...))
	})
}

// SettlementAccountGT applies the GT predicate on the "SettlementAccount" field.
func SettlementAccountGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSettlementAccount), v))
	})
}

// SettlementAccountGTE applies the GTE predicate on the "SettlementAccount" field.
func SettlementAccountGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSettlementAccount), v))
	})
}

// SettlementAccountLT applies the LT predicate on the "SettlementAccount" field.
func SettlementAccountLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSettlementAccount), v))
	})
}

// SettlementAccountLTE applies the LTE predicate on the "SettlementAccount" field.
func SettlementAccountLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSettlementAccount), v))
	})
}

// SettlementAccountContains applies the Contains predicate on the "SettlementAccount" field.
func SettlementAccountContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSettlementAccount), v))
	})
}

// SettlementAccountHasPrefix applies the HasPrefix predicate on the "SettlementAccount" field.
func SettlementAccountHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSettlementAccount), v))
	})
}

// SettlementAccountHasSuffix applies the HasSuffix predicate on the "SettlementAccount" field.
func SettlementAccountHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSettlementAccount), v))
	})
}

// SettlementAccountIsNil applies the IsNil predicate on the "SettlementAccount" field.
func SettlementAccountIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSettlementAccount)))
	})
}

// SettlementAccountNotNil applies the NotNil predicate on the "SettlementAccount" field.
func SettlementAccountNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSettlementAccount)))
	})
}

// SettlementAccountEqualFold applies the EqualFold predicate on the "SettlementAccount" field.
func SettlementAccountEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSettlementAccount), v))
	})
}

// SettlementAccountContainsFold applies the ContainsFold predicate on the "SettlementAccount" field.
func SettlementAccountContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSettlementAccount), v))
	})
}

// MDRFEETHBEQ applies the EQ predicate on the "MDR_FEETHB" field.
func MDRFEETHBEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMDRFEETHB), v))
	})
}

// MDRFEETHBNEQ applies the NEQ predicate on the "MDR_FEETHB" field.
func MDRFEETHBNEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMDRFEETHB), v))
	})
}

// MDRFEETHBIn applies the In predicate on the "MDR_FEETHB" field.
func MDRFEETHBIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMDRFEETHB), v...))
	})
}

// MDRFEETHBNotIn applies the NotIn predicate on the "MDR_FEETHB" field.
func MDRFEETHBNotIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMDRFEETHB), v...))
	})
}

// MDRFEETHBGT applies the GT predicate on the "MDR_FEETHB" field.
func MDRFEETHBGT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMDRFEETHB), v))
	})
}

// MDRFEETHBGTE applies the GTE predicate on the "MDR_FEETHB" field.
func MDRFEETHBGTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMDRFEETHB), v))
	})
}

// MDRFEETHBLT applies the LT predicate on the "MDR_FEETHB" field.
func MDRFEETHBLT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMDRFEETHB), v))
	})
}

// MDRFEETHBLTE applies the LTE predicate on the "MDR_FEETHB" field.
func MDRFEETHBLTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMDRFEETHB), v))
	})
}

// MDRFEETHBIsNil applies the IsNil predicate on the "MDR_FEETHB" field.
func MDRFEETHBIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMDRFEETHB)))
	})
}

// MDRFEETHBNotNil applies the NotNil predicate on the "MDR_FEETHB" field.
func MDRFEETHBNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMDRFEETHB)))
	})
}

// TransactionFEETHBEQ applies the EQ predicate on the "TransactionFEETHB" field.
func TransactionFEETHBEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionFEETHB), v))
	})
}

// TransactionFEETHBNEQ applies the NEQ predicate on the "TransactionFEETHB" field.
func TransactionFEETHBNEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionFEETHB), v))
	})
}

// TransactionFEETHBIn applies the In predicate on the "TransactionFEETHB" field.
func TransactionFEETHBIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransactionFEETHB), v...))
	})
}

// TransactionFEETHBNotIn applies the NotIn predicate on the "TransactionFEETHB" field.
func TransactionFEETHBNotIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransactionFEETHB), v...))
	})
}

// TransactionFEETHBGT applies the GT predicate on the "TransactionFEETHB" field.
func TransactionFEETHBGT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionFEETHB), v))
	})
}

// TransactionFEETHBGTE applies the GTE predicate on the "TransactionFEETHB" field.
func TransactionFEETHBGTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionFEETHB), v))
	})
}

// TransactionFEETHBLT applies the LT predicate on the "TransactionFEETHB" field.
func TransactionFEETHBLT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionFEETHB), v))
	})
}

// TransactionFEETHBLTE applies the LTE predicate on the "TransactionFEETHB" field.
func TransactionFEETHBLTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionFEETHB), v))
	})
}

// TransactionFEETHBIsNil applies the IsNil predicate on the "TransactionFEETHB" field.
func TransactionFEETHBIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransactionFEETHB)))
	})
}

// TransactionFEETHBNotNil applies the NotNil predicate on the "TransactionFEETHB" field.
func TransactionFEETHBNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransactionFEETHB)))
	})
}

// TotalFeeincVATEQ applies the EQ predicate on the "TotalFeeincVAT" field.
func TotalFeeincVATEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalFeeincVAT), v))
	})
}

// TotalFeeincVATNEQ applies the NEQ predicate on the "TotalFeeincVAT" field.
func TotalFeeincVATNEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalFeeincVAT), v))
	})
}

// TotalFeeincVATIn applies the In predicate on the "TotalFeeincVAT" field.
func TotalFeeincVATIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalFeeincVAT), v...))
	})
}

// TotalFeeincVATNotIn applies the NotIn predicate on the "TotalFeeincVAT" field.
func TotalFeeincVATNotIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalFeeincVAT), v...))
	})
}

// TotalFeeincVATGT applies the GT predicate on the "TotalFeeincVAT" field.
func TotalFeeincVATGT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalFeeincVAT), v))
	})
}

// TotalFeeincVATGTE applies the GTE predicate on the "TotalFeeincVAT" field.
func TotalFeeincVATGTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalFeeincVAT), v))
	})
}

// TotalFeeincVATLT applies the LT predicate on the "TotalFeeincVAT" field.
func TotalFeeincVATLT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalFeeincVAT), v))
	})
}

// TotalFeeincVATLTE applies the LTE predicate on the "TotalFeeincVAT" field.
func TotalFeeincVATLTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalFeeincVAT), v))
	})
}

// TotalFeeincVATIsNil applies the IsNil predicate on the "TotalFeeincVAT" field.
func TotalFeeincVATIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalFeeincVAT)))
	})
}

// TotalFeeincVATNotNil applies the NotNil predicate on the "TotalFeeincVAT" field.
func TotalFeeincVATNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalFeeincVAT)))
	})
}

// VATTHBEQ applies the EQ predicate on the "VATTHB" field.
func VATTHBEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVATTHB), v))
	})
}

// VATTHBNEQ applies the NEQ predicate on the "VATTHB" field.
func VATTHBNEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVATTHB), v))
	})
}

// VATTHBIn applies the In predicate on the "VATTHB" field.
func VATTHBIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVATTHB), v...))
	})
}

// VATTHBNotIn applies the NotIn predicate on the "VATTHB" field.
func VATTHBNotIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVATTHB), v...))
	})
}

// VATTHBGT applies the GT predicate on the "VATTHB" field.
func VATTHBGT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVATTHB), v))
	})
}

// VATTHBGTE applies the GTE predicate on the "VATTHB" field.
func VATTHBGTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVATTHB), v))
	})
}

// VATTHBLT applies the LT predicate on the "VATTHB" field.
func VATTHBLT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVATTHB), v))
	})
}

// VATTHBLTE applies the LTE predicate on the "VATTHB" field.
func VATTHBLTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVATTHB), v))
	})
}

// VATTHBIsNil applies the IsNil predicate on the "VATTHB" field.
func VATTHBIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVATTHB)))
	})
}

// VATTHBNotNil applies the NotNil predicate on the "VATTHB" field.
func VATTHBNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVATTHB)))
	})
}

// TotalFeeExcVATEQ applies the EQ predicate on the "TotalFeeExcVAT" field.
func TotalFeeExcVATEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalFeeExcVAT), v))
	})
}

// TotalFeeExcVATNEQ applies the NEQ predicate on the "TotalFeeExcVAT" field.
func TotalFeeExcVATNEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalFeeExcVAT), v))
	})
}

// TotalFeeExcVATIn applies the In predicate on the "TotalFeeExcVAT" field.
func TotalFeeExcVATIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalFeeExcVAT), v...))
	})
}

// TotalFeeExcVATNotIn applies the NotIn predicate on the "TotalFeeExcVAT" field.
func TotalFeeExcVATNotIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalFeeExcVAT), v...))
	})
}

// TotalFeeExcVATGT applies the GT predicate on the "TotalFeeExcVAT" field.
func TotalFeeExcVATGT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalFeeExcVAT), v))
	})
}

// TotalFeeExcVATGTE applies the GTE predicate on the "TotalFeeExcVAT" field.
func TotalFeeExcVATGTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalFeeExcVAT), v))
	})
}

// TotalFeeExcVATLT applies the LT predicate on the "TotalFeeExcVAT" field.
func TotalFeeExcVATLT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalFeeExcVAT), v))
	})
}

// TotalFeeExcVATLTE applies the LTE predicate on the "TotalFeeExcVAT" field.
func TotalFeeExcVATLTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalFeeExcVAT), v))
	})
}

// TotalFeeExcVATIsNil applies the IsNil predicate on the "TotalFeeExcVAT" field.
func TotalFeeExcVATIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalFeeExcVAT)))
	})
}

// TotalFeeExcVATNotNil applies the NotNil predicate on the "TotalFeeExcVAT" field.
func TotalFeeExcVATNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalFeeExcVAT)))
	})
}

// WHTTHBEQ applies the EQ predicate on the "WHTTHB" field.
func WHTTHBEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWHTTHB), v))
	})
}

// WHTTHBNEQ applies the NEQ predicate on the "WHTTHB" field.
func WHTTHBNEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWHTTHB), v))
	})
}

// WHTTHBIn applies the In predicate on the "WHTTHB" field.
func WHTTHBIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWHTTHB), v...))
	})
}

// WHTTHBNotIn applies the NotIn predicate on the "WHTTHB" field.
func WHTTHBNotIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWHTTHB), v...))
	})
}

// WHTTHBGT applies the GT predicate on the "WHTTHB" field.
func WHTTHBGT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWHTTHB), v))
	})
}

// WHTTHBGTE applies the GTE predicate on the "WHTTHB" field.
func WHTTHBGTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWHTTHB), v))
	})
}

// WHTTHBLT applies the LT predicate on the "WHTTHB" field.
func WHTTHBLT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWHTTHB), v))
	})
}

// WHTTHBLTE applies the LTE predicate on the "WHTTHB" field.
func WHTTHBLTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWHTTHB), v))
	})
}

// WHTTHBIsNil applies the IsNil predicate on the "WHTTHB" field.
func WHTTHBIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWHTTHB)))
	})
}

// WHTTHBNotNil applies the NotNil predicate on the "WHTTHB" field.
func WHTTHBNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWHTTHB)))
	})
}

// NetPayTHBEQ applies the EQ predicate on the "NetPayTHB" field.
func NetPayTHBEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetPayTHB), v))
	})
}

// NetPayTHBNEQ applies the NEQ predicate on the "NetPayTHB" field.
func NetPayTHBNEQ(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNetPayTHB), v))
	})
}

// NetPayTHBIn applies the In predicate on the "NetPayTHB" field.
func NetPayTHBIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNetPayTHB), v...))
	})
}

// NetPayTHBNotIn applies the NotIn predicate on the "NetPayTHB" field.
func NetPayTHBNotIn(vs ...float64) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNetPayTHB), v...))
	})
}

// NetPayTHBGT applies the GT predicate on the "NetPayTHB" field.
func NetPayTHBGT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNetPayTHB), v))
	})
}

// NetPayTHBGTE applies the GTE predicate on the "NetPayTHB" field.
func NetPayTHBGTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNetPayTHB), v))
	})
}

// NetPayTHBLT applies the LT predicate on the "NetPayTHB" field.
func NetPayTHBLT(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNetPayTHB), v))
	})
}

// NetPayTHBLTE applies the LTE predicate on the "NetPayTHB" field.
func NetPayTHBLTE(v float64) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNetPayTHB), v))
	})
}

// NetPayTHBIsNil applies the IsNil predicate on the "NetPayTHB" field.
func NetPayTHBIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNetPayTHB)))
	})
}

// NetPayTHBNotNil applies the NotNil predicate on the "NetPayTHB" field.
func NetPayTHBNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNetPayTHB)))
	})
}

// TransactionTypeEQ applies the EQ predicate on the "TransactionType" field.
func TransactionTypeEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeNEQ applies the NEQ predicate on the "TransactionType" field.
func TransactionTypeNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeIn applies the In predicate on the "TransactionType" field.
func TransactionTypeIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransactionType), v...))
	})
}

// TransactionTypeNotIn applies the NotIn predicate on the "TransactionType" field.
func TransactionTypeNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransactionType), v...))
	})
}

// TransactionTypeGT applies the GT predicate on the "TransactionType" field.
func TransactionTypeGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeGTE applies the GTE predicate on the "TransactionType" field.
func TransactionTypeGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeLT applies the LT predicate on the "TransactionType" field.
func TransactionTypeLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeLTE applies the LTE predicate on the "TransactionType" field.
func TransactionTypeLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeContains applies the Contains predicate on the "TransactionType" field.
func TransactionTypeContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeHasPrefix applies the HasPrefix predicate on the "TransactionType" field.
func TransactionTypeHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeHasSuffix applies the HasSuffix predicate on the "TransactionType" field.
func TransactionTypeHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeIsNil applies the IsNil predicate on the "TransactionType" field.
func TransactionTypeIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransactionType)))
	})
}

// TransactionTypeNotNil applies the NotNil predicate on the "TransactionType" field.
func TransactionTypeNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransactionType)))
	})
}

// TransactionTypeEqualFold applies the EqualFold predicate on the "TransactionType" field.
func TransactionTypeEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionType), v))
	})
}

// TransactionTypeContainsFold applies the ContainsFold predicate on the "TransactionType" field.
func TransactionTypeContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionType), v))
	})
}

// BankCodeEQ applies the EQ predicate on the "BankCode" field.
func BankCodeEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankCode), v))
	})
}

// BankCodeNEQ applies the NEQ predicate on the "BankCode" field.
func BankCodeNEQ(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankCode), v))
	})
}

// BankCodeIn applies the In predicate on the "BankCode" field.
func BankCodeIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankCode), v...))
	})
}

// BankCodeNotIn applies the NotIn predicate on the "BankCode" field.
func BankCodeNotIn(vs ...string) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankCode), v...))
	})
}

// BankCodeGT applies the GT predicate on the "BankCode" field.
func BankCodeGT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankCode), v))
	})
}

// BankCodeGTE applies the GTE predicate on the "BankCode" field.
func BankCodeGTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankCode), v))
	})
}

// BankCodeLT applies the LT predicate on the "BankCode" field.
func BankCodeLT(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankCode), v))
	})
}

// BankCodeLTE applies the LTE predicate on the "BankCode" field.
func BankCodeLTE(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankCode), v))
	})
}

// BankCodeContains applies the Contains predicate on the "BankCode" field.
func BankCodeContains(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankCode), v))
	})
}

// BankCodeHasPrefix applies the HasPrefix predicate on the "BankCode" field.
func BankCodeHasPrefix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankCode), v))
	})
}

// BankCodeHasSuffix applies the HasSuffix predicate on the "BankCode" field.
func BankCodeHasSuffix(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankCode), v))
	})
}

// BankCodeIsNil applies the IsNil predicate on the "BankCode" field.
func BankCodeIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBankCode)))
	})
}

// BankCodeNotNil applies the NotNil predicate on the "BankCode" field.
func BankCodeNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBankCode)))
	})
}

// BankCodeEqualFold applies the EqualFold predicate on the "BankCode" field.
func BankCodeEqualFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankCode), v))
	})
}

// BankCodeContainsFold applies the ContainsFold predicate on the "BankCode" field.
func BankCodeContainsFold(v string) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankCode), v))
	})
}

// FileimportIDEQ applies the EQ predicate on the "FileimportID" field.
func FileimportIDEQ(v int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileimportID), v))
	})
}

// FileimportIDNEQ applies the NEQ predicate on the "FileimportID" field.
func FileimportIDNEQ(v int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileimportID), v))
	})
}

// FileimportIDIn applies the In predicate on the "FileimportID" field.
func FileimportIDIn(vs ...int) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileimportID), v...))
	})
}

// FileimportIDNotIn applies the NotIn predicate on the "FileimportID" field.
func FileimportIDNotIn(vs ...int) predicate.MerchantTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileimportID), v...))
	})
}

// FileimportIDGT applies the GT predicate on the "FileimportID" field.
func FileimportIDGT(v int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileimportID), v))
	})
}

// FileimportIDGTE applies the GTE predicate on the "FileimportID" field.
func FileimportIDGTE(v int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileimportID), v))
	})
}

// FileimportIDLT applies the LT predicate on the "FileimportID" field.
func FileimportIDLT(v int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileimportID), v))
	})
}

// FileimportIDLTE applies the LTE predicate on the "FileimportID" field.
func FileimportIDLTE(v int) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileimportID), v))
	})
}

// FileimportIDIsNil applies the IsNil predicate on the "FileimportID" field.
func FileimportIDIsNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFileimportID)))
	})
}

// FileimportIDNotNil applies the NotNil predicate on the "FileimportID" field.
func FileimportIDNotNil() predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFileimportID)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MerchantTransaction) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MerchantTransaction) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MerchantTransaction) predicate.MerchantTransaction {
	return predicate.MerchantTransaction(func(s *sql.Selector) {
		p(s.Not())
	})
}
