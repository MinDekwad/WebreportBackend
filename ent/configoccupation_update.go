// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/configoccupation"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigoccupationUpdate is the builder for updating Configoccupation entities.
type ConfigoccupationUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigoccupationMutation
}

// Where adds a new predicate for the ConfigoccupationUpdate builder.
func (cu *ConfigoccupationUpdate) Where(ps ...predicate.Configoccupation) *ConfigoccupationUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetOccupationName sets the "OccupationName" field.
func (cu *ConfigoccupationUpdate) SetOccupationName(s string) *ConfigoccupationUpdate {
	cu.mutation.SetOccupationName(s)
	return cu
}

// SetNillableOccupationName sets the "OccupationName" field if the given value is not nil.
func (cu *ConfigoccupationUpdate) SetNillableOccupationName(s *string) *ConfigoccupationUpdate {
	if s != nil {
		cu.SetOccupationName(*s)
	}
	return cu
}

// ClearOccupationName clears the value of the "OccupationName" field.
func (cu *ConfigoccupationUpdate) ClearOccupationName() *ConfigoccupationUpdate {
	cu.mutation.ClearOccupationName()
	return cu
}

// SetRank sets the "Rank" field.
func (cu *ConfigoccupationUpdate) SetRank(s string) *ConfigoccupationUpdate {
	cu.mutation.SetRank(s)
	return cu
}

// SetNillableRank sets the "Rank" field if the given value is not nil.
func (cu *ConfigoccupationUpdate) SetNillableRank(s *string) *ConfigoccupationUpdate {
	if s != nil {
		cu.SetRank(*s)
	}
	return cu
}

// ClearRank clears the value of the "Rank" field.
func (cu *ConfigoccupationUpdate) ClearRank() *ConfigoccupationUpdate {
	cu.mutation.ClearRank()
	return cu
}

// SetRankTmp sets the "RankTmp" field.
func (cu *ConfigoccupationUpdate) SetRankTmp(s string) *ConfigoccupationUpdate {
	cu.mutation.SetRankTmp(s)
	return cu
}

// SetNillableRankTmp sets the "RankTmp" field if the given value is not nil.
func (cu *ConfigoccupationUpdate) SetNillableRankTmp(s *string) *ConfigoccupationUpdate {
	if s != nil {
		cu.SetRankTmp(*s)
	}
	return cu
}

// ClearRankTmp clears the value of the "RankTmp" field.
func (cu *ConfigoccupationUpdate) ClearRankTmp() *ConfigoccupationUpdate {
	cu.mutation.ClearRankTmp()
	return cu
}

// SetUpdateDate sets the "UpdateDate" field.
func (cu *ConfigoccupationUpdate) SetUpdateDate(t time.Time) *ConfigoccupationUpdate {
	cu.mutation.SetUpdateDate(t)
	return cu
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (cu *ConfigoccupationUpdate) SetNillableUpdateDate(t *time.Time) *ConfigoccupationUpdate {
	if t != nil {
		cu.SetUpdateDate(*t)
	}
	return cu
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (cu *ConfigoccupationUpdate) ClearUpdateDate() *ConfigoccupationUpdate {
	cu.mutation.ClearUpdateDate()
	return cu
}

// SetApproveBy sets the "ApproveBy" field.
func (cu *ConfigoccupationUpdate) SetApproveBy(s string) *ConfigoccupationUpdate {
	cu.mutation.SetApproveBy(s)
	return cu
}

// SetNillableApproveBy sets the "ApproveBy" field if the given value is not nil.
func (cu *ConfigoccupationUpdate) SetNillableApproveBy(s *string) *ConfigoccupationUpdate {
	if s != nil {
		cu.SetApproveBy(*s)
	}
	return cu
}

// ClearApproveBy clears the value of the "ApproveBy" field.
func (cu *ConfigoccupationUpdate) ClearApproveBy() *ConfigoccupationUpdate {
	cu.mutation.ClearApproveBy()
	return cu
}

// SetApproveDate sets the "ApproveDate" field.
func (cu *ConfigoccupationUpdate) SetApproveDate(t time.Time) *ConfigoccupationUpdate {
	cu.mutation.SetApproveDate(t)
	return cu
}

// SetNillableApproveDate sets the "ApproveDate" field if the given value is not nil.
func (cu *ConfigoccupationUpdate) SetNillableApproveDate(t *time.Time) *ConfigoccupationUpdate {
	if t != nil {
		cu.SetApproveDate(*t)
	}
	return cu
}

// ClearApproveDate clears the value of the "ApproveDate" field.
func (cu *ConfigoccupationUpdate) ClearApproveDate() *ConfigoccupationUpdate {
	cu.mutation.ClearApproveDate()
	return cu
}

// Mutation returns the ConfigoccupationMutation object of the builder.
func (cu *ConfigoccupationUpdate) Mutation() *ConfigoccupationMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConfigoccupationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigoccupationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConfigoccupationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConfigoccupationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConfigoccupationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConfigoccupationUpdate) check() error {
	if v, ok := cu.mutation.OccupationName(); ok {
		if err := configoccupation.OccupationNameValidator(v); err != nil {
			return &ValidationError{Name: "OccupationName", err: fmt.Errorf("ent: validator failed for field \"OccupationName\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Rank(); ok {
		if err := configoccupation.RankValidator(v); err != nil {
			return &ValidationError{Name: "Rank", err: fmt.Errorf("ent: validator failed for field \"Rank\": %w", err)}
		}
	}
	if v, ok := cu.mutation.RankTmp(); ok {
		if err := configoccupation.RankTmpValidator(v); err != nil {
			return &ValidationError{Name: "RankTmp", err: fmt.Errorf("ent: validator failed for field \"RankTmp\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ApproveBy(); ok {
		if err := configoccupation.ApproveByValidator(v); err != nil {
			return &ValidationError{Name: "ApproveBy", err: fmt.Errorf("ent: validator failed for field \"ApproveBy\": %w", err)}
		}
	}
	return nil
}

func (cu *ConfigoccupationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configoccupation.Table,
			Columns: configoccupation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configoccupation.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.OccupationName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldOccupationName,
		})
	}
	if cu.mutation.OccupationNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configoccupation.FieldOccupationName,
		})
	}
	if value, ok := cu.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldRank,
		})
	}
	if cu.mutation.RankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configoccupation.FieldRank,
		})
	}
	if value, ok := cu.mutation.RankTmp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldRankTmp,
		})
	}
	if cu.mutation.RankTmpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configoccupation.FieldRankTmp,
		})
	}
	if value, ok := cu.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configoccupation.FieldUpdateDate,
		})
	}
	if cu.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: configoccupation.FieldUpdateDate,
		})
	}
	if value, ok := cu.mutation.ApproveBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldApproveBy,
		})
	}
	if cu.mutation.ApproveByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configoccupation.FieldApproveBy,
		})
	}
	if value, ok := cu.mutation.ApproveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configoccupation.FieldApproveDate,
		})
	}
	if cu.mutation.ApproveDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: configoccupation.FieldApproveDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configoccupation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ConfigoccupationUpdateOne is the builder for updating a single Configoccupation entity.
type ConfigoccupationUpdateOne struct {
	config
	hooks    []Hook
	mutation *ConfigoccupationMutation
}

// SetOccupationName sets the "OccupationName" field.
func (cuo *ConfigoccupationUpdateOne) SetOccupationName(s string) *ConfigoccupationUpdateOne {
	cuo.mutation.SetOccupationName(s)
	return cuo
}

// SetNillableOccupationName sets the "OccupationName" field if the given value is not nil.
func (cuo *ConfigoccupationUpdateOne) SetNillableOccupationName(s *string) *ConfigoccupationUpdateOne {
	if s != nil {
		cuo.SetOccupationName(*s)
	}
	return cuo
}

// ClearOccupationName clears the value of the "OccupationName" field.
func (cuo *ConfigoccupationUpdateOne) ClearOccupationName() *ConfigoccupationUpdateOne {
	cuo.mutation.ClearOccupationName()
	return cuo
}

// SetRank sets the "Rank" field.
func (cuo *ConfigoccupationUpdateOne) SetRank(s string) *ConfigoccupationUpdateOne {
	cuo.mutation.SetRank(s)
	return cuo
}

// SetNillableRank sets the "Rank" field if the given value is not nil.
func (cuo *ConfigoccupationUpdateOne) SetNillableRank(s *string) *ConfigoccupationUpdateOne {
	if s != nil {
		cuo.SetRank(*s)
	}
	return cuo
}

// ClearRank clears the value of the "Rank" field.
func (cuo *ConfigoccupationUpdateOne) ClearRank() *ConfigoccupationUpdateOne {
	cuo.mutation.ClearRank()
	return cuo
}

// SetRankTmp sets the "RankTmp" field.
func (cuo *ConfigoccupationUpdateOne) SetRankTmp(s string) *ConfigoccupationUpdateOne {
	cuo.mutation.SetRankTmp(s)
	return cuo
}

// SetNillableRankTmp sets the "RankTmp" field if the given value is not nil.
func (cuo *ConfigoccupationUpdateOne) SetNillableRankTmp(s *string) *ConfigoccupationUpdateOne {
	if s != nil {
		cuo.SetRankTmp(*s)
	}
	return cuo
}

// ClearRankTmp clears the value of the "RankTmp" field.
func (cuo *ConfigoccupationUpdateOne) ClearRankTmp() *ConfigoccupationUpdateOne {
	cuo.mutation.ClearRankTmp()
	return cuo
}

// SetUpdateDate sets the "UpdateDate" field.
func (cuo *ConfigoccupationUpdateOne) SetUpdateDate(t time.Time) *ConfigoccupationUpdateOne {
	cuo.mutation.SetUpdateDate(t)
	return cuo
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (cuo *ConfigoccupationUpdateOne) SetNillableUpdateDate(t *time.Time) *ConfigoccupationUpdateOne {
	if t != nil {
		cuo.SetUpdateDate(*t)
	}
	return cuo
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (cuo *ConfigoccupationUpdateOne) ClearUpdateDate() *ConfigoccupationUpdateOne {
	cuo.mutation.ClearUpdateDate()
	return cuo
}

// SetApproveBy sets the "ApproveBy" field.
func (cuo *ConfigoccupationUpdateOne) SetApproveBy(s string) *ConfigoccupationUpdateOne {
	cuo.mutation.SetApproveBy(s)
	return cuo
}

// SetNillableApproveBy sets the "ApproveBy" field if the given value is not nil.
func (cuo *ConfigoccupationUpdateOne) SetNillableApproveBy(s *string) *ConfigoccupationUpdateOne {
	if s != nil {
		cuo.SetApproveBy(*s)
	}
	return cuo
}

// ClearApproveBy clears the value of the "ApproveBy" field.
func (cuo *ConfigoccupationUpdateOne) ClearApproveBy() *ConfigoccupationUpdateOne {
	cuo.mutation.ClearApproveBy()
	return cuo
}

// SetApproveDate sets the "ApproveDate" field.
func (cuo *ConfigoccupationUpdateOne) SetApproveDate(t time.Time) *ConfigoccupationUpdateOne {
	cuo.mutation.SetApproveDate(t)
	return cuo
}

// SetNillableApproveDate sets the "ApproveDate" field if the given value is not nil.
func (cuo *ConfigoccupationUpdateOne) SetNillableApproveDate(t *time.Time) *ConfigoccupationUpdateOne {
	if t != nil {
		cuo.SetApproveDate(*t)
	}
	return cuo
}

// ClearApproveDate clears the value of the "ApproveDate" field.
func (cuo *ConfigoccupationUpdateOne) ClearApproveDate() *ConfigoccupationUpdateOne {
	cuo.mutation.ClearApproveDate()
	return cuo
}

// Mutation returns the ConfigoccupationMutation object of the builder.
func (cuo *ConfigoccupationUpdateOne) Mutation() *ConfigoccupationMutation {
	return cuo.mutation
}

// Save executes the query and returns the updated Configoccupation entity.
func (cuo *ConfigoccupationUpdateOne) Save(ctx context.Context) (*Configoccupation, error) {
	var (
		err  error
		node *Configoccupation
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigoccupationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConfigoccupationUpdateOne) SaveX(ctx context.Context) *Configoccupation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConfigoccupationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConfigoccupationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConfigoccupationUpdateOne) check() error {
	if v, ok := cuo.mutation.OccupationName(); ok {
		if err := configoccupation.OccupationNameValidator(v); err != nil {
			return &ValidationError{Name: "OccupationName", err: fmt.Errorf("ent: validator failed for field \"OccupationName\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Rank(); ok {
		if err := configoccupation.RankValidator(v); err != nil {
			return &ValidationError{Name: "Rank", err: fmt.Errorf("ent: validator failed for field \"Rank\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.RankTmp(); ok {
		if err := configoccupation.RankTmpValidator(v); err != nil {
			return &ValidationError{Name: "RankTmp", err: fmt.Errorf("ent: validator failed for field \"RankTmp\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ApproveBy(); ok {
		if err := configoccupation.ApproveByValidator(v); err != nil {
			return &ValidationError{Name: "ApproveBy", err: fmt.Errorf("ent: validator failed for field \"ApproveBy\": %w", err)}
		}
	}
	return nil
}

func (cuo *ConfigoccupationUpdateOne) sqlSave(ctx context.Context) (_node *Configoccupation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configoccupation.Table,
			Columns: configoccupation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configoccupation.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Configoccupation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.OccupationName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldOccupationName,
		})
	}
	if cuo.mutation.OccupationNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configoccupation.FieldOccupationName,
		})
	}
	if value, ok := cuo.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldRank,
		})
	}
	if cuo.mutation.RankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configoccupation.FieldRank,
		})
	}
	if value, ok := cuo.mutation.RankTmp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldRankTmp,
		})
	}
	if cuo.mutation.RankTmpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configoccupation.FieldRankTmp,
		})
	}
	if value, ok := cuo.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configoccupation.FieldUpdateDate,
		})
	}
	if cuo.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: configoccupation.FieldUpdateDate,
		})
	}
	if value, ok := cuo.mutation.ApproveBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldApproveBy,
		})
	}
	if cuo.mutation.ApproveByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configoccupation.FieldApproveBy,
		})
	}
	if value, ok := cuo.mutation.ApproveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configoccupation.FieldApproveDate,
		})
	}
	if cuo.mutation.ApproveDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: configoccupation.FieldApproveDate,
		})
	}
	_node = &Configoccupation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configoccupation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
