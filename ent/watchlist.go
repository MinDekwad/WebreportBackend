// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/watchlist"
	"go-api-report2/ent/watchlisttype"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Watchlist is the model entity for the Watchlist schema.
type Watchlist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// TaxID holds the value of the "TaxID" field.
	TaxID string `json:"TaxID,omitempty"`
	// RankWatchlist holds the value of the "RankWatchlist" field.
	RankWatchlist int `json:"RankWatchlist,omitempty"`
	// FileimportID holds the value of the "FileimportID" field.
	FileimportID *int `json:"FileimportID,omitempty"`
	// IsDeleted holds the value of the "IsDeleted" field.
	IsDeleted bool `json:"IsDeleted,omitempty"`
	// ImportDate holds the value of the "ImportDate" field.
	ImportDate *time.Time `json:"ImportDate,omitempty"`
	// UserUpload holds the value of the "UserUpload" field.
	UserUpload *string `json:"UserUpload,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WatchlistQuery when eager-loading is set.
	Edges   WatchlistEdges `json:"edges"`
	_TypeID *int
}

// WatchlistEdges holds the relations/edges for other nodes in the graph.
type WatchlistEdges struct {
	// Related holds the value of the related edge.
	Related *Watchlisttype `json:"related,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RelatedOrErr returns the Related value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WatchlistEdges) RelatedOrErr() (*Watchlisttype, error) {
	if e.loadedTypes[0] {
		if e.Related == nil {
			// The edge related was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: watchlisttype.Label}
		}
		return e.Related, nil
	}
	return nil, &NotLoadedError{edge: "related"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Watchlist) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case watchlist.FieldIsDeleted:
			values[i] = &sql.NullBool{}
		case watchlist.FieldID, watchlist.FieldRankWatchlist, watchlist.FieldFileimportID:
			values[i] = &sql.NullInt64{}
		case watchlist.FieldName, watchlist.FieldTaxID, watchlist.FieldUserUpload:
			values[i] = &sql.NullString{}
		case watchlist.FieldImportDate:
			values[i] = &sql.NullTime{}
		case watchlist.ForeignKeys[0]: // _TypeID
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Watchlist", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Watchlist fields.
func (w *Watchlist) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case watchlist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case watchlist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case watchlist.FieldTaxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TaxID", values[i])
			} else if value.Valid {
				w.TaxID = value.String
			}
		case watchlist.FieldRankWatchlist:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RankWatchlist", values[i])
			} else if value.Valid {
				w.RankWatchlist = int(value.Int64)
			}
		case watchlist.FieldFileimportID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FileimportID", values[i])
			} else if value.Valid {
				w.FileimportID = new(int)
				*w.FileimportID = int(value.Int64)
			}
		case watchlist.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsDeleted", values[i])
			} else if value.Valid {
				w.IsDeleted = value.Bool
			}
		case watchlist.FieldImportDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ImportDate", values[i])
			} else if value.Valid {
				w.ImportDate = new(time.Time)
				*w.ImportDate = value.Time
			}
		case watchlist.FieldUserUpload:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserUpload", values[i])
			} else if value.Valid {
				w.UserUpload = new(string)
				*w.UserUpload = value.String
			}
		case watchlist.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _TypeID", value)
			} else if value.Valid {
				w._TypeID = new(int)
				*w._TypeID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRelated queries the "related" edge of the Watchlist entity.
func (w *Watchlist) QueryRelated() *WatchlisttypeQuery {
	return (&WatchlistClient{config: w.config}).QueryRelated(w)
}

// Update returns a builder for updating this Watchlist.
// Note that you need to call Watchlist.Unwrap() before calling this method if this Watchlist
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Watchlist) Update() *WatchlistUpdateOne {
	return (&WatchlistClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Watchlist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Watchlist) Unwrap() *Watchlist {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Watchlist is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Watchlist) String() string {
	var builder strings.Builder
	builder.WriteString("Watchlist(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", Name=")
	builder.WriteString(w.Name)
	builder.WriteString(", TaxID=")
	builder.WriteString(w.TaxID)
	builder.WriteString(", RankWatchlist=")
	builder.WriteString(fmt.Sprintf("%v", w.RankWatchlist))
	if v := w.FileimportID; v != nil {
		builder.WriteString(", FileimportID=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", IsDeleted=")
	builder.WriteString(fmt.Sprintf("%v", w.IsDeleted))
	if v := w.ImportDate; v != nil {
		builder.WriteString(", ImportDate=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := w.UserUpload; v != nil {
		builder.WriteString(", UserUpload=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Watchlists is a parsable slice of Watchlist.
type Watchlists []*Watchlist

func (w Watchlists) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
