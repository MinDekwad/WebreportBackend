// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/pointpendinglbtransaction"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Pointpendinglbtransaction is the model entity for the Pointpendinglbtransaction schema.
type Pointpendinglbtransaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WalletID holds the value of the "WalletID" field.
	WalletID string `json:"WalletID,omitempty"`
	// PointLB holds the value of the "PointLB" field.
	PointLB *int `json:"PointLB,omitempty"`
	// DateExportLB holds the value of the "DateExportLB" field.
	DateExportLB *time.Time `json:"DateExportLB,omitempty"`
	// DateGenLB holds the value of the "DateGenLB" field.
	DateGenLB *time.Time `json:"DateGenLB,omitempty"`
	// NoteLB holds the value of the "NoteLB" field.
	NoteLB *string `json:"NoteLB,omitempty"`
	// StatusExportLB holds the value of the "StatusExportLB" field.
	StatusExportLB bool `json:"StatusExportLB,omitempty"`
	// LBDate holds the value of the "LBDate" field.
	LBDate *time.Time `json:"LBDate,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pointpendinglbtransaction) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pointpendinglbtransaction.FieldStatusExportLB:
			values[i] = &sql.NullBool{}
		case pointpendinglbtransaction.FieldID, pointpendinglbtransaction.FieldPointLB:
			values[i] = &sql.NullInt64{}
		case pointpendinglbtransaction.FieldWalletID, pointpendinglbtransaction.FieldNoteLB:
			values[i] = &sql.NullString{}
		case pointpendinglbtransaction.FieldDateExportLB, pointpendinglbtransaction.FieldDateGenLB, pointpendinglbtransaction.FieldLBDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pointpendinglbtransaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pointpendinglbtransaction fields.
func (po *Pointpendinglbtransaction) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pointpendinglbtransaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case pointpendinglbtransaction.FieldWalletID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletID", values[i])
			} else if value.Valid {
				po.WalletID = value.String
			}
		case pointpendinglbtransaction.FieldPointLB:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PointLB", values[i])
			} else if value.Valid {
				po.PointLB = new(int)
				*po.PointLB = int(value.Int64)
			}
		case pointpendinglbtransaction.FieldDateExportLB:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DateExportLB", values[i])
			} else if value.Valid {
				po.DateExportLB = new(time.Time)
				*po.DateExportLB = value.Time
			}
		case pointpendinglbtransaction.FieldDateGenLB:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DateGenLB", values[i])
			} else if value.Valid {
				po.DateGenLB = new(time.Time)
				*po.DateGenLB = value.Time
			}
		case pointpendinglbtransaction.FieldNoteLB:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NoteLB", values[i])
			} else if value.Valid {
				po.NoteLB = new(string)
				*po.NoteLB = value.String
			}
		case pointpendinglbtransaction.FieldStatusExportLB:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field StatusExportLB", values[i])
			} else if value.Valid {
				po.StatusExportLB = value.Bool
			}
		case pointpendinglbtransaction.FieldLBDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field LBDate", values[i])
			} else if value.Valid {
				po.LBDate = new(time.Time)
				*po.LBDate = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Pointpendinglbtransaction.
// Note that you need to call Pointpendinglbtransaction.Unwrap() before calling this method if this Pointpendinglbtransaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Pointpendinglbtransaction) Update() *PointpendinglbtransactionUpdateOne {
	return (&PointpendinglbtransactionClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Pointpendinglbtransaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Pointpendinglbtransaction) Unwrap() *Pointpendinglbtransaction {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pointpendinglbtransaction is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Pointpendinglbtransaction) String() string {
	var builder strings.Builder
	builder.WriteString("Pointpendinglbtransaction(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", WalletID=")
	builder.WriteString(po.WalletID)
	if v := po.PointLB; v != nil {
		builder.WriteString(", PointLB=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := po.DateExportLB; v != nil {
		builder.WriteString(", DateExportLB=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := po.DateGenLB; v != nil {
		builder.WriteString(", DateGenLB=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := po.NoteLB; v != nil {
		builder.WriteString(", NoteLB=")
		builder.WriteString(*v)
	}
	builder.WriteString(", StatusExportLB=")
	builder.WriteString(fmt.Sprintf("%v", po.StatusExportLB))
	if v := po.LBDate; v != nil {
		builder.WriteString(", LBDate=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Pointpendinglbtransactions is a parsable slice of Pointpendinglbtransaction.
type Pointpendinglbtransactions []*Pointpendinglbtransaction

func (po Pointpendinglbtransactions) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
