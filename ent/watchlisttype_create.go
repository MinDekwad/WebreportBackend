// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-report2/ent/watchlist"
	"go-api-report2/ent/watchlisttype"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WatchlisttypeCreate is the builder for creating a Watchlisttype entity.
type WatchlisttypeCreate struct {
	config
	mutation *WatchlisttypeMutation
	hooks    []Hook
}

// SetTypeID sets the "TypeID" field.
func (wc *WatchlisttypeCreate) SetTypeID(i int) *WatchlisttypeCreate {
	wc.mutation.SetTypeID(i)
	return wc
}

// SetNillableTypeID sets the "TypeID" field if the given value is not nil.
func (wc *WatchlisttypeCreate) SetNillableTypeID(i *int) *WatchlisttypeCreate {
	if i != nil {
		wc.SetTypeID(*i)
	}
	return wc
}

// SetTypeName sets the "TypeName" field.
func (wc *WatchlisttypeCreate) SetTypeName(s string) *WatchlisttypeCreate {
	wc.mutation.SetTypeName(s)
	return wc
}

// SetTypeDescription sets the "TypeDescription" field.
func (wc *WatchlisttypeCreate) SetTypeDescription(s string) *WatchlisttypeCreate {
	wc.mutation.SetTypeDescription(s)
	return wc
}

// SetID sets the "id" field.
func (wc *WatchlisttypeCreate) SetID(i int) *WatchlisttypeCreate {
	wc.mutation.SetID(i)
	return wc
}

// AddWatchlistIDs adds the "watchlist" edge to the Watchlist entity by IDs.
func (wc *WatchlisttypeCreate) AddWatchlistIDs(ids ...int) *WatchlisttypeCreate {
	wc.mutation.AddWatchlistIDs(ids...)
	return wc
}

// AddWatchlist adds the "watchlist" edges to the Watchlist entity.
func (wc *WatchlisttypeCreate) AddWatchlist(w ...*Watchlist) *WatchlisttypeCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWatchlistIDs(ids...)
}

// Mutation returns the WatchlisttypeMutation object of the builder.
func (wc *WatchlisttypeCreate) Mutation() *WatchlisttypeMutation {
	return wc.mutation
}

// Save creates the Watchlisttype in the database.
func (wc *WatchlisttypeCreate) Save(ctx context.Context) (*Watchlisttype, error) {
	var (
		err  error
		node *Watchlisttype
	)
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WatchlisttypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			node, err = wc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WatchlisttypeCreate) SaveX(ctx context.Context) *Watchlisttype {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (wc *WatchlisttypeCreate) check() error {
	if _, ok := wc.mutation.TypeName(); !ok {
		return &ValidationError{Name: "TypeName", err: errors.New("ent: missing required field \"TypeName\"")}
	}
	if v, ok := wc.mutation.TypeName(); ok {
		if err := watchlisttype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "TypeName", err: fmt.Errorf("ent: validator failed for field \"TypeName\": %w", err)}
		}
	}
	if _, ok := wc.mutation.TypeDescription(); !ok {
		return &ValidationError{Name: "TypeDescription", err: errors.New("ent: missing required field \"TypeDescription\"")}
	}
	if v, ok := wc.mutation.TypeDescription(); ok {
		if err := watchlisttype.TypeDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "TypeDescription", err: fmt.Errorf("ent: validator failed for field \"TypeDescription\": %w", err)}
		}
	}
	return nil
}

func (wc *WatchlisttypeCreate) sqlSave(ctx context.Context) (*Watchlisttype, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (wc *WatchlisttypeCreate) createSpec() (*Watchlisttype, *sqlgraph.CreateSpec) {
	var (
		_node = &Watchlisttype{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: watchlisttype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: watchlisttype.FieldID,
			},
		}
	)
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wc.mutation.TypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisttype.FieldTypeID,
		})
		_node.TypeID = value
	}
	if value, ok := wc.mutation.TypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisttype.FieldTypeName,
		})
		_node.TypeName = value
	}
	if value, ok := wc.mutation.TypeDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisttype.FieldTypeDescription,
		})
		_node.TypeDescription = value
	}
	if nodes := wc.mutation.WatchlistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   watchlisttype.WatchlistTable,
			Columns: []string{watchlisttype.WatchlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WatchlisttypeCreateBulk is the builder for creating many Watchlisttype entities in bulk.
type WatchlisttypeCreateBulk struct {
	config
	builders []*WatchlisttypeCreate
}

// Save creates the Watchlisttype entities in the database.
func (wcb *WatchlisttypeCreateBulk) Save(ctx context.Context) ([]*Watchlisttype, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Watchlisttype, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WatchlisttypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WatchlisttypeCreateBulk) SaveX(ctx context.Context) []*Watchlisttype {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
