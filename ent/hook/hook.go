// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"go-api-report2/ent"
)

// The AgentkycFunc type is an adapter to allow the use of ordinary
// function as Agentkyc mutator.
type AgentkycFunc func(context.Context, *ent.AgentkycMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AgentkycFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AgentkycMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AgentkycMutation", m)
	}
	return f(ctx, mv)
}

// The AgenttypeFunc type is an adapter to allow the use of ordinary
// function as Agenttype mutator.
type AgenttypeFunc func(context.Context, *ent.AgenttypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AgenttypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AgenttypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AgenttypeMutation", m)
	}
	return f(ctx, mv)
}

// The AreahistoryFunc type is an adapter to allow the use of ordinary
// function as Areahistory mutator.
type AreahistoryFunc func(context.Context, *ent.AreahistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AreahistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AreahistoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AreahistoryMutation", m)
	}
	return f(ctx, mv)
}

// The BankdetailFunc type is an adapter to allow the use of ordinary
// function as Bankdetail mutator.
type BankdetailFunc func(context.Context, *ent.BankdetailMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BankdetailFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BankdetailMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BankdetailMutation", m)
	}
	return f(ctx, mv)
}

// The BulkFunc type is an adapter to allow the use of ordinary
// function as Bulk mutator.
type BulkFunc func(context.Context, *ent.BulkMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BulkFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BulkMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BulkMutation", m)
	}
	return f(ctx, mv)
}

// The ConfigareaFunc type is an adapter to allow the use of ordinary
// function as Configarea mutator.
type ConfigareaFunc func(context.Context, *ent.ConfigareaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConfigareaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConfigareaMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConfigareaMutation", m)
	}
	return f(ctx, mv)
}

// The ConfigdatecalculaterankFunc type is an adapter to allow the use of ordinary
// function as Configdatecalculaterank mutator.
type ConfigdatecalculaterankFunc func(context.Context, *ent.ConfigdatecalculaterankMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConfigdatecalculaterankFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConfigdatecalculaterankMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConfigdatecalculaterankMutation", m)
	}
	return f(ctx, mv)
}

// The ConfigoccupationFunc type is an adapter to allow the use of ordinary
// function as Configoccupation mutator.
type ConfigoccupationFunc func(context.Context, *ent.ConfigoccupationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConfigoccupationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConfigoccupationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConfigoccupationMutation", m)
	}
	return f(ctx, mv)
}

// The ConfigpointFunc type is an adapter to allow the use of ordinary
// function as Configpoint mutator.
type ConfigpointFunc func(context.Context, *ent.ConfigpointMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConfigpointFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConfigpointMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConfigpointMutation", m)
	}
	return f(ctx, mv)
}

// The ConsumerFunc type is an adapter to allow the use of ordinary
// function as Consumer mutator.
type ConsumerFunc func(context.Context, *ent.ConsumerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConsumerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConsumerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConsumerMutation", m)
	}
	return f(ctx, mv)
}

// The FileimportFunc type is an adapter to allow the use of ordinary
// function as Fileimport mutator.
type FileimportFunc func(context.Context, *ent.FileimportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FileimportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FileimportMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FileimportMutation", m)
	}
	return f(ctx, mv)
}

// The FileinsertFunc type is an adapter to allow the use of ordinary
// function as Fileinsert mutator.
type FileinsertFunc func(context.Context, *ent.FileinsertMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FileinsertFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FileinsertMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FileinsertMutation", m)
	}
	return f(ctx, mv)
}

// The LimitpointFunc type is an adapter to allow the use of ordinary
// function as Limitpoint mutator.
type LimitpointFunc func(context.Context, *ent.LimitpointMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LimitpointFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.LimitpointMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LimitpointMutation", m)
	}
	return f(ctx, mv)
}

// The LoanbindingFunc type is an adapter to allow the use of ordinary
// function as Loanbinding mutator.
type LoanbindingFunc func(context.Context, *ent.LoanbindingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LoanbindingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.LoanbindingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LoanbindingMutation", m)
	}
	return f(ctx, mv)
}

// The LogexportFunc type is an adapter to allow the use of ordinary
// function as Logexport mutator.
type LogexportFunc func(context.Context, *ent.LogexportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LogexportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.LogexportMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LogexportMutation", m)
	}
	return f(ctx, mv)
}

// The MerchantTransactionFunc type is an adapter to allow the use of ordinary
// function as MerchantTransaction mutator.
type MerchantTransactionFunc func(context.Context, *ent.MerchantTransactionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MerchantTransactionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MerchantTransactionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MerchantTransactionMutation", m)
	}
	return f(ctx, mv)
}

// The OccupationhistoryFunc type is an adapter to allow the use of ordinary
// function as Occupationhistory mutator.
type OccupationhistoryFunc func(context.Context, *ent.OccupationhistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OccupationhistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OccupationhistoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OccupationhistoryMutation", m)
	}
	return f(ctx, mv)
}

// The PendingkycFunc type is an adapter to allow the use of ordinary
// function as Pendingkyc mutator.
type PendingkycFunc func(context.Context, *ent.PendingkycMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PendingkycFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PendingkycMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PendingkycMutation", m)
	}
	return f(ctx, mv)
}

// The PendingloanbindingFunc type is an adapter to allow the use of ordinary
// function as Pendingloanbinding mutator.
type PendingloanbindingFunc func(context.Context, *ent.PendingloanbindingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PendingloanbindingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PendingloanbindingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PendingloanbindingMutation", m)
	}
	return f(ctx, mv)
}

// The PointcsvFunc type is an adapter to allow the use of ordinary
// function as Pointcsv mutator.
type PointcsvFunc func(context.Context, *ent.PointcsvMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PointcsvFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PointcsvMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PointcsvMutation", m)
	}
	return f(ctx, mv)
}

// The PointkycrvFunc type is an adapter to allow the use of ordinary
// function as Pointkycrv mutator.
type PointkycrvFunc func(context.Context, *ent.PointkycrvMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PointkycrvFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PointkycrvMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PointkycrvMutation", m)
	}
	return f(ctx, mv)
}

// The PointpendingkyctransactionFunc type is an adapter to allow the use of ordinary
// function as Pointpendingkyctransaction mutator.
type PointpendingkyctransactionFunc func(context.Context, *ent.PointpendingkyctransactionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PointpendingkyctransactionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PointpendingkyctransactionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PointpendingkyctransactionMutation", m)
	}
	return f(ctx, mv)
}

// The PointpendinglbtransactionFunc type is an adapter to allow the use of ordinary
// function as Pointpendinglbtransaction mutator.
type PointpendinglbtransactionFunc func(context.Context, *ent.PointpendinglbtransactionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PointpendinglbtransactionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PointpendinglbtransactionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PointpendinglbtransactionMutation", m)
	}
	return f(ctx, mv)
}

// The PointtransactionFunc type is an adapter to allow the use of ordinary
// function as Pointtransaction mutator.
type PointtransactionFunc func(context.Context, *ent.PointtransactionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PointtransactionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PointtransactionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PointtransactionMutation", m)
	}
	return f(ctx, mv)
}

// The RankingFunc type is an adapter to allow the use of ordinary
// function as Ranking mutator.
type RankingFunc func(context.Context, *ent.RankingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RankingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RankingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RankingMutation", m)
	}
	return f(ctx, mv)
}

// The ReportWalletFunc type is an adapter to allow the use of ordinary
// function as ReportWallet mutator.
type ReportWalletFunc func(context.Context, *ent.ReportWalletMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReportWalletFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ReportWalletMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReportWalletMutation", m)
	}
	return f(ctx, mv)
}

// The ReportwallettbFunc type is an adapter to allow the use of ordinary
// function as Reportwallettb mutator.
type ReportwallettbFunc func(context.Context, *ent.ReportwallettbMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReportwallettbFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ReportwallettbMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReportwallettbMutation", m)
	}
	return f(ctx, mv)
}

// The StatementEndingBalancFunc type is an adapter to allow the use of ordinary
// function as StatementEndingBalanc mutator.
type StatementEndingBalancFunc func(context.Context, *ent.StatementEndingBalancMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatementEndingBalancFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StatementEndingBalancMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatementEndingBalancMutation", m)
	}
	return f(ctx, mv)
}

// The TransactionfactorFunc type is an adapter to allow the use of ordinary
// function as Transactionfactor mutator.
type TransactionfactorFunc func(context.Context, *ent.TransactionfactorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TransactionfactorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TransactionfactorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TransactionfactorMutation", m)
	}
	return f(ctx, mv)
}

// The TransactionfactorhistoryFunc type is an adapter to allow the use of ordinary
// function as Transactionfactorhistory mutator.
type TransactionfactorhistoryFunc func(context.Context, *ent.TransactionfactorhistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TransactionfactorhistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TransactionfactorhistoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TransactionfactorhistoryMutation", m)
	}
	return f(ctx, mv)
}

// The TransactionfactoritemFunc type is an adapter to allow the use of ordinary
// function as Transactionfactoritem mutator.
type TransactionfactoritemFunc func(context.Context, *ent.TransactionfactoritemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TransactionfactoritemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TransactionfactoritemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TransactionfactoritemMutation", m)
	}
	return f(ctx, mv)
}

// The TransactionfactoritemtmpFunc type is an adapter to allow the use of ordinary
// function as Transactionfactoritemtmp mutator.
type TransactionfactoritemtmpFunc func(context.Context, *ent.TransactionfactoritemtmpMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TransactionfactoritemtmpFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TransactionfactoritemtmpMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TransactionfactoritemtmpMutation", m)
	}
	return f(ctx, mv)
}

// The UserprofileFunc type is an adapter to allow the use of ordinary
// function as Userprofile mutator.
type UserprofileFunc func(context.Context, *ent.UserprofileMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserprofileFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserprofileMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserprofileMutation", m)
	}
	return f(ctx, mv)
}

// The UserwalletFunc type is an adapter to allow the use of ordinary
// function as Userwallet mutator.
type UserwalletFunc func(context.Context, *ent.UserwalletMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserwalletFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserwalletMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserwalletMutation", m)
	}
	return f(ctx, mv)
}

// The WatchlistFunc type is an adapter to allow the use of ordinary
// function as Watchlist mutator.
type WatchlistFunc func(context.Context, *ent.WatchlistMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WatchlistFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WatchlistMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WatchlistMutation", m)
	}
	return f(ctx, mv)
}

// The WatchlisthistoryFunc type is an adapter to allow the use of ordinary
// function as Watchlisthistory mutator.
type WatchlisthistoryFunc func(context.Context, *ent.WatchlisthistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WatchlisthistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WatchlisthistoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WatchlisthistoryMutation", m)
	}
	return f(ctx, mv)
}

// The WatchlisttypeFunc type is an adapter to allow the use of ordinary
// function as Watchlisttype mutator.
type WatchlisttypeFunc func(context.Context, *ent.WatchlisttypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WatchlisttypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WatchlisttypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WatchlisttypeMutation", m)
	}
	return f(ctx, mv)
}

// The WritelogFunc type is an adapter to allow the use of ordinary
// function as Writelog mutator.
type WritelogFunc func(context.Context, *ent.WritelogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WritelogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WritelogMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WritelogMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
