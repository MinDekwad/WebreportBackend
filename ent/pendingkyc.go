// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/pendingkyc"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Pendingkyc is the model entity for the Pendingkyc schema.
type Pendingkyc struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WalletID holds the value of the "WalletID" field.
	WalletID string `json:"WalletID,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// AgentID holds the value of the "AgentID" field.
	AgentID *string `json:"AgentID,omitempty"`
	// AgentNameLastname holds the value of the "AgentNameLastname" field.
	AgentNameLastname *string `json:"AgentNameLastname,omitempty"`
	// KYCDate holds the value of the "KYCDate" field.
	KYCDate *string `json:"KYCDate,omitempty"`
	// DateGen holds the value of the "DateGen" field.
	DateGen *time.Time `json:"DateGen,omitempty"`
	// StatusGen holds the value of the "StatusGen" field.
	StatusGen bool `json:"StatusGen,omitempty"`
	// Point holds the value of the "Point" field.
	Point int `json:"Point,omitempty"`
	// FileimportID holds the value of the "FileimportID" field.
	FileimportID *int `json:"FileimportID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pendingkyc) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pendingkyc.FieldStatusGen:
			values[i] = &sql.NullBool{}
		case pendingkyc.FieldID, pendingkyc.FieldPoint, pendingkyc.FieldFileimportID:
			values[i] = &sql.NullInt64{}
		case pendingkyc.FieldWalletID, pendingkyc.FieldName, pendingkyc.FieldAgentID, pendingkyc.FieldAgentNameLastname, pendingkyc.FieldKYCDate:
			values[i] = &sql.NullString{}
		case pendingkyc.FieldDateGen:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pendingkyc", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pendingkyc fields.
func (pe *Pendingkyc) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pendingkyc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case pendingkyc.FieldWalletID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletID", values[i])
			} else if value.Valid {
				pe.WalletID = value.String
			}
		case pendingkyc.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case pendingkyc.FieldAgentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AgentID", values[i])
			} else if value.Valid {
				pe.AgentID = new(string)
				*pe.AgentID = value.String
			}
		case pendingkyc.FieldAgentNameLastname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AgentNameLastname", values[i])
			} else if value.Valid {
				pe.AgentNameLastname = new(string)
				*pe.AgentNameLastname = value.String
			}
		case pendingkyc.FieldKYCDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field KYCDate", values[i])
			} else if value.Valid {
				pe.KYCDate = new(string)
				*pe.KYCDate = value.String
			}
		case pendingkyc.FieldDateGen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DateGen", values[i])
			} else if value.Valid {
				pe.DateGen = new(time.Time)
				*pe.DateGen = value.Time
			}
		case pendingkyc.FieldStatusGen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field StatusGen", values[i])
			} else if value.Valid {
				pe.StatusGen = value.Bool
			}
		case pendingkyc.FieldPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Point", values[i])
			} else if value.Valid {
				pe.Point = int(value.Int64)
			}
		case pendingkyc.FieldFileimportID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FileimportID", values[i])
			} else if value.Valid {
				pe.FileimportID = new(int)
				*pe.FileimportID = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Pendingkyc.
// Note that you need to call Pendingkyc.Unwrap() before calling this method if this Pendingkyc
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Pendingkyc) Update() *PendingkycUpdateOne {
	return (&PendingkycClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the Pendingkyc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Pendingkyc) Unwrap() *Pendingkyc {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pendingkyc is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Pendingkyc) String() string {
	var builder strings.Builder
	builder.WriteString("Pendingkyc(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", WalletID=")
	builder.WriteString(pe.WalletID)
	builder.WriteString(", Name=")
	builder.WriteString(pe.Name)
	if v := pe.AgentID; v != nil {
		builder.WriteString(", AgentID=")
		builder.WriteString(*v)
	}
	if v := pe.AgentNameLastname; v != nil {
		builder.WriteString(", AgentNameLastname=")
		builder.WriteString(*v)
	}
	if v := pe.KYCDate; v != nil {
		builder.WriteString(", KYCDate=")
		builder.WriteString(*v)
	}
	if v := pe.DateGen; v != nil {
		builder.WriteString(", DateGen=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", StatusGen=")
	builder.WriteString(fmt.Sprintf("%v", pe.StatusGen))
	builder.WriteString(", Point=")
	builder.WriteString(fmt.Sprintf("%v", pe.Point))
	if v := pe.FileimportID; v != nil {
		builder.WriteString(", FileimportID=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Pendingkycs is a parsable slice of Pendingkyc.
type Pendingkycs []*Pendingkyc

func (pe Pendingkycs) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
