// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/reportwallet"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ReportWallet is the model entity for the ReportWallet schema.
type ReportWallet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Walletid holds the value of the "walletid" field.
	Walletid string `json:"walletid,omitempty"`
	// WalletTypeName holds the value of the "WalletTypeName" field.
	WalletTypeName *string `json:"WalletTypeName,omitempty"`
	// WalletPhoneno holds the value of the "WalletPhoneno" field.
	WalletPhoneno *string `json:"WalletPhoneno,omitempty"`
	// WalletName holds the value of the "WalletName" field.
	WalletName *string `json:"WalletName,omitempty"`
	// CitizenId holds the value of the "CitizenId" field.
	CitizenId *string `json:"CitizenId,omitempty"`
	// Status holds the value of the "Status" field.
	Status *string `json:"Status,omitempty"`
	// DateTime holds the value of the "dateTime" field.
	DateTime *time.Time `json:"dateTime,omitempty"`
	// Balance holds the value of the "Balance" field.
	Balance *float64 `json:"Balance,omitempty"`
	// Email holds the value of the "Email" field.
	Email *string `json:"Email,omitempty"`
	// IsForgetPin holds the value of the "IsForgetPin" field.
	IsForgetPin *string `json:"IsForgetPin,omitempty"`
	// ATMCard holds the value of the "ATMCard" field.
	ATMCard *string `json:"ATMCard,omitempty"`
	// AccountNo holds the value of the "AccountNo" field.
	AccountNo *string `json:"AccountNo,omitempty"`
	// AddressDetail holds the value of the "AddressDetail" field.
	AddressDetail *string `json:"AddressDetail,omitempty"`
	// Street holds the value of the "Street" field.
	Street *string `json:"Street,omitempty"`
	// District holds the value of the "District" field.
	District *string `json:"District,omitempty"`
	// SubDistrict holds the value of the "SubDistrict" field.
	SubDistrict *string `json:"SubDistrict,omitempty"`
	// Province holds the value of the "Province" field.
	Province *string `json:"Province,omitempty"`
	// PostalCode holds the value of the "PostalCode" field.
	PostalCode *string `json:"PostalCode,omitempty"`
	// RegisterDateTime holds the value of the "RegisterDateTime" field.
	RegisterDateTime *time.Time `json:"RegisterDateTime,omitempty"`
	// FileimportID holds the value of the "FileimportID" field.
	FileimportID *int `json:"FileimportID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportWallet) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportwallet.FieldBalance:
			values[i] = &sql.NullFloat64{}
		case reportwallet.FieldID, reportwallet.FieldFileimportID:
			values[i] = &sql.NullInt64{}
		case reportwallet.FieldWalletid, reportwallet.FieldWalletTypeName, reportwallet.FieldWalletPhoneno, reportwallet.FieldWalletName, reportwallet.FieldCitizenId, reportwallet.FieldStatus, reportwallet.FieldEmail, reportwallet.FieldIsForgetPin, reportwallet.FieldATMCard, reportwallet.FieldAccountNo, reportwallet.FieldAddressDetail, reportwallet.FieldStreet, reportwallet.FieldDistrict, reportwallet.FieldSubDistrict, reportwallet.FieldProvince, reportwallet.FieldPostalCode:
			values[i] = &sql.NullString{}
		case reportwallet.FieldDateTime, reportwallet.FieldRegisterDateTime:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReportWallet", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportWallet fields.
func (rw *ReportWallet) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportwallet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rw.ID = int(value.Int64)
		case reportwallet.FieldWalletid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field walletid", values[i])
			} else if value.Valid {
				rw.Walletid = value.String
			}
		case reportwallet.FieldWalletTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletTypeName", values[i])
			} else if value.Valid {
				rw.WalletTypeName = new(string)
				*rw.WalletTypeName = value.String
			}
		case reportwallet.FieldWalletPhoneno:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletPhoneno", values[i])
			} else if value.Valid {
				rw.WalletPhoneno = new(string)
				*rw.WalletPhoneno = value.String
			}
		case reportwallet.FieldWalletName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletName", values[i])
			} else if value.Valid {
				rw.WalletName = new(string)
				*rw.WalletName = value.String
			}
		case reportwallet.FieldCitizenId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CitizenId", values[i])
			} else if value.Valid {
				rw.CitizenId = new(string)
				*rw.CitizenId = value.String
			}
		case reportwallet.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				rw.Status = new(string)
				*rw.Status = value.String
			}
		case reportwallet.FieldDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateTime", values[i])
			} else if value.Valid {
				rw.DateTime = new(time.Time)
				*rw.DateTime = value.Time
			}
		case reportwallet.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Balance", values[i])
			} else if value.Valid {
				rw.Balance = new(float64)
				*rw.Balance = value.Float64
			}
		case reportwallet.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				rw.Email = new(string)
				*rw.Email = value.String
			}
		case reportwallet.FieldIsForgetPin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IsForgetPin", values[i])
			} else if value.Valid {
				rw.IsForgetPin = new(string)
				*rw.IsForgetPin = value.String
			}
		case reportwallet.FieldATMCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ATMCard", values[i])
			} else if value.Valid {
				rw.ATMCard = new(string)
				*rw.ATMCard = value.String
			}
		case reportwallet.FieldAccountNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AccountNo", values[i])
			} else if value.Valid {
				rw.AccountNo = new(string)
				*rw.AccountNo = value.String
			}
		case reportwallet.FieldAddressDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AddressDetail", values[i])
			} else if value.Valid {
				rw.AddressDetail = new(string)
				*rw.AddressDetail = value.String
			}
		case reportwallet.FieldStreet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Street", values[i])
			} else if value.Valid {
				rw.Street = new(string)
				*rw.Street = value.String
			}
		case reportwallet.FieldDistrict:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field District", values[i])
			} else if value.Valid {
				rw.District = new(string)
				*rw.District = value.String
			}
		case reportwallet.FieldSubDistrict:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SubDistrict", values[i])
			} else if value.Valid {
				rw.SubDistrict = new(string)
				*rw.SubDistrict = value.String
			}
		case reportwallet.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Province", values[i])
			} else if value.Valid {
				rw.Province = new(string)
				*rw.Province = value.String
			}
		case reportwallet.FieldPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostalCode", values[i])
			} else if value.Valid {
				rw.PostalCode = new(string)
				*rw.PostalCode = value.String
			}
		case reportwallet.FieldRegisterDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field RegisterDateTime", values[i])
			} else if value.Valid {
				rw.RegisterDateTime = new(time.Time)
				*rw.RegisterDateTime = value.Time
			}
		case reportwallet.FieldFileimportID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FileimportID", values[i])
			} else if value.Valid {
				rw.FileimportID = new(int)
				*rw.FileimportID = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ReportWallet.
// Note that you need to call ReportWallet.Unwrap() before calling this method if this ReportWallet
// was returned from a transaction, and the transaction was committed or rolled back.
func (rw *ReportWallet) Update() *ReportWalletUpdateOne {
	return (&ReportWalletClient{config: rw.config}).UpdateOne(rw)
}

// Unwrap unwraps the ReportWallet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rw *ReportWallet) Unwrap() *ReportWallet {
	tx, ok := rw.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportWallet is not a transactional entity")
	}
	rw.config.driver = tx.drv
	return rw
}

// String implements the fmt.Stringer.
func (rw *ReportWallet) String() string {
	var builder strings.Builder
	builder.WriteString("ReportWallet(")
	builder.WriteString(fmt.Sprintf("id=%v", rw.ID))
	builder.WriteString(", walletid=")
	builder.WriteString(rw.Walletid)
	if v := rw.WalletTypeName; v != nil {
		builder.WriteString(", WalletTypeName=")
		builder.WriteString(*v)
	}
	if v := rw.WalletPhoneno; v != nil {
		builder.WriteString(", WalletPhoneno=")
		builder.WriteString(*v)
	}
	if v := rw.WalletName; v != nil {
		builder.WriteString(", WalletName=")
		builder.WriteString(*v)
	}
	if v := rw.CitizenId; v != nil {
		builder.WriteString(", CitizenId=")
		builder.WriteString(*v)
	}
	if v := rw.Status; v != nil {
		builder.WriteString(", Status=")
		builder.WriteString(*v)
	}
	if v := rw.DateTime; v != nil {
		builder.WriteString(", dateTime=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := rw.Balance; v != nil {
		builder.WriteString(", Balance=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := rw.Email; v != nil {
		builder.WriteString(", Email=")
		builder.WriteString(*v)
	}
	if v := rw.IsForgetPin; v != nil {
		builder.WriteString(", IsForgetPin=")
		builder.WriteString(*v)
	}
	if v := rw.ATMCard; v != nil {
		builder.WriteString(", ATMCard=")
		builder.WriteString(*v)
	}
	if v := rw.AccountNo; v != nil {
		builder.WriteString(", AccountNo=")
		builder.WriteString(*v)
	}
	if v := rw.AddressDetail; v != nil {
		builder.WriteString(", AddressDetail=")
		builder.WriteString(*v)
	}
	if v := rw.Street; v != nil {
		builder.WriteString(", Street=")
		builder.WriteString(*v)
	}
	if v := rw.District; v != nil {
		builder.WriteString(", District=")
		builder.WriteString(*v)
	}
	if v := rw.SubDistrict; v != nil {
		builder.WriteString(", SubDistrict=")
		builder.WriteString(*v)
	}
	if v := rw.Province; v != nil {
		builder.WriteString(", Province=")
		builder.WriteString(*v)
	}
	if v := rw.PostalCode; v != nil {
		builder.WriteString(", PostalCode=")
		builder.WriteString(*v)
	}
	if v := rw.RegisterDateTime; v != nil {
		builder.WriteString(", RegisterDateTime=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := rw.FileimportID; v != nil {
		builder.WriteString(", FileimportID=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ReportWallets is a parsable slice of ReportWallet.
type ReportWallets []*ReportWallet

func (rw ReportWallets) config(cfg config) {
	for _i := range rw {
		rw[_i].config = cfg
	}
}
