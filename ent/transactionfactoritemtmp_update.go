// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/transactionfactoritemtmp"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionfactoritemtmpUpdate is the builder for updating Transactionfactoritemtmp entities.
type TransactionfactoritemtmpUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionfactoritemtmpMutation
}

// Where adds a new predicate for the TransactionfactoritemtmpUpdate builder.
func (tu *TransactionfactoritemtmpUpdate) Where(ps ...predicate.Transactionfactoritemtmp) *TransactionfactoritemtmpUpdate {
	tu.mutation.predicates = append(tu.mutation.predicates, ps...)
	return tu
}

// SetMin sets the "Min" field.
func (tu *TransactionfactoritemtmpUpdate) SetMin(f float64) *TransactionfactoritemtmpUpdate {
	tu.mutation.ResetMin()
	tu.mutation.SetMin(f)
	return tu
}

// SetNillableMin sets the "Min" field if the given value is not nil.
func (tu *TransactionfactoritemtmpUpdate) SetNillableMin(f *float64) *TransactionfactoritemtmpUpdate {
	if f != nil {
		tu.SetMin(*f)
	}
	return tu
}

// AddMin adds f to the "Min" field.
func (tu *TransactionfactoritemtmpUpdate) AddMin(f float64) *TransactionfactoritemtmpUpdate {
	tu.mutation.AddMin(f)
	return tu
}

// ClearMin clears the value of the "Min" field.
func (tu *TransactionfactoritemtmpUpdate) ClearMin() *TransactionfactoritemtmpUpdate {
	tu.mutation.ClearMin()
	return tu
}

// SetMax sets the "Max" field.
func (tu *TransactionfactoritemtmpUpdate) SetMax(f float64) *TransactionfactoritemtmpUpdate {
	tu.mutation.ResetMax()
	tu.mutation.SetMax(f)
	return tu
}

// SetNillableMax sets the "Max" field if the given value is not nil.
func (tu *TransactionfactoritemtmpUpdate) SetNillableMax(f *float64) *TransactionfactoritemtmpUpdate {
	if f != nil {
		tu.SetMax(*f)
	}
	return tu
}

// AddMax adds f to the "Max" field.
func (tu *TransactionfactoritemtmpUpdate) AddMax(f float64) *TransactionfactoritemtmpUpdate {
	tu.mutation.AddMax(f)
	return tu
}

// ClearMax clears the value of the "Max" field.
func (tu *TransactionfactoritemtmpUpdate) ClearMax() *TransactionfactoritemtmpUpdate {
	tu.mutation.ClearMax()
	return tu
}

// SetRank sets the "Rank" field.
func (tu *TransactionfactoritemtmpUpdate) SetRank(i int) *TransactionfactoritemtmpUpdate {
	tu.mutation.ResetRank()
	tu.mutation.SetRank(i)
	return tu
}

// SetNillableRank sets the "Rank" field if the given value is not nil.
func (tu *TransactionfactoritemtmpUpdate) SetNillableRank(i *int) *TransactionfactoritemtmpUpdate {
	if i != nil {
		tu.SetRank(*i)
	}
	return tu
}

// AddRank adds i to the "Rank" field.
func (tu *TransactionfactoritemtmpUpdate) AddRank(i int) *TransactionfactoritemtmpUpdate {
	tu.mutation.AddRank(i)
	return tu
}

// ClearRank clears the value of the "Rank" field.
func (tu *TransactionfactoritemtmpUpdate) ClearRank() *TransactionfactoritemtmpUpdate {
	tu.mutation.ClearRank()
	return tu
}

// Mutation returns the TransactionfactoritemtmpMutation object of the builder.
func (tu *TransactionfactoritemtmpUpdate) Mutation() *TransactionfactoritemtmpMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionfactoritemtmpUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionfactoritemtmpMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionfactoritemtmpUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionfactoritemtmpUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionfactoritemtmpUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TransactionfactoritemtmpUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transactionfactoritemtmp.Table,
			Columns: transactionfactoritemtmp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transactionfactoritemtmp.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Min(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactionfactoritemtmp.FieldMin,
		})
	}
	if value, ok := tu.mutation.AddedMin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactionfactoritemtmp.FieldMin,
		})
	}
	if tu.mutation.MinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: transactionfactoritemtmp.FieldMin,
		})
	}
	if value, ok := tu.mutation.Max(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactionfactoritemtmp.FieldMax,
		})
	}
	if value, ok := tu.mutation.AddedMax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactionfactoritemtmp.FieldMax,
		})
	}
	if tu.mutation.MaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: transactionfactoritemtmp.FieldMax,
		})
	}
	if value, ok := tu.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transactionfactoritemtmp.FieldRank,
		})
	}
	if value, ok := tu.mutation.AddedRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transactionfactoritemtmp.FieldRank,
		})
	}
	if tu.mutation.RankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: transactionfactoritemtmp.FieldRank,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionfactoritemtmp.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TransactionfactoritemtmpUpdateOne is the builder for updating a single Transactionfactoritemtmp entity.
type TransactionfactoritemtmpUpdateOne struct {
	config
	hooks    []Hook
	mutation *TransactionfactoritemtmpMutation
}

// SetMin sets the "Min" field.
func (tuo *TransactionfactoritemtmpUpdateOne) SetMin(f float64) *TransactionfactoritemtmpUpdateOne {
	tuo.mutation.ResetMin()
	tuo.mutation.SetMin(f)
	return tuo
}

// SetNillableMin sets the "Min" field if the given value is not nil.
func (tuo *TransactionfactoritemtmpUpdateOne) SetNillableMin(f *float64) *TransactionfactoritemtmpUpdateOne {
	if f != nil {
		tuo.SetMin(*f)
	}
	return tuo
}

// AddMin adds f to the "Min" field.
func (tuo *TransactionfactoritemtmpUpdateOne) AddMin(f float64) *TransactionfactoritemtmpUpdateOne {
	tuo.mutation.AddMin(f)
	return tuo
}

// ClearMin clears the value of the "Min" field.
func (tuo *TransactionfactoritemtmpUpdateOne) ClearMin() *TransactionfactoritemtmpUpdateOne {
	tuo.mutation.ClearMin()
	return tuo
}

// SetMax sets the "Max" field.
func (tuo *TransactionfactoritemtmpUpdateOne) SetMax(f float64) *TransactionfactoritemtmpUpdateOne {
	tuo.mutation.ResetMax()
	tuo.mutation.SetMax(f)
	return tuo
}

// SetNillableMax sets the "Max" field if the given value is not nil.
func (tuo *TransactionfactoritemtmpUpdateOne) SetNillableMax(f *float64) *TransactionfactoritemtmpUpdateOne {
	if f != nil {
		tuo.SetMax(*f)
	}
	return tuo
}

// AddMax adds f to the "Max" field.
func (tuo *TransactionfactoritemtmpUpdateOne) AddMax(f float64) *TransactionfactoritemtmpUpdateOne {
	tuo.mutation.AddMax(f)
	return tuo
}

// ClearMax clears the value of the "Max" field.
func (tuo *TransactionfactoritemtmpUpdateOne) ClearMax() *TransactionfactoritemtmpUpdateOne {
	tuo.mutation.ClearMax()
	return tuo
}

// SetRank sets the "Rank" field.
func (tuo *TransactionfactoritemtmpUpdateOne) SetRank(i int) *TransactionfactoritemtmpUpdateOne {
	tuo.mutation.ResetRank()
	tuo.mutation.SetRank(i)
	return tuo
}

// SetNillableRank sets the "Rank" field if the given value is not nil.
func (tuo *TransactionfactoritemtmpUpdateOne) SetNillableRank(i *int) *TransactionfactoritemtmpUpdateOne {
	if i != nil {
		tuo.SetRank(*i)
	}
	return tuo
}

// AddRank adds i to the "Rank" field.
func (tuo *TransactionfactoritemtmpUpdateOne) AddRank(i int) *TransactionfactoritemtmpUpdateOne {
	tuo.mutation.AddRank(i)
	return tuo
}

// ClearRank clears the value of the "Rank" field.
func (tuo *TransactionfactoritemtmpUpdateOne) ClearRank() *TransactionfactoritemtmpUpdateOne {
	tuo.mutation.ClearRank()
	return tuo
}

// Mutation returns the TransactionfactoritemtmpMutation object of the builder.
func (tuo *TransactionfactoritemtmpUpdateOne) Mutation() *TransactionfactoritemtmpMutation {
	return tuo.mutation
}

// Save executes the query and returns the updated Transactionfactoritemtmp entity.
func (tuo *TransactionfactoritemtmpUpdateOne) Save(ctx context.Context) (*Transactionfactoritemtmp, error) {
	var (
		err  error
		node *Transactionfactoritemtmp
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionfactoritemtmpMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionfactoritemtmpUpdateOne) SaveX(ctx context.Context) *Transactionfactoritemtmp {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionfactoritemtmpUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionfactoritemtmpUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TransactionfactoritemtmpUpdateOne) sqlSave(ctx context.Context) (_node *Transactionfactoritemtmp, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transactionfactoritemtmp.Table,
			Columns: transactionfactoritemtmp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transactionfactoritemtmp.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Transactionfactoritemtmp.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Min(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactionfactoritemtmp.FieldMin,
		})
	}
	if value, ok := tuo.mutation.AddedMin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactionfactoritemtmp.FieldMin,
		})
	}
	if tuo.mutation.MinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: transactionfactoritemtmp.FieldMin,
		})
	}
	if value, ok := tuo.mutation.Max(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactionfactoritemtmp.FieldMax,
		})
	}
	if value, ok := tuo.mutation.AddedMax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactionfactoritemtmp.FieldMax,
		})
	}
	if tuo.mutation.MaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: transactionfactoritemtmp.FieldMax,
		})
	}
	if value, ok := tuo.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transactionfactoritemtmp.FieldRank,
		})
	}
	if value, ok := tuo.mutation.AddedRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transactionfactoritemtmp.FieldRank,
		})
	}
	if tuo.mutation.RankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: transactionfactoritemtmp.FieldRank,
		})
	}
	_node = &Transactionfactoritemtmp{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionfactoritemtmp.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
