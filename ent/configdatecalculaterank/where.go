// Code generated by entc, DO NOT EDIT.

package configdatecalculaterank

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Rank applies equality check predicate on the "Rank" field. It's identical to RankEQ.
func Rank(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// NumDateCalculateRank applies equality check predicate on the "NumDateCalculateRank" field. It's identical to NumDateCalculateRankEQ.
func NumDateCalculateRank(v int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumDateCalculateRank), v))
	})
}

// NumDateCalculateRankTmp applies equality check predicate on the "NumDateCalculateRankTmp" field. It's identical to NumDateCalculateRankTmpEQ.
func NumDateCalculateRankTmp(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// UpdateDate applies equality check predicate on the "UpdateDate" field. It's identical to UpdateDateEQ.
func UpdateDate(v time.Time) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateDate), v))
	})
}

// RankEQ applies the EQ predicate on the "Rank" field.
func RankEQ(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// RankNEQ applies the NEQ predicate on the "Rank" field.
func RankNEQ(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRank), v))
	})
}

// RankIn applies the In predicate on the "Rank" field.
func RankIn(vs ...string) predicate.Configdatecalculaterank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRank), v...))
	})
}

// RankNotIn applies the NotIn predicate on the "Rank" field.
func RankNotIn(vs ...string) predicate.Configdatecalculaterank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRank), v...))
	})
}

// RankGT applies the GT predicate on the "Rank" field.
func RankGT(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRank), v))
	})
}

// RankGTE applies the GTE predicate on the "Rank" field.
func RankGTE(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRank), v))
	})
}

// RankLT applies the LT predicate on the "Rank" field.
func RankLT(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRank), v))
	})
}

// RankLTE applies the LTE predicate on the "Rank" field.
func RankLTE(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRank), v))
	})
}

// RankContains applies the Contains predicate on the "Rank" field.
func RankContains(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRank), v))
	})
}

// RankHasPrefix applies the HasPrefix predicate on the "Rank" field.
func RankHasPrefix(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRank), v))
	})
}

// RankHasSuffix applies the HasSuffix predicate on the "Rank" field.
func RankHasSuffix(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRank), v))
	})
}

// RankIsNil applies the IsNil predicate on the "Rank" field.
func RankIsNil() predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRank)))
	})
}

// RankNotNil applies the NotNil predicate on the "Rank" field.
func RankNotNil() predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRank)))
	})
}

// RankEqualFold applies the EqualFold predicate on the "Rank" field.
func RankEqualFold(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRank), v))
	})
}

// RankContainsFold applies the ContainsFold predicate on the "Rank" field.
func RankContainsFold(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRank), v))
	})
}

// NumDateCalculateRankEQ applies the EQ predicate on the "NumDateCalculateRank" field.
func NumDateCalculateRankEQ(v int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumDateCalculateRank), v))
	})
}

// NumDateCalculateRankNEQ applies the NEQ predicate on the "NumDateCalculateRank" field.
func NumDateCalculateRankNEQ(v int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumDateCalculateRank), v))
	})
}

// NumDateCalculateRankIn applies the In predicate on the "NumDateCalculateRank" field.
func NumDateCalculateRankIn(vs ...int) predicate.Configdatecalculaterank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumDateCalculateRank), v...))
	})
}

// NumDateCalculateRankNotIn applies the NotIn predicate on the "NumDateCalculateRank" field.
func NumDateCalculateRankNotIn(vs ...int) predicate.Configdatecalculaterank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumDateCalculateRank), v...))
	})
}

// NumDateCalculateRankGT applies the GT predicate on the "NumDateCalculateRank" field.
func NumDateCalculateRankGT(v int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumDateCalculateRank), v))
	})
}

// NumDateCalculateRankGTE applies the GTE predicate on the "NumDateCalculateRank" field.
func NumDateCalculateRankGTE(v int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumDateCalculateRank), v))
	})
}

// NumDateCalculateRankLT applies the LT predicate on the "NumDateCalculateRank" field.
func NumDateCalculateRankLT(v int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumDateCalculateRank), v))
	})
}

// NumDateCalculateRankLTE applies the LTE predicate on the "NumDateCalculateRank" field.
func NumDateCalculateRankLTE(v int) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumDateCalculateRank), v))
	})
}

// NumDateCalculateRankIsNil applies the IsNil predicate on the "NumDateCalculateRank" field.
func NumDateCalculateRankIsNil() predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNumDateCalculateRank)))
	})
}

// NumDateCalculateRankNotNil applies the NotNil predicate on the "NumDateCalculateRank" field.
func NumDateCalculateRankNotNil() predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNumDateCalculateRank)))
	})
}

// NumDateCalculateRankTmpEQ applies the EQ predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpEQ(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// NumDateCalculateRankTmpNEQ applies the NEQ predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpNEQ(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// NumDateCalculateRankTmpIn applies the In predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpIn(vs ...string) predicate.Configdatecalculaterank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumDateCalculateRankTmp), v...))
	})
}

// NumDateCalculateRankTmpNotIn applies the NotIn predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpNotIn(vs ...string) predicate.Configdatecalculaterank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumDateCalculateRankTmp), v...))
	})
}

// NumDateCalculateRankTmpGT applies the GT predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpGT(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// NumDateCalculateRankTmpGTE applies the GTE predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpGTE(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// NumDateCalculateRankTmpLT applies the LT predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpLT(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// NumDateCalculateRankTmpLTE applies the LTE predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpLTE(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// NumDateCalculateRankTmpContains applies the Contains predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpContains(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// NumDateCalculateRankTmpHasPrefix applies the HasPrefix predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpHasPrefix(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// NumDateCalculateRankTmpHasSuffix applies the HasSuffix predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpHasSuffix(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// NumDateCalculateRankTmpIsNil applies the IsNil predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpIsNil() predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNumDateCalculateRankTmp)))
	})
}

// NumDateCalculateRankTmpNotNil applies the NotNil predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpNotNil() predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNumDateCalculateRankTmp)))
	})
}

// NumDateCalculateRankTmpEqualFold applies the EqualFold predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpEqualFold(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// NumDateCalculateRankTmpContainsFold applies the ContainsFold predicate on the "NumDateCalculateRankTmp" field.
func NumDateCalculateRankTmpContainsFold(v string) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNumDateCalculateRankTmp), v))
	})
}

// UpdateDateEQ applies the EQ predicate on the "UpdateDate" field.
func UpdateDateEQ(v time.Time) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateNEQ applies the NEQ predicate on the "UpdateDate" field.
func UpdateDateNEQ(v time.Time) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateIn applies the In predicate on the "UpdateDate" field.
func UpdateDateIn(vs ...time.Time) predicate.Configdatecalculaterank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateDate), v...))
	})
}

// UpdateDateNotIn applies the NotIn predicate on the "UpdateDate" field.
func UpdateDateNotIn(vs ...time.Time) predicate.Configdatecalculaterank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateDate), v...))
	})
}

// UpdateDateGT applies the GT predicate on the "UpdateDate" field.
func UpdateDateGT(v time.Time) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateGTE applies the GTE predicate on the "UpdateDate" field.
func UpdateDateGTE(v time.Time) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateLT applies the LT predicate on the "UpdateDate" field.
func UpdateDateLT(v time.Time) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateLTE applies the LTE predicate on the "UpdateDate" field.
func UpdateDateLTE(v time.Time) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateIsNil applies the IsNil predicate on the "UpdateDate" field.
func UpdateDateIsNil() predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateDate)))
	})
}

// UpdateDateNotNil applies the NotNil predicate on the "UpdateDate" field.
func UpdateDateNotNil() predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateDate)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Configdatecalculaterank) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Configdatecalculaterank) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Configdatecalculaterank) predicate.Configdatecalculaterank {
	return predicate.Configdatecalculaterank(func(s *sql.Selector) {
		p(s.Not())
	})
}
