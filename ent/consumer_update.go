// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/consumer"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConsumerUpdate is the builder for updating Consumer entities.
type ConsumerUpdate struct {
	config
	hooks    []Hook
	mutation *ConsumerMutation
}

// Where adds a new predicate for the ConsumerUpdate builder.
func (cu *ConsumerUpdate) Where(ps ...predicate.Consumer) *ConsumerUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetTransactionID sets the "transaction_id" field.
func (cu *ConsumerUpdate) SetTransactionID(s string) *ConsumerUpdate {
	cu.mutation.SetTransactionID(s)
	return cu
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableTransactionID(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetTransactionID(*s)
	}
	return cu
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (cu *ConsumerUpdate) ClearTransactionID() *ConsumerUpdate {
	cu.mutation.ClearTransactionID()
	return cu
}

// SetTransactionStatus sets the "TransactionStatus" field.
func (cu *ConsumerUpdate) SetTransactionStatus(s string) *ConsumerUpdate {
	cu.mutation.SetTransactionStatus(s)
	return cu
}

// SetNillableTransactionStatus sets the "TransactionStatus" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableTransactionStatus(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetTransactionStatus(*s)
	}
	return cu
}

// ClearTransactionStatus clears the value of the "TransactionStatus" field.
func (cu *ConsumerUpdate) ClearTransactionStatus() *ConsumerUpdate {
	cu.mutation.ClearTransactionStatus()
	return cu
}

// SetTransactionType sets the "TransactionType" field.
func (cu *ConsumerUpdate) SetTransactionType(s string) *ConsumerUpdate {
	cu.mutation.SetTransactionType(s)
	return cu
}

// SetNillableTransactionType sets the "TransactionType" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableTransactionType(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetTransactionType(*s)
	}
	return cu
}

// ClearTransactionType clears the value of the "TransactionType" field.
func (cu *ConsumerUpdate) ClearTransactionType() *ConsumerUpdate {
	cu.mutation.ClearTransactionType()
	return cu
}

// SetPaymentChannel sets the "PaymentChannel" field.
func (cu *ConsumerUpdate) SetPaymentChannel(s string) *ConsumerUpdate {
	cu.mutation.SetPaymentChannel(s)
	return cu
}

// SetNillablePaymentChannel sets the "PaymentChannel" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillablePaymentChannel(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetPaymentChannel(*s)
	}
	return cu
}

// ClearPaymentChannel clears the value of the "PaymentChannel" field.
func (cu *ConsumerUpdate) ClearPaymentChannel() *ConsumerUpdate {
	cu.mutation.ClearPaymentChannel()
	return cu
}

// SetPaymentType sets the "PaymentType" field.
func (cu *ConsumerUpdate) SetPaymentType(s string) *ConsumerUpdate {
	cu.mutation.SetPaymentType(s)
	return cu
}

// SetNillablePaymentType sets the "PaymentType" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillablePaymentType(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetPaymentType(*s)
	}
	return cu
}

// ClearPaymentType clears the value of the "PaymentType" field.
func (cu *ConsumerUpdate) ClearPaymentType() *ConsumerUpdate {
	cu.mutation.ClearPaymentType()
	return cu
}

// SetTypeCode sets the "TypeCode" field.
func (cu *ConsumerUpdate) SetTypeCode(s string) *ConsumerUpdate {
	cu.mutation.SetTypeCode(s)
	return cu
}

// SetNillableTypeCode sets the "TypeCode" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableTypeCode(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetTypeCode(*s)
	}
	return cu
}

// ClearTypeCode clears the value of the "TypeCode" field.
func (cu *ConsumerUpdate) ClearTypeCode() *ConsumerUpdate {
	cu.mutation.ClearTypeCode()
	return cu
}

// SetApprovalCode sets the "ApprovalCode" field.
func (cu *ConsumerUpdate) SetApprovalCode(s string) *ConsumerUpdate {
	cu.mutation.SetApprovalCode(s)
	return cu
}

// SetNillableApprovalCode sets the "ApprovalCode" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableApprovalCode(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetApprovalCode(*s)
	}
	return cu
}

// ClearApprovalCode clears the value of the "ApprovalCode" field.
func (cu *ConsumerUpdate) ClearApprovalCode() *ConsumerUpdate {
	cu.mutation.ClearApprovalCode()
	return cu
}

// SetBillerID sets the "BillerID" field.
func (cu *ConsumerUpdate) SetBillerID(s string) *ConsumerUpdate {
	cu.mutation.SetBillerID(s)
	return cu
}

// SetNillableBillerID sets the "BillerID" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableBillerID(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetBillerID(*s)
	}
	return cu
}

// ClearBillerID clears the value of the "BillerID" field.
func (cu *ConsumerUpdate) ClearBillerID() *ConsumerUpdate {
	cu.mutation.ClearBillerID()
	return cu
}

// SetRef1 sets the "ref1" field.
func (cu *ConsumerUpdate) SetRef1(s string) *ConsumerUpdate {
	cu.mutation.SetRef1(s)
	return cu
}

// SetNillableRef1 sets the "ref1" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableRef1(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetRef1(*s)
	}
	return cu
}

// ClearRef1 clears the value of the "ref1" field.
func (cu *ConsumerUpdate) ClearRef1() *ConsumerUpdate {
	cu.mutation.ClearRef1()
	return cu
}

// SetRef2 sets the "ref2" field.
func (cu *ConsumerUpdate) SetRef2(s string) *ConsumerUpdate {
	cu.mutation.SetRef2(s)
	return cu
}

// SetNillableRef2 sets the "ref2" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableRef2(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetRef2(*s)
	}
	return cu
}

// ClearRef2 clears the value of the "ref2" field.
func (cu *ConsumerUpdate) ClearRef2() *ConsumerUpdate {
	cu.mutation.ClearRef2()
	return cu
}

// SetRef3 sets the "ref3" field.
func (cu *ConsumerUpdate) SetRef3(s string) *ConsumerUpdate {
	cu.mutation.SetRef3(s)
	return cu
}

// SetNillableRef3 sets the "ref3" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableRef3(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetRef3(*s)
	}
	return cu
}

// ClearRef3 clears the value of the "ref3" field.
func (cu *ConsumerUpdate) ClearRef3() *ConsumerUpdate {
	cu.mutation.ClearRef3()
	return cu
}

// SetAmount sets the "amount" field.
func (cu *ConsumerUpdate) SetAmount(f float64) *ConsumerUpdate {
	cu.mutation.ResetAmount()
	cu.mutation.SetAmount(f)
	return cu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableAmount(f *float64) *ConsumerUpdate {
	if f != nil {
		cu.SetAmount(*f)
	}
	return cu
}

// AddAmount adds f to the "amount" field.
func (cu *ConsumerUpdate) AddAmount(f float64) *ConsumerUpdate {
	cu.mutation.AddAmount(f)
	return cu
}

// ClearAmount clears the value of the "amount" field.
func (cu *ConsumerUpdate) ClearAmount() *ConsumerUpdate {
	cu.mutation.ClearAmount()
	return cu
}

// SetFee sets the "fee" field.
func (cu *ConsumerUpdate) SetFee(f float64) *ConsumerUpdate {
	cu.mutation.ResetFee()
	cu.mutation.SetFee(f)
	return cu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableFee(f *float64) *ConsumerUpdate {
	if f != nil {
		cu.SetFee(*f)
	}
	return cu
}

// AddFee adds f to the "fee" field.
func (cu *ConsumerUpdate) AddFee(f float64) *ConsumerUpdate {
	cu.mutation.AddFee(f)
	return cu
}

// ClearFee clears the value of the "fee" field.
func (cu *ConsumerUpdate) ClearFee() *ConsumerUpdate {
	cu.mutation.ClearFee()
	return cu
}

// SetTotal sets the "total" field.
func (cu *ConsumerUpdate) SetTotal(f float64) *ConsumerUpdate {
	cu.mutation.ResetTotal()
	cu.mutation.SetTotal(f)
	return cu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableTotal(f *float64) *ConsumerUpdate {
	if f != nil {
		cu.SetTotal(*f)
	}
	return cu
}

// AddTotal adds f to the "total" field.
func (cu *ConsumerUpdate) AddTotal(f float64) *ConsumerUpdate {
	cu.mutation.AddTotal(f)
	return cu
}

// ClearTotal clears the value of the "total" field.
func (cu *ConsumerUpdate) ClearTotal() *ConsumerUpdate {
	cu.mutation.ClearTotal()
	return cu
}

// SetFromReference sets the "FromReference" field.
func (cu *ConsumerUpdate) SetFromReference(s string) *ConsumerUpdate {
	cu.mutation.SetFromReference(s)
	return cu
}

// SetNillableFromReference sets the "FromReference" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableFromReference(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetFromReference(*s)
	}
	return cu
}

// ClearFromReference clears the value of the "FromReference" field.
func (cu *ConsumerUpdate) ClearFromReference() *ConsumerUpdate {
	cu.mutation.ClearFromReference()
	return cu
}

// SetFromPhoneNo sets the "FromPhoneNo" field.
func (cu *ConsumerUpdate) SetFromPhoneNo(s string) *ConsumerUpdate {
	cu.mutation.SetFromPhoneNo(s)
	return cu
}

// SetNillableFromPhoneNo sets the "FromPhoneNo" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableFromPhoneNo(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetFromPhoneNo(*s)
	}
	return cu
}

// ClearFromPhoneNo clears the value of the "FromPhoneNo" field.
func (cu *ConsumerUpdate) ClearFromPhoneNo() *ConsumerUpdate {
	cu.mutation.ClearFromPhoneNo()
	return cu
}

// SetFromName sets the "FromName" field.
func (cu *ConsumerUpdate) SetFromName(s string) *ConsumerUpdate {
	cu.mutation.SetFromName(s)
	return cu
}

// SetNillableFromName sets the "FromName" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableFromName(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetFromName(*s)
	}
	return cu
}

// ClearFromName clears the value of the "FromName" field.
func (cu *ConsumerUpdate) ClearFromName() *ConsumerUpdate {
	cu.mutation.ClearFromName()
	return cu
}

// SetToAccount sets the "ToAccount" field.
func (cu *ConsumerUpdate) SetToAccount(s string) *ConsumerUpdate {
	cu.mutation.SetToAccount(s)
	return cu
}

// SetNillableToAccount sets the "ToAccount" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableToAccount(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetToAccount(*s)
	}
	return cu
}

// ClearToAccount clears the value of the "ToAccount" field.
func (cu *ConsumerUpdate) ClearToAccount() *ConsumerUpdate {
	cu.mutation.ClearToAccount()
	return cu
}

// SetToAccountPhoneNo sets the "ToAccountPhoneNo" field.
func (cu *ConsumerUpdate) SetToAccountPhoneNo(s string) *ConsumerUpdate {
	cu.mutation.SetToAccountPhoneNo(s)
	return cu
}

// SetNillableToAccountPhoneNo sets the "ToAccountPhoneNo" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableToAccountPhoneNo(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetToAccountPhoneNo(*s)
	}
	return cu
}

// ClearToAccountPhoneNo clears the value of the "ToAccountPhoneNo" field.
func (cu *ConsumerUpdate) ClearToAccountPhoneNo() *ConsumerUpdate {
	cu.mutation.ClearToAccountPhoneNo()
	return cu
}

// SetToAccountName sets the "ToAccountName" field.
func (cu *ConsumerUpdate) SetToAccountName(s string) *ConsumerUpdate {
	cu.mutation.SetToAccountName(s)
	return cu
}

// SetNillableToAccountName sets the "ToAccountName" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableToAccountName(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetToAccountName(*s)
	}
	return cu
}

// ClearToAccountName clears the value of the "ToAccountName" field.
func (cu *ConsumerUpdate) ClearToAccountName() *ConsumerUpdate {
	cu.mutation.ClearToAccountName()
	return cu
}

// SetBankCode sets the "BankCode" field.
func (cu *ConsumerUpdate) SetBankCode(s string) *ConsumerUpdate {
	cu.mutation.SetBankCode(s)
	return cu
}

// SetNillableBankCode sets the "BankCode" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableBankCode(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetBankCode(*s)
	}
	return cu
}

// ClearBankCode clears the value of the "BankCode" field.
func (cu *ConsumerUpdate) ClearBankCode() *ConsumerUpdate {
	cu.mutation.ClearBankCode()
	return cu
}

// SetTerminalId sets the "TerminalId" field.
func (cu *ConsumerUpdate) SetTerminalId(s string) *ConsumerUpdate {
	cu.mutation.SetTerminalId(s)
	return cu
}

// SetNillableTerminalId sets the "TerminalId" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableTerminalId(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetTerminalId(*s)
	}
	return cu
}

// ClearTerminalId clears the value of the "TerminalId" field.
func (cu *ConsumerUpdate) ClearTerminalId() *ConsumerUpdate {
	cu.mutation.ClearTerminalId()
	return cu
}

// SetTerminalType sets the "TerminalType" field.
func (cu *ConsumerUpdate) SetTerminalType(s string) *ConsumerUpdate {
	cu.mutation.SetTerminalType(s)
	return cu
}

// SetNillableTerminalType sets the "TerminalType" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableTerminalType(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetTerminalType(*s)
	}
	return cu
}

// ClearTerminalType clears the value of the "TerminalType" field.
func (cu *ConsumerUpdate) ClearTerminalType() *ConsumerUpdate {
	cu.mutation.ClearTerminalType()
	return cu
}

// SetToAccount105 sets the "ToAccount105" field.
func (cu *ConsumerUpdate) SetToAccount105(s string) *ConsumerUpdate {
	cu.mutation.SetToAccount105(s)
	return cu
}

// SetNillableToAccount105 sets the "ToAccount105" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableToAccount105(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetToAccount105(*s)
	}
	return cu
}

// ClearToAccount105 clears the value of the "ToAccount105" field.
func (cu *ConsumerUpdate) ClearToAccount105() *ConsumerUpdate {
	cu.mutation.ClearToAccount105()
	return cu
}

// SetFromReference105 sets the "FromReference105" field.
func (cu *ConsumerUpdate) SetFromReference105(s string) *ConsumerUpdate {
	cu.mutation.SetFromReference105(s)
	return cu
}

// SetNillableFromReference105 sets the "FromReference105" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableFromReference105(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetFromReference105(*s)
	}
	return cu
}

// ClearFromReference105 clears the value of the "FromReference105" field.
func (cu *ConsumerUpdate) ClearFromReference105() *ConsumerUpdate {
	cu.mutation.ClearFromReference105()
	return cu
}

// SetDateTime sets the "dateTime" field.
func (cu *ConsumerUpdate) SetDateTime(t time.Time) *ConsumerUpdate {
	cu.mutation.SetDateTime(t)
	return cu
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableDateTime(t *time.Time) *ConsumerUpdate {
	if t != nil {
		cu.SetDateTime(*t)
	}
	return cu
}

// ClearDateTime clears the value of the "dateTime" field.
func (cu *ConsumerUpdate) ClearDateTime() *ConsumerUpdate {
	cu.mutation.ClearDateTime()
	return cu
}

// SetPartnerRef sets the "PartnerRef" field.
func (cu *ConsumerUpdate) SetPartnerRef(s string) *ConsumerUpdate {
	cu.mutation.SetPartnerRef(s)
	return cu
}

// SetNillablePartnerRef sets the "PartnerRef" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillablePartnerRef(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetPartnerRef(*s)
	}
	return cu
}

// ClearPartnerRef clears the value of the "PartnerRef" field.
func (cu *ConsumerUpdate) ClearPartnerRef() *ConsumerUpdate {
	cu.mutation.ClearPartnerRef()
	return cu
}

// SetResponseCode sets the "ResponseCode" field.
func (cu *ConsumerUpdate) SetResponseCode(s string) *ConsumerUpdate {
	cu.mutation.SetResponseCode(s)
	return cu
}

// SetNillableResponseCode sets the "ResponseCode" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableResponseCode(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetResponseCode(*s)
	}
	return cu
}

// ClearResponseCode clears the value of the "ResponseCode" field.
func (cu *ConsumerUpdate) ClearResponseCode() *ConsumerUpdate {
	cu.mutation.ClearResponseCode()
	return cu
}

// SetResponseDescription sets the "ResponseDescription" field.
func (cu *ConsumerUpdate) SetResponseDescription(s string) *ConsumerUpdate {
	cu.mutation.SetResponseDescription(s)
	return cu
}

// SetNillableResponseDescription sets the "ResponseDescription" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableResponseDescription(s *string) *ConsumerUpdate {
	if s != nil {
		cu.SetResponseDescription(*s)
	}
	return cu
}

// ClearResponseDescription clears the value of the "ResponseDescription" field.
func (cu *ConsumerUpdate) ClearResponseDescription() *ConsumerUpdate {
	cu.mutation.ClearResponseDescription()
	return cu
}

// SetFileimportID sets the "FileimportID" field.
func (cu *ConsumerUpdate) SetFileimportID(i int) *ConsumerUpdate {
	cu.mutation.ResetFileimportID()
	cu.mutation.SetFileimportID(i)
	return cu
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (cu *ConsumerUpdate) SetNillableFileimportID(i *int) *ConsumerUpdate {
	if i != nil {
		cu.SetFileimportID(*i)
	}
	return cu
}

// AddFileimportID adds i to the "FileimportID" field.
func (cu *ConsumerUpdate) AddFileimportID(i int) *ConsumerUpdate {
	cu.mutation.AddFileimportID(i)
	return cu
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (cu *ConsumerUpdate) ClearFileimportID() *ConsumerUpdate {
	cu.mutation.ClearFileimportID()
	return cu
}

// Mutation returns the ConsumerMutation object of the builder.
func (cu *ConsumerUpdate) Mutation() *ConsumerMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConsumerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConsumerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConsumerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConsumerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConsumerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConsumerUpdate) check() error {
	if v, ok := cu.mutation.TransactionID(); ok {
		if err := consumer.TransactionIDValidator(v); err != nil {
			return &ValidationError{Name: "transaction_id", err: fmt.Errorf("ent: validator failed for field \"transaction_id\": %w", err)}
		}
	}
	if v, ok := cu.mutation.TransactionStatus(); ok {
		if err := consumer.TransactionStatusValidator(v); err != nil {
			return &ValidationError{Name: "TransactionStatus", err: fmt.Errorf("ent: validator failed for field \"TransactionStatus\": %w", err)}
		}
	}
	if v, ok := cu.mutation.TransactionType(); ok {
		if err := consumer.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "TransactionType", err: fmt.Errorf("ent: validator failed for field \"TransactionType\": %w", err)}
		}
	}
	if v, ok := cu.mutation.PaymentChannel(); ok {
		if err := consumer.PaymentChannelValidator(v); err != nil {
			return &ValidationError{Name: "PaymentChannel", err: fmt.Errorf("ent: validator failed for field \"PaymentChannel\": %w", err)}
		}
	}
	if v, ok := cu.mutation.PaymentType(); ok {
		if err := consumer.PaymentTypeValidator(v); err != nil {
			return &ValidationError{Name: "PaymentType", err: fmt.Errorf("ent: validator failed for field \"PaymentType\": %w", err)}
		}
	}
	if v, ok := cu.mutation.TypeCode(); ok {
		if err := consumer.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "TypeCode", err: fmt.Errorf("ent: validator failed for field \"TypeCode\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ApprovalCode(); ok {
		if err := consumer.ApprovalCodeValidator(v); err != nil {
			return &ValidationError{Name: "ApprovalCode", err: fmt.Errorf("ent: validator failed for field \"ApprovalCode\": %w", err)}
		}
	}
	if v, ok := cu.mutation.BillerID(); ok {
		if err := consumer.BillerIDValidator(v); err != nil {
			return &ValidationError{Name: "BillerID", err: fmt.Errorf("ent: validator failed for field \"BillerID\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Ref1(); ok {
		if err := consumer.Ref1Validator(v); err != nil {
			return &ValidationError{Name: "ref1", err: fmt.Errorf("ent: validator failed for field \"ref1\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Ref2(); ok {
		if err := consumer.Ref2Validator(v); err != nil {
			return &ValidationError{Name: "ref2", err: fmt.Errorf("ent: validator failed for field \"ref2\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Ref3(); ok {
		if err := consumer.Ref3Validator(v); err != nil {
			return &ValidationError{Name: "ref3", err: fmt.Errorf("ent: validator failed for field \"ref3\": %w", err)}
		}
	}
	if v, ok := cu.mutation.FromReference(); ok {
		if err := consumer.FromReferenceValidator(v); err != nil {
			return &ValidationError{Name: "FromReference", err: fmt.Errorf("ent: validator failed for field \"FromReference\": %w", err)}
		}
	}
	if v, ok := cu.mutation.FromPhoneNo(); ok {
		if err := consumer.FromPhoneNoValidator(v); err != nil {
			return &ValidationError{Name: "FromPhoneNo", err: fmt.Errorf("ent: validator failed for field \"FromPhoneNo\": %w", err)}
		}
	}
	if v, ok := cu.mutation.FromName(); ok {
		if err := consumer.FromNameValidator(v); err != nil {
			return &ValidationError{Name: "FromName", err: fmt.Errorf("ent: validator failed for field \"FromName\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ToAccount(); ok {
		if err := consumer.ToAccountValidator(v); err != nil {
			return &ValidationError{Name: "ToAccount", err: fmt.Errorf("ent: validator failed for field \"ToAccount\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ToAccountPhoneNo(); ok {
		if err := consumer.ToAccountPhoneNoValidator(v); err != nil {
			return &ValidationError{Name: "ToAccountPhoneNo", err: fmt.Errorf("ent: validator failed for field \"ToAccountPhoneNo\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ToAccountName(); ok {
		if err := consumer.ToAccountNameValidator(v); err != nil {
			return &ValidationError{Name: "ToAccountName", err: fmt.Errorf("ent: validator failed for field \"ToAccountName\": %w", err)}
		}
	}
	if v, ok := cu.mutation.BankCode(); ok {
		if err := consumer.BankCodeValidator(v); err != nil {
			return &ValidationError{Name: "BankCode", err: fmt.Errorf("ent: validator failed for field \"BankCode\": %w", err)}
		}
	}
	if v, ok := cu.mutation.TerminalId(); ok {
		if err := consumer.TerminalIdValidator(v); err != nil {
			return &ValidationError{Name: "TerminalId", err: fmt.Errorf("ent: validator failed for field \"TerminalId\": %w", err)}
		}
	}
	if v, ok := cu.mutation.TerminalType(); ok {
		if err := consumer.TerminalTypeValidator(v); err != nil {
			return &ValidationError{Name: "TerminalType", err: fmt.Errorf("ent: validator failed for field \"TerminalType\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ToAccount105(); ok {
		if err := consumer.ToAccount105Validator(v); err != nil {
			return &ValidationError{Name: "ToAccount105", err: fmt.Errorf("ent: validator failed for field \"ToAccount105\": %w", err)}
		}
	}
	if v, ok := cu.mutation.FromReference105(); ok {
		if err := consumer.FromReference105Validator(v); err != nil {
			return &ValidationError{Name: "FromReference105", err: fmt.Errorf("ent: validator failed for field \"FromReference105\": %w", err)}
		}
	}
	if v, ok := cu.mutation.PartnerRef(); ok {
		if err := consumer.PartnerRefValidator(v); err != nil {
			return &ValidationError{Name: "PartnerRef", err: fmt.Errorf("ent: validator failed for field \"PartnerRef\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ResponseCode(); ok {
		if err := consumer.ResponseCodeValidator(v); err != nil {
			return &ValidationError{Name: "ResponseCode", err: fmt.Errorf("ent: validator failed for field \"ResponseCode\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ResponseDescription(); ok {
		if err := consumer.ResponseDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "ResponseDescription", err: fmt.Errorf("ent: validator failed for field \"ResponseDescription\": %w", err)}
		}
	}
	return nil
}

func (cu *ConsumerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   consumer.Table,
			Columns: consumer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: consumer.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTransactionID,
		})
	}
	if cu.mutation.TransactionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTransactionID,
		})
	}
	if value, ok := cu.mutation.TransactionStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTransactionStatus,
		})
	}
	if cu.mutation.TransactionStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTransactionStatus,
		})
	}
	if value, ok := cu.mutation.TransactionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTransactionType,
		})
	}
	if cu.mutation.TransactionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTransactionType,
		})
	}
	if value, ok := cu.mutation.PaymentChannel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldPaymentChannel,
		})
	}
	if cu.mutation.PaymentChannelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldPaymentChannel,
		})
	}
	if value, ok := cu.mutation.PaymentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldPaymentType,
		})
	}
	if cu.mutation.PaymentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldPaymentType,
		})
	}
	if value, ok := cu.mutation.TypeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTypeCode,
		})
	}
	if cu.mutation.TypeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTypeCode,
		})
	}
	if value, ok := cu.mutation.ApprovalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldApprovalCode,
		})
	}
	if cu.mutation.ApprovalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldApprovalCode,
		})
	}
	if value, ok := cu.mutation.BillerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldBillerID,
		})
	}
	if cu.mutation.BillerIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldBillerID,
		})
	}
	if value, ok := cu.mutation.Ref1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldRef1,
		})
	}
	if cu.mutation.Ref1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldRef1,
		})
	}
	if value, ok := cu.mutation.Ref2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldRef2,
		})
	}
	if cu.mutation.Ref2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldRef2,
		})
	}
	if value, ok := cu.mutation.Ref3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldRef3,
		})
	}
	if cu.mutation.Ref3Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldRef3,
		})
	}
	if value, ok := cu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldAmount,
		})
	}
	if value, ok := cu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldAmount,
		})
	}
	if cu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: consumer.FieldAmount,
		})
	}
	if value, ok := cu.mutation.Fee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldFee,
		})
	}
	if value, ok := cu.mutation.AddedFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldFee,
		})
	}
	if cu.mutation.FeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: consumer.FieldFee,
		})
	}
	if value, ok := cu.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldTotal,
		})
	}
	if value, ok := cu.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldTotal,
		})
	}
	if cu.mutation.TotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: consumer.FieldTotal,
		})
	}
	if value, ok := cu.mutation.FromReference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromReference,
		})
	}
	if cu.mutation.FromReferenceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldFromReference,
		})
	}
	if value, ok := cu.mutation.FromPhoneNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromPhoneNo,
		})
	}
	if cu.mutation.FromPhoneNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldFromPhoneNo,
		})
	}
	if value, ok := cu.mutation.FromName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromName,
		})
	}
	if cu.mutation.FromNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldFromName,
		})
	}
	if value, ok := cu.mutation.ToAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccount,
		})
	}
	if cu.mutation.ToAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldToAccount,
		})
	}
	if value, ok := cu.mutation.ToAccountPhoneNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccountPhoneNo,
		})
	}
	if cu.mutation.ToAccountPhoneNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldToAccountPhoneNo,
		})
	}
	if value, ok := cu.mutation.ToAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccountName,
		})
	}
	if cu.mutation.ToAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldToAccountName,
		})
	}
	if value, ok := cu.mutation.BankCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldBankCode,
		})
	}
	if cu.mutation.BankCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldBankCode,
		})
	}
	if value, ok := cu.mutation.TerminalId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTerminalId,
		})
	}
	if cu.mutation.TerminalIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTerminalId,
		})
	}
	if value, ok := cu.mutation.TerminalType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTerminalType,
		})
	}
	if cu.mutation.TerminalTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTerminalType,
		})
	}
	if value, ok := cu.mutation.ToAccount105(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccount105,
		})
	}
	if cu.mutation.ToAccount105Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldToAccount105,
		})
	}
	if value, ok := cu.mutation.FromReference105(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromReference105,
		})
	}
	if cu.mutation.FromReference105Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldFromReference105,
		})
	}
	if value, ok := cu.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: consumer.FieldDateTime,
		})
	}
	if cu.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: consumer.FieldDateTime,
		})
	}
	if value, ok := cu.mutation.PartnerRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldPartnerRef,
		})
	}
	if cu.mutation.PartnerRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldPartnerRef,
		})
	}
	if value, ok := cu.mutation.ResponseCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldResponseCode,
		})
	}
	if cu.mutation.ResponseCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldResponseCode,
		})
	}
	if value, ok := cu.mutation.ResponseDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldResponseDescription,
		})
	}
	if cu.mutation.ResponseDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldResponseDescription,
		})
	}
	if value, ok := cu.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: consumer.FieldFileimportID,
		})
	}
	if value, ok := cu.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: consumer.FieldFileimportID,
		})
	}
	if cu.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: consumer.FieldFileimportID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{consumer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ConsumerUpdateOne is the builder for updating a single Consumer entity.
type ConsumerUpdateOne struct {
	config
	hooks    []Hook
	mutation *ConsumerMutation
}

// SetTransactionID sets the "transaction_id" field.
func (cuo *ConsumerUpdateOne) SetTransactionID(s string) *ConsumerUpdateOne {
	cuo.mutation.SetTransactionID(s)
	return cuo
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableTransactionID(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetTransactionID(*s)
	}
	return cuo
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (cuo *ConsumerUpdateOne) ClearTransactionID() *ConsumerUpdateOne {
	cuo.mutation.ClearTransactionID()
	return cuo
}

// SetTransactionStatus sets the "TransactionStatus" field.
func (cuo *ConsumerUpdateOne) SetTransactionStatus(s string) *ConsumerUpdateOne {
	cuo.mutation.SetTransactionStatus(s)
	return cuo
}

// SetNillableTransactionStatus sets the "TransactionStatus" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableTransactionStatus(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetTransactionStatus(*s)
	}
	return cuo
}

// ClearTransactionStatus clears the value of the "TransactionStatus" field.
func (cuo *ConsumerUpdateOne) ClearTransactionStatus() *ConsumerUpdateOne {
	cuo.mutation.ClearTransactionStatus()
	return cuo
}

// SetTransactionType sets the "TransactionType" field.
func (cuo *ConsumerUpdateOne) SetTransactionType(s string) *ConsumerUpdateOne {
	cuo.mutation.SetTransactionType(s)
	return cuo
}

// SetNillableTransactionType sets the "TransactionType" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableTransactionType(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetTransactionType(*s)
	}
	return cuo
}

// ClearTransactionType clears the value of the "TransactionType" field.
func (cuo *ConsumerUpdateOne) ClearTransactionType() *ConsumerUpdateOne {
	cuo.mutation.ClearTransactionType()
	return cuo
}

// SetPaymentChannel sets the "PaymentChannel" field.
func (cuo *ConsumerUpdateOne) SetPaymentChannel(s string) *ConsumerUpdateOne {
	cuo.mutation.SetPaymentChannel(s)
	return cuo
}

// SetNillablePaymentChannel sets the "PaymentChannel" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillablePaymentChannel(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetPaymentChannel(*s)
	}
	return cuo
}

// ClearPaymentChannel clears the value of the "PaymentChannel" field.
func (cuo *ConsumerUpdateOne) ClearPaymentChannel() *ConsumerUpdateOne {
	cuo.mutation.ClearPaymentChannel()
	return cuo
}

// SetPaymentType sets the "PaymentType" field.
func (cuo *ConsumerUpdateOne) SetPaymentType(s string) *ConsumerUpdateOne {
	cuo.mutation.SetPaymentType(s)
	return cuo
}

// SetNillablePaymentType sets the "PaymentType" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillablePaymentType(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetPaymentType(*s)
	}
	return cuo
}

// ClearPaymentType clears the value of the "PaymentType" field.
func (cuo *ConsumerUpdateOne) ClearPaymentType() *ConsumerUpdateOne {
	cuo.mutation.ClearPaymentType()
	return cuo
}

// SetTypeCode sets the "TypeCode" field.
func (cuo *ConsumerUpdateOne) SetTypeCode(s string) *ConsumerUpdateOne {
	cuo.mutation.SetTypeCode(s)
	return cuo
}

// SetNillableTypeCode sets the "TypeCode" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableTypeCode(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetTypeCode(*s)
	}
	return cuo
}

// ClearTypeCode clears the value of the "TypeCode" field.
func (cuo *ConsumerUpdateOne) ClearTypeCode() *ConsumerUpdateOne {
	cuo.mutation.ClearTypeCode()
	return cuo
}

// SetApprovalCode sets the "ApprovalCode" field.
func (cuo *ConsumerUpdateOne) SetApprovalCode(s string) *ConsumerUpdateOne {
	cuo.mutation.SetApprovalCode(s)
	return cuo
}

// SetNillableApprovalCode sets the "ApprovalCode" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableApprovalCode(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetApprovalCode(*s)
	}
	return cuo
}

// ClearApprovalCode clears the value of the "ApprovalCode" field.
func (cuo *ConsumerUpdateOne) ClearApprovalCode() *ConsumerUpdateOne {
	cuo.mutation.ClearApprovalCode()
	return cuo
}

// SetBillerID sets the "BillerID" field.
func (cuo *ConsumerUpdateOne) SetBillerID(s string) *ConsumerUpdateOne {
	cuo.mutation.SetBillerID(s)
	return cuo
}

// SetNillableBillerID sets the "BillerID" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableBillerID(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetBillerID(*s)
	}
	return cuo
}

// ClearBillerID clears the value of the "BillerID" field.
func (cuo *ConsumerUpdateOne) ClearBillerID() *ConsumerUpdateOne {
	cuo.mutation.ClearBillerID()
	return cuo
}

// SetRef1 sets the "ref1" field.
func (cuo *ConsumerUpdateOne) SetRef1(s string) *ConsumerUpdateOne {
	cuo.mutation.SetRef1(s)
	return cuo
}

// SetNillableRef1 sets the "ref1" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableRef1(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetRef1(*s)
	}
	return cuo
}

// ClearRef1 clears the value of the "ref1" field.
func (cuo *ConsumerUpdateOne) ClearRef1() *ConsumerUpdateOne {
	cuo.mutation.ClearRef1()
	return cuo
}

// SetRef2 sets the "ref2" field.
func (cuo *ConsumerUpdateOne) SetRef2(s string) *ConsumerUpdateOne {
	cuo.mutation.SetRef2(s)
	return cuo
}

// SetNillableRef2 sets the "ref2" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableRef2(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetRef2(*s)
	}
	return cuo
}

// ClearRef2 clears the value of the "ref2" field.
func (cuo *ConsumerUpdateOne) ClearRef2() *ConsumerUpdateOne {
	cuo.mutation.ClearRef2()
	return cuo
}

// SetRef3 sets the "ref3" field.
func (cuo *ConsumerUpdateOne) SetRef3(s string) *ConsumerUpdateOne {
	cuo.mutation.SetRef3(s)
	return cuo
}

// SetNillableRef3 sets the "ref3" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableRef3(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetRef3(*s)
	}
	return cuo
}

// ClearRef3 clears the value of the "ref3" field.
func (cuo *ConsumerUpdateOne) ClearRef3() *ConsumerUpdateOne {
	cuo.mutation.ClearRef3()
	return cuo
}

// SetAmount sets the "amount" field.
func (cuo *ConsumerUpdateOne) SetAmount(f float64) *ConsumerUpdateOne {
	cuo.mutation.ResetAmount()
	cuo.mutation.SetAmount(f)
	return cuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableAmount(f *float64) *ConsumerUpdateOne {
	if f != nil {
		cuo.SetAmount(*f)
	}
	return cuo
}

// AddAmount adds f to the "amount" field.
func (cuo *ConsumerUpdateOne) AddAmount(f float64) *ConsumerUpdateOne {
	cuo.mutation.AddAmount(f)
	return cuo
}

// ClearAmount clears the value of the "amount" field.
func (cuo *ConsumerUpdateOne) ClearAmount() *ConsumerUpdateOne {
	cuo.mutation.ClearAmount()
	return cuo
}

// SetFee sets the "fee" field.
func (cuo *ConsumerUpdateOne) SetFee(f float64) *ConsumerUpdateOne {
	cuo.mutation.ResetFee()
	cuo.mutation.SetFee(f)
	return cuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableFee(f *float64) *ConsumerUpdateOne {
	if f != nil {
		cuo.SetFee(*f)
	}
	return cuo
}

// AddFee adds f to the "fee" field.
func (cuo *ConsumerUpdateOne) AddFee(f float64) *ConsumerUpdateOne {
	cuo.mutation.AddFee(f)
	return cuo
}

// ClearFee clears the value of the "fee" field.
func (cuo *ConsumerUpdateOne) ClearFee() *ConsumerUpdateOne {
	cuo.mutation.ClearFee()
	return cuo
}

// SetTotal sets the "total" field.
func (cuo *ConsumerUpdateOne) SetTotal(f float64) *ConsumerUpdateOne {
	cuo.mutation.ResetTotal()
	cuo.mutation.SetTotal(f)
	return cuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableTotal(f *float64) *ConsumerUpdateOne {
	if f != nil {
		cuo.SetTotal(*f)
	}
	return cuo
}

// AddTotal adds f to the "total" field.
func (cuo *ConsumerUpdateOne) AddTotal(f float64) *ConsumerUpdateOne {
	cuo.mutation.AddTotal(f)
	return cuo
}

// ClearTotal clears the value of the "total" field.
func (cuo *ConsumerUpdateOne) ClearTotal() *ConsumerUpdateOne {
	cuo.mutation.ClearTotal()
	return cuo
}

// SetFromReference sets the "FromReference" field.
func (cuo *ConsumerUpdateOne) SetFromReference(s string) *ConsumerUpdateOne {
	cuo.mutation.SetFromReference(s)
	return cuo
}

// SetNillableFromReference sets the "FromReference" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableFromReference(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetFromReference(*s)
	}
	return cuo
}

// ClearFromReference clears the value of the "FromReference" field.
func (cuo *ConsumerUpdateOne) ClearFromReference() *ConsumerUpdateOne {
	cuo.mutation.ClearFromReference()
	return cuo
}

// SetFromPhoneNo sets the "FromPhoneNo" field.
func (cuo *ConsumerUpdateOne) SetFromPhoneNo(s string) *ConsumerUpdateOne {
	cuo.mutation.SetFromPhoneNo(s)
	return cuo
}

// SetNillableFromPhoneNo sets the "FromPhoneNo" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableFromPhoneNo(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetFromPhoneNo(*s)
	}
	return cuo
}

// ClearFromPhoneNo clears the value of the "FromPhoneNo" field.
func (cuo *ConsumerUpdateOne) ClearFromPhoneNo() *ConsumerUpdateOne {
	cuo.mutation.ClearFromPhoneNo()
	return cuo
}

// SetFromName sets the "FromName" field.
func (cuo *ConsumerUpdateOne) SetFromName(s string) *ConsumerUpdateOne {
	cuo.mutation.SetFromName(s)
	return cuo
}

// SetNillableFromName sets the "FromName" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableFromName(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetFromName(*s)
	}
	return cuo
}

// ClearFromName clears the value of the "FromName" field.
func (cuo *ConsumerUpdateOne) ClearFromName() *ConsumerUpdateOne {
	cuo.mutation.ClearFromName()
	return cuo
}

// SetToAccount sets the "ToAccount" field.
func (cuo *ConsumerUpdateOne) SetToAccount(s string) *ConsumerUpdateOne {
	cuo.mutation.SetToAccount(s)
	return cuo
}

// SetNillableToAccount sets the "ToAccount" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableToAccount(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetToAccount(*s)
	}
	return cuo
}

// ClearToAccount clears the value of the "ToAccount" field.
func (cuo *ConsumerUpdateOne) ClearToAccount() *ConsumerUpdateOne {
	cuo.mutation.ClearToAccount()
	return cuo
}

// SetToAccountPhoneNo sets the "ToAccountPhoneNo" field.
func (cuo *ConsumerUpdateOne) SetToAccountPhoneNo(s string) *ConsumerUpdateOne {
	cuo.mutation.SetToAccountPhoneNo(s)
	return cuo
}

// SetNillableToAccountPhoneNo sets the "ToAccountPhoneNo" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableToAccountPhoneNo(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetToAccountPhoneNo(*s)
	}
	return cuo
}

// ClearToAccountPhoneNo clears the value of the "ToAccountPhoneNo" field.
func (cuo *ConsumerUpdateOne) ClearToAccountPhoneNo() *ConsumerUpdateOne {
	cuo.mutation.ClearToAccountPhoneNo()
	return cuo
}

// SetToAccountName sets the "ToAccountName" field.
func (cuo *ConsumerUpdateOne) SetToAccountName(s string) *ConsumerUpdateOne {
	cuo.mutation.SetToAccountName(s)
	return cuo
}

// SetNillableToAccountName sets the "ToAccountName" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableToAccountName(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetToAccountName(*s)
	}
	return cuo
}

// ClearToAccountName clears the value of the "ToAccountName" field.
func (cuo *ConsumerUpdateOne) ClearToAccountName() *ConsumerUpdateOne {
	cuo.mutation.ClearToAccountName()
	return cuo
}

// SetBankCode sets the "BankCode" field.
func (cuo *ConsumerUpdateOne) SetBankCode(s string) *ConsumerUpdateOne {
	cuo.mutation.SetBankCode(s)
	return cuo
}

// SetNillableBankCode sets the "BankCode" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableBankCode(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetBankCode(*s)
	}
	return cuo
}

// ClearBankCode clears the value of the "BankCode" field.
func (cuo *ConsumerUpdateOne) ClearBankCode() *ConsumerUpdateOne {
	cuo.mutation.ClearBankCode()
	return cuo
}

// SetTerminalId sets the "TerminalId" field.
func (cuo *ConsumerUpdateOne) SetTerminalId(s string) *ConsumerUpdateOne {
	cuo.mutation.SetTerminalId(s)
	return cuo
}

// SetNillableTerminalId sets the "TerminalId" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableTerminalId(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetTerminalId(*s)
	}
	return cuo
}

// ClearTerminalId clears the value of the "TerminalId" field.
func (cuo *ConsumerUpdateOne) ClearTerminalId() *ConsumerUpdateOne {
	cuo.mutation.ClearTerminalId()
	return cuo
}

// SetTerminalType sets the "TerminalType" field.
func (cuo *ConsumerUpdateOne) SetTerminalType(s string) *ConsumerUpdateOne {
	cuo.mutation.SetTerminalType(s)
	return cuo
}

// SetNillableTerminalType sets the "TerminalType" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableTerminalType(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetTerminalType(*s)
	}
	return cuo
}

// ClearTerminalType clears the value of the "TerminalType" field.
func (cuo *ConsumerUpdateOne) ClearTerminalType() *ConsumerUpdateOne {
	cuo.mutation.ClearTerminalType()
	return cuo
}

// SetToAccount105 sets the "ToAccount105" field.
func (cuo *ConsumerUpdateOne) SetToAccount105(s string) *ConsumerUpdateOne {
	cuo.mutation.SetToAccount105(s)
	return cuo
}

// SetNillableToAccount105 sets the "ToAccount105" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableToAccount105(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetToAccount105(*s)
	}
	return cuo
}

// ClearToAccount105 clears the value of the "ToAccount105" field.
func (cuo *ConsumerUpdateOne) ClearToAccount105() *ConsumerUpdateOne {
	cuo.mutation.ClearToAccount105()
	return cuo
}

// SetFromReference105 sets the "FromReference105" field.
func (cuo *ConsumerUpdateOne) SetFromReference105(s string) *ConsumerUpdateOne {
	cuo.mutation.SetFromReference105(s)
	return cuo
}

// SetNillableFromReference105 sets the "FromReference105" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableFromReference105(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetFromReference105(*s)
	}
	return cuo
}

// ClearFromReference105 clears the value of the "FromReference105" field.
func (cuo *ConsumerUpdateOne) ClearFromReference105() *ConsumerUpdateOne {
	cuo.mutation.ClearFromReference105()
	return cuo
}

// SetDateTime sets the "dateTime" field.
func (cuo *ConsumerUpdateOne) SetDateTime(t time.Time) *ConsumerUpdateOne {
	cuo.mutation.SetDateTime(t)
	return cuo
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableDateTime(t *time.Time) *ConsumerUpdateOne {
	if t != nil {
		cuo.SetDateTime(*t)
	}
	return cuo
}

// ClearDateTime clears the value of the "dateTime" field.
func (cuo *ConsumerUpdateOne) ClearDateTime() *ConsumerUpdateOne {
	cuo.mutation.ClearDateTime()
	return cuo
}

// SetPartnerRef sets the "PartnerRef" field.
func (cuo *ConsumerUpdateOne) SetPartnerRef(s string) *ConsumerUpdateOne {
	cuo.mutation.SetPartnerRef(s)
	return cuo
}

// SetNillablePartnerRef sets the "PartnerRef" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillablePartnerRef(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetPartnerRef(*s)
	}
	return cuo
}

// ClearPartnerRef clears the value of the "PartnerRef" field.
func (cuo *ConsumerUpdateOne) ClearPartnerRef() *ConsumerUpdateOne {
	cuo.mutation.ClearPartnerRef()
	return cuo
}

// SetResponseCode sets the "ResponseCode" field.
func (cuo *ConsumerUpdateOne) SetResponseCode(s string) *ConsumerUpdateOne {
	cuo.mutation.SetResponseCode(s)
	return cuo
}

// SetNillableResponseCode sets the "ResponseCode" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableResponseCode(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetResponseCode(*s)
	}
	return cuo
}

// ClearResponseCode clears the value of the "ResponseCode" field.
func (cuo *ConsumerUpdateOne) ClearResponseCode() *ConsumerUpdateOne {
	cuo.mutation.ClearResponseCode()
	return cuo
}

// SetResponseDescription sets the "ResponseDescription" field.
func (cuo *ConsumerUpdateOne) SetResponseDescription(s string) *ConsumerUpdateOne {
	cuo.mutation.SetResponseDescription(s)
	return cuo
}

// SetNillableResponseDescription sets the "ResponseDescription" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableResponseDescription(s *string) *ConsumerUpdateOne {
	if s != nil {
		cuo.SetResponseDescription(*s)
	}
	return cuo
}

// ClearResponseDescription clears the value of the "ResponseDescription" field.
func (cuo *ConsumerUpdateOne) ClearResponseDescription() *ConsumerUpdateOne {
	cuo.mutation.ClearResponseDescription()
	return cuo
}

// SetFileimportID sets the "FileimportID" field.
func (cuo *ConsumerUpdateOne) SetFileimportID(i int) *ConsumerUpdateOne {
	cuo.mutation.ResetFileimportID()
	cuo.mutation.SetFileimportID(i)
	return cuo
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (cuo *ConsumerUpdateOne) SetNillableFileimportID(i *int) *ConsumerUpdateOne {
	if i != nil {
		cuo.SetFileimportID(*i)
	}
	return cuo
}

// AddFileimportID adds i to the "FileimportID" field.
func (cuo *ConsumerUpdateOne) AddFileimportID(i int) *ConsumerUpdateOne {
	cuo.mutation.AddFileimportID(i)
	return cuo
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (cuo *ConsumerUpdateOne) ClearFileimportID() *ConsumerUpdateOne {
	cuo.mutation.ClearFileimportID()
	return cuo
}

// Mutation returns the ConsumerMutation object of the builder.
func (cuo *ConsumerUpdateOne) Mutation() *ConsumerMutation {
	return cuo.mutation
}

// Save executes the query and returns the updated Consumer entity.
func (cuo *ConsumerUpdateOne) Save(ctx context.Context) (*Consumer, error) {
	var (
		err  error
		node *Consumer
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConsumerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConsumerUpdateOne) SaveX(ctx context.Context) *Consumer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConsumerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConsumerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConsumerUpdateOne) check() error {
	if v, ok := cuo.mutation.TransactionID(); ok {
		if err := consumer.TransactionIDValidator(v); err != nil {
			return &ValidationError{Name: "transaction_id", err: fmt.Errorf("ent: validator failed for field \"transaction_id\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.TransactionStatus(); ok {
		if err := consumer.TransactionStatusValidator(v); err != nil {
			return &ValidationError{Name: "TransactionStatus", err: fmt.Errorf("ent: validator failed for field \"TransactionStatus\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.TransactionType(); ok {
		if err := consumer.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "TransactionType", err: fmt.Errorf("ent: validator failed for field \"TransactionType\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.PaymentChannel(); ok {
		if err := consumer.PaymentChannelValidator(v); err != nil {
			return &ValidationError{Name: "PaymentChannel", err: fmt.Errorf("ent: validator failed for field \"PaymentChannel\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.PaymentType(); ok {
		if err := consumer.PaymentTypeValidator(v); err != nil {
			return &ValidationError{Name: "PaymentType", err: fmt.Errorf("ent: validator failed for field \"PaymentType\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.TypeCode(); ok {
		if err := consumer.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "TypeCode", err: fmt.Errorf("ent: validator failed for field \"TypeCode\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ApprovalCode(); ok {
		if err := consumer.ApprovalCodeValidator(v); err != nil {
			return &ValidationError{Name: "ApprovalCode", err: fmt.Errorf("ent: validator failed for field \"ApprovalCode\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.BillerID(); ok {
		if err := consumer.BillerIDValidator(v); err != nil {
			return &ValidationError{Name: "BillerID", err: fmt.Errorf("ent: validator failed for field \"BillerID\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Ref1(); ok {
		if err := consumer.Ref1Validator(v); err != nil {
			return &ValidationError{Name: "ref1", err: fmt.Errorf("ent: validator failed for field \"ref1\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Ref2(); ok {
		if err := consumer.Ref2Validator(v); err != nil {
			return &ValidationError{Name: "ref2", err: fmt.Errorf("ent: validator failed for field \"ref2\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Ref3(); ok {
		if err := consumer.Ref3Validator(v); err != nil {
			return &ValidationError{Name: "ref3", err: fmt.Errorf("ent: validator failed for field \"ref3\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.FromReference(); ok {
		if err := consumer.FromReferenceValidator(v); err != nil {
			return &ValidationError{Name: "FromReference", err: fmt.Errorf("ent: validator failed for field \"FromReference\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.FromPhoneNo(); ok {
		if err := consumer.FromPhoneNoValidator(v); err != nil {
			return &ValidationError{Name: "FromPhoneNo", err: fmt.Errorf("ent: validator failed for field \"FromPhoneNo\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.FromName(); ok {
		if err := consumer.FromNameValidator(v); err != nil {
			return &ValidationError{Name: "FromName", err: fmt.Errorf("ent: validator failed for field \"FromName\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ToAccount(); ok {
		if err := consumer.ToAccountValidator(v); err != nil {
			return &ValidationError{Name: "ToAccount", err: fmt.Errorf("ent: validator failed for field \"ToAccount\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ToAccountPhoneNo(); ok {
		if err := consumer.ToAccountPhoneNoValidator(v); err != nil {
			return &ValidationError{Name: "ToAccountPhoneNo", err: fmt.Errorf("ent: validator failed for field \"ToAccountPhoneNo\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ToAccountName(); ok {
		if err := consumer.ToAccountNameValidator(v); err != nil {
			return &ValidationError{Name: "ToAccountName", err: fmt.Errorf("ent: validator failed for field \"ToAccountName\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.BankCode(); ok {
		if err := consumer.BankCodeValidator(v); err != nil {
			return &ValidationError{Name: "BankCode", err: fmt.Errorf("ent: validator failed for field \"BankCode\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.TerminalId(); ok {
		if err := consumer.TerminalIdValidator(v); err != nil {
			return &ValidationError{Name: "TerminalId", err: fmt.Errorf("ent: validator failed for field \"TerminalId\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.TerminalType(); ok {
		if err := consumer.TerminalTypeValidator(v); err != nil {
			return &ValidationError{Name: "TerminalType", err: fmt.Errorf("ent: validator failed for field \"TerminalType\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ToAccount105(); ok {
		if err := consumer.ToAccount105Validator(v); err != nil {
			return &ValidationError{Name: "ToAccount105", err: fmt.Errorf("ent: validator failed for field \"ToAccount105\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.FromReference105(); ok {
		if err := consumer.FromReference105Validator(v); err != nil {
			return &ValidationError{Name: "FromReference105", err: fmt.Errorf("ent: validator failed for field \"FromReference105\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.PartnerRef(); ok {
		if err := consumer.PartnerRefValidator(v); err != nil {
			return &ValidationError{Name: "PartnerRef", err: fmt.Errorf("ent: validator failed for field \"PartnerRef\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ResponseCode(); ok {
		if err := consumer.ResponseCodeValidator(v); err != nil {
			return &ValidationError{Name: "ResponseCode", err: fmt.Errorf("ent: validator failed for field \"ResponseCode\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ResponseDescription(); ok {
		if err := consumer.ResponseDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "ResponseDescription", err: fmt.Errorf("ent: validator failed for field \"ResponseDescription\": %w", err)}
		}
	}
	return nil
}

func (cuo *ConsumerUpdateOne) sqlSave(ctx context.Context) (_node *Consumer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   consumer.Table,
			Columns: consumer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: consumer.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Consumer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTransactionID,
		})
	}
	if cuo.mutation.TransactionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTransactionID,
		})
	}
	if value, ok := cuo.mutation.TransactionStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTransactionStatus,
		})
	}
	if cuo.mutation.TransactionStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTransactionStatus,
		})
	}
	if value, ok := cuo.mutation.TransactionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTransactionType,
		})
	}
	if cuo.mutation.TransactionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTransactionType,
		})
	}
	if value, ok := cuo.mutation.PaymentChannel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldPaymentChannel,
		})
	}
	if cuo.mutation.PaymentChannelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldPaymentChannel,
		})
	}
	if value, ok := cuo.mutation.PaymentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldPaymentType,
		})
	}
	if cuo.mutation.PaymentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldPaymentType,
		})
	}
	if value, ok := cuo.mutation.TypeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTypeCode,
		})
	}
	if cuo.mutation.TypeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTypeCode,
		})
	}
	if value, ok := cuo.mutation.ApprovalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldApprovalCode,
		})
	}
	if cuo.mutation.ApprovalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldApprovalCode,
		})
	}
	if value, ok := cuo.mutation.BillerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldBillerID,
		})
	}
	if cuo.mutation.BillerIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldBillerID,
		})
	}
	if value, ok := cuo.mutation.Ref1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldRef1,
		})
	}
	if cuo.mutation.Ref1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldRef1,
		})
	}
	if value, ok := cuo.mutation.Ref2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldRef2,
		})
	}
	if cuo.mutation.Ref2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldRef2,
		})
	}
	if value, ok := cuo.mutation.Ref3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldRef3,
		})
	}
	if cuo.mutation.Ref3Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldRef3,
		})
	}
	if value, ok := cuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldAmount,
		})
	}
	if value, ok := cuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldAmount,
		})
	}
	if cuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: consumer.FieldAmount,
		})
	}
	if value, ok := cuo.mutation.Fee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldFee,
		})
	}
	if value, ok := cuo.mutation.AddedFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldFee,
		})
	}
	if cuo.mutation.FeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: consumer.FieldFee,
		})
	}
	if value, ok := cuo.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldTotal,
		})
	}
	if value, ok := cuo.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldTotal,
		})
	}
	if cuo.mutation.TotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: consumer.FieldTotal,
		})
	}
	if value, ok := cuo.mutation.FromReference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromReference,
		})
	}
	if cuo.mutation.FromReferenceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldFromReference,
		})
	}
	if value, ok := cuo.mutation.FromPhoneNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromPhoneNo,
		})
	}
	if cuo.mutation.FromPhoneNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldFromPhoneNo,
		})
	}
	if value, ok := cuo.mutation.FromName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromName,
		})
	}
	if cuo.mutation.FromNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldFromName,
		})
	}
	if value, ok := cuo.mutation.ToAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccount,
		})
	}
	if cuo.mutation.ToAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldToAccount,
		})
	}
	if value, ok := cuo.mutation.ToAccountPhoneNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccountPhoneNo,
		})
	}
	if cuo.mutation.ToAccountPhoneNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldToAccountPhoneNo,
		})
	}
	if value, ok := cuo.mutation.ToAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccountName,
		})
	}
	if cuo.mutation.ToAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldToAccountName,
		})
	}
	if value, ok := cuo.mutation.BankCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldBankCode,
		})
	}
	if cuo.mutation.BankCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldBankCode,
		})
	}
	if value, ok := cuo.mutation.TerminalId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTerminalId,
		})
	}
	if cuo.mutation.TerminalIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTerminalId,
		})
	}
	if value, ok := cuo.mutation.TerminalType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTerminalType,
		})
	}
	if cuo.mutation.TerminalTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldTerminalType,
		})
	}
	if value, ok := cuo.mutation.ToAccount105(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccount105,
		})
	}
	if cuo.mutation.ToAccount105Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldToAccount105,
		})
	}
	if value, ok := cuo.mutation.FromReference105(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromReference105,
		})
	}
	if cuo.mutation.FromReference105Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldFromReference105,
		})
	}
	if value, ok := cuo.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: consumer.FieldDateTime,
		})
	}
	if cuo.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: consumer.FieldDateTime,
		})
	}
	if value, ok := cuo.mutation.PartnerRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldPartnerRef,
		})
	}
	if cuo.mutation.PartnerRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldPartnerRef,
		})
	}
	if value, ok := cuo.mutation.ResponseCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldResponseCode,
		})
	}
	if cuo.mutation.ResponseCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldResponseCode,
		})
	}
	if value, ok := cuo.mutation.ResponseDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldResponseDescription,
		})
	}
	if cuo.mutation.ResponseDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: consumer.FieldResponseDescription,
		})
	}
	if value, ok := cuo.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: consumer.FieldFileimportID,
		})
	}
	if value, ok := cuo.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: consumer.FieldFileimportID,
		})
	}
	if cuo.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: consumer.FieldFileimportID,
		})
	}
	_node = &Consumer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{consumer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
