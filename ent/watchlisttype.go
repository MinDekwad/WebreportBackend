// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/watchlisttype"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Watchlisttype is the model entity for the Watchlisttype schema.
type Watchlisttype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TypeID holds the value of the "TypeID" field.
	TypeID int `json:"TypeID,omitempty"`
	// TypeName holds the value of the "TypeName" field.
	TypeName string `json:"TypeName,omitempty"`
	// TypeDescription holds the value of the "TypeDescription" field.
	TypeDescription string `json:"TypeDescription,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WatchlisttypeQuery when eager-loading is set.
	Edges WatchlisttypeEdges `json:"edges"`
}

// WatchlisttypeEdges holds the relations/edges for other nodes in the graph.
type WatchlisttypeEdges struct {
	// Watchlist holds the value of the watchlist edge.
	Watchlist []*Watchlist `json:"watchlist,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WatchlistOrErr returns the Watchlist value or an error if the edge
// was not loaded in eager-loading.
func (e WatchlisttypeEdges) WatchlistOrErr() ([]*Watchlist, error) {
	if e.loadedTypes[0] {
		return e.Watchlist, nil
	}
	return nil, &NotLoadedError{edge: "watchlist"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Watchlisttype) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case watchlisttype.FieldID, watchlisttype.FieldTypeID:
			values[i] = &sql.NullInt64{}
		case watchlisttype.FieldTypeName, watchlisttype.FieldTypeDescription:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Watchlisttype", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Watchlisttype fields.
func (w *Watchlisttype) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case watchlisttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case watchlisttype.FieldTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TypeID", values[i])
			} else if value.Valid {
				w.TypeID = int(value.Int64)
			}
		case watchlisttype.FieldTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TypeName", values[i])
			} else if value.Valid {
				w.TypeName = value.String
			}
		case watchlisttype.FieldTypeDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TypeDescription", values[i])
			} else if value.Valid {
				w.TypeDescription = value.String
			}
		}
	}
	return nil
}

// QueryWatchlist queries the "watchlist" edge of the Watchlisttype entity.
func (w *Watchlisttype) QueryWatchlist() *WatchlistQuery {
	return (&WatchlisttypeClient{config: w.config}).QueryWatchlist(w)
}

// Update returns a builder for updating this Watchlisttype.
// Note that you need to call Watchlisttype.Unwrap() before calling this method if this Watchlisttype
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Watchlisttype) Update() *WatchlisttypeUpdateOne {
	return (&WatchlisttypeClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Watchlisttype entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Watchlisttype) Unwrap() *Watchlisttype {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Watchlisttype is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Watchlisttype) String() string {
	var builder strings.Builder
	builder.WriteString("Watchlisttype(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", TypeID=")
	builder.WriteString(fmt.Sprintf("%v", w.TypeID))
	builder.WriteString(", TypeName=")
	builder.WriteString(w.TypeName)
	builder.WriteString(", TypeDescription=")
	builder.WriteString(w.TypeDescription)
	builder.WriteByte(')')
	return builder.String()
}

// Watchlisttypes is a parsable slice of Watchlisttype.
type Watchlisttypes []*Watchlisttype

func (w Watchlisttypes) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
