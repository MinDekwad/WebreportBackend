// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/watchlisthistory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WatchlisthistoryUpdate is the builder for updating Watchlisthistory entities.
type WatchlisthistoryUpdate struct {
	config
	hooks    []Hook
	mutation *WatchlisthistoryMutation
}

// Where adds a new predicate for the WatchlisthistoryUpdate builder.
func (wu *WatchlisthistoryUpdate) Where(ps ...predicate.Watchlisthistory) *WatchlisthistoryUpdate {
	wu.mutation.predicates = append(wu.mutation.predicates, ps...)
	return wu
}

// SetName sets the "Name" field.
func (wu *WatchlisthistoryUpdate) SetName(s string) *WatchlisthistoryUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetTaxID sets the "TaxID" field.
func (wu *WatchlisthistoryUpdate) SetTaxID(s string) *WatchlisthistoryUpdate {
	wu.mutation.SetTaxID(s)
	return wu
}

// SetTypeName sets the "TypeName" field.
func (wu *WatchlisthistoryUpdate) SetTypeName(s string) *WatchlisthistoryUpdate {
	wu.mutation.SetTypeName(s)
	return wu
}

// SetRankWatchlist sets the "RankWatchlist" field.
func (wu *WatchlisthistoryUpdate) SetRankWatchlist(i int) *WatchlisthistoryUpdate {
	wu.mutation.ResetRankWatchlist()
	wu.mutation.SetRankWatchlist(i)
	return wu
}

// SetNillableRankWatchlist sets the "RankWatchlist" field if the given value is not nil.
func (wu *WatchlisthistoryUpdate) SetNillableRankWatchlist(i *int) *WatchlisthistoryUpdate {
	if i != nil {
		wu.SetRankWatchlist(*i)
	}
	return wu
}

// AddRankWatchlist adds i to the "RankWatchlist" field.
func (wu *WatchlisthistoryUpdate) AddRankWatchlist(i int) *WatchlisthistoryUpdate {
	wu.mutation.AddRankWatchlist(i)
	return wu
}

// ClearRankWatchlist clears the value of the "RankWatchlist" field.
func (wu *WatchlisthistoryUpdate) ClearRankWatchlist() *WatchlisthistoryUpdate {
	wu.mutation.ClearRankWatchlist()
	return wu
}

// SetStatusDel sets the "StatusDel" field.
func (wu *WatchlisthistoryUpdate) SetStatusDel(i int) *WatchlisthistoryUpdate {
	wu.mutation.ResetStatusDel()
	wu.mutation.SetStatusDel(i)
	return wu
}

// SetNillableStatusDel sets the "StatusDel" field if the given value is not nil.
func (wu *WatchlisthistoryUpdate) SetNillableStatusDel(i *int) *WatchlisthistoryUpdate {
	if i != nil {
		wu.SetStatusDel(*i)
	}
	return wu
}

// AddStatusDel adds i to the "StatusDel" field.
func (wu *WatchlisthistoryUpdate) AddStatusDel(i int) *WatchlisthistoryUpdate {
	wu.mutation.AddStatusDel(i)
	return wu
}

// ClearStatusDel clears the value of the "StatusDel" field.
func (wu *WatchlisthistoryUpdate) ClearStatusDel() *WatchlisthistoryUpdate {
	wu.mutation.ClearStatusDel()
	return wu
}

// SetDateCalRank sets the "DateCalRank" field.
func (wu *WatchlisthistoryUpdate) SetDateCalRank(t time.Time) *WatchlisthistoryUpdate {
	wu.mutation.SetDateCalRank(t)
	return wu
}

// SetNillableDateCalRank sets the "DateCalRank" field if the given value is not nil.
func (wu *WatchlisthistoryUpdate) SetNillableDateCalRank(t *time.Time) *WatchlisthistoryUpdate {
	if t != nil {
		wu.SetDateCalRank(*t)
	}
	return wu
}

// ClearDateCalRank clears the value of the "DateCalRank" field.
func (wu *WatchlisthistoryUpdate) ClearDateCalRank() *WatchlisthistoryUpdate {
	wu.mutation.ClearDateCalRank()
	return wu
}

// Mutation returns the WatchlisthistoryMutation object of the builder.
func (wu *WatchlisthistoryUpdate) Mutation() *WatchlisthistoryMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WatchlisthistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		if err = wu.check(); err != nil {
			return 0, err
		}
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WatchlisthistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wu.check(); err != nil {
				return 0, err
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WatchlisthistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WatchlisthistoryUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WatchlisthistoryUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WatchlisthistoryUpdate) check() error {
	if v, ok := wu.mutation.Name(); ok {
		if err := watchlisthistory.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := wu.mutation.TaxID(); ok {
		if err := watchlisthistory.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "TaxID", err: fmt.Errorf("ent: validator failed for field \"TaxID\": %w", err)}
		}
	}
	if v, ok := wu.mutation.TypeName(); ok {
		if err := watchlisthistory.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "TypeName", err: fmt.Errorf("ent: validator failed for field \"TypeName\": %w", err)}
		}
	}
	return nil
}

func (wu *WatchlisthistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   watchlisthistory.Table,
			Columns: watchlisthistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: watchlisthistory.FieldID,
			},
		},
	}
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisthistory.FieldName,
		})
	}
	if value, ok := wu.mutation.TaxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisthistory.FieldTaxID,
		})
	}
	if value, ok := wu.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisthistory.FieldTypeName,
		})
	}
	if value, ok := wu.mutation.RankWatchlist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisthistory.FieldRankWatchlist,
		})
	}
	if value, ok := wu.mutation.AddedRankWatchlist(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisthistory.FieldRankWatchlist,
		})
	}
	if wu.mutation.RankWatchlistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: watchlisthistory.FieldRankWatchlist,
		})
	}
	if value, ok := wu.mutation.StatusDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisthistory.FieldStatusDel,
		})
	}
	if value, ok := wu.mutation.AddedStatusDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisthistory.FieldStatusDel,
		})
	}
	if wu.mutation.StatusDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: watchlisthistory.FieldStatusDel,
		})
	}
	if value, ok := wu.mutation.DateCalRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: watchlisthistory.FieldDateCalRank,
		})
	}
	if wu.mutation.DateCalRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: watchlisthistory.FieldDateCalRank,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{watchlisthistory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WatchlisthistoryUpdateOne is the builder for updating a single Watchlisthistory entity.
type WatchlisthistoryUpdateOne struct {
	config
	hooks    []Hook
	mutation *WatchlisthistoryMutation
}

// SetName sets the "Name" field.
func (wuo *WatchlisthistoryUpdateOne) SetName(s string) *WatchlisthistoryUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetTaxID sets the "TaxID" field.
func (wuo *WatchlisthistoryUpdateOne) SetTaxID(s string) *WatchlisthistoryUpdateOne {
	wuo.mutation.SetTaxID(s)
	return wuo
}

// SetTypeName sets the "TypeName" field.
func (wuo *WatchlisthistoryUpdateOne) SetTypeName(s string) *WatchlisthistoryUpdateOne {
	wuo.mutation.SetTypeName(s)
	return wuo
}

// SetRankWatchlist sets the "RankWatchlist" field.
func (wuo *WatchlisthistoryUpdateOne) SetRankWatchlist(i int) *WatchlisthistoryUpdateOne {
	wuo.mutation.ResetRankWatchlist()
	wuo.mutation.SetRankWatchlist(i)
	return wuo
}

// SetNillableRankWatchlist sets the "RankWatchlist" field if the given value is not nil.
func (wuo *WatchlisthistoryUpdateOne) SetNillableRankWatchlist(i *int) *WatchlisthistoryUpdateOne {
	if i != nil {
		wuo.SetRankWatchlist(*i)
	}
	return wuo
}

// AddRankWatchlist adds i to the "RankWatchlist" field.
func (wuo *WatchlisthistoryUpdateOne) AddRankWatchlist(i int) *WatchlisthistoryUpdateOne {
	wuo.mutation.AddRankWatchlist(i)
	return wuo
}

// ClearRankWatchlist clears the value of the "RankWatchlist" field.
func (wuo *WatchlisthistoryUpdateOne) ClearRankWatchlist() *WatchlisthistoryUpdateOne {
	wuo.mutation.ClearRankWatchlist()
	return wuo
}

// SetStatusDel sets the "StatusDel" field.
func (wuo *WatchlisthistoryUpdateOne) SetStatusDel(i int) *WatchlisthistoryUpdateOne {
	wuo.mutation.ResetStatusDel()
	wuo.mutation.SetStatusDel(i)
	return wuo
}

// SetNillableStatusDel sets the "StatusDel" field if the given value is not nil.
func (wuo *WatchlisthistoryUpdateOne) SetNillableStatusDel(i *int) *WatchlisthistoryUpdateOne {
	if i != nil {
		wuo.SetStatusDel(*i)
	}
	return wuo
}

// AddStatusDel adds i to the "StatusDel" field.
func (wuo *WatchlisthistoryUpdateOne) AddStatusDel(i int) *WatchlisthistoryUpdateOne {
	wuo.mutation.AddStatusDel(i)
	return wuo
}

// ClearStatusDel clears the value of the "StatusDel" field.
func (wuo *WatchlisthistoryUpdateOne) ClearStatusDel() *WatchlisthistoryUpdateOne {
	wuo.mutation.ClearStatusDel()
	return wuo
}

// SetDateCalRank sets the "DateCalRank" field.
func (wuo *WatchlisthistoryUpdateOne) SetDateCalRank(t time.Time) *WatchlisthistoryUpdateOne {
	wuo.mutation.SetDateCalRank(t)
	return wuo
}

// SetNillableDateCalRank sets the "DateCalRank" field if the given value is not nil.
func (wuo *WatchlisthistoryUpdateOne) SetNillableDateCalRank(t *time.Time) *WatchlisthistoryUpdateOne {
	if t != nil {
		wuo.SetDateCalRank(*t)
	}
	return wuo
}

// ClearDateCalRank clears the value of the "DateCalRank" field.
func (wuo *WatchlisthistoryUpdateOne) ClearDateCalRank() *WatchlisthistoryUpdateOne {
	wuo.mutation.ClearDateCalRank()
	return wuo
}

// Mutation returns the WatchlisthistoryMutation object of the builder.
func (wuo *WatchlisthistoryUpdateOne) Mutation() *WatchlisthistoryMutation {
	return wuo.mutation
}

// Save executes the query and returns the updated Watchlisthistory entity.
func (wuo *WatchlisthistoryUpdateOne) Save(ctx context.Context) (*Watchlisthistory, error) {
	var (
		err  error
		node *Watchlisthistory
	)
	if len(wuo.hooks) == 0 {
		if err = wuo.check(); err != nil {
			return nil, err
		}
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WatchlisthistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wuo.check(); err != nil {
				return nil, err
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			mut = wuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WatchlisthistoryUpdateOne) SaveX(ctx context.Context) *Watchlisthistory {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WatchlisthistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WatchlisthistoryUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WatchlisthistoryUpdateOne) check() error {
	if v, ok := wuo.mutation.Name(); ok {
		if err := watchlisthistory.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := wuo.mutation.TaxID(); ok {
		if err := watchlisthistory.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "TaxID", err: fmt.Errorf("ent: validator failed for field \"TaxID\": %w", err)}
		}
	}
	if v, ok := wuo.mutation.TypeName(); ok {
		if err := watchlisthistory.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "TypeName", err: fmt.Errorf("ent: validator failed for field \"TypeName\": %w", err)}
		}
	}
	return nil
}

func (wuo *WatchlisthistoryUpdateOne) sqlSave(ctx context.Context) (_node *Watchlisthistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   watchlisthistory.Table,
			Columns: watchlisthistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: watchlisthistory.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Watchlisthistory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisthistory.FieldName,
		})
	}
	if value, ok := wuo.mutation.TaxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisthistory.FieldTaxID,
		})
	}
	if value, ok := wuo.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisthistory.FieldTypeName,
		})
	}
	if value, ok := wuo.mutation.RankWatchlist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisthistory.FieldRankWatchlist,
		})
	}
	if value, ok := wuo.mutation.AddedRankWatchlist(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisthistory.FieldRankWatchlist,
		})
	}
	if wuo.mutation.RankWatchlistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: watchlisthistory.FieldRankWatchlist,
		})
	}
	if value, ok := wuo.mutation.StatusDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisthistory.FieldStatusDel,
		})
	}
	if value, ok := wuo.mutation.AddedStatusDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisthistory.FieldStatusDel,
		})
	}
	if wuo.mutation.StatusDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: watchlisthistory.FieldStatusDel,
		})
	}
	if value, ok := wuo.mutation.DateCalRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: watchlisthistory.FieldDateCalRank,
		})
	}
	if wuo.mutation.DateCalRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: watchlisthistory.FieldDateCalRank,
		})
	}
	_node = &Watchlisthistory{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{watchlisthistory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
