// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-report2/ent/areahistory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreahistoryCreate is the builder for creating a Areahistory entity.
type AreahistoryCreate struct {
	config
	mutation *AreahistoryMutation
	hooks    []Hook
}

// SetWalletID sets the "WalletID" field.
func (ac *AreahistoryCreate) SetWalletID(s string) *AreahistoryCreate {
	ac.mutation.SetWalletID(s)
	return ac
}

// SetProvinceNameTH sets the "ProvinceNameTH" field.
func (ac *AreahistoryCreate) SetProvinceNameTH(s string) *AreahistoryCreate {
	ac.mutation.SetProvinceNameTH(s)
	return ac
}

// SetNillableProvinceNameTH sets the "ProvinceNameTH" field if the given value is not nil.
func (ac *AreahistoryCreate) SetNillableProvinceNameTH(s *string) *AreahistoryCreate {
	if s != nil {
		ac.SetProvinceNameTH(*s)
	}
	return ac
}

// SetDistrictNameTH sets the "DistrictNameTH" field.
func (ac *AreahistoryCreate) SetDistrictNameTH(s string) *AreahistoryCreate {
	ac.mutation.SetDistrictNameTH(s)
	return ac
}

// SetNillableDistrictNameTH sets the "DistrictNameTH" field if the given value is not nil.
func (ac *AreahistoryCreate) SetNillableDistrictNameTH(s *string) *AreahistoryCreate {
	if s != nil {
		ac.SetDistrictNameTH(*s)
	}
	return ac
}

// SetSubDistrict sets the "SubDistrict" field.
func (ac *AreahistoryCreate) SetSubDistrict(s string) *AreahistoryCreate {
	ac.mutation.SetSubDistrict(s)
	return ac
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (ac *AreahistoryCreate) SetNillableSubDistrict(s *string) *AreahistoryCreate {
	if s != nil {
		ac.SetSubDistrict(*s)
	}
	return ac
}

// SetRankArea sets the "RankArea" field.
func (ac *AreahistoryCreate) SetRankArea(i int) *AreahistoryCreate {
	ac.mutation.SetRankArea(i)
	return ac
}

// SetNillableRankArea sets the "RankArea" field if the given value is not nil.
func (ac *AreahistoryCreate) SetNillableRankArea(i *int) *AreahistoryCreate {
	if i != nil {
		ac.SetRankArea(*i)
	}
	return ac
}

// SetDateCalRank sets the "DateCalRank" field.
func (ac *AreahistoryCreate) SetDateCalRank(t time.Time) *AreahistoryCreate {
	ac.mutation.SetDateCalRank(t)
	return ac
}

// SetNillableDateCalRank sets the "DateCalRank" field if the given value is not nil.
func (ac *AreahistoryCreate) SetNillableDateCalRank(t *time.Time) *AreahistoryCreate {
	if t != nil {
		ac.SetDateCalRank(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AreahistoryCreate) SetID(i int) *AreahistoryCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the AreahistoryMutation object of the builder.
func (ac *AreahistoryCreate) Mutation() *AreahistoryMutation {
	return ac.mutation
}

// Save creates the Areahistory in the database.
func (ac *AreahistoryCreate) Save(ctx context.Context) (*Areahistory, error) {
	var (
		err  error
		node *Areahistory
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AreahistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AreahistoryCreate) SaveX(ctx context.Context) *Areahistory {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ac *AreahistoryCreate) check() error {
	if _, ok := ac.mutation.WalletID(); !ok {
		return &ValidationError{Name: "WalletID", err: errors.New("ent: missing required field \"WalletID\"")}
	}
	if v, ok := ac.mutation.WalletID(); ok {
		if err := areahistory.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := ac.mutation.ProvinceNameTH(); ok {
		if err := areahistory.ProvinceNameTHValidator(v); err != nil {
			return &ValidationError{Name: "ProvinceNameTH", err: fmt.Errorf("ent: validator failed for field \"ProvinceNameTH\": %w", err)}
		}
	}
	if v, ok := ac.mutation.DistrictNameTH(); ok {
		if err := areahistory.DistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"DistrictNameTH\": %w", err)}
		}
	}
	if v, ok := ac.mutation.SubDistrict(); ok {
		if err := areahistory.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf("ent: validator failed for field \"SubDistrict\": %w", err)}
		}
	}
	return nil
}

func (ac *AreahistoryCreate) sqlSave(ctx context.Context) (*Areahistory, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (ac *AreahistoryCreate) createSpec() (*Areahistory, *sqlgraph.CreateSpec) {
	var (
		_node = &Areahistory{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: areahistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: areahistory.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.WalletID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldWalletID,
		})
		_node.WalletID = value
	}
	if value, ok := ac.mutation.ProvinceNameTH(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldProvinceNameTH,
		})
		_node.ProvinceNameTH = value
	}
	if value, ok := ac.mutation.DistrictNameTH(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldDistrictNameTH,
		})
		_node.DistrictNameTH = value
	}
	if value, ok := ac.mutation.SubDistrict(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areahistory.FieldSubDistrict,
		})
		_node.SubDistrict = &value
	}
	if value, ok := ac.mutation.RankArea(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: areahistory.FieldRankArea,
		})
		_node.RankArea = value
	}
	if value, ok := ac.mutation.DateCalRank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: areahistory.FieldDateCalRank,
		})
		_node.DateCalRank = &value
	}
	return _node, _spec
}

// AreahistoryCreateBulk is the builder for creating many Areahistory entities in bulk.
type AreahistoryCreateBulk struct {
	config
	builders []*AreahistoryCreate
}

// Save creates the Areahistory entities in the database.
func (acb *AreahistoryCreateBulk) Save(ctx context.Context) ([]*Areahistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Areahistory, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AreahistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AreahistoryCreateBulk) SaveX(ctx context.Context) []*Areahistory {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
