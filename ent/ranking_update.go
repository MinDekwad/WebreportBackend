// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/ranking"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RankingUpdate is the builder for updating Ranking entities.
type RankingUpdate struct {
	config
	hooks    []Hook
	mutation *RankingMutation
}

// Where adds a new predicate for the RankingUpdate builder.
func (ru *RankingUpdate) Where(ps ...predicate.Ranking) *RankingUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetWalletID sets the "WalletID" field.
func (ru *RankingUpdate) SetWalletID(s string) *RankingUpdate {
	ru.mutation.SetWalletID(s)
	return ru
}

// SetName sets the "Name" field.
func (ru *RankingUpdate) SetName(s string) *RankingUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableName(s *string) *RankingUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// ClearName clears the value of the "Name" field.
func (ru *RankingUpdate) ClearName() *RankingUpdate {
	ru.mutation.ClearName()
	return ru
}

// SetTaxID sets the "TaxID" field.
func (ru *RankingUpdate) SetTaxID(s string) *RankingUpdate {
	ru.mutation.SetTaxID(s)
	return ru
}

// SetNillableTaxID sets the "TaxID" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableTaxID(s *string) *RankingUpdate {
	if s != nil {
		ru.SetTaxID(*s)
	}
	return ru
}

// ClearTaxID clears the value of the "TaxID" field.
func (ru *RankingUpdate) ClearTaxID() *RankingUpdate {
	ru.mutation.ClearTaxID()
	return ru
}

// SetProvinceNameTH sets the "ProvinceNameTH" field.
func (ru *RankingUpdate) SetProvinceNameTH(s string) *RankingUpdate {
	ru.mutation.SetProvinceNameTH(s)
	return ru
}

// SetNillableProvinceNameTH sets the "ProvinceNameTH" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableProvinceNameTH(s *string) *RankingUpdate {
	if s != nil {
		ru.SetProvinceNameTH(*s)
	}
	return ru
}

// ClearProvinceNameTH clears the value of the "ProvinceNameTH" field.
func (ru *RankingUpdate) ClearProvinceNameTH() *RankingUpdate {
	ru.mutation.ClearProvinceNameTH()
	return ru
}

// SetDistrictNameTH sets the "DistrictNameTH" field.
func (ru *RankingUpdate) SetDistrictNameTH(s string) *RankingUpdate {
	ru.mutation.SetDistrictNameTH(s)
	return ru
}

// SetNillableDistrictNameTH sets the "DistrictNameTH" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableDistrictNameTH(s *string) *RankingUpdate {
	if s != nil {
		ru.SetDistrictNameTH(*s)
	}
	return ru
}

// ClearDistrictNameTH clears the value of the "DistrictNameTH" field.
func (ru *RankingUpdate) ClearDistrictNameTH() *RankingUpdate {
	ru.mutation.ClearDistrictNameTH()
	return ru
}

// SetDistrictNameEN sets the "DistrictNameEN" field.
func (ru *RankingUpdate) SetDistrictNameEN(s string) *RankingUpdate {
	ru.mutation.SetDistrictNameEN(s)
	return ru
}

// SetNillableDistrictNameEN sets the "DistrictNameEN" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableDistrictNameEN(s *string) *RankingUpdate {
	if s != nil {
		ru.SetDistrictNameEN(*s)
	}
	return ru
}

// ClearDistrictNameEN clears the value of the "DistrictNameEN" field.
func (ru *RankingUpdate) ClearDistrictNameEN() *RankingUpdate {
	ru.mutation.ClearDistrictNameEN()
	return ru
}

// SetOccupationName sets the "OccupationName" field.
func (ru *RankingUpdate) SetOccupationName(s string) *RankingUpdate {
	ru.mutation.SetOccupationName(s)
	return ru
}

// SetNillableOccupationName sets the "OccupationName" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableOccupationName(s *string) *RankingUpdate {
	if s != nil {
		ru.SetOccupationName(*s)
	}
	return ru
}

// ClearOccupationName clears the value of the "OccupationName" field.
func (ru *RankingUpdate) ClearOccupationName() *RankingUpdate {
	ru.mutation.ClearOccupationName()
	return ru
}

// SetLastRank sets the "LastRank" field.
func (ru *RankingUpdate) SetLastRank(i int) *RankingUpdate {
	ru.mutation.ResetLastRank()
	ru.mutation.SetLastRank(i)
	return ru
}

// SetNillableLastRank sets the "LastRank" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableLastRank(i *int) *RankingUpdate {
	if i != nil {
		ru.SetLastRank(*i)
	}
	return ru
}

// AddLastRank adds i to the "LastRank" field.
func (ru *RankingUpdate) AddLastRank(i int) *RankingUpdate {
	ru.mutation.AddLastRank(i)
	return ru
}

// ClearLastRank clears the value of the "LastRank" field.
func (ru *RankingUpdate) ClearLastRank() *RankingUpdate {
	ru.mutation.ClearLastRank()
	return ru
}

// SetCurrentRank sets the "CurrentRank" field.
func (ru *RankingUpdate) SetCurrentRank(i int) *RankingUpdate {
	ru.mutation.ResetCurrentRank()
	ru.mutation.SetCurrentRank(i)
	return ru
}

// SetNillableCurrentRank sets the "CurrentRank" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableCurrentRank(i *int) *RankingUpdate {
	if i != nil {
		ru.SetCurrentRank(*i)
	}
	return ru
}

// AddCurrentRank adds i to the "CurrentRank" field.
func (ru *RankingUpdate) AddCurrentRank(i int) *RankingUpdate {
	ru.mutation.AddCurrentRank(i)
	return ru
}

// ClearCurrentRank clears the value of the "CurrentRank" field.
func (ru *RankingUpdate) ClearCurrentRank() *RankingUpdate {
	ru.mutation.ClearCurrentRank()
	return ru
}

// SetStatusRanking sets the "StatusRanking" field.
func (ru *RankingUpdate) SetStatusRanking(s string) *RankingUpdate {
	ru.mutation.SetStatusRanking(s)
	return ru
}

// SetNillableStatusRanking sets the "StatusRanking" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableStatusRanking(s *string) *RankingUpdate {
	if s != nil {
		ru.SetStatusRanking(*s)
	}
	return ru
}

// ClearStatusRanking clears the value of the "StatusRanking" field.
func (ru *RankingUpdate) ClearStatusRanking() *RankingUpdate {
	ru.mutation.ClearStatusRanking()
	return ru
}

// SetLastDateCalRank sets the "LastDateCalRank" field.
func (ru *RankingUpdate) SetLastDateCalRank(s string) *RankingUpdate {
	ru.mutation.SetLastDateCalRank(s)
	return ru
}

// SetNillableLastDateCalRank sets the "LastDateCalRank" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableLastDateCalRank(s *string) *RankingUpdate {
	if s != nil {
		ru.SetLastDateCalRank(*s)
	}
	return ru
}

// ClearLastDateCalRank clears the value of the "LastDateCalRank" field.
func (ru *RankingUpdate) ClearLastDateCalRank() *RankingUpdate {
	ru.mutation.ClearLastDateCalRank()
	return ru
}

// SetNextDateCalRank sets the "NextDateCalRank" field.
func (ru *RankingUpdate) SetNextDateCalRank(s string) *RankingUpdate {
	ru.mutation.SetNextDateCalRank(s)
	return ru
}

// SetNillableNextDateCalRank sets the "NextDateCalRank" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableNextDateCalRank(s *string) *RankingUpdate {
	if s != nil {
		ru.SetNextDateCalRank(*s)
	}
	return ru
}

// ClearNextDateCalRank clears the value of the "NextDateCalRank" field.
func (ru *RankingUpdate) ClearNextDateCalRank() *RankingUpdate {
	ru.mutation.ClearNextDateCalRank()
	return ru
}

// SetStateCal sets the "StateCal" field.
func (ru *RankingUpdate) SetStateCal(i int) *RankingUpdate {
	ru.mutation.ResetStateCal()
	ru.mutation.SetStateCal(i)
	return ru
}

// SetNillableStateCal sets the "StateCal" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableStateCal(i *int) *RankingUpdate {
	if i != nil {
		ru.SetStateCal(*i)
	}
	return ru
}

// AddStateCal adds i to the "StateCal" field.
func (ru *RankingUpdate) AddStateCal(i int) *RankingUpdate {
	ru.mutation.AddStateCal(i)
	return ru
}

// ClearStateCal clears the value of the "StateCal" field.
func (ru *RankingUpdate) ClearStateCal() *RankingUpdate {
	ru.mutation.ClearStateCal()
	return ru
}

// SetZipCode sets the "ZipCode" field.
func (ru *RankingUpdate) SetZipCode(s string) *RankingUpdate {
	ru.mutation.SetZipCode(s)
	return ru
}

// SetNillableZipCode sets the "ZipCode" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableZipCode(s *string) *RankingUpdate {
	if s != nil {
		ru.SetZipCode(*s)
	}
	return ru
}

// ClearZipCode clears the value of the "ZipCode" field.
func (ru *RankingUpdate) ClearZipCode() *RankingUpdate {
	ru.mutation.ClearZipCode()
	return ru
}

// SetTransactionFactorRank sets the "TransactionFactorRank" field.
func (ru *RankingUpdate) SetTransactionFactorRank(i int) *RankingUpdate {
	ru.mutation.ResetTransactionFactorRank()
	ru.mutation.SetTransactionFactorRank(i)
	return ru
}

// SetNillableTransactionFactorRank sets the "TransactionFactorRank" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableTransactionFactorRank(i *int) *RankingUpdate {
	if i != nil {
		ru.SetTransactionFactorRank(*i)
	}
	return ru
}

// AddTransactionFactorRank adds i to the "TransactionFactorRank" field.
func (ru *RankingUpdate) AddTransactionFactorRank(i int) *RankingUpdate {
	ru.mutation.AddTransactionFactorRank(i)
	return ru
}

// ClearTransactionFactorRank clears the value of the "TransactionFactorRank" field.
func (ru *RankingUpdate) ClearTransactionFactorRank() *RankingUpdate {
	ru.mutation.ClearTransactionFactorRank()
	return ru
}

// SetRegisDate sets the "RegisDate" field.
func (ru *RankingUpdate) SetRegisDate(t time.Time) *RankingUpdate {
	ru.mutation.SetRegisDate(t)
	return ru
}

// SetNillableRegisDate sets the "RegisDate" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableRegisDate(t *time.Time) *RankingUpdate {
	if t != nil {
		ru.SetRegisDate(*t)
	}
	return ru
}

// ClearRegisDate clears the value of the "RegisDate" field.
func (ru *RankingUpdate) ClearRegisDate() *RankingUpdate {
	ru.mutation.ClearRegisDate()
	return ru
}

// SetSubDistrict sets the "SubDistrict" field.
func (ru *RankingUpdate) SetSubDistrict(s string) *RankingUpdate {
	ru.mutation.SetSubDistrict(s)
	return ru
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableSubDistrict(s *string) *RankingUpdate {
	if s != nil {
		ru.SetSubDistrict(*s)
	}
	return ru
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (ru *RankingUpdate) ClearSubDistrict() *RankingUpdate {
	ru.mutation.ClearSubDistrict()
	return ru
}

// SetPhoneno sets the "Phoneno" field.
func (ru *RankingUpdate) SetPhoneno(s string) *RankingUpdate {
	ru.mutation.SetPhoneno(s)
	return ru
}

// SetNillablePhoneno sets the "Phoneno" field if the given value is not nil.
func (ru *RankingUpdate) SetNillablePhoneno(s *string) *RankingUpdate {
	if s != nil {
		ru.SetPhoneno(*s)
	}
	return ru
}

// ClearPhoneno clears the value of the "Phoneno" field.
func (ru *RankingUpdate) ClearPhoneno() *RankingUpdate {
	ru.mutation.ClearPhoneno()
	return ru
}

// SetAddressDetail sets the "AddressDetail" field.
func (ru *RankingUpdate) SetAddressDetail(s string) *RankingUpdate {
	ru.mutation.SetAddressDetail(s)
	return ru
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableAddressDetail(s *string) *RankingUpdate {
	if s != nil {
		ru.SetAddressDetail(*s)
	}
	return ru
}

// ClearAddressDetail clears the value of the "AddressDetail" field.
func (ru *RankingUpdate) ClearAddressDetail() *RankingUpdate {
	ru.mutation.ClearAddressDetail()
	return ru
}

// SetStreet sets the "Street" field.
func (ru *RankingUpdate) SetStreet(s string) *RankingUpdate {
	ru.mutation.SetStreet(s)
	return ru
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (ru *RankingUpdate) SetNillableStreet(s *string) *RankingUpdate {
	if s != nil {
		ru.SetStreet(*s)
	}
	return ru
}

// ClearStreet clears the value of the "Street" field.
func (ru *RankingUpdate) ClearStreet() *RankingUpdate {
	ru.mutation.ClearStreet()
	return ru
}

// Mutation returns the RankingMutation object of the builder.
func (ru *RankingUpdate) Mutation() *RankingMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RankingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RankingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RankingUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RankingUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RankingUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RankingUpdate) check() error {
	if v, ok := ru.mutation.WalletID(); ok {
		if err := ranking.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Name(); ok {
		if err := ranking.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := ru.mutation.TaxID(); ok {
		if err := ranking.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "TaxID", err: fmt.Errorf("ent: validator failed for field \"TaxID\": %w", err)}
		}
	}
	if v, ok := ru.mutation.ProvinceNameTH(); ok {
		if err := ranking.ProvinceNameTHValidator(v); err != nil {
			return &ValidationError{Name: "ProvinceNameTH", err: fmt.Errorf("ent: validator failed for field \"ProvinceNameTH\": %w", err)}
		}
	}
	if v, ok := ru.mutation.DistrictNameTH(); ok {
		if err := ranking.DistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"DistrictNameTH\": %w", err)}
		}
	}
	if v, ok := ru.mutation.DistrictNameEN(); ok {
		if err := ranking.DistrictNameENValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameEN", err: fmt.Errorf("ent: validator failed for field \"DistrictNameEN\": %w", err)}
		}
	}
	if v, ok := ru.mutation.OccupationName(); ok {
		if err := ranking.OccupationNameValidator(v); err != nil {
			return &ValidationError{Name: "OccupationName", err: fmt.Errorf("ent: validator failed for field \"OccupationName\": %w", err)}
		}
	}
	if v, ok := ru.mutation.StatusRanking(); ok {
		if err := ranking.StatusRankingValidator(v); err != nil {
			return &ValidationError{Name: "StatusRanking", err: fmt.Errorf("ent: validator failed for field \"StatusRanking\": %w", err)}
		}
	}
	if v, ok := ru.mutation.LastDateCalRank(); ok {
		if err := ranking.LastDateCalRankValidator(v); err != nil {
			return &ValidationError{Name: "LastDateCalRank", err: fmt.Errorf("ent: validator failed for field \"LastDateCalRank\": %w", err)}
		}
	}
	if v, ok := ru.mutation.NextDateCalRank(); ok {
		if err := ranking.NextDateCalRankValidator(v); err != nil {
			return &ValidationError{Name: "NextDateCalRank", err: fmt.Errorf("ent: validator failed for field \"NextDateCalRank\": %w", err)}
		}
	}
	if v, ok := ru.mutation.ZipCode(); ok {
		if err := ranking.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "ZipCode", err: fmt.Errorf("ent: validator failed for field \"ZipCode\": %w", err)}
		}
	}
	if v, ok := ru.mutation.SubDistrict(); ok {
		if err := ranking.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf("ent: validator failed for field \"SubDistrict\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Phoneno(); ok {
		if err := ranking.PhonenoValidator(v); err != nil {
			return &ValidationError{Name: "Phoneno", err: fmt.Errorf("ent: validator failed for field \"Phoneno\": %w", err)}
		}
	}
	if v, ok := ru.mutation.AddressDetail(); ok {
		if err := ranking.AddressDetailValidator(v); err != nil {
			return &ValidationError{Name: "AddressDetail", err: fmt.Errorf("ent: validator failed for field \"AddressDetail\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Street(); ok {
		if err := ranking.StreetValidator(v); err != nil {
			return &ValidationError{Name: "Street", err: fmt.Errorf("ent: validator failed for field \"Street\": %w", err)}
		}
	}
	return nil
}

func (ru *RankingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ranking.Table,
			Columns: ranking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ranking.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldWalletID,
		})
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldName,
		})
	}
	if ru.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldName,
		})
	}
	if value, ok := ru.mutation.TaxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldTaxID,
		})
	}
	if ru.mutation.TaxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldTaxID,
		})
	}
	if value, ok := ru.mutation.ProvinceNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldProvinceNameTH,
		})
	}
	if ru.mutation.ProvinceNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldProvinceNameTH,
		})
	}
	if value, ok := ru.mutation.DistrictNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldDistrictNameTH,
		})
	}
	if ru.mutation.DistrictNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldDistrictNameTH,
		})
	}
	if value, ok := ru.mutation.DistrictNameEN(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldDistrictNameEN,
		})
	}
	if ru.mutation.DistrictNameENCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldDistrictNameEN,
		})
	}
	if value, ok := ru.mutation.OccupationName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldOccupationName,
		})
	}
	if ru.mutation.OccupationNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldOccupationName,
		})
	}
	if value, ok := ru.mutation.LastRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldLastRank,
		})
	}
	if value, ok := ru.mutation.AddedLastRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldLastRank,
		})
	}
	if ru.mutation.LastRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ranking.FieldLastRank,
		})
	}
	if value, ok := ru.mutation.CurrentRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldCurrentRank,
		})
	}
	if value, ok := ru.mutation.AddedCurrentRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldCurrentRank,
		})
	}
	if ru.mutation.CurrentRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ranking.FieldCurrentRank,
		})
	}
	if value, ok := ru.mutation.StatusRanking(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldStatusRanking,
		})
	}
	if ru.mutation.StatusRankingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldStatusRanking,
		})
	}
	if value, ok := ru.mutation.LastDateCalRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldLastDateCalRank,
		})
	}
	if ru.mutation.LastDateCalRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldLastDateCalRank,
		})
	}
	if value, ok := ru.mutation.NextDateCalRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldNextDateCalRank,
		})
	}
	if ru.mutation.NextDateCalRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldNextDateCalRank,
		})
	}
	if value, ok := ru.mutation.StateCal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldStateCal,
		})
	}
	if value, ok := ru.mutation.AddedStateCal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldStateCal,
		})
	}
	if ru.mutation.StateCalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ranking.FieldStateCal,
		})
	}
	if value, ok := ru.mutation.ZipCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldZipCode,
		})
	}
	if ru.mutation.ZipCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldZipCode,
		})
	}
	if value, ok := ru.mutation.TransactionFactorRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldTransactionFactorRank,
		})
	}
	if value, ok := ru.mutation.AddedTransactionFactorRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldTransactionFactorRank,
		})
	}
	if ru.mutation.TransactionFactorRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ranking.FieldTransactionFactorRank,
		})
	}
	if value, ok := ru.mutation.RegisDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ranking.FieldRegisDate,
		})
	}
	if ru.mutation.RegisDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: ranking.FieldRegisDate,
		})
	}
	if value, ok := ru.mutation.SubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldSubDistrict,
		})
	}
	if ru.mutation.SubDistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldSubDistrict,
		})
	}
	if value, ok := ru.mutation.Phoneno(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldPhoneno,
		})
	}
	if ru.mutation.PhonenoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldPhoneno,
		})
	}
	if value, ok := ru.mutation.AddressDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldAddressDetail,
		})
	}
	if ru.mutation.AddressDetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldAddressDetail,
		})
	}
	if value, ok := ru.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldStreet,
		})
	}
	if ru.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldStreet,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ranking.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RankingUpdateOne is the builder for updating a single Ranking entity.
type RankingUpdateOne struct {
	config
	hooks    []Hook
	mutation *RankingMutation
}

// SetWalletID sets the "WalletID" field.
func (ruo *RankingUpdateOne) SetWalletID(s string) *RankingUpdateOne {
	ruo.mutation.SetWalletID(s)
	return ruo
}

// SetName sets the "Name" field.
func (ruo *RankingUpdateOne) SetName(s string) *RankingUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableName(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// ClearName clears the value of the "Name" field.
func (ruo *RankingUpdateOne) ClearName() *RankingUpdateOne {
	ruo.mutation.ClearName()
	return ruo
}

// SetTaxID sets the "TaxID" field.
func (ruo *RankingUpdateOne) SetTaxID(s string) *RankingUpdateOne {
	ruo.mutation.SetTaxID(s)
	return ruo
}

// SetNillableTaxID sets the "TaxID" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableTaxID(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetTaxID(*s)
	}
	return ruo
}

// ClearTaxID clears the value of the "TaxID" field.
func (ruo *RankingUpdateOne) ClearTaxID() *RankingUpdateOne {
	ruo.mutation.ClearTaxID()
	return ruo
}

// SetProvinceNameTH sets the "ProvinceNameTH" field.
func (ruo *RankingUpdateOne) SetProvinceNameTH(s string) *RankingUpdateOne {
	ruo.mutation.SetProvinceNameTH(s)
	return ruo
}

// SetNillableProvinceNameTH sets the "ProvinceNameTH" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableProvinceNameTH(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetProvinceNameTH(*s)
	}
	return ruo
}

// ClearProvinceNameTH clears the value of the "ProvinceNameTH" field.
func (ruo *RankingUpdateOne) ClearProvinceNameTH() *RankingUpdateOne {
	ruo.mutation.ClearProvinceNameTH()
	return ruo
}

// SetDistrictNameTH sets the "DistrictNameTH" field.
func (ruo *RankingUpdateOne) SetDistrictNameTH(s string) *RankingUpdateOne {
	ruo.mutation.SetDistrictNameTH(s)
	return ruo
}

// SetNillableDistrictNameTH sets the "DistrictNameTH" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableDistrictNameTH(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetDistrictNameTH(*s)
	}
	return ruo
}

// ClearDistrictNameTH clears the value of the "DistrictNameTH" field.
func (ruo *RankingUpdateOne) ClearDistrictNameTH() *RankingUpdateOne {
	ruo.mutation.ClearDistrictNameTH()
	return ruo
}

// SetDistrictNameEN sets the "DistrictNameEN" field.
func (ruo *RankingUpdateOne) SetDistrictNameEN(s string) *RankingUpdateOne {
	ruo.mutation.SetDistrictNameEN(s)
	return ruo
}

// SetNillableDistrictNameEN sets the "DistrictNameEN" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableDistrictNameEN(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetDistrictNameEN(*s)
	}
	return ruo
}

// ClearDistrictNameEN clears the value of the "DistrictNameEN" field.
func (ruo *RankingUpdateOne) ClearDistrictNameEN() *RankingUpdateOne {
	ruo.mutation.ClearDistrictNameEN()
	return ruo
}

// SetOccupationName sets the "OccupationName" field.
func (ruo *RankingUpdateOne) SetOccupationName(s string) *RankingUpdateOne {
	ruo.mutation.SetOccupationName(s)
	return ruo
}

// SetNillableOccupationName sets the "OccupationName" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableOccupationName(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetOccupationName(*s)
	}
	return ruo
}

// ClearOccupationName clears the value of the "OccupationName" field.
func (ruo *RankingUpdateOne) ClearOccupationName() *RankingUpdateOne {
	ruo.mutation.ClearOccupationName()
	return ruo
}

// SetLastRank sets the "LastRank" field.
func (ruo *RankingUpdateOne) SetLastRank(i int) *RankingUpdateOne {
	ruo.mutation.ResetLastRank()
	ruo.mutation.SetLastRank(i)
	return ruo
}

// SetNillableLastRank sets the "LastRank" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableLastRank(i *int) *RankingUpdateOne {
	if i != nil {
		ruo.SetLastRank(*i)
	}
	return ruo
}

// AddLastRank adds i to the "LastRank" field.
func (ruo *RankingUpdateOne) AddLastRank(i int) *RankingUpdateOne {
	ruo.mutation.AddLastRank(i)
	return ruo
}

// ClearLastRank clears the value of the "LastRank" field.
func (ruo *RankingUpdateOne) ClearLastRank() *RankingUpdateOne {
	ruo.mutation.ClearLastRank()
	return ruo
}

// SetCurrentRank sets the "CurrentRank" field.
func (ruo *RankingUpdateOne) SetCurrentRank(i int) *RankingUpdateOne {
	ruo.mutation.ResetCurrentRank()
	ruo.mutation.SetCurrentRank(i)
	return ruo
}

// SetNillableCurrentRank sets the "CurrentRank" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableCurrentRank(i *int) *RankingUpdateOne {
	if i != nil {
		ruo.SetCurrentRank(*i)
	}
	return ruo
}

// AddCurrentRank adds i to the "CurrentRank" field.
func (ruo *RankingUpdateOne) AddCurrentRank(i int) *RankingUpdateOne {
	ruo.mutation.AddCurrentRank(i)
	return ruo
}

// ClearCurrentRank clears the value of the "CurrentRank" field.
func (ruo *RankingUpdateOne) ClearCurrentRank() *RankingUpdateOne {
	ruo.mutation.ClearCurrentRank()
	return ruo
}

// SetStatusRanking sets the "StatusRanking" field.
func (ruo *RankingUpdateOne) SetStatusRanking(s string) *RankingUpdateOne {
	ruo.mutation.SetStatusRanking(s)
	return ruo
}

// SetNillableStatusRanking sets the "StatusRanking" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableStatusRanking(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetStatusRanking(*s)
	}
	return ruo
}

// ClearStatusRanking clears the value of the "StatusRanking" field.
func (ruo *RankingUpdateOne) ClearStatusRanking() *RankingUpdateOne {
	ruo.mutation.ClearStatusRanking()
	return ruo
}

// SetLastDateCalRank sets the "LastDateCalRank" field.
func (ruo *RankingUpdateOne) SetLastDateCalRank(s string) *RankingUpdateOne {
	ruo.mutation.SetLastDateCalRank(s)
	return ruo
}

// SetNillableLastDateCalRank sets the "LastDateCalRank" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableLastDateCalRank(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetLastDateCalRank(*s)
	}
	return ruo
}

// ClearLastDateCalRank clears the value of the "LastDateCalRank" field.
func (ruo *RankingUpdateOne) ClearLastDateCalRank() *RankingUpdateOne {
	ruo.mutation.ClearLastDateCalRank()
	return ruo
}

// SetNextDateCalRank sets the "NextDateCalRank" field.
func (ruo *RankingUpdateOne) SetNextDateCalRank(s string) *RankingUpdateOne {
	ruo.mutation.SetNextDateCalRank(s)
	return ruo
}

// SetNillableNextDateCalRank sets the "NextDateCalRank" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableNextDateCalRank(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetNextDateCalRank(*s)
	}
	return ruo
}

// ClearNextDateCalRank clears the value of the "NextDateCalRank" field.
func (ruo *RankingUpdateOne) ClearNextDateCalRank() *RankingUpdateOne {
	ruo.mutation.ClearNextDateCalRank()
	return ruo
}

// SetStateCal sets the "StateCal" field.
func (ruo *RankingUpdateOne) SetStateCal(i int) *RankingUpdateOne {
	ruo.mutation.ResetStateCal()
	ruo.mutation.SetStateCal(i)
	return ruo
}

// SetNillableStateCal sets the "StateCal" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableStateCal(i *int) *RankingUpdateOne {
	if i != nil {
		ruo.SetStateCal(*i)
	}
	return ruo
}

// AddStateCal adds i to the "StateCal" field.
func (ruo *RankingUpdateOne) AddStateCal(i int) *RankingUpdateOne {
	ruo.mutation.AddStateCal(i)
	return ruo
}

// ClearStateCal clears the value of the "StateCal" field.
func (ruo *RankingUpdateOne) ClearStateCal() *RankingUpdateOne {
	ruo.mutation.ClearStateCal()
	return ruo
}

// SetZipCode sets the "ZipCode" field.
func (ruo *RankingUpdateOne) SetZipCode(s string) *RankingUpdateOne {
	ruo.mutation.SetZipCode(s)
	return ruo
}

// SetNillableZipCode sets the "ZipCode" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableZipCode(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetZipCode(*s)
	}
	return ruo
}

// ClearZipCode clears the value of the "ZipCode" field.
func (ruo *RankingUpdateOne) ClearZipCode() *RankingUpdateOne {
	ruo.mutation.ClearZipCode()
	return ruo
}

// SetTransactionFactorRank sets the "TransactionFactorRank" field.
func (ruo *RankingUpdateOne) SetTransactionFactorRank(i int) *RankingUpdateOne {
	ruo.mutation.ResetTransactionFactorRank()
	ruo.mutation.SetTransactionFactorRank(i)
	return ruo
}

// SetNillableTransactionFactorRank sets the "TransactionFactorRank" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableTransactionFactorRank(i *int) *RankingUpdateOne {
	if i != nil {
		ruo.SetTransactionFactorRank(*i)
	}
	return ruo
}

// AddTransactionFactorRank adds i to the "TransactionFactorRank" field.
func (ruo *RankingUpdateOne) AddTransactionFactorRank(i int) *RankingUpdateOne {
	ruo.mutation.AddTransactionFactorRank(i)
	return ruo
}

// ClearTransactionFactorRank clears the value of the "TransactionFactorRank" field.
func (ruo *RankingUpdateOne) ClearTransactionFactorRank() *RankingUpdateOne {
	ruo.mutation.ClearTransactionFactorRank()
	return ruo
}

// SetRegisDate sets the "RegisDate" field.
func (ruo *RankingUpdateOne) SetRegisDate(t time.Time) *RankingUpdateOne {
	ruo.mutation.SetRegisDate(t)
	return ruo
}

// SetNillableRegisDate sets the "RegisDate" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableRegisDate(t *time.Time) *RankingUpdateOne {
	if t != nil {
		ruo.SetRegisDate(*t)
	}
	return ruo
}

// ClearRegisDate clears the value of the "RegisDate" field.
func (ruo *RankingUpdateOne) ClearRegisDate() *RankingUpdateOne {
	ruo.mutation.ClearRegisDate()
	return ruo
}

// SetSubDistrict sets the "SubDistrict" field.
func (ruo *RankingUpdateOne) SetSubDistrict(s string) *RankingUpdateOne {
	ruo.mutation.SetSubDistrict(s)
	return ruo
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableSubDistrict(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetSubDistrict(*s)
	}
	return ruo
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (ruo *RankingUpdateOne) ClearSubDistrict() *RankingUpdateOne {
	ruo.mutation.ClearSubDistrict()
	return ruo
}

// SetPhoneno sets the "Phoneno" field.
func (ruo *RankingUpdateOne) SetPhoneno(s string) *RankingUpdateOne {
	ruo.mutation.SetPhoneno(s)
	return ruo
}

// SetNillablePhoneno sets the "Phoneno" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillablePhoneno(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetPhoneno(*s)
	}
	return ruo
}

// ClearPhoneno clears the value of the "Phoneno" field.
func (ruo *RankingUpdateOne) ClearPhoneno() *RankingUpdateOne {
	ruo.mutation.ClearPhoneno()
	return ruo
}

// SetAddressDetail sets the "AddressDetail" field.
func (ruo *RankingUpdateOne) SetAddressDetail(s string) *RankingUpdateOne {
	ruo.mutation.SetAddressDetail(s)
	return ruo
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableAddressDetail(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetAddressDetail(*s)
	}
	return ruo
}

// ClearAddressDetail clears the value of the "AddressDetail" field.
func (ruo *RankingUpdateOne) ClearAddressDetail() *RankingUpdateOne {
	ruo.mutation.ClearAddressDetail()
	return ruo
}

// SetStreet sets the "Street" field.
func (ruo *RankingUpdateOne) SetStreet(s string) *RankingUpdateOne {
	ruo.mutation.SetStreet(s)
	return ruo
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (ruo *RankingUpdateOne) SetNillableStreet(s *string) *RankingUpdateOne {
	if s != nil {
		ruo.SetStreet(*s)
	}
	return ruo
}

// ClearStreet clears the value of the "Street" field.
func (ruo *RankingUpdateOne) ClearStreet() *RankingUpdateOne {
	ruo.mutation.ClearStreet()
	return ruo
}

// Mutation returns the RankingMutation object of the builder.
func (ruo *RankingUpdateOne) Mutation() *RankingMutation {
	return ruo.mutation
}

// Save executes the query and returns the updated Ranking entity.
func (ruo *RankingUpdateOne) Save(ctx context.Context) (*Ranking, error) {
	var (
		err  error
		node *Ranking
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RankingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RankingUpdateOne) SaveX(ctx context.Context) *Ranking {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RankingUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RankingUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RankingUpdateOne) check() error {
	if v, ok := ruo.mutation.WalletID(); ok {
		if err := ranking.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Name(); ok {
		if err := ranking.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.TaxID(); ok {
		if err := ranking.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "TaxID", err: fmt.Errorf("ent: validator failed for field \"TaxID\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.ProvinceNameTH(); ok {
		if err := ranking.ProvinceNameTHValidator(v); err != nil {
			return &ValidationError{Name: "ProvinceNameTH", err: fmt.Errorf("ent: validator failed for field \"ProvinceNameTH\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.DistrictNameTH(); ok {
		if err := ranking.DistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"DistrictNameTH\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.DistrictNameEN(); ok {
		if err := ranking.DistrictNameENValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameEN", err: fmt.Errorf("ent: validator failed for field \"DistrictNameEN\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.OccupationName(); ok {
		if err := ranking.OccupationNameValidator(v); err != nil {
			return &ValidationError{Name: "OccupationName", err: fmt.Errorf("ent: validator failed for field \"OccupationName\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.StatusRanking(); ok {
		if err := ranking.StatusRankingValidator(v); err != nil {
			return &ValidationError{Name: "StatusRanking", err: fmt.Errorf("ent: validator failed for field \"StatusRanking\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.LastDateCalRank(); ok {
		if err := ranking.LastDateCalRankValidator(v); err != nil {
			return &ValidationError{Name: "LastDateCalRank", err: fmt.Errorf("ent: validator failed for field \"LastDateCalRank\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.NextDateCalRank(); ok {
		if err := ranking.NextDateCalRankValidator(v); err != nil {
			return &ValidationError{Name: "NextDateCalRank", err: fmt.Errorf("ent: validator failed for field \"NextDateCalRank\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.ZipCode(); ok {
		if err := ranking.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "ZipCode", err: fmt.Errorf("ent: validator failed for field \"ZipCode\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.SubDistrict(); ok {
		if err := ranking.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf("ent: validator failed for field \"SubDistrict\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Phoneno(); ok {
		if err := ranking.PhonenoValidator(v); err != nil {
			return &ValidationError{Name: "Phoneno", err: fmt.Errorf("ent: validator failed for field \"Phoneno\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.AddressDetail(); ok {
		if err := ranking.AddressDetailValidator(v); err != nil {
			return &ValidationError{Name: "AddressDetail", err: fmt.Errorf("ent: validator failed for field \"AddressDetail\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Street(); ok {
		if err := ranking.StreetValidator(v); err != nil {
			return &ValidationError{Name: "Street", err: fmt.Errorf("ent: validator failed for field \"Street\": %w", err)}
		}
	}
	return nil
}

func (ruo *RankingUpdateOne) sqlSave(ctx context.Context) (_node *Ranking, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ranking.Table,
			Columns: ranking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ranking.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Ranking.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldWalletID,
		})
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldName,
		})
	}
	if ruo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldName,
		})
	}
	if value, ok := ruo.mutation.TaxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldTaxID,
		})
	}
	if ruo.mutation.TaxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldTaxID,
		})
	}
	if value, ok := ruo.mutation.ProvinceNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldProvinceNameTH,
		})
	}
	if ruo.mutation.ProvinceNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldProvinceNameTH,
		})
	}
	if value, ok := ruo.mutation.DistrictNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldDistrictNameTH,
		})
	}
	if ruo.mutation.DistrictNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldDistrictNameTH,
		})
	}
	if value, ok := ruo.mutation.DistrictNameEN(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldDistrictNameEN,
		})
	}
	if ruo.mutation.DistrictNameENCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldDistrictNameEN,
		})
	}
	if value, ok := ruo.mutation.OccupationName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldOccupationName,
		})
	}
	if ruo.mutation.OccupationNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldOccupationName,
		})
	}
	if value, ok := ruo.mutation.LastRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldLastRank,
		})
	}
	if value, ok := ruo.mutation.AddedLastRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldLastRank,
		})
	}
	if ruo.mutation.LastRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ranking.FieldLastRank,
		})
	}
	if value, ok := ruo.mutation.CurrentRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldCurrentRank,
		})
	}
	if value, ok := ruo.mutation.AddedCurrentRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldCurrentRank,
		})
	}
	if ruo.mutation.CurrentRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ranking.FieldCurrentRank,
		})
	}
	if value, ok := ruo.mutation.StatusRanking(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldStatusRanking,
		})
	}
	if ruo.mutation.StatusRankingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldStatusRanking,
		})
	}
	if value, ok := ruo.mutation.LastDateCalRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldLastDateCalRank,
		})
	}
	if ruo.mutation.LastDateCalRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldLastDateCalRank,
		})
	}
	if value, ok := ruo.mutation.NextDateCalRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldNextDateCalRank,
		})
	}
	if ruo.mutation.NextDateCalRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldNextDateCalRank,
		})
	}
	if value, ok := ruo.mutation.StateCal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldStateCal,
		})
	}
	if value, ok := ruo.mutation.AddedStateCal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldStateCal,
		})
	}
	if ruo.mutation.StateCalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ranking.FieldStateCal,
		})
	}
	if value, ok := ruo.mutation.ZipCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldZipCode,
		})
	}
	if ruo.mutation.ZipCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldZipCode,
		})
	}
	if value, ok := ruo.mutation.TransactionFactorRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldTransactionFactorRank,
		})
	}
	if value, ok := ruo.mutation.AddedTransactionFactorRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranking.FieldTransactionFactorRank,
		})
	}
	if ruo.mutation.TransactionFactorRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ranking.FieldTransactionFactorRank,
		})
	}
	if value, ok := ruo.mutation.RegisDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ranking.FieldRegisDate,
		})
	}
	if ruo.mutation.RegisDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: ranking.FieldRegisDate,
		})
	}
	if value, ok := ruo.mutation.SubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldSubDistrict,
		})
	}
	if ruo.mutation.SubDistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldSubDistrict,
		})
	}
	if value, ok := ruo.mutation.Phoneno(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldPhoneno,
		})
	}
	if ruo.mutation.PhonenoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldPhoneno,
		})
	}
	if value, ok := ruo.mutation.AddressDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldAddressDetail,
		})
	}
	if ruo.mutation.AddressDetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldAddressDetail,
		})
	}
	if value, ok := ruo.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranking.FieldStreet,
		})
	}
	if ruo.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ranking.FieldStreet,
		})
	}
	_node = &Ranking{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ranking.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
