// Code generated by entc, DO NOT EDIT.

package reportwallettb

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Walletid applies equality check predicate on the "walletid" field. It's identical to WalletidEQ.
func Walletid(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletid), v))
	})
}

// WalletTypeName applies equality check predicate on the "WalletTypeName" field. It's identical to WalletTypeNameEQ.
func WalletTypeName(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletTypeName), v))
	})
}

// WalletPhoneno applies equality check predicate on the "WalletPhoneno" field. It's identical to WalletPhonenoEQ.
func WalletPhoneno(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletPhoneno), v))
	})
}

// WalletName applies equality check predicate on the "WalletName" field. It's identical to WalletNameEQ.
func WalletName(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletName), v))
	})
}

// CitizenId applies equality check predicate on the "CitizenId" field. It's identical to CitizenIdEQ.
func CitizenId(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCitizenId), v))
	})
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// RegisterDate applies equality check predicate on the "RegisterDate" field. It's identical to RegisterDateEQ.
func RegisterDate(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisterDate), v))
	})
}

// GroupUser applies equality check predicate on the "GroupUser" field. It's identical to GroupUserEQ.
func GroupUser(v int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupUser), v))
	})
}

// UserAgent applies equality check predicate on the "UserAgent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserAgent), v))
	})
}

// KYCDate applies equality check predicate on the "KYC_Date" field. It's identical to KYCDateEQ.
func KYCDate(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCDate), v))
	})
}

// ATMCard applies equality check predicate on the "ATMCard" field. It's identical to ATMCardEQ.
func ATMCard(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldATMCard), v))
	})
}

// AccountNo applies equality check predicate on the "AccountNo" field. It's identical to AccountNoEQ.
func AccountNo(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountNo), v))
	})
}

// AddressDetail applies equality check predicate on the "AddressDetail" field. It's identical to AddressDetailEQ.
func AddressDetail(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddressDetail), v))
	})
}

// Street applies equality check predicate on the "Street" field. It's identical to StreetEQ.
func Street(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreet), v))
	})
}

// District applies equality check predicate on the "District" field. It's identical to DistrictEQ.
func District(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrict), v))
	})
}

// SubDistrict applies equality check predicate on the "SubDistrict" field. It's identical to SubDistrictEQ.
func SubDistrict(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubDistrict), v))
	})
}

// Province applies equality check predicate on the "Province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// PostalCode applies equality check predicate on the "PostalCode" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// IsKYC applies equality check predicate on the "isKYC" field. It's identical to IsKYCEQ.
func IsKYC(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsKYC), v))
	})
}

// UpdateDate applies equality check predicate on the "UpdateDate" field. It's identical to UpdateDateEQ.
func UpdateDate(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateDate), v))
	})
}

// WalletidEQ applies the EQ predicate on the "walletid" field.
func WalletidEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletid), v))
	})
}

// WalletidNEQ applies the NEQ predicate on the "walletid" field.
func WalletidNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletid), v))
	})
}

// WalletidIn applies the In predicate on the "walletid" field.
func WalletidIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalletid), v...))
	})
}

// WalletidNotIn applies the NotIn predicate on the "walletid" field.
func WalletidNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalletid), v...))
	})
}

// WalletidGT applies the GT predicate on the "walletid" field.
func WalletidGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletid), v))
	})
}

// WalletidGTE applies the GTE predicate on the "walletid" field.
func WalletidGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletid), v))
	})
}

// WalletidLT applies the LT predicate on the "walletid" field.
func WalletidLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletid), v))
	})
}

// WalletidLTE applies the LTE predicate on the "walletid" field.
func WalletidLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletid), v))
	})
}

// WalletidContains applies the Contains predicate on the "walletid" field.
func WalletidContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletid), v))
	})
}

// WalletidHasPrefix applies the HasPrefix predicate on the "walletid" field.
func WalletidHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletid), v))
	})
}

// WalletidHasSuffix applies the HasSuffix predicate on the "walletid" field.
func WalletidHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletid), v))
	})
}

// WalletidEqualFold applies the EqualFold predicate on the "walletid" field.
func WalletidEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletid), v))
	})
}

// WalletidContainsFold applies the ContainsFold predicate on the "walletid" field.
func WalletidContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletid), v))
	})
}

// WalletTypeNameEQ applies the EQ predicate on the "WalletTypeName" field.
func WalletTypeNameEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletTypeName), v))
	})
}

// WalletTypeNameNEQ applies the NEQ predicate on the "WalletTypeName" field.
func WalletTypeNameNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletTypeName), v))
	})
}

// WalletTypeNameIn applies the In predicate on the "WalletTypeName" field.
func WalletTypeNameIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalletTypeName), v...))
	})
}

// WalletTypeNameNotIn applies the NotIn predicate on the "WalletTypeName" field.
func WalletTypeNameNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalletTypeName), v...))
	})
}

// WalletTypeNameGT applies the GT predicate on the "WalletTypeName" field.
func WalletTypeNameGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletTypeName), v))
	})
}

// WalletTypeNameGTE applies the GTE predicate on the "WalletTypeName" field.
func WalletTypeNameGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletTypeName), v))
	})
}

// WalletTypeNameLT applies the LT predicate on the "WalletTypeName" field.
func WalletTypeNameLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletTypeName), v))
	})
}

// WalletTypeNameLTE applies the LTE predicate on the "WalletTypeName" field.
func WalletTypeNameLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletTypeName), v))
	})
}

// WalletTypeNameContains applies the Contains predicate on the "WalletTypeName" field.
func WalletTypeNameContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletTypeName), v))
	})
}

// WalletTypeNameHasPrefix applies the HasPrefix predicate on the "WalletTypeName" field.
func WalletTypeNameHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletTypeName), v))
	})
}

// WalletTypeNameHasSuffix applies the HasSuffix predicate on the "WalletTypeName" field.
func WalletTypeNameHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletTypeName), v))
	})
}

// WalletTypeNameIsNil applies the IsNil predicate on the "WalletTypeName" field.
func WalletTypeNameIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWalletTypeName)))
	})
}

// WalletTypeNameNotNil applies the NotNil predicate on the "WalletTypeName" field.
func WalletTypeNameNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWalletTypeName)))
	})
}

// WalletTypeNameEqualFold applies the EqualFold predicate on the "WalletTypeName" field.
func WalletTypeNameEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletTypeName), v))
	})
}

// WalletTypeNameContainsFold applies the ContainsFold predicate on the "WalletTypeName" field.
func WalletTypeNameContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletTypeName), v))
	})
}

// WalletPhonenoEQ applies the EQ predicate on the "WalletPhoneno" field.
func WalletPhonenoEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletPhoneno), v))
	})
}

// WalletPhonenoNEQ applies the NEQ predicate on the "WalletPhoneno" field.
func WalletPhonenoNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletPhoneno), v))
	})
}

// WalletPhonenoIn applies the In predicate on the "WalletPhoneno" field.
func WalletPhonenoIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalletPhoneno), v...))
	})
}

// WalletPhonenoNotIn applies the NotIn predicate on the "WalletPhoneno" field.
func WalletPhonenoNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalletPhoneno), v...))
	})
}

// WalletPhonenoGT applies the GT predicate on the "WalletPhoneno" field.
func WalletPhonenoGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletPhoneno), v))
	})
}

// WalletPhonenoGTE applies the GTE predicate on the "WalletPhoneno" field.
func WalletPhonenoGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletPhoneno), v))
	})
}

// WalletPhonenoLT applies the LT predicate on the "WalletPhoneno" field.
func WalletPhonenoLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletPhoneno), v))
	})
}

// WalletPhonenoLTE applies the LTE predicate on the "WalletPhoneno" field.
func WalletPhonenoLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletPhoneno), v))
	})
}

// WalletPhonenoContains applies the Contains predicate on the "WalletPhoneno" field.
func WalletPhonenoContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletPhoneno), v))
	})
}

// WalletPhonenoHasPrefix applies the HasPrefix predicate on the "WalletPhoneno" field.
func WalletPhonenoHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletPhoneno), v))
	})
}

// WalletPhonenoHasSuffix applies the HasSuffix predicate on the "WalletPhoneno" field.
func WalletPhonenoHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletPhoneno), v))
	})
}

// WalletPhonenoIsNil applies the IsNil predicate on the "WalletPhoneno" field.
func WalletPhonenoIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWalletPhoneno)))
	})
}

// WalletPhonenoNotNil applies the NotNil predicate on the "WalletPhoneno" field.
func WalletPhonenoNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWalletPhoneno)))
	})
}

// WalletPhonenoEqualFold applies the EqualFold predicate on the "WalletPhoneno" field.
func WalletPhonenoEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletPhoneno), v))
	})
}

// WalletPhonenoContainsFold applies the ContainsFold predicate on the "WalletPhoneno" field.
func WalletPhonenoContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletPhoneno), v))
	})
}

// WalletNameEQ applies the EQ predicate on the "WalletName" field.
func WalletNameEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletName), v))
	})
}

// WalletNameNEQ applies the NEQ predicate on the "WalletName" field.
func WalletNameNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletName), v))
	})
}

// WalletNameIn applies the In predicate on the "WalletName" field.
func WalletNameIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalletName), v...))
	})
}

// WalletNameNotIn applies the NotIn predicate on the "WalletName" field.
func WalletNameNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalletName), v...))
	})
}

// WalletNameGT applies the GT predicate on the "WalletName" field.
func WalletNameGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletName), v))
	})
}

// WalletNameGTE applies the GTE predicate on the "WalletName" field.
func WalletNameGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletName), v))
	})
}

// WalletNameLT applies the LT predicate on the "WalletName" field.
func WalletNameLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletName), v))
	})
}

// WalletNameLTE applies the LTE predicate on the "WalletName" field.
func WalletNameLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletName), v))
	})
}

// WalletNameContains applies the Contains predicate on the "WalletName" field.
func WalletNameContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletName), v))
	})
}

// WalletNameHasPrefix applies the HasPrefix predicate on the "WalletName" field.
func WalletNameHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletName), v))
	})
}

// WalletNameHasSuffix applies the HasSuffix predicate on the "WalletName" field.
func WalletNameHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletName), v))
	})
}

// WalletNameIsNil applies the IsNil predicate on the "WalletName" field.
func WalletNameIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWalletName)))
	})
}

// WalletNameNotNil applies the NotNil predicate on the "WalletName" field.
func WalletNameNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWalletName)))
	})
}

// WalletNameEqualFold applies the EqualFold predicate on the "WalletName" field.
func WalletNameEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletName), v))
	})
}

// WalletNameContainsFold applies the ContainsFold predicate on the "WalletName" field.
func WalletNameContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletName), v))
	})
}

// CitizenIdEQ applies the EQ predicate on the "CitizenId" field.
func CitizenIdEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCitizenId), v))
	})
}

// CitizenIdNEQ applies the NEQ predicate on the "CitizenId" field.
func CitizenIdNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCitizenId), v))
	})
}

// CitizenIdIn applies the In predicate on the "CitizenId" field.
func CitizenIdIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCitizenId), v...))
	})
}

// CitizenIdNotIn applies the NotIn predicate on the "CitizenId" field.
func CitizenIdNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCitizenId), v...))
	})
}

// CitizenIdGT applies the GT predicate on the "CitizenId" field.
func CitizenIdGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCitizenId), v))
	})
}

// CitizenIdGTE applies the GTE predicate on the "CitizenId" field.
func CitizenIdGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCitizenId), v))
	})
}

// CitizenIdLT applies the LT predicate on the "CitizenId" field.
func CitizenIdLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCitizenId), v))
	})
}

// CitizenIdLTE applies the LTE predicate on the "CitizenId" field.
func CitizenIdLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCitizenId), v))
	})
}

// CitizenIdContains applies the Contains predicate on the "CitizenId" field.
func CitizenIdContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCitizenId), v))
	})
}

// CitizenIdHasPrefix applies the HasPrefix predicate on the "CitizenId" field.
func CitizenIdHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCitizenId), v))
	})
}

// CitizenIdHasSuffix applies the HasSuffix predicate on the "CitizenId" field.
func CitizenIdHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCitizenId), v))
	})
}

// CitizenIdIsNil applies the IsNil predicate on the "CitizenId" field.
func CitizenIdIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCitizenId)))
	})
}

// CitizenIdNotNil applies the NotNil predicate on the "CitizenId" field.
func CitizenIdNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCitizenId)))
	})
}

// CitizenIdEqualFold applies the EqualFold predicate on the "CitizenId" field.
func CitizenIdEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCitizenId), v))
	})
}

// CitizenIdContainsFold applies the ContainsFold predicate on the "CitizenId" field.
func CitizenIdContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCitizenId), v))
	})
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// RegisterDateEQ applies the EQ predicate on the "RegisterDate" field.
func RegisterDateEQ(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisterDate), v))
	})
}

// RegisterDateNEQ applies the NEQ predicate on the "RegisterDate" field.
func RegisterDateNEQ(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegisterDate), v))
	})
}

// RegisterDateIn applies the In predicate on the "RegisterDate" field.
func RegisterDateIn(vs ...time.Time) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegisterDate), v...))
	})
}

// RegisterDateNotIn applies the NotIn predicate on the "RegisterDate" field.
func RegisterDateNotIn(vs ...time.Time) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegisterDate), v...))
	})
}

// RegisterDateGT applies the GT predicate on the "RegisterDate" field.
func RegisterDateGT(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegisterDate), v))
	})
}

// RegisterDateGTE applies the GTE predicate on the "RegisterDate" field.
func RegisterDateGTE(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegisterDate), v))
	})
}

// RegisterDateLT applies the LT predicate on the "RegisterDate" field.
func RegisterDateLT(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegisterDate), v))
	})
}

// RegisterDateLTE applies the LTE predicate on the "RegisterDate" field.
func RegisterDateLTE(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegisterDate), v))
	})
}

// RegisterDateIsNil applies the IsNil predicate on the "RegisterDate" field.
func RegisterDateIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRegisterDate)))
	})
}

// RegisterDateNotNil applies the NotNil predicate on the "RegisterDate" field.
func RegisterDateNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRegisterDate)))
	})
}

// GroupUserEQ applies the EQ predicate on the "GroupUser" field.
func GroupUserEQ(v int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupUser), v))
	})
}

// GroupUserNEQ applies the NEQ predicate on the "GroupUser" field.
func GroupUserNEQ(v int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupUser), v))
	})
}

// GroupUserIn applies the In predicate on the "GroupUser" field.
func GroupUserIn(vs ...int) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupUser), v...))
	})
}

// GroupUserNotIn applies the NotIn predicate on the "GroupUser" field.
func GroupUserNotIn(vs ...int) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupUser), v...))
	})
}

// GroupUserGT applies the GT predicate on the "GroupUser" field.
func GroupUserGT(v int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupUser), v))
	})
}

// GroupUserGTE applies the GTE predicate on the "GroupUser" field.
func GroupUserGTE(v int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupUser), v))
	})
}

// GroupUserLT applies the LT predicate on the "GroupUser" field.
func GroupUserLT(v int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupUser), v))
	})
}

// GroupUserLTE applies the LTE predicate on the "GroupUser" field.
func GroupUserLTE(v int) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupUser), v))
	})
}

// GroupUserIsNil applies the IsNil predicate on the "GroupUser" field.
func GroupUserIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupUser)))
	})
}

// GroupUserNotNil applies the NotNil predicate on the "GroupUser" field.
func GroupUserNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupUser)))
	})
}

// UserAgentEQ applies the EQ predicate on the "UserAgent" field.
func UserAgentEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserAgent), v))
	})
}

// UserAgentNEQ applies the NEQ predicate on the "UserAgent" field.
func UserAgentNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserAgent), v))
	})
}

// UserAgentIn applies the In predicate on the "UserAgent" field.
func UserAgentIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserAgent), v...))
	})
}

// UserAgentNotIn applies the NotIn predicate on the "UserAgent" field.
func UserAgentNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserAgent), v...))
	})
}

// UserAgentGT applies the GT predicate on the "UserAgent" field.
func UserAgentGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserAgent), v))
	})
}

// UserAgentGTE applies the GTE predicate on the "UserAgent" field.
func UserAgentGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserAgent), v))
	})
}

// UserAgentLT applies the LT predicate on the "UserAgent" field.
func UserAgentLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserAgent), v))
	})
}

// UserAgentLTE applies the LTE predicate on the "UserAgent" field.
func UserAgentLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserAgent), v))
	})
}

// UserAgentContains applies the Contains predicate on the "UserAgent" field.
func UserAgentContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserAgent), v))
	})
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "UserAgent" field.
func UserAgentHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserAgent), v))
	})
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "UserAgent" field.
func UserAgentHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserAgent), v))
	})
}

// UserAgentIsNil applies the IsNil predicate on the "UserAgent" field.
func UserAgentIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserAgent)))
	})
}

// UserAgentNotNil applies the NotNil predicate on the "UserAgent" field.
func UserAgentNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserAgent)))
	})
}

// UserAgentEqualFold applies the EqualFold predicate on the "UserAgent" field.
func UserAgentEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserAgent), v))
	})
}

// UserAgentContainsFold applies the ContainsFold predicate on the "UserAgent" field.
func UserAgentContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserAgent), v))
	})
}

// KYCDateEQ applies the EQ predicate on the "KYC_Date" field.
func KYCDateEQ(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCDate), v))
	})
}

// KYCDateNEQ applies the NEQ predicate on the "KYC_Date" field.
func KYCDateNEQ(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKYCDate), v))
	})
}

// KYCDateIn applies the In predicate on the "KYC_Date" field.
func KYCDateIn(vs ...time.Time) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKYCDate), v...))
	})
}

// KYCDateNotIn applies the NotIn predicate on the "KYC_Date" field.
func KYCDateNotIn(vs ...time.Time) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKYCDate), v...))
	})
}

// KYCDateGT applies the GT predicate on the "KYC_Date" field.
func KYCDateGT(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKYCDate), v))
	})
}

// KYCDateGTE applies the GTE predicate on the "KYC_Date" field.
func KYCDateGTE(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKYCDate), v))
	})
}

// KYCDateLT applies the LT predicate on the "KYC_Date" field.
func KYCDateLT(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKYCDate), v))
	})
}

// KYCDateLTE applies the LTE predicate on the "KYC_Date" field.
func KYCDateLTE(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKYCDate), v))
	})
}

// KYCDateIsNil applies the IsNil predicate on the "KYC_Date" field.
func KYCDateIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKYCDate)))
	})
}

// KYCDateNotNil applies the NotNil predicate on the "KYC_Date" field.
func KYCDateNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKYCDate)))
	})
}

// ATMCardEQ applies the EQ predicate on the "ATMCard" field.
func ATMCardEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldATMCard), v))
	})
}

// ATMCardNEQ applies the NEQ predicate on the "ATMCard" field.
func ATMCardNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldATMCard), v))
	})
}

// ATMCardIn applies the In predicate on the "ATMCard" field.
func ATMCardIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldATMCard), v...))
	})
}

// ATMCardNotIn applies the NotIn predicate on the "ATMCard" field.
func ATMCardNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldATMCard), v...))
	})
}

// ATMCardGT applies the GT predicate on the "ATMCard" field.
func ATMCardGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldATMCard), v))
	})
}

// ATMCardGTE applies the GTE predicate on the "ATMCard" field.
func ATMCardGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldATMCard), v))
	})
}

// ATMCardLT applies the LT predicate on the "ATMCard" field.
func ATMCardLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldATMCard), v))
	})
}

// ATMCardLTE applies the LTE predicate on the "ATMCard" field.
func ATMCardLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldATMCard), v))
	})
}

// ATMCardContains applies the Contains predicate on the "ATMCard" field.
func ATMCardContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldATMCard), v))
	})
}

// ATMCardHasPrefix applies the HasPrefix predicate on the "ATMCard" field.
func ATMCardHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldATMCard), v))
	})
}

// ATMCardHasSuffix applies the HasSuffix predicate on the "ATMCard" field.
func ATMCardHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldATMCard), v))
	})
}

// ATMCardIsNil applies the IsNil predicate on the "ATMCard" field.
func ATMCardIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldATMCard)))
	})
}

// ATMCardNotNil applies the NotNil predicate on the "ATMCard" field.
func ATMCardNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldATMCard)))
	})
}

// ATMCardEqualFold applies the EqualFold predicate on the "ATMCard" field.
func ATMCardEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldATMCard), v))
	})
}

// ATMCardContainsFold applies the ContainsFold predicate on the "ATMCard" field.
func ATMCardContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldATMCard), v))
	})
}

// AccountNoEQ applies the EQ predicate on the "AccountNo" field.
func AccountNoEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountNo), v))
	})
}

// AccountNoNEQ applies the NEQ predicate on the "AccountNo" field.
func AccountNoNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountNo), v))
	})
}

// AccountNoIn applies the In predicate on the "AccountNo" field.
func AccountNoIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountNo), v...))
	})
}

// AccountNoNotIn applies the NotIn predicate on the "AccountNo" field.
func AccountNoNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountNo), v...))
	})
}

// AccountNoGT applies the GT predicate on the "AccountNo" field.
func AccountNoGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountNo), v))
	})
}

// AccountNoGTE applies the GTE predicate on the "AccountNo" field.
func AccountNoGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountNo), v))
	})
}

// AccountNoLT applies the LT predicate on the "AccountNo" field.
func AccountNoLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountNo), v))
	})
}

// AccountNoLTE applies the LTE predicate on the "AccountNo" field.
func AccountNoLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountNo), v))
	})
}

// AccountNoContains applies the Contains predicate on the "AccountNo" field.
func AccountNoContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccountNo), v))
	})
}

// AccountNoHasPrefix applies the HasPrefix predicate on the "AccountNo" field.
func AccountNoHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccountNo), v))
	})
}

// AccountNoHasSuffix applies the HasSuffix predicate on the "AccountNo" field.
func AccountNoHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccountNo), v))
	})
}

// AccountNoIsNil applies the IsNil predicate on the "AccountNo" field.
func AccountNoIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountNo)))
	})
}

// AccountNoNotNil applies the NotNil predicate on the "AccountNo" field.
func AccountNoNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountNo)))
	})
}

// AccountNoEqualFold applies the EqualFold predicate on the "AccountNo" field.
func AccountNoEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccountNo), v))
	})
}

// AccountNoContainsFold applies the ContainsFold predicate on the "AccountNo" field.
func AccountNoContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccountNo), v))
	})
}

// AddressDetailEQ applies the EQ predicate on the "AddressDetail" field.
func AddressDetailEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailNEQ applies the NEQ predicate on the "AddressDetail" field.
func AddressDetailNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailIn applies the In predicate on the "AddressDetail" field.
func AddressDetailIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddressDetail), v...))
	})
}

// AddressDetailNotIn applies the NotIn predicate on the "AddressDetail" field.
func AddressDetailNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddressDetail), v...))
	})
}

// AddressDetailGT applies the GT predicate on the "AddressDetail" field.
func AddressDetailGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailGTE applies the GTE predicate on the "AddressDetail" field.
func AddressDetailGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailLT applies the LT predicate on the "AddressDetail" field.
func AddressDetailLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailLTE applies the LTE predicate on the "AddressDetail" field.
func AddressDetailLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailContains applies the Contains predicate on the "AddressDetail" field.
func AddressDetailContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailHasPrefix applies the HasPrefix predicate on the "AddressDetail" field.
func AddressDetailHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailHasSuffix applies the HasSuffix predicate on the "AddressDetail" field.
func AddressDetailHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailIsNil applies the IsNil predicate on the "AddressDetail" field.
func AddressDetailIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddressDetail)))
	})
}

// AddressDetailNotNil applies the NotNil predicate on the "AddressDetail" field.
func AddressDetailNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddressDetail)))
	})
}

// AddressDetailEqualFold applies the EqualFold predicate on the "AddressDetail" field.
func AddressDetailEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailContainsFold applies the ContainsFold predicate on the "AddressDetail" field.
func AddressDetailContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddressDetail), v))
	})
}

// StreetEQ applies the EQ predicate on the "Street" field.
func StreetEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreet), v))
	})
}

// StreetNEQ applies the NEQ predicate on the "Street" field.
func StreetNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStreet), v))
	})
}

// StreetIn applies the In predicate on the "Street" field.
func StreetIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStreet), v...))
	})
}

// StreetNotIn applies the NotIn predicate on the "Street" field.
func StreetNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStreet), v...))
	})
}

// StreetGT applies the GT predicate on the "Street" field.
func StreetGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStreet), v))
	})
}

// StreetGTE applies the GTE predicate on the "Street" field.
func StreetGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStreet), v))
	})
}

// StreetLT applies the LT predicate on the "Street" field.
func StreetLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStreet), v))
	})
}

// StreetLTE applies the LTE predicate on the "Street" field.
func StreetLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStreet), v))
	})
}

// StreetContains applies the Contains predicate on the "Street" field.
func StreetContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStreet), v))
	})
}

// StreetHasPrefix applies the HasPrefix predicate on the "Street" field.
func StreetHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStreet), v))
	})
}

// StreetHasSuffix applies the HasSuffix predicate on the "Street" field.
func StreetHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStreet), v))
	})
}

// StreetIsNil applies the IsNil predicate on the "Street" field.
func StreetIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStreet)))
	})
}

// StreetNotNil applies the NotNil predicate on the "Street" field.
func StreetNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStreet)))
	})
}

// StreetEqualFold applies the EqualFold predicate on the "Street" field.
func StreetEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStreet), v))
	})
}

// StreetContainsFold applies the ContainsFold predicate on the "Street" field.
func StreetContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStreet), v))
	})
}

// DistrictEQ applies the EQ predicate on the "District" field.
func DistrictEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrict), v))
	})
}

// DistrictNEQ applies the NEQ predicate on the "District" field.
func DistrictNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrict), v))
	})
}

// DistrictIn applies the In predicate on the "District" field.
func DistrictIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrict), v...))
	})
}

// DistrictNotIn applies the NotIn predicate on the "District" field.
func DistrictNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrict), v...))
	})
}

// DistrictGT applies the GT predicate on the "District" field.
func DistrictGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrict), v))
	})
}

// DistrictGTE applies the GTE predicate on the "District" field.
func DistrictGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrict), v))
	})
}

// DistrictLT applies the LT predicate on the "District" field.
func DistrictLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrict), v))
	})
}

// DistrictLTE applies the LTE predicate on the "District" field.
func DistrictLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrict), v))
	})
}

// DistrictContains applies the Contains predicate on the "District" field.
func DistrictContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrict), v))
	})
}

// DistrictHasPrefix applies the HasPrefix predicate on the "District" field.
func DistrictHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrict), v))
	})
}

// DistrictHasSuffix applies the HasSuffix predicate on the "District" field.
func DistrictHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrict), v))
	})
}

// DistrictIsNil applies the IsNil predicate on the "District" field.
func DistrictIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistrict)))
	})
}

// DistrictNotNil applies the NotNil predicate on the "District" field.
func DistrictNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistrict)))
	})
}

// DistrictEqualFold applies the EqualFold predicate on the "District" field.
func DistrictEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrict), v))
	})
}

// DistrictContainsFold applies the ContainsFold predicate on the "District" field.
func DistrictContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrict), v))
	})
}

// SubDistrictEQ applies the EQ predicate on the "SubDistrict" field.
func SubDistrictEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictNEQ applies the NEQ predicate on the "SubDistrict" field.
func SubDistrictNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictIn applies the In predicate on the "SubDistrict" field.
func SubDistrictIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubDistrict), v...))
	})
}

// SubDistrictNotIn applies the NotIn predicate on the "SubDistrict" field.
func SubDistrictNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubDistrict), v...))
	})
}

// SubDistrictGT applies the GT predicate on the "SubDistrict" field.
func SubDistrictGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictGTE applies the GTE predicate on the "SubDistrict" field.
func SubDistrictGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictLT applies the LT predicate on the "SubDistrict" field.
func SubDistrictLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictLTE applies the LTE predicate on the "SubDistrict" field.
func SubDistrictLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictContains applies the Contains predicate on the "SubDistrict" field.
func SubDistrictContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictHasPrefix applies the HasPrefix predicate on the "SubDistrict" field.
func SubDistrictHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictHasSuffix applies the HasSuffix predicate on the "SubDistrict" field.
func SubDistrictHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictIsNil applies the IsNil predicate on the "SubDistrict" field.
func SubDistrictIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubDistrict)))
	})
}

// SubDistrictNotNil applies the NotNil predicate on the "SubDistrict" field.
func SubDistrictNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubDistrict)))
	})
}

// SubDistrictEqualFold applies the EqualFold predicate on the "SubDistrict" field.
func SubDistrictEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictContainsFold applies the ContainsFold predicate on the "SubDistrict" field.
func SubDistrictContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubDistrict), v))
	})
}

// ProvinceEQ applies the EQ predicate on the "Province" field.
func ProvinceEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// ProvinceNEQ applies the NEQ predicate on the "Province" field.
func ProvinceNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvince), v))
	})
}

// ProvinceIn applies the In predicate on the "Province" field.
func ProvinceIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvince), v...))
	})
}

// ProvinceNotIn applies the NotIn predicate on the "Province" field.
func ProvinceNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvince), v...))
	})
}

// ProvinceGT applies the GT predicate on the "Province" field.
func ProvinceGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvince), v))
	})
}

// ProvinceGTE applies the GTE predicate on the "Province" field.
func ProvinceGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvince), v))
	})
}

// ProvinceLT applies the LT predicate on the "Province" field.
func ProvinceLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvince), v))
	})
}

// ProvinceLTE applies the LTE predicate on the "Province" field.
func ProvinceLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvince), v))
	})
}

// ProvinceContains applies the Contains predicate on the "Province" field.
func ProvinceContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvince), v))
	})
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "Province" field.
func ProvinceHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvince), v))
	})
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "Province" field.
func ProvinceHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvince), v))
	})
}

// ProvinceIsNil applies the IsNil predicate on the "Province" field.
func ProvinceIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProvince)))
	})
}

// ProvinceNotNil applies the NotNil predicate on the "Province" field.
func ProvinceNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProvince)))
	})
}

// ProvinceEqualFold applies the EqualFold predicate on the "Province" field.
func ProvinceEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvince), v))
	})
}

// ProvinceContainsFold applies the ContainsFold predicate on the "Province" field.
func ProvinceContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvince), v))
	})
}

// PostalCodeEQ applies the EQ predicate on the "PostalCode" field.
func PostalCodeEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeNEQ applies the NEQ predicate on the "PostalCode" field.
func PostalCodeNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeIn applies the In predicate on the "PostalCode" field.
func PostalCodeIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeNotIn applies the NotIn predicate on the "PostalCode" field.
func PostalCodeNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeGT applies the GT predicate on the "PostalCode" field.
func PostalCodeGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeGTE applies the GTE predicate on the "PostalCode" field.
func PostalCodeGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLT applies the LT predicate on the "PostalCode" field.
func PostalCodeLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLTE applies the LTE predicate on the "PostalCode" field.
func PostalCodeLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContains applies the Contains predicate on the "PostalCode" field.
func PostalCodeContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "PostalCode" field.
func PostalCodeHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "PostalCode" field.
func PostalCodeHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeIsNil applies the IsNil predicate on the "PostalCode" field.
func PostalCodeIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPostalCode)))
	})
}

// PostalCodeNotNil applies the NotNil predicate on the "PostalCode" field.
func PostalCodeNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPostalCode)))
	})
}

// PostalCodeEqualFold applies the EqualFold predicate on the "PostalCode" field.
func PostalCodeEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "PostalCode" field.
func PostalCodeContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPostalCode), v))
	})
}

// IsKYCEQ applies the EQ predicate on the "isKYC" field.
func IsKYCEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsKYC), v))
	})
}

// IsKYCNEQ applies the NEQ predicate on the "isKYC" field.
func IsKYCNEQ(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsKYC), v))
	})
}

// IsKYCIn applies the In predicate on the "isKYC" field.
func IsKYCIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsKYC), v...))
	})
}

// IsKYCNotIn applies the NotIn predicate on the "isKYC" field.
func IsKYCNotIn(vs ...string) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsKYC), v...))
	})
}

// IsKYCGT applies the GT predicate on the "isKYC" field.
func IsKYCGT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsKYC), v))
	})
}

// IsKYCGTE applies the GTE predicate on the "isKYC" field.
func IsKYCGTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsKYC), v))
	})
}

// IsKYCLT applies the LT predicate on the "isKYC" field.
func IsKYCLT(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsKYC), v))
	})
}

// IsKYCLTE applies the LTE predicate on the "isKYC" field.
func IsKYCLTE(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsKYC), v))
	})
}

// IsKYCContains applies the Contains predicate on the "isKYC" field.
func IsKYCContains(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsKYC), v))
	})
}

// IsKYCHasPrefix applies the HasPrefix predicate on the "isKYC" field.
func IsKYCHasPrefix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsKYC), v))
	})
}

// IsKYCHasSuffix applies the HasSuffix predicate on the "isKYC" field.
func IsKYCHasSuffix(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsKYC), v))
	})
}

// IsKYCIsNil applies the IsNil predicate on the "isKYC" field.
func IsKYCIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsKYC)))
	})
}

// IsKYCNotNil applies the NotNil predicate on the "isKYC" field.
func IsKYCNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsKYC)))
	})
}

// IsKYCEqualFold applies the EqualFold predicate on the "isKYC" field.
func IsKYCEqualFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsKYC), v))
	})
}

// IsKYCContainsFold applies the ContainsFold predicate on the "isKYC" field.
func IsKYCContainsFold(v string) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsKYC), v))
	})
}

// UpdateDateEQ applies the EQ predicate on the "UpdateDate" field.
func UpdateDateEQ(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateNEQ applies the NEQ predicate on the "UpdateDate" field.
func UpdateDateNEQ(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateIn applies the In predicate on the "UpdateDate" field.
func UpdateDateIn(vs ...time.Time) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateDate), v...))
	})
}

// UpdateDateNotIn applies the NotIn predicate on the "UpdateDate" field.
func UpdateDateNotIn(vs ...time.Time) predicate.Reportwallettb {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Reportwallettb(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateDate), v...))
	})
}

// UpdateDateGT applies the GT predicate on the "UpdateDate" field.
func UpdateDateGT(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateGTE applies the GTE predicate on the "UpdateDate" field.
func UpdateDateGTE(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateLT applies the LT predicate on the "UpdateDate" field.
func UpdateDateLT(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateLTE applies the LTE predicate on the "UpdateDate" field.
func UpdateDateLTE(v time.Time) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateIsNil applies the IsNil predicate on the "UpdateDate" field.
func UpdateDateIsNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateDate)))
	})
}

// UpdateDateNotNil applies the NotNil predicate on the "UpdateDate" field.
func UpdateDateNotNil() predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateDate)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reportwallettb) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reportwallettb) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reportwallettb) predicate.Reportwallettb {
	return predicate.Reportwallettb(func(s *sql.Selector) {
		p(s.Not())
	})
}
