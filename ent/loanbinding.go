// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/loanbinding"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Loanbinding is the model entity for the Loanbinding schema.
type Loanbinding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "Status" field.
	Status *string `json:"Status,omitempty"`
	// DateTime holds the value of the "dateTime" field.
	DateTime *time.Time `json:"dateTime,omitempty"`
	// WalletId holds the value of the "WalletId" field.
	WalletId *string `json:"WalletId,omitempty"`
	// AccountReference holds the value of the "AccountReference" field.
	AccountReference *string `json:"AccountReference,omitempty"`
	// LoanAccountNo holds the value of the "LoanAccountNo" field.
	LoanAccountNo *string `json:"LoanAccountNo,omitempty"`
	// RequestDateTime holds the value of the "RequestDateTime" field.
	RequestDateTime *time.Time `json:"RequestDateTime,omitempty"`
	// FileimportID holds the value of the "FileimportID" field.
	FileimportID *int `json:"FileimportID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Loanbinding) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case loanbinding.FieldID, loanbinding.FieldFileimportID:
			values[i] = &sql.NullInt64{}
		case loanbinding.FieldStatus, loanbinding.FieldWalletId, loanbinding.FieldAccountReference, loanbinding.FieldLoanAccountNo:
			values[i] = &sql.NullString{}
		case loanbinding.FieldDateTime, loanbinding.FieldRequestDateTime:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Loanbinding", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Loanbinding fields.
func (l *Loanbinding) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loanbinding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case loanbinding.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				l.Status = new(string)
				*l.Status = value.String
			}
		case loanbinding.FieldDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateTime", values[i])
			} else if value.Valid {
				l.DateTime = new(time.Time)
				*l.DateTime = value.Time
			}
		case loanbinding.FieldWalletId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletId", values[i])
			} else if value.Valid {
				l.WalletId = new(string)
				*l.WalletId = value.String
			}
		case loanbinding.FieldAccountReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AccountReference", values[i])
			} else if value.Valid {
				l.AccountReference = new(string)
				*l.AccountReference = value.String
			}
		case loanbinding.FieldLoanAccountNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LoanAccountNo", values[i])
			} else if value.Valid {
				l.LoanAccountNo = new(string)
				*l.LoanAccountNo = value.String
			}
		case loanbinding.FieldRequestDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field RequestDateTime", values[i])
			} else if value.Valid {
				l.RequestDateTime = new(time.Time)
				*l.RequestDateTime = value.Time
			}
		case loanbinding.FieldFileimportID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FileimportID", values[i])
			} else if value.Valid {
				l.FileimportID = new(int)
				*l.FileimportID = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Loanbinding.
// Note that you need to call Loanbinding.Unwrap() before calling this method if this Loanbinding
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Loanbinding) Update() *LoanbindingUpdateOne {
	return (&LoanbindingClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Loanbinding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Loanbinding) Unwrap() *Loanbinding {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Loanbinding is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Loanbinding) String() string {
	var builder strings.Builder
	builder.WriteString("Loanbinding(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	if v := l.Status; v != nil {
		builder.WriteString(", Status=")
		builder.WriteString(*v)
	}
	if v := l.DateTime; v != nil {
		builder.WriteString(", dateTime=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := l.WalletId; v != nil {
		builder.WriteString(", WalletId=")
		builder.WriteString(*v)
	}
	if v := l.AccountReference; v != nil {
		builder.WriteString(", AccountReference=")
		builder.WriteString(*v)
	}
	if v := l.LoanAccountNo; v != nil {
		builder.WriteString(", LoanAccountNo=")
		builder.WriteString(*v)
	}
	if v := l.RequestDateTime; v != nil {
		builder.WriteString(", RequestDateTime=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := l.FileimportID; v != nil {
		builder.WriteString(", FileimportID=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Loanbindings is a parsable slice of Loanbinding.
type Loanbindings []*Loanbinding

func (l Loanbindings) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
