// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/bankdetail"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/statementendingbalanc"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatementEndingBalancUpdate is the builder for updating StatementEndingBalanc entities.
type StatementEndingBalancUpdate struct {
	config
	hooks    []Hook
	mutation *StatementEndingBalancMutation
}

// Where adds a new predicate for the StatementEndingBalancUpdate builder.
func (sebu *StatementEndingBalancUpdate) Where(ps ...predicate.StatementEndingBalanc) *StatementEndingBalancUpdate {
	sebu.mutation.predicates = append(sebu.mutation.predicates, ps...)
	return sebu
}

// SetStatementBalance sets the "Statement_Balance" field.
func (sebu *StatementEndingBalancUpdate) SetStatementBalance(f float64) *StatementEndingBalancUpdate {
	sebu.mutation.ResetStatementBalance()
	sebu.mutation.SetStatementBalance(f)
	return sebu
}

// SetNillableStatementBalance sets the "Statement_Balance" field if the given value is not nil.
func (sebu *StatementEndingBalancUpdate) SetNillableStatementBalance(f *float64) *StatementEndingBalancUpdate {
	if f != nil {
		sebu.SetStatementBalance(*f)
	}
	return sebu
}

// AddStatementBalance adds f to the "Statement_Balance" field.
func (sebu *StatementEndingBalancUpdate) AddStatementBalance(f float64) *StatementEndingBalancUpdate {
	sebu.mutation.AddStatementBalance(f)
	return sebu
}

// ClearStatementBalance clears the value of the "Statement_Balance" field.
func (sebu *StatementEndingBalancUpdate) ClearStatementBalance() *StatementEndingBalancUpdate {
	sebu.mutation.ClearStatementBalance()
	return sebu
}

// SetStatementDate sets the "Statement_Date" field.
func (sebu *StatementEndingBalancUpdate) SetStatementDate(t time.Time) *StatementEndingBalancUpdate {
	sebu.mutation.SetStatementDate(t)
	return sebu
}

// SetNillableStatementDate sets the "Statement_Date" field if the given value is not nil.
func (sebu *StatementEndingBalancUpdate) SetNillableStatementDate(t *time.Time) *StatementEndingBalancUpdate {
	if t != nil {
		sebu.SetStatementDate(*t)
	}
	return sebu
}

// ClearStatementDate clears the value of the "Statement_Date" field.
func (sebu *StatementEndingBalancUpdate) ClearStatementDate() *StatementEndingBalancUpdate {
	sebu.mutation.ClearStatementDate()
	return sebu
}

// SetBankID sets the "bank" edge to the Bankdetail entity by ID.
func (sebu *StatementEndingBalancUpdate) SetBankID(id int) *StatementEndingBalancUpdate {
	sebu.mutation.SetBankID(id)
	return sebu
}

// SetNillableBankID sets the "bank" edge to the Bankdetail entity by ID if the given value is not nil.
func (sebu *StatementEndingBalancUpdate) SetNillableBankID(id *int) *StatementEndingBalancUpdate {
	if id != nil {
		sebu = sebu.SetBankID(*id)
	}
	return sebu
}

// SetBank sets the "bank" edge to the Bankdetail entity.
func (sebu *StatementEndingBalancUpdate) SetBank(b *Bankdetail) *StatementEndingBalancUpdate {
	return sebu.SetBankID(b.ID)
}

// Mutation returns the StatementEndingBalancMutation object of the builder.
func (sebu *StatementEndingBalancUpdate) Mutation() *StatementEndingBalancMutation {
	return sebu.mutation
}

// ClearBank clears the "bank" edge to the Bankdetail entity.
func (sebu *StatementEndingBalancUpdate) ClearBank() *StatementEndingBalancUpdate {
	sebu.mutation.ClearBank()
	return sebu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sebu *StatementEndingBalancUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sebu.hooks) == 0 {
		affected, err = sebu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatementEndingBalancMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sebu.mutation = mutation
			affected, err = sebu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sebu.hooks) - 1; i >= 0; i-- {
			mut = sebu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sebu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sebu *StatementEndingBalancUpdate) SaveX(ctx context.Context) int {
	affected, err := sebu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sebu *StatementEndingBalancUpdate) Exec(ctx context.Context) error {
	_, err := sebu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sebu *StatementEndingBalancUpdate) ExecX(ctx context.Context) {
	if err := sebu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sebu *StatementEndingBalancUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statementendingbalanc.Table,
			Columns: statementendingbalanc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statementendingbalanc.FieldID,
			},
		},
	}
	if ps := sebu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sebu.mutation.StatementBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statementendingbalanc.FieldStatementBalance,
		})
	}
	if value, ok := sebu.mutation.AddedStatementBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statementendingbalanc.FieldStatementBalance,
		})
	}
	if sebu.mutation.StatementBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: statementendingbalanc.FieldStatementBalance,
		})
	}
	if value, ok := sebu.mutation.StatementDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statementendingbalanc.FieldStatementDate,
		})
	}
	if sebu.mutation.StatementDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: statementendingbalanc.FieldStatementDate,
		})
	}
	if sebu.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statementendingbalanc.BankTable,
			Columns: []string{statementendingbalanc.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sebu.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statementendingbalanc.BankTable,
			Columns: []string{statementendingbalanc.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sebu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statementendingbalanc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StatementEndingBalancUpdateOne is the builder for updating a single StatementEndingBalanc entity.
type StatementEndingBalancUpdateOne struct {
	config
	hooks    []Hook
	mutation *StatementEndingBalancMutation
}

// SetStatementBalance sets the "Statement_Balance" field.
func (sebuo *StatementEndingBalancUpdateOne) SetStatementBalance(f float64) *StatementEndingBalancUpdateOne {
	sebuo.mutation.ResetStatementBalance()
	sebuo.mutation.SetStatementBalance(f)
	return sebuo
}

// SetNillableStatementBalance sets the "Statement_Balance" field if the given value is not nil.
func (sebuo *StatementEndingBalancUpdateOne) SetNillableStatementBalance(f *float64) *StatementEndingBalancUpdateOne {
	if f != nil {
		sebuo.SetStatementBalance(*f)
	}
	return sebuo
}

// AddStatementBalance adds f to the "Statement_Balance" field.
func (sebuo *StatementEndingBalancUpdateOne) AddStatementBalance(f float64) *StatementEndingBalancUpdateOne {
	sebuo.mutation.AddStatementBalance(f)
	return sebuo
}

// ClearStatementBalance clears the value of the "Statement_Balance" field.
func (sebuo *StatementEndingBalancUpdateOne) ClearStatementBalance() *StatementEndingBalancUpdateOne {
	sebuo.mutation.ClearStatementBalance()
	return sebuo
}

// SetStatementDate sets the "Statement_Date" field.
func (sebuo *StatementEndingBalancUpdateOne) SetStatementDate(t time.Time) *StatementEndingBalancUpdateOne {
	sebuo.mutation.SetStatementDate(t)
	return sebuo
}

// SetNillableStatementDate sets the "Statement_Date" field if the given value is not nil.
func (sebuo *StatementEndingBalancUpdateOne) SetNillableStatementDate(t *time.Time) *StatementEndingBalancUpdateOne {
	if t != nil {
		sebuo.SetStatementDate(*t)
	}
	return sebuo
}

// ClearStatementDate clears the value of the "Statement_Date" field.
func (sebuo *StatementEndingBalancUpdateOne) ClearStatementDate() *StatementEndingBalancUpdateOne {
	sebuo.mutation.ClearStatementDate()
	return sebuo
}

// SetBankID sets the "bank" edge to the Bankdetail entity by ID.
func (sebuo *StatementEndingBalancUpdateOne) SetBankID(id int) *StatementEndingBalancUpdateOne {
	sebuo.mutation.SetBankID(id)
	return sebuo
}

// SetNillableBankID sets the "bank" edge to the Bankdetail entity by ID if the given value is not nil.
func (sebuo *StatementEndingBalancUpdateOne) SetNillableBankID(id *int) *StatementEndingBalancUpdateOne {
	if id != nil {
		sebuo = sebuo.SetBankID(*id)
	}
	return sebuo
}

// SetBank sets the "bank" edge to the Bankdetail entity.
func (sebuo *StatementEndingBalancUpdateOne) SetBank(b *Bankdetail) *StatementEndingBalancUpdateOne {
	return sebuo.SetBankID(b.ID)
}

// Mutation returns the StatementEndingBalancMutation object of the builder.
func (sebuo *StatementEndingBalancUpdateOne) Mutation() *StatementEndingBalancMutation {
	return sebuo.mutation
}

// ClearBank clears the "bank" edge to the Bankdetail entity.
func (sebuo *StatementEndingBalancUpdateOne) ClearBank() *StatementEndingBalancUpdateOne {
	sebuo.mutation.ClearBank()
	return sebuo
}

// Save executes the query and returns the updated StatementEndingBalanc entity.
func (sebuo *StatementEndingBalancUpdateOne) Save(ctx context.Context) (*StatementEndingBalanc, error) {
	var (
		err  error
		node *StatementEndingBalanc
	)
	if len(sebuo.hooks) == 0 {
		node, err = sebuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatementEndingBalancMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sebuo.mutation = mutation
			node, err = sebuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sebuo.hooks) - 1; i >= 0; i-- {
			mut = sebuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sebuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sebuo *StatementEndingBalancUpdateOne) SaveX(ctx context.Context) *StatementEndingBalanc {
	node, err := sebuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sebuo *StatementEndingBalancUpdateOne) Exec(ctx context.Context) error {
	_, err := sebuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sebuo *StatementEndingBalancUpdateOne) ExecX(ctx context.Context) {
	if err := sebuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sebuo *StatementEndingBalancUpdateOne) sqlSave(ctx context.Context) (_node *StatementEndingBalanc, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statementendingbalanc.Table,
			Columns: statementendingbalanc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statementendingbalanc.FieldID,
			},
		},
	}
	id, ok := sebuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StatementEndingBalanc.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := sebuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sebuo.mutation.StatementBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statementendingbalanc.FieldStatementBalance,
		})
	}
	if value, ok := sebuo.mutation.AddedStatementBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statementendingbalanc.FieldStatementBalance,
		})
	}
	if sebuo.mutation.StatementBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: statementendingbalanc.FieldStatementBalance,
		})
	}
	if value, ok := sebuo.mutation.StatementDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statementendingbalanc.FieldStatementDate,
		})
	}
	if sebuo.mutation.StatementDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: statementendingbalanc.FieldStatementDate,
		})
	}
	if sebuo.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statementendingbalanc.BankTable,
			Columns: []string{statementendingbalanc.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sebuo.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statementendingbalanc.BankTable,
			Columns: []string{statementendingbalanc.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StatementEndingBalanc{config: sebuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sebuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statementendingbalanc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
