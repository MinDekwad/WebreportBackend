// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pendingkyc"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PendingkycUpdate is the builder for updating Pendingkyc entities.
type PendingkycUpdate struct {
	config
	hooks    []Hook
	mutation *PendingkycMutation
}

// Where adds a new predicate for the PendingkycUpdate builder.
func (pu *PendingkycUpdate) Where(ps ...predicate.Pendingkyc) *PendingkycUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetWalletID sets the "WalletID" field.
func (pu *PendingkycUpdate) SetWalletID(s string) *PendingkycUpdate {
	pu.mutation.SetWalletID(s)
	return pu
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (pu *PendingkycUpdate) SetNillableWalletID(s *string) *PendingkycUpdate {
	if s != nil {
		pu.SetWalletID(*s)
	}
	return pu
}

// ClearWalletID clears the value of the "WalletID" field.
func (pu *PendingkycUpdate) ClearWalletID() *PendingkycUpdate {
	pu.mutation.ClearWalletID()
	return pu
}

// SetName sets the "Name" field.
func (pu *PendingkycUpdate) SetName(s string) *PendingkycUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (pu *PendingkycUpdate) SetNillableName(s *string) *PendingkycUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "Name" field.
func (pu *PendingkycUpdate) ClearName() *PendingkycUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetAgentID sets the "AgentID" field.
func (pu *PendingkycUpdate) SetAgentID(s string) *PendingkycUpdate {
	pu.mutation.SetAgentID(s)
	return pu
}

// SetNillableAgentID sets the "AgentID" field if the given value is not nil.
func (pu *PendingkycUpdate) SetNillableAgentID(s *string) *PendingkycUpdate {
	if s != nil {
		pu.SetAgentID(*s)
	}
	return pu
}

// ClearAgentID clears the value of the "AgentID" field.
func (pu *PendingkycUpdate) ClearAgentID() *PendingkycUpdate {
	pu.mutation.ClearAgentID()
	return pu
}

// SetAgentNameLastname sets the "AgentNameLastname" field.
func (pu *PendingkycUpdate) SetAgentNameLastname(s string) *PendingkycUpdate {
	pu.mutation.SetAgentNameLastname(s)
	return pu
}

// SetNillableAgentNameLastname sets the "AgentNameLastname" field if the given value is not nil.
func (pu *PendingkycUpdate) SetNillableAgentNameLastname(s *string) *PendingkycUpdate {
	if s != nil {
		pu.SetAgentNameLastname(*s)
	}
	return pu
}

// ClearAgentNameLastname clears the value of the "AgentNameLastname" field.
func (pu *PendingkycUpdate) ClearAgentNameLastname() *PendingkycUpdate {
	pu.mutation.ClearAgentNameLastname()
	return pu
}

// SetKYCDate sets the "KYCDate" field.
func (pu *PendingkycUpdate) SetKYCDate(s string) *PendingkycUpdate {
	pu.mutation.SetKYCDate(s)
	return pu
}

// SetNillableKYCDate sets the "KYCDate" field if the given value is not nil.
func (pu *PendingkycUpdate) SetNillableKYCDate(s *string) *PendingkycUpdate {
	if s != nil {
		pu.SetKYCDate(*s)
	}
	return pu
}

// ClearKYCDate clears the value of the "KYCDate" field.
func (pu *PendingkycUpdate) ClearKYCDate() *PendingkycUpdate {
	pu.mutation.ClearKYCDate()
	return pu
}

// SetDateGen sets the "DateGen" field.
func (pu *PendingkycUpdate) SetDateGen(t time.Time) *PendingkycUpdate {
	pu.mutation.SetDateGen(t)
	return pu
}

// SetNillableDateGen sets the "DateGen" field if the given value is not nil.
func (pu *PendingkycUpdate) SetNillableDateGen(t *time.Time) *PendingkycUpdate {
	if t != nil {
		pu.SetDateGen(*t)
	}
	return pu
}

// ClearDateGen clears the value of the "DateGen" field.
func (pu *PendingkycUpdate) ClearDateGen() *PendingkycUpdate {
	pu.mutation.ClearDateGen()
	return pu
}

// SetStatusGen sets the "StatusGen" field.
func (pu *PendingkycUpdate) SetStatusGen(b bool) *PendingkycUpdate {
	pu.mutation.SetStatusGen(b)
	return pu
}

// SetNillableStatusGen sets the "StatusGen" field if the given value is not nil.
func (pu *PendingkycUpdate) SetNillableStatusGen(b *bool) *PendingkycUpdate {
	if b != nil {
		pu.SetStatusGen(*b)
	}
	return pu
}

// ClearStatusGen clears the value of the "StatusGen" field.
func (pu *PendingkycUpdate) ClearStatusGen() *PendingkycUpdate {
	pu.mutation.ClearStatusGen()
	return pu
}

// SetPoint sets the "Point" field.
func (pu *PendingkycUpdate) SetPoint(i int) *PendingkycUpdate {
	pu.mutation.ResetPoint()
	pu.mutation.SetPoint(i)
	return pu
}

// SetNillablePoint sets the "Point" field if the given value is not nil.
func (pu *PendingkycUpdate) SetNillablePoint(i *int) *PendingkycUpdate {
	if i != nil {
		pu.SetPoint(*i)
	}
	return pu
}

// AddPoint adds i to the "Point" field.
func (pu *PendingkycUpdate) AddPoint(i int) *PendingkycUpdate {
	pu.mutation.AddPoint(i)
	return pu
}

// ClearPoint clears the value of the "Point" field.
func (pu *PendingkycUpdate) ClearPoint() *PendingkycUpdate {
	pu.mutation.ClearPoint()
	return pu
}

// SetFileimportID sets the "FileimportID" field.
func (pu *PendingkycUpdate) SetFileimportID(i int) *PendingkycUpdate {
	pu.mutation.ResetFileimportID()
	pu.mutation.SetFileimportID(i)
	return pu
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (pu *PendingkycUpdate) SetNillableFileimportID(i *int) *PendingkycUpdate {
	if i != nil {
		pu.SetFileimportID(*i)
	}
	return pu
}

// AddFileimportID adds i to the "FileimportID" field.
func (pu *PendingkycUpdate) AddFileimportID(i int) *PendingkycUpdate {
	pu.mutation.AddFileimportID(i)
	return pu
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (pu *PendingkycUpdate) ClearFileimportID() *PendingkycUpdate {
	pu.mutation.ClearFileimportID()
	return pu
}

// Mutation returns the PendingkycMutation object of the builder.
func (pu *PendingkycUpdate) Mutation() *PendingkycMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PendingkycUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PendingkycMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PendingkycUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PendingkycUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PendingkycUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PendingkycUpdate) check() error {
	if v, ok := pu.mutation.WalletID(); ok {
		if err := pendingkyc.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := pendingkyc.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := pu.mutation.AgentID(); ok {
		if err := pendingkyc.AgentIDValidator(v); err != nil {
			return &ValidationError{Name: "AgentID", err: fmt.Errorf("ent: validator failed for field \"AgentID\": %w", err)}
		}
	}
	if v, ok := pu.mutation.AgentNameLastname(); ok {
		if err := pendingkyc.AgentNameLastnameValidator(v); err != nil {
			return &ValidationError{Name: "AgentNameLastname", err: fmt.Errorf("ent: validator failed for field \"AgentNameLastname\": %w", err)}
		}
	}
	if v, ok := pu.mutation.KYCDate(); ok {
		if err := pendingkyc.KYCDateValidator(v); err != nil {
			return &ValidationError{Name: "KYCDate", err: fmt.Errorf("ent: validator failed for field \"KYCDate\": %w", err)}
		}
	}
	return nil
}

func (pu *PendingkycUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pendingkyc.Table,
			Columns: pendingkyc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pendingkyc.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingkyc.FieldWalletID,
		})
	}
	if pu.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingkyc.FieldWalletID,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingkyc.FieldName,
		})
	}
	if pu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingkyc.FieldName,
		})
	}
	if value, ok := pu.mutation.AgentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingkyc.FieldAgentID,
		})
	}
	if pu.mutation.AgentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingkyc.FieldAgentID,
		})
	}
	if value, ok := pu.mutation.AgentNameLastname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingkyc.FieldAgentNameLastname,
		})
	}
	if pu.mutation.AgentNameLastnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingkyc.FieldAgentNameLastname,
		})
	}
	if value, ok := pu.mutation.KYCDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingkyc.FieldKYCDate,
		})
	}
	if pu.mutation.KYCDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingkyc.FieldKYCDate,
		})
	}
	if value, ok := pu.mutation.DateGen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pendingkyc.FieldDateGen,
		})
	}
	if pu.mutation.DateGenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pendingkyc.FieldDateGen,
		})
	}
	if value, ok := pu.mutation.StatusGen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pendingkyc.FieldStatusGen,
		})
	}
	if pu.mutation.StatusGenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: pendingkyc.FieldStatusGen,
		})
	}
	if value, ok := pu.mutation.Point(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingkyc.FieldPoint,
		})
	}
	if value, ok := pu.mutation.AddedPoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingkyc.FieldPoint,
		})
	}
	if pu.mutation.PointCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pendingkyc.FieldPoint,
		})
	}
	if value, ok := pu.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingkyc.FieldFileimportID,
		})
	}
	if value, ok := pu.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingkyc.FieldFileimportID,
		})
	}
	if pu.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pendingkyc.FieldFileimportID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pendingkyc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PendingkycUpdateOne is the builder for updating a single Pendingkyc entity.
type PendingkycUpdateOne struct {
	config
	hooks    []Hook
	mutation *PendingkycMutation
}

// SetWalletID sets the "WalletID" field.
func (puo *PendingkycUpdateOne) SetWalletID(s string) *PendingkycUpdateOne {
	puo.mutation.SetWalletID(s)
	return puo
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (puo *PendingkycUpdateOne) SetNillableWalletID(s *string) *PendingkycUpdateOne {
	if s != nil {
		puo.SetWalletID(*s)
	}
	return puo
}

// ClearWalletID clears the value of the "WalletID" field.
func (puo *PendingkycUpdateOne) ClearWalletID() *PendingkycUpdateOne {
	puo.mutation.ClearWalletID()
	return puo
}

// SetName sets the "Name" field.
func (puo *PendingkycUpdateOne) SetName(s string) *PendingkycUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (puo *PendingkycUpdateOne) SetNillableName(s *string) *PendingkycUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "Name" field.
func (puo *PendingkycUpdateOne) ClearName() *PendingkycUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetAgentID sets the "AgentID" field.
func (puo *PendingkycUpdateOne) SetAgentID(s string) *PendingkycUpdateOne {
	puo.mutation.SetAgentID(s)
	return puo
}

// SetNillableAgentID sets the "AgentID" field if the given value is not nil.
func (puo *PendingkycUpdateOne) SetNillableAgentID(s *string) *PendingkycUpdateOne {
	if s != nil {
		puo.SetAgentID(*s)
	}
	return puo
}

// ClearAgentID clears the value of the "AgentID" field.
func (puo *PendingkycUpdateOne) ClearAgentID() *PendingkycUpdateOne {
	puo.mutation.ClearAgentID()
	return puo
}

// SetAgentNameLastname sets the "AgentNameLastname" field.
func (puo *PendingkycUpdateOne) SetAgentNameLastname(s string) *PendingkycUpdateOne {
	puo.mutation.SetAgentNameLastname(s)
	return puo
}

// SetNillableAgentNameLastname sets the "AgentNameLastname" field if the given value is not nil.
func (puo *PendingkycUpdateOne) SetNillableAgentNameLastname(s *string) *PendingkycUpdateOne {
	if s != nil {
		puo.SetAgentNameLastname(*s)
	}
	return puo
}

// ClearAgentNameLastname clears the value of the "AgentNameLastname" field.
func (puo *PendingkycUpdateOne) ClearAgentNameLastname() *PendingkycUpdateOne {
	puo.mutation.ClearAgentNameLastname()
	return puo
}

// SetKYCDate sets the "KYCDate" field.
func (puo *PendingkycUpdateOne) SetKYCDate(s string) *PendingkycUpdateOne {
	puo.mutation.SetKYCDate(s)
	return puo
}

// SetNillableKYCDate sets the "KYCDate" field if the given value is not nil.
func (puo *PendingkycUpdateOne) SetNillableKYCDate(s *string) *PendingkycUpdateOne {
	if s != nil {
		puo.SetKYCDate(*s)
	}
	return puo
}

// ClearKYCDate clears the value of the "KYCDate" field.
func (puo *PendingkycUpdateOne) ClearKYCDate() *PendingkycUpdateOne {
	puo.mutation.ClearKYCDate()
	return puo
}

// SetDateGen sets the "DateGen" field.
func (puo *PendingkycUpdateOne) SetDateGen(t time.Time) *PendingkycUpdateOne {
	puo.mutation.SetDateGen(t)
	return puo
}

// SetNillableDateGen sets the "DateGen" field if the given value is not nil.
func (puo *PendingkycUpdateOne) SetNillableDateGen(t *time.Time) *PendingkycUpdateOne {
	if t != nil {
		puo.SetDateGen(*t)
	}
	return puo
}

// ClearDateGen clears the value of the "DateGen" field.
func (puo *PendingkycUpdateOne) ClearDateGen() *PendingkycUpdateOne {
	puo.mutation.ClearDateGen()
	return puo
}

// SetStatusGen sets the "StatusGen" field.
func (puo *PendingkycUpdateOne) SetStatusGen(b bool) *PendingkycUpdateOne {
	puo.mutation.SetStatusGen(b)
	return puo
}

// SetNillableStatusGen sets the "StatusGen" field if the given value is not nil.
func (puo *PendingkycUpdateOne) SetNillableStatusGen(b *bool) *PendingkycUpdateOne {
	if b != nil {
		puo.SetStatusGen(*b)
	}
	return puo
}

// ClearStatusGen clears the value of the "StatusGen" field.
func (puo *PendingkycUpdateOne) ClearStatusGen() *PendingkycUpdateOne {
	puo.mutation.ClearStatusGen()
	return puo
}

// SetPoint sets the "Point" field.
func (puo *PendingkycUpdateOne) SetPoint(i int) *PendingkycUpdateOne {
	puo.mutation.ResetPoint()
	puo.mutation.SetPoint(i)
	return puo
}

// SetNillablePoint sets the "Point" field if the given value is not nil.
func (puo *PendingkycUpdateOne) SetNillablePoint(i *int) *PendingkycUpdateOne {
	if i != nil {
		puo.SetPoint(*i)
	}
	return puo
}

// AddPoint adds i to the "Point" field.
func (puo *PendingkycUpdateOne) AddPoint(i int) *PendingkycUpdateOne {
	puo.mutation.AddPoint(i)
	return puo
}

// ClearPoint clears the value of the "Point" field.
func (puo *PendingkycUpdateOne) ClearPoint() *PendingkycUpdateOne {
	puo.mutation.ClearPoint()
	return puo
}

// SetFileimportID sets the "FileimportID" field.
func (puo *PendingkycUpdateOne) SetFileimportID(i int) *PendingkycUpdateOne {
	puo.mutation.ResetFileimportID()
	puo.mutation.SetFileimportID(i)
	return puo
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (puo *PendingkycUpdateOne) SetNillableFileimportID(i *int) *PendingkycUpdateOne {
	if i != nil {
		puo.SetFileimportID(*i)
	}
	return puo
}

// AddFileimportID adds i to the "FileimportID" field.
func (puo *PendingkycUpdateOne) AddFileimportID(i int) *PendingkycUpdateOne {
	puo.mutation.AddFileimportID(i)
	return puo
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (puo *PendingkycUpdateOne) ClearFileimportID() *PendingkycUpdateOne {
	puo.mutation.ClearFileimportID()
	return puo
}

// Mutation returns the PendingkycMutation object of the builder.
func (puo *PendingkycUpdateOne) Mutation() *PendingkycMutation {
	return puo.mutation
}

// Save executes the query and returns the updated Pendingkyc entity.
func (puo *PendingkycUpdateOne) Save(ctx context.Context) (*Pendingkyc, error) {
	var (
		err  error
		node *Pendingkyc
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PendingkycMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PendingkycUpdateOne) SaveX(ctx context.Context) *Pendingkyc {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PendingkycUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PendingkycUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PendingkycUpdateOne) check() error {
	if v, ok := puo.mutation.WalletID(); ok {
		if err := pendingkyc.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := pendingkyc.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := puo.mutation.AgentID(); ok {
		if err := pendingkyc.AgentIDValidator(v); err != nil {
			return &ValidationError{Name: "AgentID", err: fmt.Errorf("ent: validator failed for field \"AgentID\": %w", err)}
		}
	}
	if v, ok := puo.mutation.AgentNameLastname(); ok {
		if err := pendingkyc.AgentNameLastnameValidator(v); err != nil {
			return &ValidationError{Name: "AgentNameLastname", err: fmt.Errorf("ent: validator failed for field \"AgentNameLastname\": %w", err)}
		}
	}
	if v, ok := puo.mutation.KYCDate(); ok {
		if err := pendingkyc.KYCDateValidator(v); err != nil {
			return &ValidationError{Name: "KYCDate", err: fmt.Errorf("ent: validator failed for field \"KYCDate\": %w", err)}
		}
	}
	return nil
}

func (puo *PendingkycUpdateOne) sqlSave(ctx context.Context) (_node *Pendingkyc, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pendingkyc.Table,
			Columns: pendingkyc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pendingkyc.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pendingkyc.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingkyc.FieldWalletID,
		})
	}
	if puo.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingkyc.FieldWalletID,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingkyc.FieldName,
		})
	}
	if puo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingkyc.FieldName,
		})
	}
	if value, ok := puo.mutation.AgentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingkyc.FieldAgentID,
		})
	}
	if puo.mutation.AgentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingkyc.FieldAgentID,
		})
	}
	if value, ok := puo.mutation.AgentNameLastname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingkyc.FieldAgentNameLastname,
		})
	}
	if puo.mutation.AgentNameLastnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingkyc.FieldAgentNameLastname,
		})
	}
	if value, ok := puo.mutation.KYCDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pendingkyc.FieldKYCDate,
		})
	}
	if puo.mutation.KYCDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pendingkyc.FieldKYCDate,
		})
	}
	if value, ok := puo.mutation.DateGen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pendingkyc.FieldDateGen,
		})
	}
	if puo.mutation.DateGenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pendingkyc.FieldDateGen,
		})
	}
	if value, ok := puo.mutation.StatusGen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pendingkyc.FieldStatusGen,
		})
	}
	if puo.mutation.StatusGenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: pendingkyc.FieldStatusGen,
		})
	}
	if value, ok := puo.mutation.Point(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingkyc.FieldPoint,
		})
	}
	if value, ok := puo.mutation.AddedPoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingkyc.FieldPoint,
		})
	}
	if puo.mutation.PointCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pendingkyc.FieldPoint,
		})
	}
	if value, ok := puo.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingkyc.FieldFileimportID,
		})
	}
	if value, ok := puo.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pendingkyc.FieldFileimportID,
		})
	}
	if puo.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pendingkyc.FieldFileimportID,
		})
	}
	_node = &Pendingkyc{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pendingkyc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
