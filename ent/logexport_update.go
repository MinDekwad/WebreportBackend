// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/logexport"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogexportUpdate is the builder for updating Logexport entities.
type LogexportUpdate struct {
	config
	hooks    []Hook
	mutation *LogexportMutation
}

// Where adds a new predicate for the LogexportUpdate builder.
func (lu *LogexportUpdate) Where(ps ...predicate.Logexport) *LogexportUpdate {
	lu.mutation.predicates = append(lu.mutation.predicates, ps...)
	return lu
}

// SetUserName sets the "UserName" field.
func (lu *LogexportUpdate) SetUserName(s string) *LogexportUpdate {
	lu.mutation.SetUserName(s)
	return lu
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (lu *LogexportUpdate) SetNillableUserName(s *string) *LogexportUpdate {
	if s != nil {
		lu.SetUserName(*s)
	}
	return lu
}

// ClearUserName clears the value of the "UserName" field.
func (lu *LogexportUpdate) ClearUserName() *LogexportUpdate {
	lu.mutation.ClearUserName()
	return lu
}

// SetFileName sets the "FileName" field.
func (lu *LogexportUpdate) SetFileName(s string) *LogexportUpdate {
	lu.mutation.SetFileName(s)
	return lu
}

// SetNillableFileName sets the "FileName" field if the given value is not nil.
func (lu *LogexportUpdate) SetNillableFileName(s *string) *LogexportUpdate {
	if s != nil {
		lu.SetFileName(*s)
	}
	return lu
}

// ClearFileName clears the value of the "FileName" field.
func (lu *LogexportUpdate) ClearFileName() *LogexportUpdate {
	lu.mutation.ClearFileName()
	return lu
}

// SetExportDate sets the "ExportDate" field.
func (lu *LogexportUpdate) SetExportDate(t time.Time) *LogexportUpdate {
	lu.mutation.SetExportDate(t)
	return lu
}

// SetNillableExportDate sets the "ExportDate" field if the given value is not nil.
func (lu *LogexportUpdate) SetNillableExportDate(t *time.Time) *LogexportUpdate {
	if t != nil {
		lu.SetExportDate(*t)
	}
	return lu
}

// ClearExportDate clears the value of the "ExportDate" field.
func (lu *LogexportUpdate) ClearExportDate() *LogexportUpdate {
	lu.mutation.ClearExportDate()
	return lu
}

// Mutation returns the LogexportMutation object of the builder.
func (lu *LogexportUpdate) Mutation() *LogexportMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LogexportUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		if err = lu.check(); err != nil {
			return 0, err
		}
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogexportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lu.check(); err != nil {
				return 0, err
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LogexportUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LogexportUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LogexportUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LogexportUpdate) check() error {
	if v, ok := lu.mutation.UserName(); ok {
		if err := logexport.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "UserName", err: fmt.Errorf("ent: validator failed for field \"UserName\": %w", err)}
		}
	}
	if v, ok := lu.mutation.FileName(); ok {
		if err := logexport.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "FileName", err: fmt.Errorf("ent: validator failed for field \"FileName\": %w", err)}
		}
	}
	return nil
}

func (lu *LogexportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   logexport.Table,
			Columns: logexport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: logexport.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logexport.FieldUserName,
		})
	}
	if lu.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: logexport.FieldUserName,
		})
	}
	if value, ok := lu.mutation.FileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logexport.FieldFileName,
		})
	}
	if lu.mutation.FileNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: logexport.FieldFileName,
		})
	}
	if value, ok := lu.mutation.ExportDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: logexport.FieldExportDate,
		})
	}
	if lu.mutation.ExportDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: logexport.FieldExportDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logexport.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LogexportUpdateOne is the builder for updating a single Logexport entity.
type LogexportUpdateOne struct {
	config
	hooks    []Hook
	mutation *LogexportMutation
}

// SetUserName sets the "UserName" field.
func (luo *LogexportUpdateOne) SetUserName(s string) *LogexportUpdateOne {
	luo.mutation.SetUserName(s)
	return luo
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (luo *LogexportUpdateOne) SetNillableUserName(s *string) *LogexportUpdateOne {
	if s != nil {
		luo.SetUserName(*s)
	}
	return luo
}

// ClearUserName clears the value of the "UserName" field.
func (luo *LogexportUpdateOne) ClearUserName() *LogexportUpdateOne {
	luo.mutation.ClearUserName()
	return luo
}

// SetFileName sets the "FileName" field.
func (luo *LogexportUpdateOne) SetFileName(s string) *LogexportUpdateOne {
	luo.mutation.SetFileName(s)
	return luo
}

// SetNillableFileName sets the "FileName" field if the given value is not nil.
func (luo *LogexportUpdateOne) SetNillableFileName(s *string) *LogexportUpdateOne {
	if s != nil {
		luo.SetFileName(*s)
	}
	return luo
}

// ClearFileName clears the value of the "FileName" field.
func (luo *LogexportUpdateOne) ClearFileName() *LogexportUpdateOne {
	luo.mutation.ClearFileName()
	return luo
}

// SetExportDate sets the "ExportDate" field.
func (luo *LogexportUpdateOne) SetExportDate(t time.Time) *LogexportUpdateOne {
	luo.mutation.SetExportDate(t)
	return luo
}

// SetNillableExportDate sets the "ExportDate" field if the given value is not nil.
func (luo *LogexportUpdateOne) SetNillableExportDate(t *time.Time) *LogexportUpdateOne {
	if t != nil {
		luo.SetExportDate(*t)
	}
	return luo
}

// ClearExportDate clears the value of the "ExportDate" field.
func (luo *LogexportUpdateOne) ClearExportDate() *LogexportUpdateOne {
	luo.mutation.ClearExportDate()
	return luo
}

// Mutation returns the LogexportMutation object of the builder.
func (luo *LogexportUpdateOne) Mutation() *LogexportMutation {
	return luo.mutation
}

// Save executes the query and returns the updated Logexport entity.
func (luo *LogexportUpdateOne) Save(ctx context.Context) (*Logexport, error) {
	var (
		err  error
		node *Logexport
	)
	if len(luo.hooks) == 0 {
		if err = luo.check(); err != nil {
			return nil, err
		}
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogexportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luo.check(); err != nil {
				return nil, err
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LogexportUpdateOne) SaveX(ctx context.Context) *Logexport {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LogexportUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LogexportUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LogexportUpdateOne) check() error {
	if v, ok := luo.mutation.UserName(); ok {
		if err := logexport.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "UserName", err: fmt.Errorf("ent: validator failed for field \"UserName\": %w", err)}
		}
	}
	if v, ok := luo.mutation.FileName(); ok {
		if err := logexport.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "FileName", err: fmt.Errorf("ent: validator failed for field \"FileName\": %w", err)}
		}
	}
	return nil
}

func (luo *LogexportUpdateOne) sqlSave(ctx context.Context) (_node *Logexport, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   logexport.Table,
			Columns: logexport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: logexport.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Logexport.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logexport.FieldUserName,
		})
	}
	if luo.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: logexport.FieldUserName,
		})
	}
	if value, ok := luo.mutation.FileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logexport.FieldFileName,
		})
	}
	if luo.mutation.FileNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: logexport.FieldFileName,
		})
	}
	if value, ok := luo.mutation.ExportDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: logexport.FieldExportDate,
		})
	}
	if luo.mutation.ExportDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: logexport.FieldExportDate,
		})
	}
	_node = &Logexport{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logexport.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
