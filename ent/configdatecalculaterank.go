// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/configdatecalculaterank"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Configdatecalculaterank is the model entity for the Configdatecalculaterank schema.
type Configdatecalculaterank struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Rank holds the value of the "Rank" field.
	Rank string `json:"Rank,omitempty"`
	// NumDateCalculateRank holds the value of the "NumDateCalculateRank" field.
	NumDateCalculateRank int `json:"NumDateCalculateRank,omitempty"`
	// NumDateCalculateRankTmp holds the value of the "NumDateCalculateRankTmp" field.
	NumDateCalculateRankTmp string `json:"NumDateCalculateRankTmp,omitempty"`
	// UpdateDate holds the value of the "UpdateDate" field.
	UpdateDate time.Time `json:"UpdateDate,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Configdatecalculaterank) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case configdatecalculaterank.FieldID, configdatecalculaterank.FieldNumDateCalculateRank:
			values[i] = &sql.NullInt64{}
		case configdatecalculaterank.FieldRank, configdatecalculaterank.FieldNumDateCalculateRankTmp:
			values[i] = &sql.NullString{}
		case configdatecalculaterank.FieldUpdateDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Configdatecalculaterank", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Configdatecalculaterank fields.
func (c *Configdatecalculaterank) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case configdatecalculaterank.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case configdatecalculaterank.FieldRank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Rank", values[i])
			} else if value.Valid {
				c.Rank = value.String
			}
		case configdatecalculaterank.FieldNumDateCalculateRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NumDateCalculateRank", values[i])
			} else if value.Valid {
				c.NumDateCalculateRank = int(value.Int64)
			}
		case configdatecalculaterank.FieldNumDateCalculateRankTmp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NumDateCalculateRankTmp", values[i])
			} else if value.Valid {
				c.NumDateCalculateRankTmp = value.String
			}
		case configdatecalculaterank.FieldUpdateDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdateDate", values[i])
			} else if value.Valid {
				c.UpdateDate = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Configdatecalculaterank.
// Note that you need to call Configdatecalculaterank.Unwrap() before calling this method if this Configdatecalculaterank
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Configdatecalculaterank) Update() *ConfigdatecalculaterankUpdateOne {
	return (&ConfigdatecalculaterankClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Configdatecalculaterank entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Configdatecalculaterank) Unwrap() *Configdatecalculaterank {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Configdatecalculaterank is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Configdatecalculaterank) String() string {
	var builder strings.Builder
	builder.WriteString("Configdatecalculaterank(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", Rank=")
	builder.WriteString(c.Rank)
	builder.WriteString(", NumDateCalculateRank=")
	builder.WriteString(fmt.Sprintf("%v", c.NumDateCalculateRank))
	builder.WriteString(", NumDateCalculateRankTmp=")
	builder.WriteString(c.NumDateCalculateRankTmp)
	builder.WriteString(", UpdateDate=")
	builder.WriteString(c.UpdateDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Configdatecalculateranks is a parsable slice of Configdatecalculaterank.
type Configdatecalculateranks []*Configdatecalculaterank

func (c Configdatecalculateranks) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
