// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/bulk"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Bulk is the model entity for the Bulk schema.
type Bulk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BulkCreditSameday holds the value of the "bulkCreditSameday" field.
	BulkCreditSameday *float64 `json:"bulkCreditSameday,omitempty"`
	// BulkCreditSamedayFee holds the value of the "bulkCreditSamedayFee" field.
	BulkCreditSamedayFee *float64 `json:"bulkCreditSamedayFee,omitempty"`
	// Transfertobankaccount holds the value of the "transfertobankaccount" field.
	Transfertobankaccount *float64 `json:"transfertobankaccount,omitempty"`
	// DateTime holds the value of the "dateTime" field.
	DateTime *time.Time `json:"dateTime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bulk) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bulk.FieldBulkCreditSameday, bulk.FieldBulkCreditSamedayFee, bulk.FieldTransfertobankaccount:
			values[i] = &sql.NullFloat64{}
		case bulk.FieldID:
			values[i] = &sql.NullInt64{}
		case bulk.FieldDateTime:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bulk", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bulk fields.
func (b *Bulk) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bulk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bulk.FieldBulkCreditSameday:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bulkCreditSameday", values[i])
			} else if value.Valid {
				b.BulkCreditSameday = new(float64)
				*b.BulkCreditSameday = value.Float64
			}
		case bulk.FieldBulkCreditSamedayFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bulkCreditSamedayFee", values[i])
			} else if value.Valid {
				b.BulkCreditSamedayFee = new(float64)
				*b.BulkCreditSamedayFee = value.Float64
			}
		case bulk.FieldTransfertobankaccount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field transfertobankaccount", values[i])
			} else if value.Valid {
				b.Transfertobankaccount = new(float64)
				*b.Transfertobankaccount = value.Float64
			}
		case bulk.FieldDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateTime", values[i])
			} else if value.Valid {
				b.DateTime = new(time.Time)
				*b.DateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Bulk.
// Note that you need to call Bulk.Unwrap() before calling this method if this Bulk
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bulk) Update() *BulkUpdateOne {
	return (&BulkClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Bulk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bulk) Unwrap() *Bulk {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bulk is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bulk) String() string {
	var builder strings.Builder
	builder.WriteString("Bulk(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	if v := b.BulkCreditSameday; v != nil {
		builder.WriteString(", bulkCreditSameday=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := b.BulkCreditSamedayFee; v != nil {
		builder.WriteString(", bulkCreditSamedayFee=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := b.Transfertobankaccount; v != nil {
		builder.WriteString(", transfertobankaccount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := b.DateTime; v != nil {
		builder.WriteString(", dateTime=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Bulks is a parsable slice of Bulk.
type Bulks []*Bulk

func (b Bulks) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
