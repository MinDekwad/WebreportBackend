// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-report2/ent/bankdetail"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/statementendingbalanc"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatementEndingBalancQuery is the builder for querying StatementEndingBalanc entities.
type StatementEndingBalancQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.StatementEndingBalanc
	// eager-loading edges.
	withBank *BankdetailQuery
	withFKs  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StatementEndingBalancQuery builder.
func (sebq *StatementEndingBalancQuery) Where(ps ...predicate.StatementEndingBalanc) *StatementEndingBalancQuery {
	sebq.predicates = append(sebq.predicates, ps...)
	return sebq
}

// Limit adds a limit step to the query.
func (sebq *StatementEndingBalancQuery) Limit(limit int) *StatementEndingBalancQuery {
	sebq.limit = &limit
	return sebq
}

// Offset adds an offset step to the query.
func (sebq *StatementEndingBalancQuery) Offset(offset int) *StatementEndingBalancQuery {
	sebq.offset = &offset
	return sebq
}

// Order adds an order step to the query.
func (sebq *StatementEndingBalancQuery) Order(o ...OrderFunc) *StatementEndingBalancQuery {
	sebq.order = append(sebq.order, o...)
	return sebq
}

// QueryBank chains the current query on the "bank" edge.
func (sebq *StatementEndingBalancQuery) QueryBank() *BankdetailQuery {
	query := &BankdetailQuery{config: sebq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statementendingbalanc.Table, statementendingbalanc.FieldID, selector),
			sqlgraph.To(bankdetail.Table, bankdetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statementendingbalanc.BankTable, statementendingbalanc.BankColumn),
		)
		fromU = sqlgraph.SetNeighbors(sebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first StatementEndingBalanc entity from the query.
// Returns a *NotFoundError when no StatementEndingBalanc was found.
func (sebq *StatementEndingBalancQuery) First(ctx context.Context) (*StatementEndingBalanc, error) {
	nodes, err := sebq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{statementendingbalanc.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sebq *StatementEndingBalancQuery) FirstX(ctx context.Context) *StatementEndingBalanc {
	node, err := sebq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first StatementEndingBalanc ID from the query.
// Returns a *NotFoundError when no StatementEndingBalanc ID was found.
func (sebq *StatementEndingBalancQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sebq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{statementendingbalanc.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sebq *StatementEndingBalancQuery) FirstIDX(ctx context.Context) int {
	id, err := sebq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single StatementEndingBalanc entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one StatementEndingBalanc entity is not found.
// Returns a *NotFoundError when no StatementEndingBalanc entities are found.
func (sebq *StatementEndingBalancQuery) Only(ctx context.Context) (*StatementEndingBalanc, error) {
	nodes, err := sebq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{statementendingbalanc.Label}
	default:
		return nil, &NotSingularError{statementendingbalanc.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sebq *StatementEndingBalancQuery) OnlyX(ctx context.Context) *StatementEndingBalanc {
	node, err := sebq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only StatementEndingBalanc ID in the query.
// Returns a *NotSingularError when exactly one StatementEndingBalanc ID is not found.
// Returns a *NotFoundError when no entities are found.
func (sebq *StatementEndingBalancQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sebq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{statementendingbalanc.Label}
	default:
		err = &NotSingularError{statementendingbalanc.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sebq *StatementEndingBalancQuery) OnlyIDX(ctx context.Context) int {
	id, err := sebq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of StatementEndingBalancs.
func (sebq *StatementEndingBalancQuery) All(ctx context.Context) ([]*StatementEndingBalanc, error) {
	if err := sebq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sebq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sebq *StatementEndingBalancQuery) AllX(ctx context.Context) []*StatementEndingBalanc {
	nodes, err := sebq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of StatementEndingBalanc IDs.
func (sebq *StatementEndingBalancQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := sebq.Select(statementendingbalanc.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sebq *StatementEndingBalancQuery) IDsX(ctx context.Context) []int {
	ids, err := sebq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sebq *StatementEndingBalancQuery) Count(ctx context.Context) (int, error) {
	if err := sebq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sebq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sebq *StatementEndingBalancQuery) CountX(ctx context.Context) int {
	count, err := sebq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sebq *StatementEndingBalancQuery) Exist(ctx context.Context) (bool, error) {
	if err := sebq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sebq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sebq *StatementEndingBalancQuery) ExistX(ctx context.Context) bool {
	exist, err := sebq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StatementEndingBalancQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sebq *StatementEndingBalancQuery) Clone() *StatementEndingBalancQuery {
	if sebq == nil {
		return nil
	}
	return &StatementEndingBalancQuery{
		config:     sebq.config,
		limit:      sebq.limit,
		offset:     sebq.offset,
		order:      append([]OrderFunc{}, sebq.order...),
		predicates: append([]predicate.StatementEndingBalanc{}, sebq.predicates...),
		withBank:   sebq.withBank.Clone(),
		// clone intermediate query.
		sql:  sebq.sql.Clone(),
		path: sebq.path,
	}
}

// WithBank tells the query-builder to eager-load the nodes that are connected to
// the "bank" edge. The optional arguments are used to configure the query builder of the edge.
func (sebq *StatementEndingBalancQuery) WithBank(opts ...func(*BankdetailQuery)) *StatementEndingBalancQuery {
	query := &BankdetailQuery{config: sebq.config}
	for _, opt := range opts {
		opt(query)
	}
	sebq.withBank = query
	return sebq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		StatementBalance float64 `json:"Statement_Balance,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.StatementEndingBalanc.Query().
//		GroupBy(statementendingbalanc.FieldStatementBalance).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sebq *StatementEndingBalancQuery) GroupBy(field string, fields ...string) *StatementEndingBalancGroupBy {
	group := &StatementEndingBalancGroupBy{config: sebq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sebq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		StatementBalance float64 `json:"Statement_Balance,omitempty"`
//	}
//
//	client.StatementEndingBalanc.Query().
//		Select(statementendingbalanc.FieldStatementBalance).
//		Scan(ctx, &v)
//
func (sebq *StatementEndingBalancQuery) Select(field string, fields ...string) *StatementEndingBalancSelect {
	sebq.fields = append([]string{field}, fields...)
	return &StatementEndingBalancSelect{StatementEndingBalancQuery: sebq}
}

func (sebq *StatementEndingBalancQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sebq.fields {
		if !statementendingbalanc.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sebq.path != nil {
		prev, err := sebq.path(ctx)
		if err != nil {
			return err
		}
		sebq.sql = prev
	}
	return nil
}

func (sebq *StatementEndingBalancQuery) sqlAll(ctx context.Context) ([]*StatementEndingBalanc, error) {
	var (
		nodes       = []*StatementEndingBalanc{}
		withFKs     = sebq.withFKs
		_spec       = sebq.querySpec()
		loadedTypes = [1]bool{
			sebq.withBank != nil,
		}
	)
	if sebq.withBank != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, statementendingbalanc.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &StatementEndingBalanc{config: sebq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, sebq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := sebq.withBank; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*StatementEndingBalanc)
		for i := range nodes {
			if fk := nodes[i]._Bank_UID; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(bankdetail.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "_Bank_UID" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Bank = n
			}
		}
	}

	return nodes, nil
}

func (sebq *StatementEndingBalancQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sebq.querySpec()
	return sqlgraph.CountNodes(ctx, sebq.driver, _spec)
}

func (sebq *StatementEndingBalancQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sebq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (sebq *StatementEndingBalancQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statementendingbalanc.Table,
			Columns: statementendingbalanc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statementendingbalanc.FieldID,
			},
		},
		From:   sebq.sql,
		Unique: true,
	}
	if fields := sebq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statementendingbalanc.FieldID)
		for i := range fields {
			if fields[i] != statementendingbalanc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sebq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sebq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sebq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sebq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, statementendingbalanc.ValidColumn)
			}
		}
	}
	return _spec
}

func (sebq *StatementEndingBalancQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sebq.driver.Dialect())
	t1 := builder.Table(statementendingbalanc.Table)
	selector := builder.Select(t1.Columns(statementendingbalanc.Columns...)...).From(t1)
	if sebq.sql != nil {
		selector = sebq.sql
		selector.Select(selector.Columns(statementendingbalanc.Columns...)...)
	}
	for _, p := range sebq.predicates {
		p(selector)
	}
	for _, p := range sebq.order {
		p(selector, statementendingbalanc.ValidColumn)
	}
	if offset := sebq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sebq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// StatementEndingBalancGroupBy is the group-by builder for StatementEndingBalanc entities.
type StatementEndingBalancGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sebgb *StatementEndingBalancGroupBy) Aggregate(fns ...AggregateFunc) *StatementEndingBalancGroupBy {
	sebgb.fns = append(sebgb.fns, fns...)
	return sebgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sebgb *StatementEndingBalancGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sebgb.path(ctx)
	if err != nil {
		return err
	}
	sebgb.sql = query
	return sebgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sebgb *StatementEndingBalancGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sebgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sebgb *StatementEndingBalancGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sebgb.fields) > 1 {
		return nil, errors.New("ent: StatementEndingBalancGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sebgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sebgb *StatementEndingBalancGroupBy) StringsX(ctx context.Context) []string {
	v, err := sebgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sebgb *StatementEndingBalancGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sebgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statementendingbalanc.Label}
	default:
		err = fmt.Errorf("ent: StatementEndingBalancGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sebgb *StatementEndingBalancGroupBy) StringX(ctx context.Context) string {
	v, err := sebgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sebgb *StatementEndingBalancGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sebgb.fields) > 1 {
		return nil, errors.New("ent: StatementEndingBalancGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sebgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sebgb *StatementEndingBalancGroupBy) IntsX(ctx context.Context) []int {
	v, err := sebgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sebgb *StatementEndingBalancGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sebgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statementendingbalanc.Label}
	default:
		err = fmt.Errorf("ent: StatementEndingBalancGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sebgb *StatementEndingBalancGroupBy) IntX(ctx context.Context) int {
	v, err := sebgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sebgb *StatementEndingBalancGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sebgb.fields) > 1 {
		return nil, errors.New("ent: StatementEndingBalancGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sebgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sebgb *StatementEndingBalancGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sebgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sebgb *StatementEndingBalancGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sebgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statementendingbalanc.Label}
	default:
		err = fmt.Errorf("ent: StatementEndingBalancGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sebgb *StatementEndingBalancGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sebgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sebgb *StatementEndingBalancGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sebgb.fields) > 1 {
		return nil, errors.New("ent: StatementEndingBalancGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sebgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sebgb *StatementEndingBalancGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sebgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sebgb *StatementEndingBalancGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sebgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statementendingbalanc.Label}
	default:
		err = fmt.Errorf("ent: StatementEndingBalancGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sebgb *StatementEndingBalancGroupBy) BoolX(ctx context.Context) bool {
	v, err := sebgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sebgb *StatementEndingBalancGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sebgb.fields {
		if !statementendingbalanc.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sebgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sebgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sebgb *StatementEndingBalancGroupBy) sqlQuery() *sql.Selector {
	selector := sebgb.sql
	columns := make([]string, 0, len(sebgb.fields)+len(sebgb.fns))
	columns = append(columns, sebgb.fields...)
	for _, fn := range sebgb.fns {
		columns = append(columns, fn(selector, statementendingbalanc.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(sebgb.fields...)
}

// StatementEndingBalancSelect is the builder for selecting fields of StatementEndingBalanc entities.
type StatementEndingBalancSelect struct {
	*StatementEndingBalancQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sebs *StatementEndingBalancSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sebs.prepareQuery(ctx); err != nil {
		return err
	}
	sebs.sql = sebs.StatementEndingBalancQuery.sqlQuery(ctx)
	return sebs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sebs *StatementEndingBalancSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sebs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sebs *StatementEndingBalancSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sebs.fields) > 1 {
		return nil, errors.New("ent: StatementEndingBalancSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sebs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sebs *StatementEndingBalancSelect) StringsX(ctx context.Context) []string {
	v, err := sebs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sebs *StatementEndingBalancSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sebs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statementendingbalanc.Label}
	default:
		err = fmt.Errorf("ent: StatementEndingBalancSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sebs *StatementEndingBalancSelect) StringX(ctx context.Context) string {
	v, err := sebs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sebs *StatementEndingBalancSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sebs.fields) > 1 {
		return nil, errors.New("ent: StatementEndingBalancSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sebs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sebs *StatementEndingBalancSelect) IntsX(ctx context.Context) []int {
	v, err := sebs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sebs *StatementEndingBalancSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sebs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statementendingbalanc.Label}
	default:
		err = fmt.Errorf("ent: StatementEndingBalancSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sebs *StatementEndingBalancSelect) IntX(ctx context.Context) int {
	v, err := sebs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sebs *StatementEndingBalancSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sebs.fields) > 1 {
		return nil, errors.New("ent: StatementEndingBalancSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sebs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sebs *StatementEndingBalancSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sebs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sebs *StatementEndingBalancSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sebs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statementendingbalanc.Label}
	default:
		err = fmt.Errorf("ent: StatementEndingBalancSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sebs *StatementEndingBalancSelect) Float64X(ctx context.Context) float64 {
	v, err := sebs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sebs *StatementEndingBalancSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sebs.fields) > 1 {
		return nil, errors.New("ent: StatementEndingBalancSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sebs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sebs *StatementEndingBalancSelect) BoolsX(ctx context.Context) []bool {
	v, err := sebs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sebs *StatementEndingBalancSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sebs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statementendingbalanc.Label}
	default:
		err = fmt.Errorf("ent: StatementEndingBalancSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sebs *StatementEndingBalancSelect) BoolX(ctx context.Context) bool {
	v, err := sebs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sebs *StatementEndingBalancSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sebs.sqlQuery().Query()
	if err := sebs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sebs *StatementEndingBalancSelect) sqlQuery() sql.Querier {
	selector := sebs.sql
	selector.Select(selector.Columns(sebs.fields...)...)
	return selector
}
