// Code generated by entc, DO NOT EDIT.

package statementendingbalanc

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StatementBalance applies equality check predicate on the "Statement_Balance" field. It's identical to StatementBalanceEQ.
func StatementBalance(v float64) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatementBalance), v))
	})
}

// StatementDate applies equality check predicate on the "Statement_Date" field. It's identical to StatementDateEQ.
func StatementDate(v time.Time) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatementDate), v))
	})
}

// StatementBalanceEQ applies the EQ predicate on the "Statement_Balance" field.
func StatementBalanceEQ(v float64) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatementBalance), v))
	})
}

// StatementBalanceNEQ applies the NEQ predicate on the "Statement_Balance" field.
func StatementBalanceNEQ(v float64) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatementBalance), v))
	})
}

// StatementBalanceIn applies the In predicate on the "Statement_Balance" field.
func StatementBalanceIn(vs ...float64) predicate.StatementEndingBalanc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatementBalance), v...))
	})
}

// StatementBalanceNotIn applies the NotIn predicate on the "Statement_Balance" field.
func StatementBalanceNotIn(vs ...float64) predicate.StatementEndingBalanc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatementBalance), v...))
	})
}

// StatementBalanceGT applies the GT predicate on the "Statement_Balance" field.
func StatementBalanceGT(v float64) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatementBalance), v))
	})
}

// StatementBalanceGTE applies the GTE predicate on the "Statement_Balance" field.
func StatementBalanceGTE(v float64) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatementBalance), v))
	})
}

// StatementBalanceLT applies the LT predicate on the "Statement_Balance" field.
func StatementBalanceLT(v float64) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatementBalance), v))
	})
}

// StatementBalanceLTE applies the LTE predicate on the "Statement_Balance" field.
func StatementBalanceLTE(v float64) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatementBalance), v))
	})
}

// StatementBalanceIsNil applies the IsNil predicate on the "Statement_Balance" field.
func StatementBalanceIsNil() predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatementBalance)))
	})
}

// StatementBalanceNotNil applies the NotNil predicate on the "Statement_Balance" field.
func StatementBalanceNotNil() predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatementBalance)))
	})
}

// StatementDateEQ applies the EQ predicate on the "Statement_Date" field.
func StatementDateEQ(v time.Time) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatementDate), v))
	})
}

// StatementDateNEQ applies the NEQ predicate on the "Statement_Date" field.
func StatementDateNEQ(v time.Time) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatementDate), v))
	})
}

// StatementDateIn applies the In predicate on the "Statement_Date" field.
func StatementDateIn(vs ...time.Time) predicate.StatementEndingBalanc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatementDate), v...))
	})
}

// StatementDateNotIn applies the NotIn predicate on the "Statement_Date" field.
func StatementDateNotIn(vs ...time.Time) predicate.StatementEndingBalanc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatementDate), v...))
	})
}

// StatementDateGT applies the GT predicate on the "Statement_Date" field.
func StatementDateGT(v time.Time) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatementDate), v))
	})
}

// StatementDateGTE applies the GTE predicate on the "Statement_Date" field.
func StatementDateGTE(v time.Time) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatementDate), v))
	})
}

// StatementDateLT applies the LT predicate on the "Statement_Date" field.
func StatementDateLT(v time.Time) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatementDate), v))
	})
}

// StatementDateLTE applies the LTE predicate on the "Statement_Date" field.
func StatementDateLTE(v time.Time) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatementDate), v))
	})
}

// StatementDateIsNil applies the IsNil predicate on the "Statement_Date" field.
func StatementDateIsNil() predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatementDate)))
	})
}

// StatementDateNotNil applies the NotNil predicate on the "Statement_Date" field.
func StatementDateNotNil() predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatementDate)))
	})
}

// HasBank applies the HasEdge predicate on the "bank" edge.
func HasBank() predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BankTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBankWith applies the HasEdge predicate on the "bank" edge with a given conditions (other predicates).
func HasBankWith(preds ...predicate.Bankdetail) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BankInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StatementEndingBalanc) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StatementEndingBalanc) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StatementEndingBalanc) predicate.StatementEndingBalanc {
	return predicate.StatementEndingBalanc(func(s *sql.Selector) {
		p(s.Not())
	})
}
