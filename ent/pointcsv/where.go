// Code generated by entc, DO NOT EDIT.

package pointcsv

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WalletID applies equality check predicate on the "WalletID" field. It's identical to WalletIDEQ.
func WalletID(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletID), v))
	})
}

// CreateDate applies equality check predicate on the "CreateDate" field. It's identical to CreateDateEQ.
func CreateDate(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateDate), v))
	})
}

// Adjustamount applies equality check predicate on the "Adjustamount" field. It's identical to AdjustamountEQ.
func Adjustamount(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdjustamount), v))
	})
}

// Note applies equality check predicate on the "Note" field. It's identical to NoteEQ.
func Note(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// PointTranDate applies equality check predicate on the "PointTranDate" field. It's identical to PointTranDateEQ.
func PointTranDate(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPointTranDate), v))
	})
}

// ActionExport applies equality check predicate on the "ActionExport" field. It's identical to ActionExportEQ.
func ActionExport(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActionExport), v))
	})
}

// WalletIDEQ applies the EQ predicate on the "WalletID" field.
func WalletIDEQ(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletID), v))
	})
}

// WalletIDNEQ applies the NEQ predicate on the "WalletID" field.
func WalletIDNEQ(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletID), v))
	})
}

// WalletIDIn applies the In predicate on the "WalletID" field.
func WalletIDIn(vs ...string) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalletID), v...))
	})
}

// WalletIDNotIn applies the NotIn predicate on the "WalletID" field.
func WalletIDNotIn(vs ...string) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalletID), v...))
	})
}

// WalletIDGT applies the GT predicate on the "WalletID" field.
func WalletIDGT(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletID), v))
	})
}

// WalletIDGTE applies the GTE predicate on the "WalletID" field.
func WalletIDGTE(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletID), v))
	})
}

// WalletIDLT applies the LT predicate on the "WalletID" field.
func WalletIDLT(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletID), v))
	})
}

// WalletIDLTE applies the LTE predicate on the "WalletID" field.
func WalletIDLTE(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletID), v))
	})
}

// WalletIDContains applies the Contains predicate on the "WalletID" field.
func WalletIDContains(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletID), v))
	})
}

// WalletIDHasPrefix applies the HasPrefix predicate on the "WalletID" field.
func WalletIDHasPrefix(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletID), v))
	})
}

// WalletIDHasSuffix applies the HasSuffix predicate on the "WalletID" field.
func WalletIDHasSuffix(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletID), v))
	})
}

// WalletIDIsNil applies the IsNil predicate on the "WalletID" field.
func WalletIDIsNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWalletID)))
	})
}

// WalletIDNotNil applies the NotNil predicate on the "WalletID" field.
func WalletIDNotNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWalletID)))
	})
}

// WalletIDEqualFold applies the EqualFold predicate on the "WalletID" field.
func WalletIDEqualFold(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletID), v))
	})
}

// WalletIDContainsFold applies the ContainsFold predicate on the "WalletID" field.
func WalletIDContainsFold(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletID), v))
	})
}

// CreateDateEQ applies the EQ predicate on the "CreateDate" field.
func CreateDateEQ(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateDate), v))
	})
}

// CreateDateNEQ applies the NEQ predicate on the "CreateDate" field.
func CreateDateNEQ(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateDate), v))
	})
}

// CreateDateIn applies the In predicate on the "CreateDate" field.
func CreateDateIn(vs ...time.Time) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateDate), v...))
	})
}

// CreateDateNotIn applies the NotIn predicate on the "CreateDate" field.
func CreateDateNotIn(vs ...time.Time) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateDate), v...))
	})
}

// CreateDateGT applies the GT predicate on the "CreateDate" field.
func CreateDateGT(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateDate), v))
	})
}

// CreateDateGTE applies the GTE predicate on the "CreateDate" field.
func CreateDateGTE(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateDate), v))
	})
}

// CreateDateLT applies the LT predicate on the "CreateDate" field.
func CreateDateLT(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateDate), v))
	})
}

// CreateDateLTE applies the LTE predicate on the "CreateDate" field.
func CreateDateLTE(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateDate), v))
	})
}

// CreateDateIsNil applies the IsNil predicate on the "CreateDate" field.
func CreateDateIsNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateDate)))
	})
}

// CreateDateNotNil applies the NotNil predicate on the "CreateDate" field.
func CreateDateNotNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateDate)))
	})
}

// AdjustamountEQ applies the EQ predicate on the "Adjustamount" field.
func AdjustamountEQ(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdjustamount), v))
	})
}

// AdjustamountNEQ applies the NEQ predicate on the "Adjustamount" field.
func AdjustamountNEQ(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdjustamount), v))
	})
}

// AdjustamountIn applies the In predicate on the "Adjustamount" field.
func AdjustamountIn(vs ...int) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdjustamount), v...))
	})
}

// AdjustamountNotIn applies the NotIn predicate on the "Adjustamount" field.
func AdjustamountNotIn(vs ...int) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdjustamount), v...))
	})
}

// AdjustamountGT applies the GT predicate on the "Adjustamount" field.
func AdjustamountGT(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdjustamount), v))
	})
}

// AdjustamountGTE applies the GTE predicate on the "Adjustamount" field.
func AdjustamountGTE(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdjustamount), v))
	})
}

// AdjustamountLT applies the LT predicate on the "Adjustamount" field.
func AdjustamountLT(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdjustamount), v))
	})
}

// AdjustamountLTE applies the LTE predicate on the "Adjustamount" field.
func AdjustamountLTE(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdjustamount), v))
	})
}

// AdjustamountIsNil applies the IsNil predicate on the "Adjustamount" field.
func AdjustamountIsNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdjustamount)))
	})
}

// AdjustamountNotNil applies the NotNil predicate on the "Adjustamount" field.
func AdjustamountNotNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdjustamount)))
	})
}

// NoteEQ applies the EQ predicate on the "Note" field.
func NoteEQ(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// NoteNEQ applies the NEQ predicate on the "Note" field.
func NoteNEQ(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNote), v))
	})
}

// NoteIn applies the In predicate on the "Note" field.
func NoteIn(vs ...string) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNote), v...))
	})
}

// NoteNotIn applies the NotIn predicate on the "Note" field.
func NoteNotIn(vs ...string) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNote), v...))
	})
}

// NoteGT applies the GT predicate on the "Note" field.
func NoteGT(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNote), v))
	})
}

// NoteGTE applies the GTE predicate on the "Note" field.
func NoteGTE(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNote), v))
	})
}

// NoteLT applies the LT predicate on the "Note" field.
func NoteLT(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNote), v))
	})
}

// NoteLTE applies the LTE predicate on the "Note" field.
func NoteLTE(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNote), v))
	})
}

// NoteContains applies the Contains predicate on the "Note" field.
func NoteContains(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNote), v))
	})
}

// NoteHasPrefix applies the HasPrefix predicate on the "Note" field.
func NoteHasPrefix(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNote), v))
	})
}

// NoteHasSuffix applies the HasSuffix predicate on the "Note" field.
func NoteHasSuffix(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNote), v))
	})
}

// NoteIsNil applies the IsNil predicate on the "Note" field.
func NoteIsNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNote)))
	})
}

// NoteNotNil applies the NotNil predicate on the "Note" field.
func NoteNotNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNote)))
	})
}

// NoteEqualFold applies the EqualFold predicate on the "Note" field.
func NoteEqualFold(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNote), v))
	})
}

// NoteContainsFold applies the ContainsFold predicate on the "Note" field.
func NoteContainsFold(v string) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNote), v))
	})
}

// PointTranDateEQ applies the EQ predicate on the "PointTranDate" field.
func PointTranDateEQ(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPointTranDate), v))
	})
}

// PointTranDateNEQ applies the NEQ predicate on the "PointTranDate" field.
func PointTranDateNEQ(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPointTranDate), v))
	})
}

// PointTranDateIn applies the In predicate on the "PointTranDate" field.
func PointTranDateIn(vs ...time.Time) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPointTranDate), v...))
	})
}

// PointTranDateNotIn applies the NotIn predicate on the "PointTranDate" field.
func PointTranDateNotIn(vs ...time.Time) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPointTranDate), v...))
	})
}

// PointTranDateGT applies the GT predicate on the "PointTranDate" field.
func PointTranDateGT(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPointTranDate), v))
	})
}

// PointTranDateGTE applies the GTE predicate on the "PointTranDate" field.
func PointTranDateGTE(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPointTranDate), v))
	})
}

// PointTranDateLT applies the LT predicate on the "PointTranDate" field.
func PointTranDateLT(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPointTranDate), v))
	})
}

// PointTranDateLTE applies the LTE predicate on the "PointTranDate" field.
func PointTranDateLTE(v time.Time) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPointTranDate), v))
	})
}

// PointTranDateIsNil applies the IsNil predicate on the "PointTranDate" field.
func PointTranDateIsNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPointTranDate)))
	})
}

// PointTranDateNotNil applies the NotNil predicate on the "PointTranDate" field.
func PointTranDateNotNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPointTranDate)))
	})
}

// ActionExportEQ applies the EQ predicate on the "ActionExport" field.
func ActionExportEQ(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActionExport), v))
	})
}

// ActionExportNEQ applies the NEQ predicate on the "ActionExport" field.
func ActionExportNEQ(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActionExport), v))
	})
}

// ActionExportIn applies the In predicate on the "ActionExport" field.
func ActionExportIn(vs ...int) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActionExport), v...))
	})
}

// ActionExportNotIn applies the NotIn predicate on the "ActionExport" field.
func ActionExportNotIn(vs ...int) predicate.Pointcsv {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointcsv(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActionExport), v...))
	})
}

// ActionExportGT applies the GT predicate on the "ActionExport" field.
func ActionExportGT(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActionExport), v))
	})
}

// ActionExportGTE applies the GTE predicate on the "ActionExport" field.
func ActionExportGTE(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActionExport), v))
	})
}

// ActionExportLT applies the LT predicate on the "ActionExport" field.
func ActionExportLT(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActionExport), v))
	})
}

// ActionExportLTE applies the LTE predicate on the "ActionExport" field.
func ActionExportLTE(v int) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActionExport), v))
	})
}

// ActionExportIsNil applies the IsNil predicate on the "ActionExport" field.
func ActionExportIsNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActionExport)))
	})
}

// ActionExportNotNil applies the NotNil predicate on the "ActionExport" field.
func ActionExportNotNil() predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActionExport)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pointcsv) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pointcsv) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pointcsv) predicate.Pointcsv {
	return predicate.Pointcsv(func(s *sql.Selector) {
		p(s.Not())
	})
}
