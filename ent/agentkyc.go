// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/agentkyc"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Agentkyc is the model entity for the Agentkyc schema.
type Agentkyc struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// KYCDate holds the value of the "KYCDate" field.
	KYCDate *string `json:"KYCDate,omitempty"`
	// KYCTime holds the value of the "KYCTime" field.
	KYCTime *string `json:"KYCTime,omitempty"`
	// AgentID holds the value of the "AgentID" field.
	AgentID *string `json:"AgentID,omitempty"`
	// Agentemail holds the value of the "Agentemail" field.
	Agentemail *string `json:"Agentemail,omitempty"`
	// AgentNameLastname holds the value of the "AgentNameLastname" field.
	AgentNameLastname *string `json:"AgentNameLastname,omitempty"`
	// KYCStatus holds the value of the "KYCStatus" field.
	KYCStatus *string `json:"KYCStatus,omitempty"`
	// Consumerwalletid holds the value of the "Consumerwalletid" field.
	Consumerwalletid *string `json:"Consumerwalletid,omitempty"`
	// KYCRespond holds the value of the "KYCRespond" field.
	KYCRespond *string `json:"KYCRespond,omitempty"`
	// DOPARespond holds the value of the "DOPARespond" field.
	DOPARespond *string `json:"DOPARespond,omitempty"`
	// AgentType holds the value of the "AgentType" field.
	AgentType *string `json:"AgentType,omitempty"`
	// FileimportID holds the value of the "FileimportID" field.
	FileimportID *int `json:"FileimportID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Agentkyc) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case agentkyc.FieldID, agentkyc.FieldFileimportID:
			values[i] = &sql.NullInt64{}
		case agentkyc.FieldKYCDate, agentkyc.FieldKYCTime, agentkyc.FieldAgentID, agentkyc.FieldAgentemail, agentkyc.FieldAgentNameLastname, agentkyc.FieldKYCStatus, agentkyc.FieldConsumerwalletid, agentkyc.FieldKYCRespond, agentkyc.FieldDOPARespond, agentkyc.FieldAgentType:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Agentkyc", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Agentkyc fields.
func (a *Agentkyc) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agentkyc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case agentkyc.FieldKYCDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field KYCDate", values[i])
			} else if value.Valid {
				a.KYCDate = new(string)
				*a.KYCDate = value.String
			}
		case agentkyc.FieldKYCTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field KYCTime", values[i])
			} else if value.Valid {
				a.KYCTime = new(string)
				*a.KYCTime = value.String
			}
		case agentkyc.FieldAgentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AgentID", values[i])
			} else if value.Valid {
				a.AgentID = new(string)
				*a.AgentID = value.String
			}
		case agentkyc.FieldAgentemail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Agentemail", values[i])
			} else if value.Valid {
				a.Agentemail = new(string)
				*a.Agentemail = value.String
			}
		case agentkyc.FieldAgentNameLastname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AgentNameLastname", values[i])
			} else if value.Valid {
				a.AgentNameLastname = new(string)
				*a.AgentNameLastname = value.String
			}
		case agentkyc.FieldKYCStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field KYCStatus", values[i])
			} else if value.Valid {
				a.KYCStatus = new(string)
				*a.KYCStatus = value.String
			}
		case agentkyc.FieldConsumerwalletid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Consumerwalletid", values[i])
			} else if value.Valid {
				a.Consumerwalletid = new(string)
				*a.Consumerwalletid = value.String
			}
		case agentkyc.FieldKYCRespond:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field KYCRespond", values[i])
			} else if value.Valid {
				a.KYCRespond = new(string)
				*a.KYCRespond = value.String
			}
		case agentkyc.FieldDOPARespond:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DOPARespond", values[i])
			} else if value.Valid {
				a.DOPARespond = new(string)
				*a.DOPARespond = value.String
			}
		case agentkyc.FieldAgentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AgentType", values[i])
			} else if value.Valid {
				a.AgentType = new(string)
				*a.AgentType = value.String
			}
		case agentkyc.FieldFileimportID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FileimportID", values[i])
			} else if value.Valid {
				a.FileimportID = new(int)
				*a.FileimportID = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Agentkyc.
// Note that you need to call Agentkyc.Unwrap() before calling this method if this Agentkyc
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Agentkyc) Update() *AgentkycUpdateOne {
	return (&AgentkycClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Agentkyc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Agentkyc) Unwrap() *Agentkyc {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Agentkyc is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Agentkyc) String() string {
	var builder strings.Builder
	builder.WriteString("Agentkyc(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	if v := a.KYCDate; v != nil {
		builder.WriteString(", KYCDate=")
		builder.WriteString(*v)
	}
	if v := a.KYCTime; v != nil {
		builder.WriteString(", KYCTime=")
		builder.WriteString(*v)
	}
	if v := a.AgentID; v != nil {
		builder.WriteString(", AgentID=")
		builder.WriteString(*v)
	}
	if v := a.Agentemail; v != nil {
		builder.WriteString(", Agentemail=")
		builder.WriteString(*v)
	}
	if v := a.AgentNameLastname; v != nil {
		builder.WriteString(", AgentNameLastname=")
		builder.WriteString(*v)
	}
	if v := a.KYCStatus; v != nil {
		builder.WriteString(", KYCStatus=")
		builder.WriteString(*v)
	}
	if v := a.Consumerwalletid; v != nil {
		builder.WriteString(", Consumerwalletid=")
		builder.WriteString(*v)
	}
	if v := a.KYCRespond; v != nil {
		builder.WriteString(", KYCRespond=")
		builder.WriteString(*v)
	}
	if v := a.DOPARespond; v != nil {
		builder.WriteString(", DOPARespond=")
		builder.WriteString(*v)
	}
	if v := a.AgentType; v != nil {
		builder.WriteString(", AgentType=")
		builder.WriteString(*v)
	}
	if v := a.FileimportID; v != nil {
		builder.WriteString(", FileimportID=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Agentkycs is a parsable slice of Agentkyc.
type Agentkycs []*Agentkyc

func (a Agentkycs) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
