// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/transactionfactor"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Transactionfactor is the model entity for the Transactionfactor schema.
type Transactionfactor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TransactionFactorName holds the value of the "TransactionFactorName" field.
	TransactionFactorName string `json:"TransactionFactorName,omitempty"`
	// TransactionType holds the value of the "TransactionType" field.
	TransactionType string `json:"TransactionType,omitempty"`
	// PaymentChannel holds the value of the "PaymentChannel" field.
	PaymentChannel string `json:"PaymentChannel,omitempty"`
	// PaymentType holds the value of the "PaymentType" field.
	PaymentType string `json:"PaymentType,omitempty"`
	// NumDay holds the value of the "NumDay" field.
	NumDay int `json:"NumDay,omitempty"`
	// Date holds the value of the "Date" field.
	Date string `json:"Date,omitempty"`
	// UpdateDate holds the value of the "UpdateDate" field.
	UpdateDate time.Time `json:"UpdateDate,omitempty"`
	// StatusApprove holds the value of the "StatusApprove" field.
	StatusApprove string `json:"StatusApprove,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionfactorQuery when eager-loading is set.
	Edges TransactionfactorEdges `json:"edges"`
}

// TransactionfactorEdges holds the relations/edges for other nodes in the graph.
type TransactionfactorEdges struct {
	// Transactionhistory holds the value of the transactionhistory edge.
	Transactionhistory []*Transactionfactorhistory `json:"transactionhistory,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TransactionhistoryOrErr returns the Transactionhistory value or an error if the edge
// was not loaded in eager-loading.
func (e TransactionfactorEdges) TransactionhistoryOrErr() ([]*Transactionfactorhistory, error) {
	if e.loadedTypes[0] {
		return e.Transactionhistory, nil
	}
	return nil, &NotLoadedError{edge: "transactionhistory"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transactionfactor) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case transactionfactor.FieldID, transactionfactor.FieldNumDay:
			values[i] = &sql.NullInt64{}
		case transactionfactor.FieldTransactionFactorName, transactionfactor.FieldTransactionType, transactionfactor.FieldPaymentChannel, transactionfactor.FieldPaymentType, transactionfactor.FieldDate, transactionfactor.FieldStatusApprove:
			values[i] = &sql.NullString{}
		case transactionfactor.FieldUpdateDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transactionfactor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transactionfactor fields.
func (t *Transactionfactor) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transactionfactor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transactionfactor.FieldTransactionFactorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionFactorName", values[i])
			} else if value.Valid {
				t.TransactionFactorName = value.String
			}
		case transactionfactor.FieldTransactionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionType", values[i])
			} else if value.Valid {
				t.TransactionType = value.String
			}
		case transactionfactor.FieldPaymentChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaymentChannel", values[i])
			} else if value.Valid {
				t.PaymentChannel = value.String
			}
		case transactionfactor.FieldPaymentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaymentType", values[i])
			} else if value.Valid {
				t.PaymentType = value.String
			}
		case transactionfactor.FieldNumDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NumDay", values[i])
			} else if value.Valid {
				t.NumDay = int(value.Int64)
			}
		case transactionfactor.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Date", values[i])
			} else if value.Valid {
				t.Date = value.String
			}
		case transactionfactor.FieldUpdateDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdateDate", values[i])
			} else if value.Valid {
				t.UpdateDate = value.Time
			}
		case transactionfactor.FieldStatusApprove:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field StatusApprove", values[i])
			} else if value.Valid {
				t.StatusApprove = value.String
			}
		}
	}
	return nil
}

// QueryTransactionhistory queries the "transactionhistory" edge of the Transactionfactor entity.
func (t *Transactionfactor) QueryTransactionhistory() *TransactionfactorhistoryQuery {
	return (&TransactionfactorClient{config: t.config}).QueryTransactionhistory(t)
}

// Update returns a builder for updating this Transactionfactor.
// Note that you need to call Transactionfactor.Unwrap() before calling this method if this Transactionfactor
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transactionfactor) Update() *TransactionfactorUpdateOne {
	return (&TransactionfactorClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transactionfactor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transactionfactor) Unwrap() *Transactionfactor {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transactionfactor is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transactionfactor) String() string {
	var builder strings.Builder
	builder.WriteString("Transactionfactor(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", TransactionFactorName=")
	builder.WriteString(t.TransactionFactorName)
	builder.WriteString(", TransactionType=")
	builder.WriteString(t.TransactionType)
	builder.WriteString(", PaymentChannel=")
	builder.WriteString(t.PaymentChannel)
	builder.WriteString(", PaymentType=")
	builder.WriteString(t.PaymentType)
	builder.WriteString(", NumDay=")
	builder.WriteString(fmt.Sprintf("%v", t.NumDay))
	builder.WriteString(", Date=")
	builder.WriteString(t.Date)
	builder.WriteString(", UpdateDate=")
	builder.WriteString(t.UpdateDate.Format(time.ANSIC))
	builder.WriteString(", StatusApprove=")
	builder.WriteString(t.StatusApprove)
	builder.WriteByte(')')
	return builder.String()
}

// Transactionfactors is a parsable slice of Transactionfactor.
type Transactionfactors []*Transactionfactor

func (t Transactionfactors) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
