// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/consumer"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConsumerCreate is the builder for creating a Consumer entity.
type ConsumerCreate struct {
	config
	mutation *ConsumerMutation
	hooks    []Hook
}

// SetTransactionID sets the "transaction_id" field.
func (cc *ConsumerCreate) SetTransactionID(s string) *ConsumerCreate {
	cc.mutation.SetTransactionID(s)
	return cc
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableTransactionID(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetTransactionID(*s)
	}
	return cc
}

// SetTransactionStatus sets the "TransactionStatus" field.
func (cc *ConsumerCreate) SetTransactionStatus(s string) *ConsumerCreate {
	cc.mutation.SetTransactionStatus(s)
	return cc
}

// SetNillableTransactionStatus sets the "TransactionStatus" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableTransactionStatus(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetTransactionStatus(*s)
	}
	return cc
}

// SetTransactionType sets the "TransactionType" field.
func (cc *ConsumerCreate) SetTransactionType(s string) *ConsumerCreate {
	cc.mutation.SetTransactionType(s)
	return cc
}

// SetNillableTransactionType sets the "TransactionType" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableTransactionType(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetTransactionType(*s)
	}
	return cc
}

// SetPaymentChannel sets the "PaymentChannel" field.
func (cc *ConsumerCreate) SetPaymentChannel(s string) *ConsumerCreate {
	cc.mutation.SetPaymentChannel(s)
	return cc
}

// SetNillablePaymentChannel sets the "PaymentChannel" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillablePaymentChannel(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetPaymentChannel(*s)
	}
	return cc
}

// SetPaymentType sets the "PaymentType" field.
func (cc *ConsumerCreate) SetPaymentType(s string) *ConsumerCreate {
	cc.mutation.SetPaymentType(s)
	return cc
}

// SetNillablePaymentType sets the "PaymentType" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillablePaymentType(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetPaymentType(*s)
	}
	return cc
}

// SetTypeCode sets the "TypeCode" field.
func (cc *ConsumerCreate) SetTypeCode(s string) *ConsumerCreate {
	cc.mutation.SetTypeCode(s)
	return cc
}

// SetNillableTypeCode sets the "TypeCode" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableTypeCode(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetTypeCode(*s)
	}
	return cc
}

// SetApprovalCode sets the "ApprovalCode" field.
func (cc *ConsumerCreate) SetApprovalCode(s string) *ConsumerCreate {
	cc.mutation.SetApprovalCode(s)
	return cc
}

// SetNillableApprovalCode sets the "ApprovalCode" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableApprovalCode(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetApprovalCode(*s)
	}
	return cc
}

// SetBillerID sets the "BillerID" field.
func (cc *ConsumerCreate) SetBillerID(s string) *ConsumerCreate {
	cc.mutation.SetBillerID(s)
	return cc
}

// SetNillableBillerID sets the "BillerID" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableBillerID(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetBillerID(*s)
	}
	return cc
}

// SetRef1 sets the "ref1" field.
func (cc *ConsumerCreate) SetRef1(s string) *ConsumerCreate {
	cc.mutation.SetRef1(s)
	return cc
}

// SetNillableRef1 sets the "ref1" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableRef1(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetRef1(*s)
	}
	return cc
}

// SetRef2 sets the "ref2" field.
func (cc *ConsumerCreate) SetRef2(s string) *ConsumerCreate {
	cc.mutation.SetRef2(s)
	return cc
}

// SetNillableRef2 sets the "ref2" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableRef2(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetRef2(*s)
	}
	return cc
}

// SetRef3 sets the "ref3" field.
func (cc *ConsumerCreate) SetRef3(s string) *ConsumerCreate {
	cc.mutation.SetRef3(s)
	return cc
}

// SetNillableRef3 sets the "ref3" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableRef3(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetRef3(*s)
	}
	return cc
}

// SetAmount sets the "amount" field.
func (cc *ConsumerCreate) SetAmount(f float64) *ConsumerCreate {
	cc.mutation.SetAmount(f)
	return cc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableAmount(f *float64) *ConsumerCreate {
	if f != nil {
		cc.SetAmount(*f)
	}
	return cc
}

// SetFee sets the "fee" field.
func (cc *ConsumerCreate) SetFee(f float64) *ConsumerCreate {
	cc.mutation.SetFee(f)
	return cc
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableFee(f *float64) *ConsumerCreate {
	if f != nil {
		cc.SetFee(*f)
	}
	return cc
}

// SetTotal sets the "total" field.
func (cc *ConsumerCreate) SetTotal(f float64) *ConsumerCreate {
	cc.mutation.SetTotal(f)
	return cc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableTotal(f *float64) *ConsumerCreate {
	if f != nil {
		cc.SetTotal(*f)
	}
	return cc
}

// SetFromReference sets the "FromReference" field.
func (cc *ConsumerCreate) SetFromReference(s string) *ConsumerCreate {
	cc.mutation.SetFromReference(s)
	return cc
}

// SetNillableFromReference sets the "FromReference" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableFromReference(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetFromReference(*s)
	}
	return cc
}

// SetFromPhoneNo sets the "FromPhoneNo" field.
func (cc *ConsumerCreate) SetFromPhoneNo(s string) *ConsumerCreate {
	cc.mutation.SetFromPhoneNo(s)
	return cc
}

// SetNillableFromPhoneNo sets the "FromPhoneNo" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableFromPhoneNo(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetFromPhoneNo(*s)
	}
	return cc
}

// SetFromName sets the "FromName" field.
func (cc *ConsumerCreate) SetFromName(s string) *ConsumerCreate {
	cc.mutation.SetFromName(s)
	return cc
}

// SetNillableFromName sets the "FromName" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableFromName(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetFromName(*s)
	}
	return cc
}

// SetToAccount sets the "ToAccount" field.
func (cc *ConsumerCreate) SetToAccount(s string) *ConsumerCreate {
	cc.mutation.SetToAccount(s)
	return cc
}

// SetNillableToAccount sets the "ToAccount" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableToAccount(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetToAccount(*s)
	}
	return cc
}

// SetToAccountPhoneNo sets the "ToAccountPhoneNo" field.
func (cc *ConsumerCreate) SetToAccountPhoneNo(s string) *ConsumerCreate {
	cc.mutation.SetToAccountPhoneNo(s)
	return cc
}

// SetNillableToAccountPhoneNo sets the "ToAccountPhoneNo" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableToAccountPhoneNo(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetToAccountPhoneNo(*s)
	}
	return cc
}

// SetToAccountName sets the "ToAccountName" field.
func (cc *ConsumerCreate) SetToAccountName(s string) *ConsumerCreate {
	cc.mutation.SetToAccountName(s)
	return cc
}

// SetNillableToAccountName sets the "ToAccountName" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableToAccountName(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetToAccountName(*s)
	}
	return cc
}

// SetBankCode sets the "BankCode" field.
func (cc *ConsumerCreate) SetBankCode(s string) *ConsumerCreate {
	cc.mutation.SetBankCode(s)
	return cc
}

// SetNillableBankCode sets the "BankCode" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableBankCode(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetBankCode(*s)
	}
	return cc
}

// SetTerminalId sets the "TerminalId" field.
func (cc *ConsumerCreate) SetTerminalId(s string) *ConsumerCreate {
	cc.mutation.SetTerminalId(s)
	return cc
}

// SetNillableTerminalId sets the "TerminalId" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableTerminalId(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetTerminalId(*s)
	}
	return cc
}

// SetTerminalType sets the "TerminalType" field.
func (cc *ConsumerCreate) SetTerminalType(s string) *ConsumerCreate {
	cc.mutation.SetTerminalType(s)
	return cc
}

// SetNillableTerminalType sets the "TerminalType" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableTerminalType(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetTerminalType(*s)
	}
	return cc
}

// SetToAccount105 sets the "ToAccount105" field.
func (cc *ConsumerCreate) SetToAccount105(s string) *ConsumerCreate {
	cc.mutation.SetToAccount105(s)
	return cc
}

// SetNillableToAccount105 sets the "ToAccount105" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableToAccount105(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetToAccount105(*s)
	}
	return cc
}

// SetFromReference105 sets the "FromReference105" field.
func (cc *ConsumerCreate) SetFromReference105(s string) *ConsumerCreate {
	cc.mutation.SetFromReference105(s)
	return cc
}

// SetNillableFromReference105 sets the "FromReference105" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableFromReference105(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetFromReference105(*s)
	}
	return cc
}

// SetDateTime sets the "dateTime" field.
func (cc *ConsumerCreate) SetDateTime(t time.Time) *ConsumerCreate {
	cc.mutation.SetDateTime(t)
	return cc
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableDateTime(t *time.Time) *ConsumerCreate {
	if t != nil {
		cc.SetDateTime(*t)
	}
	return cc
}

// SetPartnerRef sets the "PartnerRef" field.
func (cc *ConsumerCreate) SetPartnerRef(s string) *ConsumerCreate {
	cc.mutation.SetPartnerRef(s)
	return cc
}

// SetNillablePartnerRef sets the "PartnerRef" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillablePartnerRef(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetPartnerRef(*s)
	}
	return cc
}

// SetResponseCode sets the "ResponseCode" field.
func (cc *ConsumerCreate) SetResponseCode(s string) *ConsumerCreate {
	cc.mutation.SetResponseCode(s)
	return cc
}

// SetNillableResponseCode sets the "ResponseCode" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableResponseCode(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetResponseCode(*s)
	}
	return cc
}

// SetResponseDescription sets the "ResponseDescription" field.
func (cc *ConsumerCreate) SetResponseDescription(s string) *ConsumerCreate {
	cc.mutation.SetResponseDescription(s)
	return cc
}

// SetNillableResponseDescription sets the "ResponseDescription" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableResponseDescription(s *string) *ConsumerCreate {
	if s != nil {
		cc.SetResponseDescription(*s)
	}
	return cc
}

// SetFileimportID sets the "FileimportID" field.
func (cc *ConsumerCreate) SetFileimportID(i int) *ConsumerCreate {
	cc.mutation.SetFileimportID(i)
	return cc
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (cc *ConsumerCreate) SetNillableFileimportID(i *int) *ConsumerCreate {
	if i != nil {
		cc.SetFileimportID(*i)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConsumerCreate) SetID(i int) *ConsumerCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the ConsumerMutation object of the builder.
func (cc *ConsumerCreate) Mutation() *ConsumerMutation {
	return cc.mutation
}

// Save creates the Consumer in the database.
func (cc *ConsumerCreate) Save(ctx context.Context) (*Consumer, error) {
	var (
		err  error
		node *Consumer
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConsumerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConsumerCreate) SaveX(ctx context.Context) *Consumer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConsumerCreate) check() error {
	if v, ok := cc.mutation.TransactionID(); ok {
		if err := consumer.TransactionIDValidator(v); err != nil {
			return &ValidationError{Name: "transaction_id", err: fmt.Errorf("ent: validator failed for field \"transaction_id\": %w", err)}
		}
	}
	if v, ok := cc.mutation.TransactionStatus(); ok {
		if err := consumer.TransactionStatusValidator(v); err != nil {
			return &ValidationError{Name: "TransactionStatus", err: fmt.Errorf("ent: validator failed for field \"TransactionStatus\": %w", err)}
		}
	}
	if v, ok := cc.mutation.TransactionType(); ok {
		if err := consumer.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "TransactionType", err: fmt.Errorf("ent: validator failed for field \"TransactionType\": %w", err)}
		}
	}
	if v, ok := cc.mutation.PaymentChannel(); ok {
		if err := consumer.PaymentChannelValidator(v); err != nil {
			return &ValidationError{Name: "PaymentChannel", err: fmt.Errorf("ent: validator failed for field \"PaymentChannel\": %w", err)}
		}
	}
	if v, ok := cc.mutation.PaymentType(); ok {
		if err := consumer.PaymentTypeValidator(v); err != nil {
			return &ValidationError{Name: "PaymentType", err: fmt.Errorf("ent: validator failed for field \"PaymentType\": %w", err)}
		}
	}
	if v, ok := cc.mutation.TypeCode(); ok {
		if err := consumer.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "TypeCode", err: fmt.Errorf("ent: validator failed for field \"TypeCode\": %w", err)}
		}
	}
	if v, ok := cc.mutation.ApprovalCode(); ok {
		if err := consumer.ApprovalCodeValidator(v); err != nil {
			return &ValidationError{Name: "ApprovalCode", err: fmt.Errorf("ent: validator failed for field \"ApprovalCode\": %w", err)}
		}
	}
	if v, ok := cc.mutation.BillerID(); ok {
		if err := consumer.BillerIDValidator(v); err != nil {
			return &ValidationError{Name: "BillerID", err: fmt.Errorf("ent: validator failed for field \"BillerID\": %w", err)}
		}
	}
	if v, ok := cc.mutation.Ref1(); ok {
		if err := consumer.Ref1Validator(v); err != nil {
			return &ValidationError{Name: "ref1", err: fmt.Errorf("ent: validator failed for field \"ref1\": %w", err)}
		}
	}
	if v, ok := cc.mutation.Ref2(); ok {
		if err := consumer.Ref2Validator(v); err != nil {
			return &ValidationError{Name: "ref2", err: fmt.Errorf("ent: validator failed for field \"ref2\": %w", err)}
		}
	}
	if v, ok := cc.mutation.Ref3(); ok {
		if err := consumer.Ref3Validator(v); err != nil {
			return &ValidationError{Name: "ref3", err: fmt.Errorf("ent: validator failed for field \"ref3\": %w", err)}
		}
	}
	if v, ok := cc.mutation.FromReference(); ok {
		if err := consumer.FromReferenceValidator(v); err != nil {
			return &ValidationError{Name: "FromReference", err: fmt.Errorf("ent: validator failed for field \"FromReference\": %w", err)}
		}
	}
	if v, ok := cc.mutation.FromPhoneNo(); ok {
		if err := consumer.FromPhoneNoValidator(v); err != nil {
			return &ValidationError{Name: "FromPhoneNo", err: fmt.Errorf("ent: validator failed for field \"FromPhoneNo\": %w", err)}
		}
	}
	if v, ok := cc.mutation.FromName(); ok {
		if err := consumer.FromNameValidator(v); err != nil {
			return &ValidationError{Name: "FromName", err: fmt.Errorf("ent: validator failed for field \"FromName\": %w", err)}
		}
	}
	if v, ok := cc.mutation.ToAccount(); ok {
		if err := consumer.ToAccountValidator(v); err != nil {
			return &ValidationError{Name: "ToAccount", err: fmt.Errorf("ent: validator failed for field \"ToAccount\": %w", err)}
		}
	}
	if v, ok := cc.mutation.ToAccountPhoneNo(); ok {
		if err := consumer.ToAccountPhoneNoValidator(v); err != nil {
			return &ValidationError{Name: "ToAccountPhoneNo", err: fmt.Errorf("ent: validator failed for field \"ToAccountPhoneNo\": %w", err)}
		}
	}
	if v, ok := cc.mutation.ToAccountName(); ok {
		if err := consumer.ToAccountNameValidator(v); err != nil {
			return &ValidationError{Name: "ToAccountName", err: fmt.Errorf("ent: validator failed for field \"ToAccountName\": %w", err)}
		}
	}
	if v, ok := cc.mutation.BankCode(); ok {
		if err := consumer.BankCodeValidator(v); err != nil {
			return &ValidationError{Name: "BankCode", err: fmt.Errorf("ent: validator failed for field \"BankCode\": %w", err)}
		}
	}
	if v, ok := cc.mutation.TerminalId(); ok {
		if err := consumer.TerminalIdValidator(v); err != nil {
			return &ValidationError{Name: "TerminalId", err: fmt.Errorf("ent: validator failed for field \"TerminalId\": %w", err)}
		}
	}
	if v, ok := cc.mutation.TerminalType(); ok {
		if err := consumer.TerminalTypeValidator(v); err != nil {
			return &ValidationError{Name: "TerminalType", err: fmt.Errorf("ent: validator failed for field \"TerminalType\": %w", err)}
		}
	}
	if v, ok := cc.mutation.ToAccount105(); ok {
		if err := consumer.ToAccount105Validator(v); err != nil {
			return &ValidationError{Name: "ToAccount105", err: fmt.Errorf("ent: validator failed for field \"ToAccount105\": %w", err)}
		}
	}
	if v, ok := cc.mutation.FromReference105(); ok {
		if err := consumer.FromReference105Validator(v); err != nil {
			return &ValidationError{Name: "FromReference105", err: fmt.Errorf("ent: validator failed for field \"FromReference105\": %w", err)}
		}
	}
	if v, ok := cc.mutation.PartnerRef(); ok {
		if err := consumer.PartnerRefValidator(v); err != nil {
			return &ValidationError{Name: "PartnerRef", err: fmt.Errorf("ent: validator failed for field \"PartnerRef\": %w", err)}
		}
	}
	if v, ok := cc.mutation.ResponseCode(); ok {
		if err := consumer.ResponseCodeValidator(v); err != nil {
			return &ValidationError{Name: "ResponseCode", err: fmt.Errorf("ent: validator failed for field \"ResponseCode\": %w", err)}
		}
	}
	if v, ok := cc.mutation.ResponseDescription(); ok {
		if err := consumer.ResponseDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "ResponseDescription", err: fmt.Errorf("ent: validator failed for field \"ResponseDescription\": %w", err)}
		}
	}
	return nil
}

func (cc *ConsumerCreate) sqlSave(ctx context.Context) (*Consumer, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (cc *ConsumerCreate) createSpec() (*Consumer, *sqlgraph.CreateSpec) {
	var (
		_node = &Consumer{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: consumer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: consumer.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTransactionID,
		})
		_node.TransactionID = &value
	}
	if value, ok := cc.mutation.TransactionStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTransactionStatus,
		})
		_node.TransactionStatus = &value
	}
	if value, ok := cc.mutation.TransactionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTransactionType,
		})
		_node.TransactionType = &value
	}
	if value, ok := cc.mutation.PaymentChannel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldPaymentChannel,
		})
		_node.PaymentChannel = &value
	}
	if value, ok := cc.mutation.PaymentType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldPaymentType,
		})
		_node.PaymentType = &value
	}
	if value, ok := cc.mutation.TypeCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTypeCode,
		})
		_node.TypeCode = &value
	}
	if value, ok := cc.mutation.ApprovalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldApprovalCode,
		})
		_node.ApprovalCode = &value
	}
	if value, ok := cc.mutation.BillerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldBillerID,
		})
		_node.BillerID = &value
	}
	if value, ok := cc.mutation.Ref1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldRef1,
		})
		_node.Ref1 = &value
	}
	if value, ok := cc.mutation.Ref2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldRef2,
		})
		_node.Ref2 = &value
	}
	if value, ok := cc.mutation.Ref3(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldRef3,
		})
		_node.Ref3 = &value
	}
	if value, ok := cc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldAmount,
		})
		_node.Amount = &value
	}
	if value, ok := cc.mutation.Fee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldFee,
		})
		_node.Fee = &value
	}
	if value, ok := cc.mutation.Total(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: consumer.FieldTotal,
		})
		_node.Total = &value
	}
	if value, ok := cc.mutation.FromReference(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromReference,
		})
		_node.FromReference = &value
	}
	if value, ok := cc.mutation.FromPhoneNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromPhoneNo,
		})
		_node.FromPhoneNo = &value
	}
	if value, ok := cc.mutation.FromName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromName,
		})
		_node.FromName = &value
	}
	if value, ok := cc.mutation.ToAccount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccount,
		})
		_node.ToAccount = &value
	}
	if value, ok := cc.mutation.ToAccountPhoneNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccountPhoneNo,
		})
		_node.ToAccountPhoneNo = &value
	}
	if value, ok := cc.mutation.ToAccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccountName,
		})
		_node.ToAccountName = &value
	}
	if value, ok := cc.mutation.BankCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldBankCode,
		})
		_node.BankCode = &value
	}
	if value, ok := cc.mutation.TerminalId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTerminalId,
		})
		_node.TerminalId = &value
	}
	if value, ok := cc.mutation.TerminalType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldTerminalType,
		})
		_node.TerminalType = &value
	}
	if value, ok := cc.mutation.ToAccount105(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldToAccount105,
		})
		_node.ToAccount105 = &value
	}
	if value, ok := cc.mutation.FromReference105(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldFromReference105,
		})
		_node.FromReference105 = &value
	}
	if value, ok := cc.mutation.DateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: consumer.FieldDateTime,
		})
		_node.DateTime = &value
	}
	if value, ok := cc.mutation.PartnerRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldPartnerRef,
		})
		_node.PartnerRef = &value
	}
	if value, ok := cc.mutation.ResponseCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldResponseCode,
		})
		_node.ResponseCode = &value
	}
	if value, ok := cc.mutation.ResponseDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: consumer.FieldResponseDescription,
		})
		_node.ResponseDescription = &value
	}
	if value, ok := cc.mutation.FileimportID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: consumer.FieldFileimportID,
		})
		_node.FileimportID = &value
	}
	return _node, _spec
}

// ConsumerCreateBulk is the builder for creating many Consumer entities in bulk.
type ConsumerCreateBulk struct {
	config
	builders []*ConsumerCreate
}

// Save creates the Consumer entities in the database.
func (ccb *ConsumerCreateBulk) Save(ctx context.Context) ([]*Consumer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Consumer, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConsumerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConsumerCreateBulk) SaveX(ctx context.Context) []*Consumer {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
