// Code generated by entc, DO NOT EDIT.

package pointtransaction

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Date applies equality check predicate on the "Date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// WalletID applies equality check predicate on the "WalletID" field. It's identical to WalletIDEQ.
func WalletID(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletID), v))
	})
}

// TransactionName applies equality check predicate on the "TransactionName" field. It's identical to TransactionNameEQ.
func TransactionName(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionName), v))
	})
}

// Point applies equality check predicate on the "Point" field. It's identical to PointEQ.
func Point(v int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoint), v))
	})
}

// Reference applies equality check predicate on the "Reference" field. It's identical to ReferenceEQ.
func Reference(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReference), v))
	})
}

// DateEQ applies the EQ predicate on the "Date" field.
func DateEQ(v time.Time) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "Date" field.
func DateNEQ(v time.Time) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "Date" field.
func DateIn(vs ...time.Time) predicate.Pointtransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "Date" field.
func DateNotIn(vs ...time.Time) predicate.Pointtransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "Date" field.
func DateGT(v time.Time) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "Date" field.
func DateGTE(v time.Time) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "Date" field.
func DateLT(v time.Time) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "Date" field.
func DateLTE(v time.Time) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// DateIsNil applies the IsNil predicate on the "Date" field.
func DateIsNil() predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDate)))
	})
}

// DateNotNil applies the NotNil predicate on the "Date" field.
func DateNotNil() predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDate)))
	})
}

// WalletIDEQ applies the EQ predicate on the "WalletID" field.
func WalletIDEQ(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletID), v))
	})
}

// WalletIDNEQ applies the NEQ predicate on the "WalletID" field.
func WalletIDNEQ(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletID), v))
	})
}

// WalletIDIn applies the In predicate on the "WalletID" field.
func WalletIDIn(vs ...string) predicate.Pointtransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalletID), v...))
	})
}

// WalletIDNotIn applies the NotIn predicate on the "WalletID" field.
func WalletIDNotIn(vs ...string) predicate.Pointtransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalletID), v...))
	})
}

// WalletIDGT applies the GT predicate on the "WalletID" field.
func WalletIDGT(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletID), v))
	})
}

// WalletIDGTE applies the GTE predicate on the "WalletID" field.
func WalletIDGTE(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletID), v))
	})
}

// WalletIDLT applies the LT predicate on the "WalletID" field.
func WalletIDLT(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletID), v))
	})
}

// WalletIDLTE applies the LTE predicate on the "WalletID" field.
func WalletIDLTE(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletID), v))
	})
}

// WalletIDContains applies the Contains predicate on the "WalletID" field.
func WalletIDContains(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletID), v))
	})
}

// WalletIDHasPrefix applies the HasPrefix predicate on the "WalletID" field.
func WalletIDHasPrefix(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletID), v))
	})
}

// WalletIDHasSuffix applies the HasSuffix predicate on the "WalletID" field.
func WalletIDHasSuffix(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletID), v))
	})
}

// WalletIDIsNil applies the IsNil predicate on the "WalletID" field.
func WalletIDIsNil() predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWalletID)))
	})
}

// WalletIDNotNil applies the NotNil predicate on the "WalletID" field.
func WalletIDNotNil() predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWalletID)))
	})
}

// WalletIDEqualFold applies the EqualFold predicate on the "WalletID" field.
func WalletIDEqualFold(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletID), v))
	})
}

// WalletIDContainsFold applies the ContainsFold predicate on the "WalletID" field.
func WalletIDContainsFold(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletID), v))
	})
}

// TransactionNameEQ applies the EQ predicate on the "TransactionName" field.
func TransactionNameEQ(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionName), v))
	})
}

// TransactionNameNEQ applies the NEQ predicate on the "TransactionName" field.
func TransactionNameNEQ(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionName), v))
	})
}

// TransactionNameIn applies the In predicate on the "TransactionName" field.
func TransactionNameIn(vs ...string) predicate.Pointtransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransactionName), v...))
	})
}

// TransactionNameNotIn applies the NotIn predicate on the "TransactionName" field.
func TransactionNameNotIn(vs ...string) predicate.Pointtransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransactionName), v...))
	})
}

// TransactionNameGT applies the GT predicate on the "TransactionName" field.
func TransactionNameGT(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionName), v))
	})
}

// TransactionNameGTE applies the GTE predicate on the "TransactionName" field.
func TransactionNameGTE(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionName), v))
	})
}

// TransactionNameLT applies the LT predicate on the "TransactionName" field.
func TransactionNameLT(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionName), v))
	})
}

// TransactionNameLTE applies the LTE predicate on the "TransactionName" field.
func TransactionNameLTE(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionName), v))
	})
}

// TransactionNameContains applies the Contains predicate on the "TransactionName" field.
func TransactionNameContains(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionName), v))
	})
}

// TransactionNameHasPrefix applies the HasPrefix predicate on the "TransactionName" field.
func TransactionNameHasPrefix(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionName), v))
	})
}

// TransactionNameHasSuffix applies the HasSuffix predicate on the "TransactionName" field.
func TransactionNameHasSuffix(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionName), v))
	})
}

// TransactionNameIsNil applies the IsNil predicate on the "TransactionName" field.
func TransactionNameIsNil() predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransactionName)))
	})
}

// TransactionNameNotNil applies the NotNil predicate on the "TransactionName" field.
func TransactionNameNotNil() predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransactionName)))
	})
}

// TransactionNameEqualFold applies the EqualFold predicate on the "TransactionName" field.
func TransactionNameEqualFold(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionName), v))
	})
}

// TransactionNameContainsFold applies the ContainsFold predicate on the "TransactionName" field.
func TransactionNameContainsFold(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionName), v))
	})
}

// PointEQ applies the EQ predicate on the "Point" field.
func PointEQ(v int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoint), v))
	})
}

// PointNEQ applies the NEQ predicate on the "Point" field.
func PointNEQ(v int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPoint), v))
	})
}

// PointIn applies the In predicate on the "Point" field.
func PointIn(vs ...int) predicate.Pointtransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPoint), v...))
	})
}

// PointNotIn applies the NotIn predicate on the "Point" field.
func PointNotIn(vs ...int) predicate.Pointtransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPoint), v...))
	})
}

// PointGT applies the GT predicate on the "Point" field.
func PointGT(v int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPoint), v))
	})
}

// PointGTE applies the GTE predicate on the "Point" field.
func PointGTE(v int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPoint), v))
	})
}

// PointLT applies the LT predicate on the "Point" field.
func PointLT(v int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPoint), v))
	})
}

// PointLTE applies the LTE predicate on the "Point" field.
func PointLTE(v int) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPoint), v))
	})
}

// PointIsNil applies the IsNil predicate on the "Point" field.
func PointIsNil() predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPoint)))
	})
}

// PointNotNil applies the NotNil predicate on the "Point" field.
func PointNotNil() predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPoint)))
	})
}

// ReferenceEQ applies the EQ predicate on the "Reference" field.
func ReferenceEQ(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReference), v))
	})
}

// ReferenceNEQ applies the NEQ predicate on the "Reference" field.
func ReferenceNEQ(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReference), v))
	})
}

// ReferenceIn applies the In predicate on the "Reference" field.
func ReferenceIn(vs ...string) predicate.Pointtransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReference), v...))
	})
}

// ReferenceNotIn applies the NotIn predicate on the "Reference" field.
func ReferenceNotIn(vs ...string) predicate.Pointtransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointtransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReference), v...))
	})
}

// ReferenceGT applies the GT predicate on the "Reference" field.
func ReferenceGT(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReference), v))
	})
}

// ReferenceGTE applies the GTE predicate on the "Reference" field.
func ReferenceGTE(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReference), v))
	})
}

// ReferenceLT applies the LT predicate on the "Reference" field.
func ReferenceLT(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReference), v))
	})
}

// ReferenceLTE applies the LTE predicate on the "Reference" field.
func ReferenceLTE(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReference), v))
	})
}

// ReferenceContains applies the Contains predicate on the "Reference" field.
func ReferenceContains(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReference), v))
	})
}

// ReferenceHasPrefix applies the HasPrefix predicate on the "Reference" field.
func ReferenceHasPrefix(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReference), v))
	})
}

// ReferenceHasSuffix applies the HasSuffix predicate on the "Reference" field.
func ReferenceHasSuffix(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReference), v))
	})
}

// ReferenceIsNil applies the IsNil predicate on the "Reference" field.
func ReferenceIsNil() predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReference)))
	})
}

// ReferenceNotNil applies the NotNil predicate on the "Reference" field.
func ReferenceNotNil() predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReference)))
	})
}

// ReferenceEqualFold applies the EqualFold predicate on the "Reference" field.
func ReferenceEqualFold(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReference), v))
	})
}

// ReferenceContainsFold applies the ContainsFold predicate on the "Reference" field.
func ReferenceContainsFold(v string) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReference), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pointtransaction) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pointtransaction) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pointtransaction) predicate.Pointtransaction {
	return predicate.Pointtransaction(func(s *sql.Selector) {
		p(s.Not())
	})
}
