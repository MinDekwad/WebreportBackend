// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/userprofile"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserprofileCreate is the builder for creating a Userprofile entity.
type UserprofileCreate struct {
	config
	mutation *UserprofileMutation
	hooks    []Hook
}

// SetUserId sets the "UserId" field.
func (uc *UserprofileCreate) SetUserId(s string) *UserprofileCreate {
	uc.mutation.SetUserId(s)
	return uc
}

// SetNillableUserId sets the "UserId" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillableUserId(s *string) *UserprofileCreate {
	if s != nil {
		uc.SetUserId(*s)
	}
	return uc
}

// SetFirstname sets the "Firstname" field.
func (uc *UserprofileCreate) SetFirstname(s string) *UserprofileCreate {
	uc.mutation.SetFirstname(s)
	return uc
}

// SetNillableFirstname sets the "Firstname" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillableFirstname(s *string) *UserprofileCreate {
	if s != nil {
		uc.SetFirstname(*s)
	}
	return uc
}

// SetLastname sets the "Lastname" field.
func (uc *UserprofileCreate) SetLastname(s string) *UserprofileCreate {
	uc.mutation.SetLastname(s)
	return uc
}

// SetNillableLastname sets the "Lastname" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillableLastname(s *string) *UserprofileCreate {
	if s != nil {
		uc.SetLastname(*s)
	}
	return uc
}

// SetPhoneNo sets the "PhoneNo" field.
func (uc *UserprofileCreate) SetPhoneNo(s string) *UserprofileCreate {
	uc.mutation.SetPhoneNo(s)
	return uc
}

// SetNillablePhoneNo sets the "PhoneNo" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillablePhoneNo(s *string) *UserprofileCreate {
	if s != nil {
		uc.SetPhoneNo(*s)
	}
	return uc
}

// SetEmail sets the "Email" field.
func (uc *UserprofileCreate) SetEmail(s string) *UserprofileCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillableEmail(s *string) *UserprofileCreate {
	if s != nil {
		uc.SetEmail(*s)
	}
	return uc
}

// SetCitizenId sets the "CitizenId" field.
func (uc *UserprofileCreate) SetCitizenId(s string) *UserprofileCreate {
	uc.mutation.SetCitizenId(s)
	return uc
}

// SetNillableCitizenId sets the "CitizenId" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillableCitizenId(s *string) *UserprofileCreate {
	if s != nil {
		uc.SetCitizenId(*s)
	}
	return uc
}

// SetBirthDate sets the "BirthDate" field.
func (uc *UserprofileCreate) SetBirthDate(s string) *UserprofileCreate {
	uc.mutation.SetBirthDate(s)
	return uc
}

// SetNillableBirthDate sets the "BirthDate" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillableBirthDate(s *string) *UserprofileCreate {
	if s != nil {
		uc.SetBirthDate(*s)
	}
	return uc
}

// SetGender sets the "Gender" field.
func (uc *UserprofileCreate) SetGender(s string) *UserprofileCreate {
	uc.mutation.SetGender(s)
	return uc
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillableGender(s *string) *UserprofileCreate {
	if s != nil {
		uc.SetGender(*s)
	}
	return uc
}

// SetBusinessAddress sets the "BusinessAddress" field.
func (uc *UserprofileCreate) SetBusinessAddress(s string) *UserprofileCreate {
	uc.mutation.SetBusinessAddress(s)
	return uc
}

// SetNillableBusinessAddress sets the "BusinessAddress" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillableBusinessAddress(s *string) *UserprofileCreate {
	if s != nil {
		uc.SetBusinessAddress(*s)
	}
	return uc
}

// SetOccupationId sets the "OccupationId" field.
func (uc *UserprofileCreate) SetOccupationId(i int) *UserprofileCreate {
	uc.mutation.SetOccupationId(i)
	return uc
}

// SetNillableOccupationId sets the "OccupationId" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillableOccupationId(i *int) *UserprofileCreate {
	if i != nil {
		uc.SetOccupationId(*i)
	}
	return uc
}

// SetFileimportID sets the "FileimportID" field.
func (uc *UserprofileCreate) SetFileimportID(i int) *UserprofileCreate {
	uc.mutation.SetFileimportID(i)
	return uc
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (uc *UserprofileCreate) SetNillableFileimportID(i *int) *UserprofileCreate {
	if i != nil {
		uc.SetFileimportID(*i)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserprofileCreate) SetID(i int) *UserprofileCreate {
	uc.mutation.SetID(i)
	return uc
}

// Mutation returns the UserprofileMutation object of the builder.
func (uc *UserprofileCreate) Mutation() *UserprofileMutation {
	return uc.mutation
}

// Save creates the Userprofile in the database.
func (uc *UserprofileCreate) Save(ctx context.Context) (*Userprofile, error) {
	var (
		err  error
		node *Userprofile
	)
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserprofileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserprofileCreate) SaveX(ctx context.Context) *Userprofile {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserprofileCreate) check() error {
	if v, ok := uc.mutation.UserId(); ok {
		if err := userprofile.UserIdValidator(v); err != nil {
			return &ValidationError{Name: "UserId", err: fmt.Errorf("ent: validator failed for field \"UserId\": %w", err)}
		}
	}
	if v, ok := uc.mutation.Firstname(); ok {
		if err := userprofile.FirstnameValidator(v); err != nil {
			return &ValidationError{Name: "Firstname", err: fmt.Errorf("ent: validator failed for field \"Firstname\": %w", err)}
		}
	}
	if v, ok := uc.mutation.Lastname(); ok {
		if err := userprofile.LastnameValidator(v); err != nil {
			return &ValidationError{Name: "Lastname", err: fmt.Errorf("ent: validator failed for field \"Lastname\": %w", err)}
		}
	}
	if v, ok := uc.mutation.PhoneNo(); ok {
		if err := userprofile.PhoneNoValidator(v); err != nil {
			return &ValidationError{Name: "PhoneNo", err: fmt.Errorf("ent: validator failed for field \"PhoneNo\": %w", err)}
		}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := userprofile.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf("ent: validator failed for field \"Email\": %w", err)}
		}
	}
	if v, ok := uc.mutation.CitizenId(); ok {
		if err := userprofile.CitizenIdValidator(v); err != nil {
			return &ValidationError{Name: "CitizenId", err: fmt.Errorf("ent: validator failed for field \"CitizenId\": %w", err)}
		}
	}
	if v, ok := uc.mutation.BirthDate(); ok {
		if err := userprofile.BirthDateValidator(v); err != nil {
			return &ValidationError{Name: "BirthDate", err: fmt.Errorf("ent: validator failed for field \"BirthDate\": %w", err)}
		}
	}
	if v, ok := uc.mutation.Gender(); ok {
		if err := userprofile.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf("ent: validator failed for field \"Gender\": %w", err)}
		}
	}
	if v, ok := uc.mutation.BusinessAddress(); ok {
		if err := userprofile.BusinessAddressValidator(v); err != nil {
			return &ValidationError{Name: "BusinessAddress", err: fmt.Errorf("ent: validator failed for field \"BusinessAddress\": %w", err)}
		}
	}
	return nil
}

func (uc *UserprofileCreate) sqlSave(ctx context.Context) (*Userprofile, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (uc *UserprofileCreate) createSpec() (*Userprofile, *sqlgraph.CreateSpec) {
	var (
		_node = &Userprofile{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userprofile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userprofile.FieldID,
			},
		}
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userprofile.FieldUserId,
		})
		_node.UserId = value
	}
	if value, ok := uc.mutation.Firstname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userprofile.FieldFirstname,
		})
		_node.Firstname = value
	}
	if value, ok := uc.mutation.Lastname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userprofile.FieldLastname,
		})
		_node.Lastname = value
	}
	if value, ok := uc.mutation.PhoneNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userprofile.FieldPhoneNo,
		})
		_node.PhoneNo = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userprofile.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := uc.mutation.CitizenId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userprofile.FieldCitizenId,
		})
		_node.CitizenId = value
	}
	if value, ok := uc.mutation.BirthDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userprofile.FieldBirthDate,
		})
		_node.BirthDate = value
	}
	if value, ok := uc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userprofile.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := uc.mutation.BusinessAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userprofile.FieldBusinessAddress,
		})
		_node.BusinessAddress = value
	}
	if value, ok := uc.mutation.OccupationId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userprofile.FieldOccupationId,
		})
		_node.OccupationId = value
	}
	if value, ok := uc.mutation.FileimportID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userprofile.FieldFileimportID,
		})
		_node.FileimportID = &value
	}
	return _node, _spec
}

// UserprofileCreateBulk is the builder for creating many Userprofile entities in bulk.
type UserprofileCreateBulk struct {
	config
	builders []*UserprofileCreate
}

// Save creates the Userprofile entities in the database.
func (ucb *UserprofileCreateBulk) Save(ctx context.Context) ([]*Userprofile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Userprofile, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserprofileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserprofileCreateBulk) SaveX(ctx context.Context) []*Userprofile {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
