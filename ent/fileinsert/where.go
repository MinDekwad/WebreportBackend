// Code generated by entc, DO NOT EDIT.

package fileinsert

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Importdate applies equality check predicate on the "importdate" field. It's identical to ImportdateEQ.
func Importdate(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImportdate), v))
	})
}

// IsSuccess applies equality check predicate on the "IsSuccess" field. It's identical to IsSuccessEQ.
func IsSuccess(v bool) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSuccess), v))
	})
}

// UpdateDate applies equality check predicate on the "UpdateDate" field. It's identical to UpdateDateEQ.
func UpdateDate(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateDate), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Fileinsert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileinsert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Fileinsert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileinsert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ImportdateEQ applies the EQ predicate on the "importdate" field.
func ImportdateEQ(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImportdate), v))
	})
}

// ImportdateNEQ applies the NEQ predicate on the "importdate" field.
func ImportdateNEQ(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImportdate), v))
	})
}

// ImportdateIn applies the In predicate on the "importdate" field.
func ImportdateIn(vs ...time.Time) predicate.Fileinsert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileinsert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImportdate), v...))
	})
}

// ImportdateNotIn applies the NotIn predicate on the "importdate" field.
func ImportdateNotIn(vs ...time.Time) predicate.Fileinsert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileinsert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImportdate), v...))
	})
}

// ImportdateGT applies the GT predicate on the "importdate" field.
func ImportdateGT(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImportdate), v))
	})
}

// ImportdateGTE applies the GTE predicate on the "importdate" field.
func ImportdateGTE(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImportdate), v))
	})
}

// ImportdateLT applies the LT predicate on the "importdate" field.
func ImportdateLT(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImportdate), v))
	})
}

// ImportdateLTE applies the LTE predicate on the "importdate" field.
func ImportdateLTE(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImportdate), v))
	})
}

// ImportdateIsNil applies the IsNil predicate on the "importdate" field.
func ImportdateIsNil() predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImportdate)))
	})
}

// ImportdateNotNil applies the NotNil predicate on the "importdate" field.
func ImportdateNotNil() predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImportdate)))
	})
}

// IsSuccessEQ applies the EQ predicate on the "IsSuccess" field.
func IsSuccessEQ(v bool) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSuccess), v))
	})
}

// IsSuccessNEQ applies the NEQ predicate on the "IsSuccess" field.
func IsSuccessNEQ(v bool) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsSuccess), v))
	})
}

// IsSuccessIsNil applies the IsNil predicate on the "IsSuccess" field.
func IsSuccessIsNil() predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsSuccess)))
	})
}

// IsSuccessNotNil applies the NotNil predicate on the "IsSuccess" field.
func IsSuccessNotNil() predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsSuccess)))
	})
}

// UpdateDateEQ applies the EQ predicate on the "UpdateDate" field.
func UpdateDateEQ(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateNEQ applies the NEQ predicate on the "UpdateDate" field.
func UpdateDateNEQ(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateIn applies the In predicate on the "UpdateDate" field.
func UpdateDateIn(vs ...time.Time) predicate.Fileinsert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileinsert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateDate), v...))
	})
}

// UpdateDateNotIn applies the NotIn predicate on the "UpdateDate" field.
func UpdateDateNotIn(vs ...time.Time) predicate.Fileinsert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileinsert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateDate), v...))
	})
}

// UpdateDateGT applies the GT predicate on the "UpdateDate" field.
func UpdateDateGT(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateGTE applies the GTE predicate on the "UpdateDate" field.
func UpdateDateGTE(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateLT applies the LT predicate on the "UpdateDate" field.
func UpdateDateLT(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateLTE applies the LTE predicate on the "UpdateDate" field.
func UpdateDateLTE(v time.Time) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateDate), v))
	})
}

// UpdateDateIsNil applies the IsNil predicate on the "UpdateDate" field.
func UpdateDateIsNil() predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateDate)))
	})
}

// UpdateDateNotNil applies the NotNil predicate on the "UpdateDate" field.
func UpdateDateNotNil() predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateDate)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Fileinsert) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Fileinsert) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Fileinsert) predicate.Fileinsert {
	return predicate.Fileinsert(func(s *sql.Selector) {
		p(s.Not())
	})
}
