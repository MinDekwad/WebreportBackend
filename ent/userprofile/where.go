// Code generated by entc, DO NOT EDIT.

package userprofile

import (
	"go-api-report2/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserId applies equality check predicate on the "UserId" field. It's identical to UserIdEQ.
func UserId(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// Firstname applies equality check predicate on the "Firstname" field. It's identical to FirstnameEQ.
func Firstname(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstname), v))
	})
}

// Lastname applies equality check predicate on the "Lastname" field. It's identical to LastnameEQ.
func Lastname(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastname), v))
	})
}

// PhoneNo applies equality check predicate on the "PhoneNo" field. It's identical to PhoneNoEQ.
func PhoneNo(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNo), v))
	})
}

// Email applies equality check predicate on the "Email" field. It's identical to EmailEQ.
func Email(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// CitizenId applies equality check predicate on the "CitizenId" field. It's identical to CitizenIdEQ.
func CitizenId(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCitizenId), v))
	})
}

// BirthDate applies equality check predicate on the "BirthDate" field. It's identical to BirthDateEQ.
func BirthDate(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthDate), v))
	})
}

// Gender applies equality check predicate on the "Gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// BusinessAddress applies equality check predicate on the "BusinessAddress" field. It's identical to BusinessAddressEQ.
func BusinessAddress(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessAddress), v))
	})
}

// OccupationId applies equality check predicate on the "OccupationId" field. It's identical to OccupationIdEQ.
func OccupationId(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOccupationId), v))
	})
}

// FileimportID applies equality check predicate on the "FileimportID" field. It's identical to FileimportIDEQ.
func FileimportID(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileimportID), v))
	})
}

// UserIdEQ applies the EQ predicate on the "UserId" field.
func UserIdEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "UserId" field.
func UserIdNEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "UserId" field.
func UserIdIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "UserId" field.
func UserIdNotIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdGT applies the GT predicate on the "UserId" field.
func UserIdGT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserId), v))
	})
}

// UserIdGTE applies the GTE predicate on the "UserId" field.
func UserIdGTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserId), v))
	})
}

// UserIdLT applies the LT predicate on the "UserId" field.
func UserIdLT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserId), v))
	})
}

// UserIdLTE applies the LTE predicate on the "UserId" field.
func UserIdLTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserId), v))
	})
}

// UserIdContains applies the Contains predicate on the "UserId" field.
func UserIdContains(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserId), v))
	})
}

// UserIdHasPrefix applies the HasPrefix predicate on the "UserId" field.
func UserIdHasPrefix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserId), v))
	})
}

// UserIdHasSuffix applies the HasSuffix predicate on the "UserId" field.
func UserIdHasSuffix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserId), v))
	})
}

// UserIdIsNil applies the IsNil predicate on the "UserId" field.
func UserIdIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserId)))
	})
}

// UserIdNotNil applies the NotNil predicate on the "UserId" field.
func UserIdNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserId)))
	})
}

// UserIdEqualFold applies the EqualFold predicate on the "UserId" field.
func UserIdEqualFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserId), v))
	})
}

// UserIdContainsFold applies the ContainsFold predicate on the "UserId" field.
func UserIdContainsFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserId), v))
	})
}

// FirstnameEQ applies the EQ predicate on the "Firstname" field.
func FirstnameEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstname), v))
	})
}

// FirstnameNEQ applies the NEQ predicate on the "Firstname" field.
func FirstnameNEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstname), v))
	})
}

// FirstnameIn applies the In predicate on the "Firstname" field.
func FirstnameIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstname), v...))
	})
}

// FirstnameNotIn applies the NotIn predicate on the "Firstname" field.
func FirstnameNotIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstname), v...))
	})
}

// FirstnameGT applies the GT predicate on the "Firstname" field.
func FirstnameGT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstname), v))
	})
}

// FirstnameGTE applies the GTE predicate on the "Firstname" field.
func FirstnameGTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstname), v))
	})
}

// FirstnameLT applies the LT predicate on the "Firstname" field.
func FirstnameLT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstname), v))
	})
}

// FirstnameLTE applies the LTE predicate on the "Firstname" field.
func FirstnameLTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstname), v))
	})
}

// FirstnameContains applies the Contains predicate on the "Firstname" field.
func FirstnameContains(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstname), v))
	})
}

// FirstnameHasPrefix applies the HasPrefix predicate on the "Firstname" field.
func FirstnameHasPrefix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstname), v))
	})
}

// FirstnameHasSuffix applies the HasSuffix predicate on the "Firstname" field.
func FirstnameHasSuffix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstname), v))
	})
}

// FirstnameIsNil applies the IsNil predicate on the "Firstname" field.
func FirstnameIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstname)))
	})
}

// FirstnameNotNil applies the NotNil predicate on the "Firstname" field.
func FirstnameNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstname)))
	})
}

// FirstnameEqualFold applies the EqualFold predicate on the "Firstname" field.
func FirstnameEqualFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstname), v))
	})
}

// FirstnameContainsFold applies the ContainsFold predicate on the "Firstname" field.
func FirstnameContainsFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstname), v))
	})
}

// LastnameEQ applies the EQ predicate on the "Lastname" field.
func LastnameEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastname), v))
	})
}

// LastnameNEQ applies the NEQ predicate on the "Lastname" field.
func LastnameNEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastname), v))
	})
}

// LastnameIn applies the In predicate on the "Lastname" field.
func LastnameIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastname), v...))
	})
}

// LastnameNotIn applies the NotIn predicate on the "Lastname" field.
func LastnameNotIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastname), v...))
	})
}

// LastnameGT applies the GT predicate on the "Lastname" field.
func LastnameGT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastname), v))
	})
}

// LastnameGTE applies the GTE predicate on the "Lastname" field.
func LastnameGTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastname), v))
	})
}

// LastnameLT applies the LT predicate on the "Lastname" field.
func LastnameLT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastname), v))
	})
}

// LastnameLTE applies the LTE predicate on the "Lastname" field.
func LastnameLTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastname), v))
	})
}

// LastnameContains applies the Contains predicate on the "Lastname" field.
func LastnameContains(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastname), v))
	})
}

// LastnameHasPrefix applies the HasPrefix predicate on the "Lastname" field.
func LastnameHasPrefix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastname), v))
	})
}

// LastnameHasSuffix applies the HasSuffix predicate on the "Lastname" field.
func LastnameHasSuffix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastname), v))
	})
}

// LastnameIsNil applies the IsNil predicate on the "Lastname" field.
func LastnameIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastname)))
	})
}

// LastnameNotNil applies the NotNil predicate on the "Lastname" field.
func LastnameNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastname)))
	})
}

// LastnameEqualFold applies the EqualFold predicate on the "Lastname" field.
func LastnameEqualFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastname), v))
	})
}

// LastnameContainsFold applies the ContainsFold predicate on the "Lastname" field.
func LastnameContainsFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastname), v))
	})
}

// PhoneNoEQ applies the EQ predicate on the "PhoneNo" field.
func PhoneNoEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNo), v))
	})
}

// PhoneNoNEQ applies the NEQ predicate on the "PhoneNo" field.
func PhoneNoNEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneNo), v))
	})
}

// PhoneNoIn applies the In predicate on the "PhoneNo" field.
func PhoneNoIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhoneNo), v...))
	})
}

// PhoneNoNotIn applies the NotIn predicate on the "PhoneNo" field.
func PhoneNoNotIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhoneNo), v...))
	})
}

// PhoneNoGT applies the GT predicate on the "PhoneNo" field.
func PhoneNoGT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneNo), v))
	})
}

// PhoneNoGTE applies the GTE predicate on the "PhoneNo" field.
func PhoneNoGTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneNo), v))
	})
}

// PhoneNoLT applies the LT predicate on the "PhoneNo" field.
func PhoneNoLT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneNo), v))
	})
}

// PhoneNoLTE applies the LTE predicate on the "PhoneNo" field.
func PhoneNoLTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneNo), v))
	})
}

// PhoneNoContains applies the Contains predicate on the "PhoneNo" field.
func PhoneNoContains(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoneNo), v))
	})
}

// PhoneNoHasPrefix applies the HasPrefix predicate on the "PhoneNo" field.
func PhoneNoHasPrefix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoneNo), v))
	})
}

// PhoneNoHasSuffix applies the HasSuffix predicate on the "PhoneNo" field.
func PhoneNoHasSuffix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoneNo), v))
	})
}

// PhoneNoIsNil applies the IsNil predicate on the "PhoneNo" field.
func PhoneNoIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhoneNo)))
	})
}

// PhoneNoNotNil applies the NotNil predicate on the "PhoneNo" field.
func PhoneNoNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhoneNo)))
	})
}

// PhoneNoEqualFold applies the EqualFold predicate on the "PhoneNo" field.
func PhoneNoEqualFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoneNo), v))
	})
}

// PhoneNoContainsFold applies the ContainsFold predicate on the "PhoneNo" field.
func PhoneNoContainsFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoneNo), v))
	})
}

// EmailEQ applies the EQ predicate on the "Email" field.
func EmailEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "Email" field.
func EmailNEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "Email" field.
func EmailIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "Email" field.
func EmailNotIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "Email" field.
func EmailGT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "Email" field.
func EmailGTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "Email" field.
func EmailLT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "Email" field.
func EmailLTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "Email" field.
func EmailContains(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "Email" field.
func EmailHasPrefix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "Email" field.
func EmailHasSuffix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailIsNil applies the IsNil predicate on the "Email" field.
func EmailIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmail)))
	})
}

// EmailNotNil applies the NotNil predicate on the "Email" field.
func EmailNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmail)))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "Email" field.
func EmailEqualFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "Email" field.
func EmailContainsFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// CitizenIdEQ applies the EQ predicate on the "CitizenId" field.
func CitizenIdEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCitizenId), v))
	})
}

// CitizenIdNEQ applies the NEQ predicate on the "CitizenId" field.
func CitizenIdNEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCitizenId), v))
	})
}

// CitizenIdIn applies the In predicate on the "CitizenId" field.
func CitizenIdIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCitizenId), v...))
	})
}

// CitizenIdNotIn applies the NotIn predicate on the "CitizenId" field.
func CitizenIdNotIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCitizenId), v...))
	})
}

// CitizenIdGT applies the GT predicate on the "CitizenId" field.
func CitizenIdGT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCitizenId), v))
	})
}

// CitizenIdGTE applies the GTE predicate on the "CitizenId" field.
func CitizenIdGTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCitizenId), v))
	})
}

// CitizenIdLT applies the LT predicate on the "CitizenId" field.
func CitizenIdLT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCitizenId), v))
	})
}

// CitizenIdLTE applies the LTE predicate on the "CitizenId" field.
func CitizenIdLTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCitizenId), v))
	})
}

// CitizenIdContains applies the Contains predicate on the "CitizenId" field.
func CitizenIdContains(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCitizenId), v))
	})
}

// CitizenIdHasPrefix applies the HasPrefix predicate on the "CitizenId" field.
func CitizenIdHasPrefix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCitizenId), v))
	})
}

// CitizenIdHasSuffix applies the HasSuffix predicate on the "CitizenId" field.
func CitizenIdHasSuffix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCitizenId), v))
	})
}

// CitizenIdIsNil applies the IsNil predicate on the "CitizenId" field.
func CitizenIdIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCitizenId)))
	})
}

// CitizenIdNotNil applies the NotNil predicate on the "CitizenId" field.
func CitizenIdNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCitizenId)))
	})
}

// CitizenIdEqualFold applies the EqualFold predicate on the "CitizenId" field.
func CitizenIdEqualFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCitizenId), v))
	})
}

// CitizenIdContainsFold applies the ContainsFold predicate on the "CitizenId" field.
func CitizenIdContainsFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCitizenId), v))
	})
}

// BirthDateEQ applies the EQ predicate on the "BirthDate" field.
func BirthDateEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthDate), v))
	})
}

// BirthDateNEQ applies the NEQ predicate on the "BirthDate" field.
func BirthDateNEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthDate), v))
	})
}

// BirthDateIn applies the In predicate on the "BirthDate" field.
func BirthDateIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirthDate), v...))
	})
}

// BirthDateNotIn applies the NotIn predicate on the "BirthDate" field.
func BirthDateNotIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirthDate), v...))
	})
}

// BirthDateGT applies the GT predicate on the "BirthDate" field.
func BirthDateGT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthDate), v))
	})
}

// BirthDateGTE applies the GTE predicate on the "BirthDate" field.
func BirthDateGTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthDate), v))
	})
}

// BirthDateLT applies the LT predicate on the "BirthDate" field.
func BirthDateLT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthDate), v))
	})
}

// BirthDateLTE applies the LTE predicate on the "BirthDate" field.
func BirthDateLTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthDate), v))
	})
}

// BirthDateContains applies the Contains predicate on the "BirthDate" field.
func BirthDateContains(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBirthDate), v))
	})
}

// BirthDateHasPrefix applies the HasPrefix predicate on the "BirthDate" field.
func BirthDateHasPrefix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBirthDate), v))
	})
}

// BirthDateHasSuffix applies the HasSuffix predicate on the "BirthDate" field.
func BirthDateHasSuffix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBirthDate), v))
	})
}

// BirthDateIsNil applies the IsNil predicate on the "BirthDate" field.
func BirthDateIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBirthDate)))
	})
}

// BirthDateNotNil applies the NotNil predicate on the "BirthDate" field.
func BirthDateNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBirthDate)))
	})
}

// BirthDateEqualFold applies the EqualFold predicate on the "BirthDate" field.
func BirthDateEqualFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBirthDate), v))
	})
}

// BirthDateContainsFold applies the ContainsFold predicate on the "BirthDate" field.
func BirthDateContainsFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBirthDate), v))
	})
}

// GenderEQ applies the EQ predicate on the "Gender" field.
func GenderEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "Gender" field.
func GenderNEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "Gender" field.
func GenderIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "Gender" field.
func GenderNotIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "Gender" field.
func GenderGT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), v))
	})
}

// GenderGTE applies the GTE predicate on the "Gender" field.
func GenderGTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), v))
	})
}

// GenderLT applies the LT predicate on the "Gender" field.
func GenderLT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), v))
	})
}

// GenderLTE applies the LTE predicate on the "Gender" field.
func GenderLTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), v))
	})
}

// GenderContains applies the Contains predicate on the "Gender" field.
func GenderContains(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGender), v))
	})
}

// GenderHasPrefix applies the HasPrefix predicate on the "Gender" field.
func GenderHasPrefix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGender), v))
	})
}

// GenderHasSuffix applies the HasSuffix predicate on the "Gender" field.
func GenderHasSuffix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGender), v))
	})
}

// GenderIsNil applies the IsNil predicate on the "Gender" field.
func GenderIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGender)))
	})
}

// GenderNotNil applies the NotNil predicate on the "Gender" field.
func GenderNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGender)))
	})
}

// GenderEqualFold applies the EqualFold predicate on the "Gender" field.
func GenderEqualFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGender), v))
	})
}

// GenderContainsFold applies the ContainsFold predicate on the "Gender" field.
func GenderContainsFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGender), v))
	})
}

// BusinessAddressEQ applies the EQ predicate on the "BusinessAddress" field.
func BusinessAddressEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessAddress), v))
	})
}

// BusinessAddressNEQ applies the NEQ predicate on the "BusinessAddress" field.
func BusinessAddressNEQ(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessAddress), v))
	})
}

// BusinessAddressIn applies the In predicate on the "BusinessAddress" field.
func BusinessAddressIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBusinessAddress), v...))
	})
}

// BusinessAddressNotIn applies the NotIn predicate on the "BusinessAddress" field.
func BusinessAddressNotIn(vs ...string) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBusinessAddress), v...))
	})
}

// BusinessAddressGT applies the GT predicate on the "BusinessAddress" field.
func BusinessAddressGT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessAddress), v))
	})
}

// BusinessAddressGTE applies the GTE predicate on the "BusinessAddress" field.
func BusinessAddressGTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessAddress), v))
	})
}

// BusinessAddressLT applies the LT predicate on the "BusinessAddress" field.
func BusinessAddressLT(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessAddress), v))
	})
}

// BusinessAddressLTE applies the LTE predicate on the "BusinessAddress" field.
func BusinessAddressLTE(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessAddress), v))
	})
}

// BusinessAddressContains applies the Contains predicate on the "BusinessAddress" field.
func BusinessAddressContains(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBusinessAddress), v))
	})
}

// BusinessAddressHasPrefix applies the HasPrefix predicate on the "BusinessAddress" field.
func BusinessAddressHasPrefix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBusinessAddress), v))
	})
}

// BusinessAddressHasSuffix applies the HasSuffix predicate on the "BusinessAddress" field.
func BusinessAddressHasSuffix(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBusinessAddress), v))
	})
}

// BusinessAddressIsNil applies the IsNil predicate on the "BusinessAddress" field.
func BusinessAddressIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBusinessAddress)))
	})
}

// BusinessAddressNotNil applies the NotNil predicate on the "BusinessAddress" field.
func BusinessAddressNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBusinessAddress)))
	})
}

// BusinessAddressEqualFold applies the EqualFold predicate on the "BusinessAddress" field.
func BusinessAddressEqualFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBusinessAddress), v))
	})
}

// BusinessAddressContainsFold applies the ContainsFold predicate on the "BusinessAddress" field.
func BusinessAddressContainsFold(v string) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBusinessAddress), v))
	})
}

// OccupationIdEQ applies the EQ predicate on the "OccupationId" field.
func OccupationIdEQ(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOccupationId), v))
	})
}

// OccupationIdNEQ applies the NEQ predicate on the "OccupationId" field.
func OccupationIdNEQ(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOccupationId), v))
	})
}

// OccupationIdIn applies the In predicate on the "OccupationId" field.
func OccupationIdIn(vs ...int) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOccupationId), v...))
	})
}

// OccupationIdNotIn applies the NotIn predicate on the "OccupationId" field.
func OccupationIdNotIn(vs ...int) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOccupationId), v...))
	})
}

// OccupationIdGT applies the GT predicate on the "OccupationId" field.
func OccupationIdGT(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOccupationId), v))
	})
}

// OccupationIdGTE applies the GTE predicate on the "OccupationId" field.
func OccupationIdGTE(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOccupationId), v))
	})
}

// OccupationIdLT applies the LT predicate on the "OccupationId" field.
func OccupationIdLT(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOccupationId), v))
	})
}

// OccupationIdLTE applies the LTE predicate on the "OccupationId" field.
func OccupationIdLTE(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOccupationId), v))
	})
}

// OccupationIdIsNil applies the IsNil predicate on the "OccupationId" field.
func OccupationIdIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOccupationId)))
	})
}

// OccupationIdNotNil applies the NotNil predicate on the "OccupationId" field.
func OccupationIdNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOccupationId)))
	})
}

// FileimportIDEQ applies the EQ predicate on the "FileimportID" field.
func FileimportIDEQ(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileimportID), v))
	})
}

// FileimportIDNEQ applies the NEQ predicate on the "FileimportID" field.
func FileimportIDNEQ(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileimportID), v))
	})
}

// FileimportIDIn applies the In predicate on the "FileimportID" field.
func FileimportIDIn(vs ...int) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileimportID), v...))
	})
}

// FileimportIDNotIn applies the NotIn predicate on the "FileimportID" field.
func FileimportIDNotIn(vs ...int) predicate.Userprofile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Userprofile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileimportID), v...))
	})
}

// FileimportIDGT applies the GT predicate on the "FileimportID" field.
func FileimportIDGT(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileimportID), v))
	})
}

// FileimportIDGTE applies the GTE predicate on the "FileimportID" field.
func FileimportIDGTE(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileimportID), v))
	})
}

// FileimportIDLT applies the LT predicate on the "FileimportID" field.
func FileimportIDLT(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileimportID), v))
	})
}

// FileimportIDLTE applies the LTE predicate on the "FileimportID" field.
func FileimportIDLTE(v int) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileimportID), v))
	})
}

// FileimportIDIsNil applies the IsNil predicate on the "FileimportID" field.
func FileimportIDIsNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFileimportID)))
	})
}

// FileimportIDNotNil applies the NotNil predicate on the "FileimportID" field.
func FileimportIDNotNil() predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFileimportID)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Userprofile) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Userprofile) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Userprofile) predicate.Userprofile {
	return predicate.Userprofile(func(s *sql.Selector) {
		p(s.Not())
	})
}
