// Code generated by entc, DO NOT EDIT.

package userprofile

const (
	// Label holds the string label denoting the userprofile type in the database.
	Label = "userprofile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "UserId"
	// FieldFirstname holds the string denoting the firstname field in the database.
	FieldFirstname = "Firstname"
	// FieldLastname holds the string denoting the lastname field in the database.
	FieldLastname = "Lastname"
	// FieldPhoneNo holds the string denoting the phoneno field in the database.
	FieldPhoneNo = "PhoneNo"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "Email"
	// FieldCitizenId holds the string denoting the citizenid field in the database.
	FieldCitizenId = "CitizenId"
	// FieldBirthDate holds the string denoting the birthdate field in the database.
	FieldBirthDate = "BirthDate"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "Gender"
	// FieldBusinessAddress holds the string denoting the businessaddress field in the database.
	FieldBusinessAddress = "BusinessAddress"
	// FieldOccupationId holds the string denoting the occupationid field in the database.
	FieldOccupationId = "OccupationId"
	// FieldFileimportID holds the string denoting the fileimportid field in the database.
	FieldFileimportID = "FileimportID"

	// Table holds the table name of the userprofile in the database.
	Table = "user_profile"
)

// Columns holds all SQL columns for userprofile fields.
var Columns = []string{
	FieldID,
	FieldUserId,
	FieldFirstname,
	FieldLastname,
	FieldPhoneNo,
	FieldEmail,
	FieldCitizenId,
	FieldBirthDate,
	FieldGender,
	FieldBusinessAddress,
	FieldOccupationId,
	FieldFileimportID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UserIdValidator is a validator for the "UserId" field. It is called by the builders before save.
	UserIdValidator func(string) error
	// FirstnameValidator is a validator for the "Firstname" field. It is called by the builders before save.
	FirstnameValidator func(string) error
	// LastnameValidator is a validator for the "Lastname" field. It is called by the builders before save.
	LastnameValidator func(string) error
	// PhoneNoValidator is a validator for the "PhoneNo" field. It is called by the builders before save.
	PhoneNoValidator func(string) error
	// EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// CitizenIdValidator is a validator for the "CitizenId" field. It is called by the builders before save.
	CitizenIdValidator func(string) error
	// BirthDateValidator is a validator for the "BirthDate" field. It is called by the builders before save.
	BirthDateValidator func(string) error
	// GenderValidator is a validator for the "Gender" field. It is called by the builders before save.
	GenderValidator func(string) error
	// BusinessAddressValidator is a validator for the "BusinessAddress" field. It is called by the builders before save.
	BusinessAddressValidator func(string) error
)
