// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/reportwallettb"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Reportwallettb is the model entity for the Reportwallettb schema.
type Reportwallettb struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Walletid holds the value of the "walletid" field.
	Walletid string `json:"walletid,omitempty"`
	// WalletTypeName holds the value of the "WalletTypeName" field.
	WalletTypeName *string `json:"WalletTypeName,omitempty"`
	// WalletPhoneno holds the value of the "WalletPhoneno" field.
	WalletPhoneno *string `json:"WalletPhoneno,omitempty"`
	// WalletName holds the value of the "WalletName" field.
	WalletName *string `json:"WalletName,omitempty"`
	// CitizenId holds the value of the "CitizenId" field.
	CitizenId *string `json:"CitizenId,omitempty"`
	// Status holds the value of the "Status" field.
	Status *string `json:"Status,omitempty"`
	// RegisterDate holds the value of the "RegisterDate" field.
	RegisterDate *time.Time `json:"RegisterDate,omitempty"`
	// GroupUser holds the value of the "GroupUser" field.
	GroupUser *int `json:"GroupUser,omitempty"`
	// UserAgent holds the value of the "UserAgent" field.
	UserAgent *string `json:"UserAgent,omitempty"`
	// KYCDate holds the value of the "KYC_Date" field.
	KYCDate *time.Time `json:"KYC_Date,omitempty"`
	// ATMCard holds the value of the "ATMCard" field.
	ATMCard *string `json:"ATMCard,omitempty"`
	// AccountNo holds the value of the "AccountNo" field.
	AccountNo *string `json:"AccountNo,omitempty"`
	// AddressDetail holds the value of the "AddressDetail" field.
	AddressDetail *string `json:"AddressDetail,omitempty"`
	// Street holds the value of the "Street" field.
	Street *string `json:"Street,omitempty"`
	// District holds the value of the "District" field.
	District *string `json:"District,omitempty"`
	// SubDistrict holds the value of the "SubDistrict" field.
	SubDistrict *string `json:"SubDistrict,omitempty"`
	// Province holds the value of the "Province" field.
	Province *string `json:"Province,omitempty"`
	// PostalCode holds the value of the "PostalCode" field.
	PostalCode *string `json:"PostalCode,omitempty"`
	// IsKYC holds the value of the "isKYC" field.
	IsKYC *string `json:"isKYC,omitempty"`
	// UpdateDate holds the value of the "UpdateDate" field.
	UpdateDate *time.Time `json:"UpdateDate,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reportwallettb) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportwallettb.FieldID, reportwallettb.FieldGroupUser:
			values[i] = &sql.NullInt64{}
		case reportwallettb.FieldWalletid, reportwallettb.FieldWalletTypeName, reportwallettb.FieldWalletPhoneno, reportwallettb.FieldWalletName, reportwallettb.FieldCitizenId, reportwallettb.FieldStatus, reportwallettb.FieldUserAgent, reportwallettb.FieldATMCard, reportwallettb.FieldAccountNo, reportwallettb.FieldAddressDetail, reportwallettb.FieldStreet, reportwallettb.FieldDistrict, reportwallettb.FieldSubDistrict, reportwallettb.FieldProvince, reportwallettb.FieldPostalCode, reportwallettb.FieldIsKYC:
			values[i] = &sql.NullString{}
		case reportwallettb.FieldRegisterDate, reportwallettb.FieldKYCDate, reportwallettb.FieldUpdateDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Reportwallettb", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reportwallettb fields.
func (r *Reportwallettb) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportwallettb.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case reportwallettb.FieldWalletid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field walletid", values[i])
			} else if value.Valid {
				r.Walletid = value.String
			}
		case reportwallettb.FieldWalletTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletTypeName", values[i])
			} else if value.Valid {
				r.WalletTypeName = new(string)
				*r.WalletTypeName = value.String
			}
		case reportwallettb.FieldWalletPhoneno:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletPhoneno", values[i])
			} else if value.Valid {
				r.WalletPhoneno = new(string)
				*r.WalletPhoneno = value.String
			}
		case reportwallettb.FieldWalletName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletName", values[i])
			} else if value.Valid {
				r.WalletName = new(string)
				*r.WalletName = value.String
			}
		case reportwallettb.FieldCitizenId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CitizenId", values[i])
			} else if value.Valid {
				r.CitizenId = new(string)
				*r.CitizenId = value.String
			}
		case reportwallettb.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				r.Status = new(string)
				*r.Status = value.String
			}
		case reportwallettb.FieldRegisterDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field RegisterDate", values[i])
			} else if value.Valid {
				r.RegisterDate = new(time.Time)
				*r.RegisterDate = value.Time
			}
		case reportwallettb.FieldGroupUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field GroupUser", values[i])
			} else if value.Valid {
				r.GroupUser = new(int)
				*r.GroupUser = int(value.Int64)
			}
		case reportwallettb.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserAgent", values[i])
			} else if value.Valid {
				r.UserAgent = new(string)
				*r.UserAgent = value.String
			}
		case reportwallettb.FieldKYCDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field KYC_Date", values[i])
			} else if value.Valid {
				r.KYCDate = new(time.Time)
				*r.KYCDate = value.Time
			}
		case reportwallettb.FieldATMCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ATMCard", values[i])
			} else if value.Valid {
				r.ATMCard = new(string)
				*r.ATMCard = value.String
			}
		case reportwallettb.FieldAccountNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AccountNo", values[i])
			} else if value.Valid {
				r.AccountNo = new(string)
				*r.AccountNo = value.String
			}
		case reportwallettb.FieldAddressDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AddressDetail", values[i])
			} else if value.Valid {
				r.AddressDetail = new(string)
				*r.AddressDetail = value.String
			}
		case reportwallettb.FieldStreet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Street", values[i])
			} else if value.Valid {
				r.Street = new(string)
				*r.Street = value.String
			}
		case reportwallettb.FieldDistrict:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field District", values[i])
			} else if value.Valid {
				r.District = new(string)
				*r.District = value.String
			}
		case reportwallettb.FieldSubDistrict:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SubDistrict", values[i])
			} else if value.Valid {
				r.SubDistrict = new(string)
				*r.SubDistrict = value.String
			}
		case reportwallettb.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Province", values[i])
			} else if value.Valid {
				r.Province = new(string)
				*r.Province = value.String
			}
		case reportwallettb.FieldPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostalCode", values[i])
			} else if value.Valid {
				r.PostalCode = new(string)
				*r.PostalCode = value.String
			}
		case reportwallettb.FieldIsKYC:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isKYC", values[i])
			} else if value.Valid {
				r.IsKYC = new(string)
				*r.IsKYC = value.String
			}
		case reportwallettb.FieldUpdateDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdateDate", values[i])
			} else if value.Valid {
				r.UpdateDate = new(time.Time)
				*r.UpdateDate = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Reportwallettb.
// Note that you need to call Reportwallettb.Unwrap() before calling this method if this Reportwallettb
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reportwallettb) Update() *ReportwallettbUpdateOne {
	return (&ReportwallettbClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Reportwallettb entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reportwallettb) Unwrap() *Reportwallettb {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reportwallettb is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reportwallettb) String() string {
	var builder strings.Builder
	builder.WriteString("Reportwallettb(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", walletid=")
	builder.WriteString(r.Walletid)
	if v := r.WalletTypeName; v != nil {
		builder.WriteString(", WalletTypeName=")
		builder.WriteString(*v)
	}
	if v := r.WalletPhoneno; v != nil {
		builder.WriteString(", WalletPhoneno=")
		builder.WriteString(*v)
	}
	if v := r.WalletName; v != nil {
		builder.WriteString(", WalletName=")
		builder.WriteString(*v)
	}
	if v := r.CitizenId; v != nil {
		builder.WriteString(", CitizenId=")
		builder.WriteString(*v)
	}
	if v := r.Status; v != nil {
		builder.WriteString(", Status=")
		builder.WriteString(*v)
	}
	if v := r.RegisterDate; v != nil {
		builder.WriteString(", RegisterDate=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := r.GroupUser; v != nil {
		builder.WriteString(", GroupUser=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := r.UserAgent; v != nil {
		builder.WriteString(", UserAgent=")
		builder.WriteString(*v)
	}
	if v := r.KYCDate; v != nil {
		builder.WriteString(", KYC_Date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := r.ATMCard; v != nil {
		builder.WriteString(", ATMCard=")
		builder.WriteString(*v)
	}
	if v := r.AccountNo; v != nil {
		builder.WriteString(", AccountNo=")
		builder.WriteString(*v)
	}
	if v := r.AddressDetail; v != nil {
		builder.WriteString(", AddressDetail=")
		builder.WriteString(*v)
	}
	if v := r.Street; v != nil {
		builder.WriteString(", Street=")
		builder.WriteString(*v)
	}
	if v := r.District; v != nil {
		builder.WriteString(", District=")
		builder.WriteString(*v)
	}
	if v := r.SubDistrict; v != nil {
		builder.WriteString(", SubDistrict=")
		builder.WriteString(*v)
	}
	if v := r.Province; v != nil {
		builder.WriteString(", Province=")
		builder.WriteString(*v)
	}
	if v := r.PostalCode; v != nil {
		builder.WriteString(", PostalCode=")
		builder.WriteString(*v)
	}
	if v := r.IsKYC; v != nil {
		builder.WriteString(", isKYC=")
		builder.WriteString(*v)
	}
	if v := r.UpdateDate; v != nil {
		builder.WriteString(", UpdateDate=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Reportwallettbs is a parsable slice of Reportwallettb.
type Reportwallettbs []*Reportwallettb

func (r Reportwallettbs) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
