// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/pointpendingkyctransaction"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Pointpendingkyctransaction is the model entity for the Pointpendingkyctransaction schema.
type Pointpendingkyctransaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WalletId holds the value of the "WalletId" field.
	WalletId string `json:"WalletId,omitempty"`
	// Point holds the value of the "Point" field.
	Point *int `json:"Point,omitempty"`
	// DateExport holds the value of the "DateExport" field.
	DateExport *time.Time `json:"DateExport,omitempty"`
	// DateGen holds the value of the "DateGen" field.
	DateGen *time.Time `json:"DateGen,omitempty"`
	// Note holds the value of the "Note" field.
	Note *string `json:"Note,omitempty"`
	// StatusExport holds the value of the "StatusExport" field.
	StatusExport bool `json:"StatusExport,omitempty"`
	// KYCDate holds the value of the "KYCDate" field.
	KYCDate *string `json:"KYCDate,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pointpendingkyctransaction) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pointpendingkyctransaction.FieldStatusExport:
			values[i] = &sql.NullBool{}
		case pointpendingkyctransaction.FieldID, pointpendingkyctransaction.FieldPoint:
			values[i] = &sql.NullInt64{}
		case pointpendingkyctransaction.FieldWalletId, pointpendingkyctransaction.FieldNote, pointpendingkyctransaction.FieldKYCDate:
			values[i] = &sql.NullString{}
		case pointpendingkyctransaction.FieldDateExport, pointpendingkyctransaction.FieldDateGen:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pointpendingkyctransaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pointpendingkyctransaction fields.
func (po *Pointpendingkyctransaction) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pointpendingkyctransaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case pointpendingkyctransaction.FieldWalletId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletId", values[i])
			} else if value.Valid {
				po.WalletId = value.String
			}
		case pointpendingkyctransaction.FieldPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Point", values[i])
			} else if value.Valid {
				po.Point = new(int)
				*po.Point = int(value.Int64)
			}
		case pointpendingkyctransaction.FieldDateExport:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DateExport", values[i])
			} else if value.Valid {
				po.DateExport = new(time.Time)
				*po.DateExport = value.Time
			}
		case pointpendingkyctransaction.FieldDateGen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DateGen", values[i])
			} else if value.Valid {
				po.DateGen = new(time.Time)
				*po.DateGen = value.Time
			}
		case pointpendingkyctransaction.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Note", values[i])
			} else if value.Valid {
				po.Note = new(string)
				*po.Note = value.String
			}
		case pointpendingkyctransaction.FieldStatusExport:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field StatusExport", values[i])
			} else if value.Valid {
				po.StatusExport = value.Bool
			}
		case pointpendingkyctransaction.FieldKYCDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field KYCDate", values[i])
			} else if value.Valid {
				po.KYCDate = new(string)
				*po.KYCDate = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Pointpendingkyctransaction.
// Note that you need to call Pointpendingkyctransaction.Unwrap() before calling this method if this Pointpendingkyctransaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Pointpendingkyctransaction) Update() *PointpendingkyctransactionUpdateOne {
	return (&PointpendingkyctransactionClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Pointpendingkyctransaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Pointpendingkyctransaction) Unwrap() *Pointpendingkyctransaction {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pointpendingkyctransaction is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Pointpendingkyctransaction) String() string {
	var builder strings.Builder
	builder.WriteString("Pointpendingkyctransaction(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", WalletId=")
	builder.WriteString(po.WalletId)
	if v := po.Point; v != nil {
		builder.WriteString(", Point=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := po.DateExport; v != nil {
		builder.WriteString(", DateExport=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := po.DateGen; v != nil {
		builder.WriteString(", DateGen=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := po.Note; v != nil {
		builder.WriteString(", Note=")
		builder.WriteString(*v)
	}
	builder.WriteString(", StatusExport=")
	builder.WriteString(fmt.Sprintf("%v", po.StatusExport))
	if v := po.KYCDate; v != nil {
		builder.WriteString(", KYCDate=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Pointpendingkyctransactions is a parsable slice of Pointpendingkyctransaction.
type Pointpendingkyctransactions []*Pointpendingkyctransaction

func (po Pointpendingkyctransactions) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
