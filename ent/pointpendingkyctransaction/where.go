// Code generated by entc, DO NOT EDIT.

package pointpendingkyctransaction

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WalletId applies equality check predicate on the "WalletId" field. It's identical to WalletIdEQ.
func WalletId(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletId), v))
	})
}

// Point applies equality check predicate on the "Point" field. It's identical to PointEQ.
func Point(v int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoint), v))
	})
}

// DateExport applies equality check predicate on the "DateExport" field. It's identical to DateExportEQ.
func DateExport(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateExport), v))
	})
}

// DateGen applies equality check predicate on the "DateGen" field. It's identical to DateGenEQ.
func DateGen(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateGen), v))
	})
}

// Note applies equality check predicate on the "Note" field. It's identical to NoteEQ.
func Note(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// StatusExport applies equality check predicate on the "StatusExport" field. It's identical to StatusExportEQ.
func StatusExport(v bool) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusExport), v))
	})
}

// KYCDate applies equality check predicate on the "KYCDate" field. It's identical to KYCDateEQ.
func KYCDate(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCDate), v))
	})
}

// WalletIdEQ applies the EQ predicate on the "WalletId" field.
func WalletIdEQ(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletId), v))
	})
}

// WalletIdNEQ applies the NEQ predicate on the "WalletId" field.
func WalletIdNEQ(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletId), v))
	})
}

// WalletIdIn applies the In predicate on the "WalletId" field.
func WalletIdIn(vs ...string) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalletId), v...))
	})
}

// WalletIdNotIn applies the NotIn predicate on the "WalletId" field.
func WalletIdNotIn(vs ...string) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalletId), v...))
	})
}

// WalletIdGT applies the GT predicate on the "WalletId" field.
func WalletIdGT(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletId), v))
	})
}

// WalletIdGTE applies the GTE predicate on the "WalletId" field.
func WalletIdGTE(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletId), v))
	})
}

// WalletIdLT applies the LT predicate on the "WalletId" field.
func WalletIdLT(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletId), v))
	})
}

// WalletIdLTE applies the LTE predicate on the "WalletId" field.
func WalletIdLTE(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletId), v))
	})
}

// WalletIdContains applies the Contains predicate on the "WalletId" field.
func WalletIdContains(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletId), v))
	})
}

// WalletIdHasPrefix applies the HasPrefix predicate on the "WalletId" field.
func WalletIdHasPrefix(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletId), v))
	})
}

// WalletIdHasSuffix applies the HasSuffix predicate on the "WalletId" field.
func WalletIdHasSuffix(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletId), v))
	})
}

// WalletIdIsNil applies the IsNil predicate on the "WalletId" field.
func WalletIdIsNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWalletId)))
	})
}

// WalletIdNotNil applies the NotNil predicate on the "WalletId" field.
func WalletIdNotNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWalletId)))
	})
}

// WalletIdEqualFold applies the EqualFold predicate on the "WalletId" field.
func WalletIdEqualFold(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletId), v))
	})
}

// WalletIdContainsFold applies the ContainsFold predicate on the "WalletId" field.
func WalletIdContainsFold(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletId), v))
	})
}

// PointEQ applies the EQ predicate on the "Point" field.
func PointEQ(v int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoint), v))
	})
}

// PointNEQ applies the NEQ predicate on the "Point" field.
func PointNEQ(v int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPoint), v))
	})
}

// PointIn applies the In predicate on the "Point" field.
func PointIn(vs ...int) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPoint), v...))
	})
}

// PointNotIn applies the NotIn predicate on the "Point" field.
func PointNotIn(vs ...int) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPoint), v...))
	})
}

// PointGT applies the GT predicate on the "Point" field.
func PointGT(v int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPoint), v))
	})
}

// PointGTE applies the GTE predicate on the "Point" field.
func PointGTE(v int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPoint), v))
	})
}

// PointLT applies the LT predicate on the "Point" field.
func PointLT(v int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPoint), v))
	})
}

// PointLTE applies the LTE predicate on the "Point" field.
func PointLTE(v int) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPoint), v))
	})
}

// PointIsNil applies the IsNil predicate on the "Point" field.
func PointIsNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPoint)))
	})
}

// PointNotNil applies the NotNil predicate on the "Point" field.
func PointNotNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPoint)))
	})
}

// DateExportEQ applies the EQ predicate on the "DateExport" field.
func DateExportEQ(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateExport), v))
	})
}

// DateExportNEQ applies the NEQ predicate on the "DateExport" field.
func DateExportNEQ(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateExport), v))
	})
}

// DateExportIn applies the In predicate on the "DateExport" field.
func DateExportIn(vs ...time.Time) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateExport), v...))
	})
}

// DateExportNotIn applies the NotIn predicate on the "DateExport" field.
func DateExportNotIn(vs ...time.Time) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateExport), v...))
	})
}

// DateExportGT applies the GT predicate on the "DateExport" field.
func DateExportGT(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateExport), v))
	})
}

// DateExportGTE applies the GTE predicate on the "DateExport" field.
func DateExportGTE(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateExport), v))
	})
}

// DateExportLT applies the LT predicate on the "DateExport" field.
func DateExportLT(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateExport), v))
	})
}

// DateExportLTE applies the LTE predicate on the "DateExport" field.
func DateExportLTE(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateExport), v))
	})
}

// DateExportIsNil applies the IsNil predicate on the "DateExport" field.
func DateExportIsNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateExport)))
	})
}

// DateExportNotNil applies the NotNil predicate on the "DateExport" field.
func DateExportNotNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateExport)))
	})
}

// DateGenEQ applies the EQ predicate on the "DateGen" field.
func DateGenEQ(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateGen), v))
	})
}

// DateGenNEQ applies the NEQ predicate on the "DateGen" field.
func DateGenNEQ(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateGen), v))
	})
}

// DateGenIn applies the In predicate on the "DateGen" field.
func DateGenIn(vs ...time.Time) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateGen), v...))
	})
}

// DateGenNotIn applies the NotIn predicate on the "DateGen" field.
func DateGenNotIn(vs ...time.Time) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateGen), v...))
	})
}

// DateGenGT applies the GT predicate on the "DateGen" field.
func DateGenGT(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateGen), v))
	})
}

// DateGenGTE applies the GTE predicate on the "DateGen" field.
func DateGenGTE(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateGen), v))
	})
}

// DateGenLT applies the LT predicate on the "DateGen" field.
func DateGenLT(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateGen), v))
	})
}

// DateGenLTE applies the LTE predicate on the "DateGen" field.
func DateGenLTE(v time.Time) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateGen), v))
	})
}

// DateGenIsNil applies the IsNil predicate on the "DateGen" field.
func DateGenIsNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateGen)))
	})
}

// DateGenNotNil applies the NotNil predicate on the "DateGen" field.
func DateGenNotNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateGen)))
	})
}

// NoteEQ applies the EQ predicate on the "Note" field.
func NoteEQ(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// NoteNEQ applies the NEQ predicate on the "Note" field.
func NoteNEQ(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNote), v))
	})
}

// NoteIn applies the In predicate on the "Note" field.
func NoteIn(vs ...string) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNote), v...))
	})
}

// NoteNotIn applies the NotIn predicate on the "Note" field.
func NoteNotIn(vs ...string) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNote), v...))
	})
}

// NoteGT applies the GT predicate on the "Note" field.
func NoteGT(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNote), v))
	})
}

// NoteGTE applies the GTE predicate on the "Note" field.
func NoteGTE(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNote), v))
	})
}

// NoteLT applies the LT predicate on the "Note" field.
func NoteLT(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNote), v))
	})
}

// NoteLTE applies the LTE predicate on the "Note" field.
func NoteLTE(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNote), v))
	})
}

// NoteContains applies the Contains predicate on the "Note" field.
func NoteContains(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNote), v))
	})
}

// NoteHasPrefix applies the HasPrefix predicate on the "Note" field.
func NoteHasPrefix(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNote), v))
	})
}

// NoteHasSuffix applies the HasSuffix predicate on the "Note" field.
func NoteHasSuffix(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNote), v))
	})
}

// NoteIsNil applies the IsNil predicate on the "Note" field.
func NoteIsNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNote)))
	})
}

// NoteNotNil applies the NotNil predicate on the "Note" field.
func NoteNotNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNote)))
	})
}

// NoteEqualFold applies the EqualFold predicate on the "Note" field.
func NoteEqualFold(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNote), v))
	})
}

// NoteContainsFold applies the ContainsFold predicate on the "Note" field.
func NoteContainsFold(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNote), v))
	})
}

// StatusExportEQ applies the EQ predicate on the "StatusExport" field.
func StatusExportEQ(v bool) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusExport), v))
	})
}

// StatusExportNEQ applies the NEQ predicate on the "StatusExport" field.
func StatusExportNEQ(v bool) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusExport), v))
	})
}

// StatusExportIsNil applies the IsNil predicate on the "StatusExport" field.
func StatusExportIsNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusExport)))
	})
}

// StatusExportNotNil applies the NotNil predicate on the "StatusExport" field.
func StatusExportNotNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusExport)))
	})
}

// KYCDateEQ applies the EQ predicate on the "KYCDate" field.
func KYCDateEQ(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCDate), v))
	})
}

// KYCDateNEQ applies the NEQ predicate on the "KYCDate" field.
func KYCDateNEQ(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKYCDate), v))
	})
}

// KYCDateIn applies the In predicate on the "KYCDate" field.
func KYCDateIn(vs ...string) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKYCDate), v...))
	})
}

// KYCDateNotIn applies the NotIn predicate on the "KYCDate" field.
func KYCDateNotIn(vs ...string) predicate.Pointpendingkyctransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKYCDate), v...))
	})
}

// KYCDateGT applies the GT predicate on the "KYCDate" field.
func KYCDateGT(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKYCDate), v))
	})
}

// KYCDateGTE applies the GTE predicate on the "KYCDate" field.
func KYCDateGTE(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKYCDate), v))
	})
}

// KYCDateLT applies the LT predicate on the "KYCDate" field.
func KYCDateLT(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKYCDate), v))
	})
}

// KYCDateLTE applies the LTE predicate on the "KYCDate" field.
func KYCDateLTE(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKYCDate), v))
	})
}

// KYCDateContains applies the Contains predicate on the "KYCDate" field.
func KYCDateContains(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKYCDate), v))
	})
}

// KYCDateHasPrefix applies the HasPrefix predicate on the "KYCDate" field.
func KYCDateHasPrefix(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKYCDate), v))
	})
}

// KYCDateHasSuffix applies the HasSuffix predicate on the "KYCDate" field.
func KYCDateHasSuffix(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKYCDate), v))
	})
}

// KYCDateIsNil applies the IsNil predicate on the "KYCDate" field.
func KYCDateIsNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKYCDate)))
	})
}

// KYCDateNotNil applies the NotNil predicate on the "KYCDate" field.
func KYCDateNotNil() predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKYCDate)))
	})
}

// KYCDateEqualFold applies the EqualFold predicate on the "KYCDate" field.
func KYCDateEqualFold(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKYCDate), v))
	})
}

// KYCDateContainsFold applies the ContainsFold predicate on the "KYCDate" field.
func KYCDateContainsFold(v string) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKYCDate), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pointpendingkyctransaction) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pointpendingkyctransaction) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pointpendingkyctransaction) predicate.Pointpendingkyctransaction {
	return predicate.Pointpendingkyctransaction(func(s *sql.Selector) {
		p(s.Not())
	})
}
