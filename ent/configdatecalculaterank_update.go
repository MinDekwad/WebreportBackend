// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/configdatecalculaterank"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigdatecalculaterankUpdate is the builder for updating Configdatecalculaterank entities.
type ConfigdatecalculaterankUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigdatecalculaterankMutation
}

// Where adds a new predicate for the ConfigdatecalculaterankUpdate builder.
func (cu *ConfigdatecalculaterankUpdate) Where(ps ...predicate.Configdatecalculaterank) *ConfigdatecalculaterankUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetRank sets the "Rank" field.
func (cu *ConfigdatecalculaterankUpdate) SetRank(s string) *ConfigdatecalculaterankUpdate {
	cu.mutation.SetRank(s)
	return cu
}

// SetNillableRank sets the "Rank" field if the given value is not nil.
func (cu *ConfigdatecalculaterankUpdate) SetNillableRank(s *string) *ConfigdatecalculaterankUpdate {
	if s != nil {
		cu.SetRank(*s)
	}
	return cu
}

// ClearRank clears the value of the "Rank" field.
func (cu *ConfigdatecalculaterankUpdate) ClearRank() *ConfigdatecalculaterankUpdate {
	cu.mutation.ClearRank()
	return cu
}

// SetNumDateCalculateRank sets the "NumDateCalculateRank" field.
func (cu *ConfigdatecalculaterankUpdate) SetNumDateCalculateRank(i int) *ConfigdatecalculaterankUpdate {
	cu.mutation.ResetNumDateCalculateRank()
	cu.mutation.SetNumDateCalculateRank(i)
	return cu
}

// SetNillableNumDateCalculateRank sets the "NumDateCalculateRank" field if the given value is not nil.
func (cu *ConfigdatecalculaterankUpdate) SetNillableNumDateCalculateRank(i *int) *ConfigdatecalculaterankUpdate {
	if i != nil {
		cu.SetNumDateCalculateRank(*i)
	}
	return cu
}

// AddNumDateCalculateRank adds i to the "NumDateCalculateRank" field.
func (cu *ConfigdatecalculaterankUpdate) AddNumDateCalculateRank(i int) *ConfigdatecalculaterankUpdate {
	cu.mutation.AddNumDateCalculateRank(i)
	return cu
}

// ClearNumDateCalculateRank clears the value of the "NumDateCalculateRank" field.
func (cu *ConfigdatecalculaterankUpdate) ClearNumDateCalculateRank() *ConfigdatecalculaterankUpdate {
	cu.mutation.ClearNumDateCalculateRank()
	return cu
}

// SetNumDateCalculateRankTmp sets the "NumDateCalculateRankTmp" field.
func (cu *ConfigdatecalculaterankUpdate) SetNumDateCalculateRankTmp(s string) *ConfigdatecalculaterankUpdate {
	cu.mutation.SetNumDateCalculateRankTmp(s)
	return cu
}

// SetNillableNumDateCalculateRankTmp sets the "NumDateCalculateRankTmp" field if the given value is not nil.
func (cu *ConfigdatecalculaterankUpdate) SetNillableNumDateCalculateRankTmp(s *string) *ConfigdatecalculaterankUpdate {
	if s != nil {
		cu.SetNumDateCalculateRankTmp(*s)
	}
	return cu
}

// ClearNumDateCalculateRankTmp clears the value of the "NumDateCalculateRankTmp" field.
func (cu *ConfigdatecalculaterankUpdate) ClearNumDateCalculateRankTmp() *ConfigdatecalculaterankUpdate {
	cu.mutation.ClearNumDateCalculateRankTmp()
	return cu
}

// SetUpdateDate sets the "UpdateDate" field.
func (cu *ConfigdatecalculaterankUpdate) SetUpdateDate(t time.Time) *ConfigdatecalculaterankUpdate {
	cu.mutation.SetUpdateDate(t)
	return cu
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (cu *ConfigdatecalculaterankUpdate) SetNillableUpdateDate(t *time.Time) *ConfigdatecalculaterankUpdate {
	if t != nil {
		cu.SetUpdateDate(*t)
	}
	return cu
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (cu *ConfigdatecalculaterankUpdate) ClearUpdateDate() *ConfigdatecalculaterankUpdate {
	cu.mutation.ClearUpdateDate()
	return cu
}

// Mutation returns the ConfigdatecalculaterankMutation object of the builder.
func (cu *ConfigdatecalculaterankUpdate) Mutation() *ConfigdatecalculaterankMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConfigdatecalculaterankUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigdatecalculaterankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConfigdatecalculaterankUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConfigdatecalculaterankUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConfigdatecalculaterankUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConfigdatecalculaterankUpdate) check() error {
	if v, ok := cu.mutation.Rank(); ok {
		if err := configdatecalculaterank.RankValidator(v); err != nil {
			return &ValidationError{Name: "Rank", err: fmt.Errorf("ent: validator failed for field \"Rank\": %w", err)}
		}
	}
	if v, ok := cu.mutation.NumDateCalculateRankTmp(); ok {
		if err := configdatecalculaterank.NumDateCalculateRankTmpValidator(v); err != nil {
			return &ValidationError{Name: "NumDateCalculateRankTmp", err: fmt.Errorf("ent: validator failed for field \"NumDateCalculateRankTmp\": %w", err)}
		}
	}
	return nil
}

func (cu *ConfigdatecalculaterankUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configdatecalculaterank.Table,
			Columns: configdatecalculaterank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configdatecalculaterank.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configdatecalculaterank.FieldRank,
		})
	}
	if cu.mutation.RankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configdatecalculaterank.FieldRank,
		})
	}
	if value, ok := cu.mutation.NumDateCalculateRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configdatecalculaterank.FieldNumDateCalculateRank,
		})
	}
	if value, ok := cu.mutation.AddedNumDateCalculateRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configdatecalculaterank.FieldNumDateCalculateRank,
		})
	}
	if cu.mutation.NumDateCalculateRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: configdatecalculaterank.FieldNumDateCalculateRank,
		})
	}
	if value, ok := cu.mutation.NumDateCalculateRankTmp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configdatecalculaterank.FieldNumDateCalculateRankTmp,
		})
	}
	if cu.mutation.NumDateCalculateRankTmpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configdatecalculaterank.FieldNumDateCalculateRankTmp,
		})
	}
	if value, ok := cu.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configdatecalculaterank.FieldUpdateDate,
		})
	}
	if cu.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: configdatecalculaterank.FieldUpdateDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configdatecalculaterank.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ConfigdatecalculaterankUpdateOne is the builder for updating a single Configdatecalculaterank entity.
type ConfigdatecalculaterankUpdateOne struct {
	config
	hooks    []Hook
	mutation *ConfigdatecalculaterankMutation
}

// SetRank sets the "Rank" field.
func (cuo *ConfigdatecalculaterankUpdateOne) SetRank(s string) *ConfigdatecalculaterankUpdateOne {
	cuo.mutation.SetRank(s)
	return cuo
}

// SetNillableRank sets the "Rank" field if the given value is not nil.
func (cuo *ConfigdatecalculaterankUpdateOne) SetNillableRank(s *string) *ConfigdatecalculaterankUpdateOne {
	if s != nil {
		cuo.SetRank(*s)
	}
	return cuo
}

// ClearRank clears the value of the "Rank" field.
func (cuo *ConfigdatecalculaterankUpdateOne) ClearRank() *ConfigdatecalculaterankUpdateOne {
	cuo.mutation.ClearRank()
	return cuo
}

// SetNumDateCalculateRank sets the "NumDateCalculateRank" field.
func (cuo *ConfigdatecalculaterankUpdateOne) SetNumDateCalculateRank(i int) *ConfigdatecalculaterankUpdateOne {
	cuo.mutation.ResetNumDateCalculateRank()
	cuo.mutation.SetNumDateCalculateRank(i)
	return cuo
}

// SetNillableNumDateCalculateRank sets the "NumDateCalculateRank" field if the given value is not nil.
func (cuo *ConfigdatecalculaterankUpdateOne) SetNillableNumDateCalculateRank(i *int) *ConfigdatecalculaterankUpdateOne {
	if i != nil {
		cuo.SetNumDateCalculateRank(*i)
	}
	return cuo
}

// AddNumDateCalculateRank adds i to the "NumDateCalculateRank" field.
func (cuo *ConfigdatecalculaterankUpdateOne) AddNumDateCalculateRank(i int) *ConfigdatecalculaterankUpdateOne {
	cuo.mutation.AddNumDateCalculateRank(i)
	return cuo
}

// ClearNumDateCalculateRank clears the value of the "NumDateCalculateRank" field.
func (cuo *ConfigdatecalculaterankUpdateOne) ClearNumDateCalculateRank() *ConfigdatecalculaterankUpdateOne {
	cuo.mutation.ClearNumDateCalculateRank()
	return cuo
}

// SetNumDateCalculateRankTmp sets the "NumDateCalculateRankTmp" field.
func (cuo *ConfigdatecalculaterankUpdateOne) SetNumDateCalculateRankTmp(s string) *ConfigdatecalculaterankUpdateOne {
	cuo.mutation.SetNumDateCalculateRankTmp(s)
	return cuo
}

// SetNillableNumDateCalculateRankTmp sets the "NumDateCalculateRankTmp" field if the given value is not nil.
func (cuo *ConfigdatecalculaterankUpdateOne) SetNillableNumDateCalculateRankTmp(s *string) *ConfigdatecalculaterankUpdateOne {
	if s != nil {
		cuo.SetNumDateCalculateRankTmp(*s)
	}
	return cuo
}

// ClearNumDateCalculateRankTmp clears the value of the "NumDateCalculateRankTmp" field.
func (cuo *ConfigdatecalculaterankUpdateOne) ClearNumDateCalculateRankTmp() *ConfigdatecalculaterankUpdateOne {
	cuo.mutation.ClearNumDateCalculateRankTmp()
	return cuo
}

// SetUpdateDate sets the "UpdateDate" field.
func (cuo *ConfigdatecalculaterankUpdateOne) SetUpdateDate(t time.Time) *ConfigdatecalculaterankUpdateOne {
	cuo.mutation.SetUpdateDate(t)
	return cuo
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (cuo *ConfigdatecalculaterankUpdateOne) SetNillableUpdateDate(t *time.Time) *ConfigdatecalculaterankUpdateOne {
	if t != nil {
		cuo.SetUpdateDate(*t)
	}
	return cuo
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (cuo *ConfigdatecalculaterankUpdateOne) ClearUpdateDate() *ConfigdatecalculaterankUpdateOne {
	cuo.mutation.ClearUpdateDate()
	return cuo
}

// Mutation returns the ConfigdatecalculaterankMutation object of the builder.
func (cuo *ConfigdatecalculaterankUpdateOne) Mutation() *ConfigdatecalculaterankMutation {
	return cuo.mutation
}

// Save executes the query and returns the updated Configdatecalculaterank entity.
func (cuo *ConfigdatecalculaterankUpdateOne) Save(ctx context.Context) (*Configdatecalculaterank, error) {
	var (
		err  error
		node *Configdatecalculaterank
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigdatecalculaterankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConfigdatecalculaterankUpdateOne) SaveX(ctx context.Context) *Configdatecalculaterank {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConfigdatecalculaterankUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConfigdatecalculaterankUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConfigdatecalculaterankUpdateOne) check() error {
	if v, ok := cuo.mutation.Rank(); ok {
		if err := configdatecalculaterank.RankValidator(v); err != nil {
			return &ValidationError{Name: "Rank", err: fmt.Errorf("ent: validator failed for field \"Rank\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.NumDateCalculateRankTmp(); ok {
		if err := configdatecalculaterank.NumDateCalculateRankTmpValidator(v); err != nil {
			return &ValidationError{Name: "NumDateCalculateRankTmp", err: fmt.Errorf("ent: validator failed for field \"NumDateCalculateRankTmp\": %w", err)}
		}
	}
	return nil
}

func (cuo *ConfigdatecalculaterankUpdateOne) sqlSave(ctx context.Context) (_node *Configdatecalculaterank, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configdatecalculaterank.Table,
			Columns: configdatecalculaterank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configdatecalculaterank.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Configdatecalculaterank.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configdatecalculaterank.FieldRank,
		})
	}
	if cuo.mutation.RankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configdatecalculaterank.FieldRank,
		})
	}
	if value, ok := cuo.mutation.NumDateCalculateRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configdatecalculaterank.FieldNumDateCalculateRank,
		})
	}
	if value, ok := cuo.mutation.AddedNumDateCalculateRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configdatecalculaterank.FieldNumDateCalculateRank,
		})
	}
	if cuo.mutation.NumDateCalculateRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: configdatecalculaterank.FieldNumDateCalculateRank,
		})
	}
	if value, ok := cuo.mutation.NumDateCalculateRankTmp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configdatecalculaterank.FieldNumDateCalculateRankTmp,
		})
	}
	if cuo.mutation.NumDateCalculateRankTmpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configdatecalculaterank.FieldNumDateCalculateRankTmp,
		})
	}
	if value, ok := cuo.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configdatecalculaterank.FieldUpdateDate,
		})
	}
	if cuo.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: configdatecalculaterank.FieldUpdateDate,
		})
	}
	_node = &Configdatecalculaterank{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configdatecalculaterank.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
