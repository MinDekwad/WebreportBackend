// Code generated by entc, DO NOT EDIT.

package fileimport

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilename), v))
	})
}

// Filetype applies equality check predicate on the "filetype" field. It's identical to FiletypeEQ.
func Filetype(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFiletype), v))
	})
}

// Importdate applies equality check predicate on the "importdate" field. It's identical to ImportdateEQ.
func Importdate(v time.Time) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImportdate), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilename), v))
	})
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilename), v))
	})
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.Fileimport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileimport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilename), v...))
	})
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.Fileimport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileimport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilename), v...))
	})
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilename), v))
	})
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilename), v))
	})
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilename), v))
	})
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilename), v))
	})
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilename), v))
	})
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilename), v))
	})
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilename), v))
	})
}

// FilenameIsNil applies the IsNil predicate on the "filename" field.
func FilenameIsNil() predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFilename)))
	})
}

// FilenameNotNil applies the NotNil predicate on the "filename" field.
func FilenameNotNil() predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFilename)))
	})
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilename), v))
	})
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilename), v))
	})
}

// FiletypeEQ applies the EQ predicate on the "filetype" field.
func FiletypeEQ(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFiletype), v))
	})
}

// FiletypeNEQ applies the NEQ predicate on the "filetype" field.
func FiletypeNEQ(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFiletype), v))
	})
}

// FiletypeIn applies the In predicate on the "filetype" field.
func FiletypeIn(vs ...string) predicate.Fileimport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileimport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFiletype), v...))
	})
}

// FiletypeNotIn applies the NotIn predicate on the "filetype" field.
func FiletypeNotIn(vs ...string) predicate.Fileimport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileimport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFiletype), v...))
	})
}

// FiletypeGT applies the GT predicate on the "filetype" field.
func FiletypeGT(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFiletype), v))
	})
}

// FiletypeGTE applies the GTE predicate on the "filetype" field.
func FiletypeGTE(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFiletype), v))
	})
}

// FiletypeLT applies the LT predicate on the "filetype" field.
func FiletypeLT(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFiletype), v))
	})
}

// FiletypeLTE applies the LTE predicate on the "filetype" field.
func FiletypeLTE(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFiletype), v))
	})
}

// FiletypeContains applies the Contains predicate on the "filetype" field.
func FiletypeContains(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFiletype), v))
	})
}

// FiletypeHasPrefix applies the HasPrefix predicate on the "filetype" field.
func FiletypeHasPrefix(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFiletype), v))
	})
}

// FiletypeHasSuffix applies the HasSuffix predicate on the "filetype" field.
func FiletypeHasSuffix(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFiletype), v))
	})
}

// FiletypeIsNil applies the IsNil predicate on the "filetype" field.
func FiletypeIsNil() predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFiletype)))
	})
}

// FiletypeNotNil applies the NotNil predicate on the "filetype" field.
func FiletypeNotNil() predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFiletype)))
	})
}

// FiletypeEqualFold applies the EqualFold predicate on the "filetype" field.
func FiletypeEqualFold(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFiletype), v))
	})
}

// FiletypeContainsFold applies the ContainsFold predicate on the "filetype" field.
func FiletypeContainsFold(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFiletype), v))
	})
}

// ImportdateEQ applies the EQ predicate on the "importdate" field.
func ImportdateEQ(v time.Time) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImportdate), v))
	})
}

// ImportdateNEQ applies the NEQ predicate on the "importdate" field.
func ImportdateNEQ(v time.Time) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImportdate), v))
	})
}

// ImportdateIn applies the In predicate on the "importdate" field.
func ImportdateIn(vs ...time.Time) predicate.Fileimport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileimport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImportdate), v...))
	})
}

// ImportdateNotIn applies the NotIn predicate on the "importdate" field.
func ImportdateNotIn(vs ...time.Time) predicate.Fileimport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileimport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImportdate), v...))
	})
}

// ImportdateGT applies the GT predicate on the "importdate" field.
func ImportdateGT(v time.Time) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImportdate), v))
	})
}

// ImportdateGTE applies the GTE predicate on the "importdate" field.
func ImportdateGTE(v time.Time) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImportdate), v))
	})
}

// ImportdateLT applies the LT predicate on the "importdate" field.
func ImportdateLT(v time.Time) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImportdate), v))
	})
}

// ImportdateLTE applies the LTE predicate on the "importdate" field.
func ImportdateLTE(v time.Time) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImportdate), v))
	})
}

// ImportdateIsNil applies the IsNil predicate on the "importdate" field.
func ImportdateIsNil() predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImportdate)))
	})
}

// ImportdateNotNil applies the NotNil predicate on the "importdate" field.
func ImportdateNotNil() predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImportdate)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Fileimport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileimport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Fileimport {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fileimport(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Fileimport) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Fileimport) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Fileimport) predicate.Fileimport {
	return predicate.Fileimport(func(s *sql.Selector) {
		p(s.Not())
	})
}
