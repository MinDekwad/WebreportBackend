// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/watchlist"
	"go-api-report2/ent/watchlisttype"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WatchlisttypeUpdate is the builder for updating Watchlisttype entities.
type WatchlisttypeUpdate struct {
	config
	hooks    []Hook
	mutation *WatchlisttypeMutation
}

// Where adds a new predicate for the WatchlisttypeUpdate builder.
func (wu *WatchlisttypeUpdate) Where(ps ...predicate.Watchlisttype) *WatchlisttypeUpdate {
	wu.mutation.predicates = append(wu.mutation.predicates, ps...)
	return wu
}

// SetTypeID sets the "TypeID" field.
func (wu *WatchlisttypeUpdate) SetTypeID(i int) *WatchlisttypeUpdate {
	wu.mutation.ResetTypeID()
	wu.mutation.SetTypeID(i)
	return wu
}

// SetNillableTypeID sets the "TypeID" field if the given value is not nil.
func (wu *WatchlisttypeUpdate) SetNillableTypeID(i *int) *WatchlisttypeUpdate {
	if i != nil {
		wu.SetTypeID(*i)
	}
	return wu
}

// AddTypeID adds i to the "TypeID" field.
func (wu *WatchlisttypeUpdate) AddTypeID(i int) *WatchlisttypeUpdate {
	wu.mutation.AddTypeID(i)
	return wu
}

// ClearTypeID clears the value of the "TypeID" field.
func (wu *WatchlisttypeUpdate) ClearTypeID() *WatchlisttypeUpdate {
	wu.mutation.ClearTypeID()
	return wu
}

// SetTypeName sets the "TypeName" field.
func (wu *WatchlisttypeUpdate) SetTypeName(s string) *WatchlisttypeUpdate {
	wu.mutation.SetTypeName(s)
	return wu
}

// SetTypeDescription sets the "TypeDescription" field.
func (wu *WatchlisttypeUpdate) SetTypeDescription(s string) *WatchlisttypeUpdate {
	wu.mutation.SetTypeDescription(s)
	return wu
}

// AddWatchlistIDs adds the "watchlist" edge to the Watchlist entity by IDs.
func (wu *WatchlisttypeUpdate) AddWatchlistIDs(ids ...int) *WatchlisttypeUpdate {
	wu.mutation.AddWatchlistIDs(ids...)
	return wu
}

// AddWatchlist adds the "watchlist" edges to the Watchlist entity.
func (wu *WatchlisttypeUpdate) AddWatchlist(w ...*Watchlist) *WatchlisttypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWatchlistIDs(ids...)
}

// Mutation returns the WatchlisttypeMutation object of the builder.
func (wu *WatchlisttypeUpdate) Mutation() *WatchlisttypeMutation {
	return wu.mutation
}

// ClearWatchlist clears all "watchlist" edges to the Watchlist entity.
func (wu *WatchlisttypeUpdate) ClearWatchlist() *WatchlisttypeUpdate {
	wu.mutation.ClearWatchlist()
	return wu
}

// RemoveWatchlistIDs removes the "watchlist" edge to Watchlist entities by IDs.
func (wu *WatchlisttypeUpdate) RemoveWatchlistIDs(ids ...int) *WatchlisttypeUpdate {
	wu.mutation.RemoveWatchlistIDs(ids...)
	return wu
}

// RemoveWatchlist removes "watchlist" edges to Watchlist entities.
func (wu *WatchlisttypeUpdate) RemoveWatchlist(w ...*Watchlist) *WatchlisttypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWatchlistIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WatchlisttypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		if err = wu.check(); err != nil {
			return 0, err
		}
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WatchlisttypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wu.check(); err != nil {
				return 0, err
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WatchlisttypeUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WatchlisttypeUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WatchlisttypeUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WatchlisttypeUpdate) check() error {
	if v, ok := wu.mutation.TypeName(); ok {
		if err := watchlisttype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "TypeName", err: fmt.Errorf("ent: validator failed for field \"TypeName\": %w", err)}
		}
	}
	if v, ok := wu.mutation.TypeDescription(); ok {
		if err := watchlisttype.TypeDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "TypeDescription", err: fmt.Errorf("ent: validator failed for field \"TypeDescription\": %w", err)}
		}
	}
	return nil
}

func (wu *WatchlisttypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   watchlisttype.Table,
			Columns: watchlisttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: watchlisttype.FieldID,
			},
		},
	}
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisttype.FieldTypeID,
		})
	}
	if value, ok := wu.mutation.AddedTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisttype.FieldTypeID,
		})
	}
	if wu.mutation.TypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: watchlisttype.FieldTypeID,
		})
	}
	if value, ok := wu.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisttype.FieldTypeName,
		})
	}
	if value, ok := wu.mutation.TypeDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisttype.FieldTypeDescription,
		})
	}
	if wu.mutation.WatchlistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   watchlisttype.WatchlistTable,
			Columns: []string{watchlisttype.WatchlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWatchlistIDs(); len(nodes) > 0 && !wu.mutation.WatchlistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   watchlisttype.WatchlistTable,
			Columns: []string{watchlisttype.WatchlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WatchlistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   watchlisttype.WatchlistTable,
			Columns: []string{watchlisttype.WatchlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{watchlisttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WatchlisttypeUpdateOne is the builder for updating a single Watchlisttype entity.
type WatchlisttypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *WatchlisttypeMutation
}

// SetTypeID sets the "TypeID" field.
func (wuo *WatchlisttypeUpdateOne) SetTypeID(i int) *WatchlisttypeUpdateOne {
	wuo.mutation.ResetTypeID()
	wuo.mutation.SetTypeID(i)
	return wuo
}

// SetNillableTypeID sets the "TypeID" field if the given value is not nil.
func (wuo *WatchlisttypeUpdateOne) SetNillableTypeID(i *int) *WatchlisttypeUpdateOne {
	if i != nil {
		wuo.SetTypeID(*i)
	}
	return wuo
}

// AddTypeID adds i to the "TypeID" field.
func (wuo *WatchlisttypeUpdateOne) AddTypeID(i int) *WatchlisttypeUpdateOne {
	wuo.mutation.AddTypeID(i)
	return wuo
}

// ClearTypeID clears the value of the "TypeID" field.
func (wuo *WatchlisttypeUpdateOne) ClearTypeID() *WatchlisttypeUpdateOne {
	wuo.mutation.ClearTypeID()
	return wuo
}

// SetTypeName sets the "TypeName" field.
func (wuo *WatchlisttypeUpdateOne) SetTypeName(s string) *WatchlisttypeUpdateOne {
	wuo.mutation.SetTypeName(s)
	return wuo
}

// SetTypeDescription sets the "TypeDescription" field.
func (wuo *WatchlisttypeUpdateOne) SetTypeDescription(s string) *WatchlisttypeUpdateOne {
	wuo.mutation.SetTypeDescription(s)
	return wuo
}

// AddWatchlistIDs adds the "watchlist" edge to the Watchlist entity by IDs.
func (wuo *WatchlisttypeUpdateOne) AddWatchlistIDs(ids ...int) *WatchlisttypeUpdateOne {
	wuo.mutation.AddWatchlistIDs(ids...)
	return wuo
}

// AddWatchlist adds the "watchlist" edges to the Watchlist entity.
func (wuo *WatchlisttypeUpdateOne) AddWatchlist(w ...*Watchlist) *WatchlisttypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWatchlistIDs(ids...)
}

// Mutation returns the WatchlisttypeMutation object of the builder.
func (wuo *WatchlisttypeUpdateOne) Mutation() *WatchlisttypeMutation {
	return wuo.mutation
}

// ClearWatchlist clears all "watchlist" edges to the Watchlist entity.
func (wuo *WatchlisttypeUpdateOne) ClearWatchlist() *WatchlisttypeUpdateOne {
	wuo.mutation.ClearWatchlist()
	return wuo
}

// RemoveWatchlistIDs removes the "watchlist" edge to Watchlist entities by IDs.
func (wuo *WatchlisttypeUpdateOne) RemoveWatchlistIDs(ids ...int) *WatchlisttypeUpdateOne {
	wuo.mutation.RemoveWatchlistIDs(ids...)
	return wuo
}

// RemoveWatchlist removes "watchlist" edges to Watchlist entities.
func (wuo *WatchlisttypeUpdateOne) RemoveWatchlist(w ...*Watchlist) *WatchlisttypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWatchlistIDs(ids...)
}

// Save executes the query and returns the updated Watchlisttype entity.
func (wuo *WatchlisttypeUpdateOne) Save(ctx context.Context) (*Watchlisttype, error) {
	var (
		err  error
		node *Watchlisttype
	)
	if len(wuo.hooks) == 0 {
		if err = wuo.check(); err != nil {
			return nil, err
		}
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WatchlisttypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wuo.check(); err != nil {
				return nil, err
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			mut = wuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WatchlisttypeUpdateOne) SaveX(ctx context.Context) *Watchlisttype {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WatchlisttypeUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WatchlisttypeUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WatchlisttypeUpdateOne) check() error {
	if v, ok := wuo.mutation.TypeName(); ok {
		if err := watchlisttype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "TypeName", err: fmt.Errorf("ent: validator failed for field \"TypeName\": %w", err)}
		}
	}
	if v, ok := wuo.mutation.TypeDescription(); ok {
		if err := watchlisttype.TypeDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "TypeDescription", err: fmt.Errorf("ent: validator failed for field \"TypeDescription\": %w", err)}
		}
	}
	return nil
}

func (wuo *WatchlisttypeUpdateOne) sqlSave(ctx context.Context) (_node *Watchlisttype, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   watchlisttype.Table,
			Columns: watchlisttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: watchlisttype.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Watchlisttype.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisttype.FieldTypeID,
		})
	}
	if value, ok := wuo.mutation.AddedTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisttype.FieldTypeID,
		})
	}
	if wuo.mutation.TypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: watchlisttype.FieldTypeID,
		})
	}
	if value, ok := wuo.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisttype.FieldTypeName,
		})
	}
	if value, ok := wuo.mutation.TypeDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisttype.FieldTypeDescription,
		})
	}
	if wuo.mutation.WatchlistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   watchlisttype.WatchlistTable,
			Columns: []string{watchlisttype.WatchlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWatchlistIDs(); len(nodes) > 0 && !wuo.mutation.WatchlistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   watchlisttype.WatchlistTable,
			Columns: []string{watchlisttype.WatchlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WatchlistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   watchlisttype.WatchlistTable,
			Columns: []string{watchlisttype.WatchlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Watchlisttype{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{watchlisttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
