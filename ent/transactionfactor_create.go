// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/transactionfactor"
	"go-api-report2/ent/transactionfactorhistory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionfactorCreate is the builder for creating a Transactionfactor entity.
type TransactionfactorCreate struct {
	config
	mutation *TransactionfactorMutation
	hooks    []Hook
}

// SetTransactionFactorName sets the "TransactionFactorName" field.
func (tc *TransactionfactorCreate) SetTransactionFactorName(s string) *TransactionfactorCreate {
	tc.mutation.SetTransactionFactorName(s)
	return tc
}

// SetNillableTransactionFactorName sets the "TransactionFactorName" field if the given value is not nil.
func (tc *TransactionfactorCreate) SetNillableTransactionFactorName(s *string) *TransactionfactorCreate {
	if s != nil {
		tc.SetTransactionFactorName(*s)
	}
	return tc
}

// SetTransactionType sets the "TransactionType" field.
func (tc *TransactionfactorCreate) SetTransactionType(s string) *TransactionfactorCreate {
	tc.mutation.SetTransactionType(s)
	return tc
}

// SetNillableTransactionType sets the "TransactionType" field if the given value is not nil.
func (tc *TransactionfactorCreate) SetNillableTransactionType(s *string) *TransactionfactorCreate {
	if s != nil {
		tc.SetTransactionType(*s)
	}
	return tc
}

// SetPaymentChannel sets the "PaymentChannel" field.
func (tc *TransactionfactorCreate) SetPaymentChannel(s string) *TransactionfactorCreate {
	tc.mutation.SetPaymentChannel(s)
	return tc
}

// SetNillablePaymentChannel sets the "PaymentChannel" field if the given value is not nil.
func (tc *TransactionfactorCreate) SetNillablePaymentChannel(s *string) *TransactionfactorCreate {
	if s != nil {
		tc.SetPaymentChannel(*s)
	}
	return tc
}

// SetPaymentType sets the "PaymentType" field.
func (tc *TransactionfactorCreate) SetPaymentType(s string) *TransactionfactorCreate {
	tc.mutation.SetPaymentType(s)
	return tc
}

// SetNillablePaymentType sets the "PaymentType" field if the given value is not nil.
func (tc *TransactionfactorCreate) SetNillablePaymentType(s *string) *TransactionfactorCreate {
	if s != nil {
		tc.SetPaymentType(*s)
	}
	return tc
}

// SetNumDay sets the "NumDay" field.
func (tc *TransactionfactorCreate) SetNumDay(i int) *TransactionfactorCreate {
	tc.mutation.SetNumDay(i)
	return tc
}

// SetNillableNumDay sets the "NumDay" field if the given value is not nil.
func (tc *TransactionfactorCreate) SetNillableNumDay(i *int) *TransactionfactorCreate {
	if i != nil {
		tc.SetNumDay(*i)
	}
	return tc
}

// SetDate sets the "Date" field.
func (tc *TransactionfactorCreate) SetDate(s string) *TransactionfactorCreate {
	tc.mutation.SetDate(s)
	return tc
}

// SetNillableDate sets the "Date" field if the given value is not nil.
func (tc *TransactionfactorCreate) SetNillableDate(s *string) *TransactionfactorCreate {
	if s != nil {
		tc.SetDate(*s)
	}
	return tc
}

// SetUpdateDate sets the "UpdateDate" field.
func (tc *TransactionfactorCreate) SetUpdateDate(t time.Time) *TransactionfactorCreate {
	tc.mutation.SetUpdateDate(t)
	return tc
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (tc *TransactionfactorCreate) SetNillableUpdateDate(t *time.Time) *TransactionfactorCreate {
	if t != nil {
		tc.SetUpdateDate(*t)
	}
	return tc
}

// SetStatusApprove sets the "StatusApprove" field.
func (tc *TransactionfactorCreate) SetStatusApprove(s string) *TransactionfactorCreate {
	tc.mutation.SetStatusApprove(s)
	return tc
}

// SetNillableStatusApprove sets the "StatusApprove" field if the given value is not nil.
func (tc *TransactionfactorCreate) SetNillableStatusApprove(s *string) *TransactionfactorCreate {
	if s != nil {
		tc.SetStatusApprove(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransactionfactorCreate) SetID(i int) *TransactionfactorCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TransactionfactorCreate) SetNillableID(i *int) *TransactionfactorCreate {
	if i != nil {
		tc.SetID(*i)
	}
	return tc
}

// AddTransactionhistoryIDs adds the "transactionhistory" edge to the Transactionfactorhistory entity by IDs.
func (tc *TransactionfactorCreate) AddTransactionhistoryIDs(ids ...int) *TransactionfactorCreate {
	tc.mutation.AddTransactionhistoryIDs(ids...)
	return tc
}

// AddTransactionhistory adds the "transactionhistory" edges to the Transactionfactorhistory entity.
func (tc *TransactionfactorCreate) AddTransactionhistory(t ...*Transactionfactorhistory) *TransactionfactorCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTransactionhistoryIDs(ids...)
}

// Mutation returns the TransactionfactorMutation object of the builder.
func (tc *TransactionfactorCreate) Mutation() *TransactionfactorMutation {
	return tc.mutation
}

// Save creates the Transactionfactor in the database.
func (tc *TransactionfactorCreate) Save(ctx context.Context) (*Transactionfactor, error) {
	var (
		err  error
		node *Transactionfactor
	)
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionfactorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionfactorCreate) SaveX(ctx context.Context) *Transactionfactor {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionfactorCreate) check() error {
	if v, ok := tc.mutation.TransactionFactorName(); ok {
		if err := transactionfactor.TransactionFactorNameValidator(v); err != nil {
			return &ValidationError{Name: "TransactionFactorName", err: fmt.Errorf("ent: validator failed for field \"TransactionFactorName\": %w", err)}
		}
	}
	if v, ok := tc.mutation.TransactionType(); ok {
		if err := transactionfactor.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "TransactionType", err: fmt.Errorf("ent: validator failed for field \"TransactionType\": %w", err)}
		}
	}
	if v, ok := tc.mutation.PaymentChannel(); ok {
		if err := transactionfactor.PaymentChannelValidator(v); err != nil {
			return &ValidationError{Name: "PaymentChannel", err: fmt.Errorf("ent: validator failed for field \"PaymentChannel\": %w", err)}
		}
	}
	if v, ok := tc.mutation.PaymentType(); ok {
		if err := transactionfactor.PaymentTypeValidator(v); err != nil {
			return &ValidationError{Name: "PaymentType", err: fmt.Errorf("ent: validator failed for field \"PaymentType\": %w", err)}
		}
	}
	if v, ok := tc.mutation.Date(); ok {
		if err := transactionfactor.DateValidator(v); err != nil {
			return &ValidationError{Name: "Date", err: fmt.Errorf("ent: validator failed for field \"Date\": %w", err)}
		}
	}
	if v, ok := tc.mutation.StatusApprove(); ok {
		if err := transactionfactor.StatusApproveValidator(v); err != nil {
			return &ValidationError{Name: "StatusApprove", err: fmt.Errorf("ent: validator failed for field \"StatusApprove\": %w", err)}
		}
	}
	return nil
}

func (tc *TransactionfactorCreate) sqlSave(ctx context.Context) (*Transactionfactor, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (tc *TransactionfactorCreate) createSpec() (*Transactionfactor, *sqlgraph.CreateSpec) {
	var (
		_node = &Transactionfactor{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transactionfactor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transactionfactor.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.TransactionFactorName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactionfactor.FieldTransactionFactorName,
		})
		_node.TransactionFactorName = value
	}
	if value, ok := tc.mutation.TransactionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactionfactor.FieldTransactionType,
		})
		_node.TransactionType = value
	}
	if value, ok := tc.mutation.PaymentChannel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactionfactor.FieldPaymentChannel,
		})
		_node.PaymentChannel = value
	}
	if value, ok := tc.mutation.PaymentType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactionfactor.FieldPaymentType,
		})
		_node.PaymentType = value
	}
	if value, ok := tc.mutation.NumDay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transactionfactor.FieldNumDay,
		})
		_node.NumDay = value
	}
	if value, ok := tc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactionfactor.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := tc.mutation.UpdateDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transactionfactor.FieldUpdateDate,
		})
		_node.UpdateDate = value
	}
	if value, ok := tc.mutation.StatusApprove(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactionfactor.FieldStatusApprove,
		})
		_node.StatusApprove = value
	}
	if nodes := tc.mutation.TransactionhistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transactionfactor.TransactionhistoryTable,
			Columns: []string{transactionfactor.TransactionhistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactionfactorhistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionfactorCreateBulk is the builder for creating many Transactionfactor entities in bulk.
type TransactionfactorCreateBulk struct {
	config
	builders []*TransactionfactorCreate
}

// Save creates the Transactionfactor entities in the database.
func (tcb *TransactionfactorCreateBulk) Save(ctx context.Context) ([]*Transactionfactor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transactionfactor, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionfactorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionfactorCreateBulk) SaveX(ctx context.Context) []*Transactionfactor {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
