// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/merchanttransaction"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MerchantTransactionUpdate is the builder for updating MerchantTransaction entities.
type MerchantTransactionUpdate struct {
	config
	hooks    []Hook
	mutation *MerchantTransactionMutation
}

// Where adds a new predicate for the MerchantTransactionUpdate builder.
func (mtu *MerchantTransactionUpdate) Where(ps ...predicate.MerchantTransaction) *MerchantTransactionUpdate {
	mtu.mutation.predicates = append(mtu.mutation.predicates, ps...)
	return mtu
}

// SetTransactionID sets the "transaction_id" field.
func (mtu *MerchantTransactionUpdate) SetTransactionID(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetTransactionID(s)
	return mtu
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableTransactionID(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetTransactionID(*s)
	}
	return mtu
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (mtu *MerchantTransactionUpdate) ClearTransactionID() *MerchantTransactionUpdate {
	mtu.mutation.ClearTransactionID()
	return mtu
}

// SetDateTime sets the "dateTime" field.
func (mtu *MerchantTransactionUpdate) SetDateTime(t time.Time) *MerchantTransactionUpdate {
	mtu.mutation.SetDateTime(t)
	return mtu
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableDateTime(t *time.Time) *MerchantTransactionUpdate {
	if t != nil {
		mtu.SetDateTime(*t)
	}
	return mtu
}

// ClearDateTime clears the value of the "dateTime" field.
func (mtu *MerchantTransactionUpdate) ClearDateTime() *MerchantTransactionUpdate {
	mtu.mutation.ClearDateTime()
	return mtu
}

// SetAmount sets the "amount" field.
func (mtu *MerchantTransactionUpdate) SetAmount(f float64) *MerchantTransactionUpdate {
	mtu.mutation.ResetAmount()
	mtu.mutation.SetAmount(f)
	return mtu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableAmount(f *float64) *MerchantTransactionUpdate {
	if f != nil {
		mtu.SetAmount(*f)
	}
	return mtu
}

// AddAmount adds f to the "amount" field.
func (mtu *MerchantTransactionUpdate) AddAmount(f float64) *MerchantTransactionUpdate {
	mtu.mutation.AddAmount(f)
	return mtu
}

// ClearAmount clears the value of the "amount" field.
func (mtu *MerchantTransactionUpdate) ClearAmount() *MerchantTransactionUpdate {
	mtu.mutation.ClearAmount()
	return mtu
}

// SetPaymentType sets the "PaymentType" field.
func (mtu *MerchantTransactionUpdate) SetPaymentType(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetPaymentType(s)
	return mtu
}

// SetNillablePaymentType sets the "PaymentType" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillablePaymentType(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetPaymentType(*s)
	}
	return mtu
}

// ClearPaymentType clears the value of the "PaymentType" field.
func (mtu *MerchantTransactionUpdate) ClearPaymentType() *MerchantTransactionUpdate {
	mtu.mutation.ClearPaymentType()
	return mtu
}

// SetPaymentChannel sets the "PaymentChannel" field.
func (mtu *MerchantTransactionUpdate) SetPaymentChannel(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetPaymentChannel(s)
	return mtu
}

// SetNillablePaymentChannel sets the "PaymentChannel" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillablePaymentChannel(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetPaymentChannel(*s)
	}
	return mtu
}

// ClearPaymentChannel clears the value of the "PaymentChannel" field.
func (mtu *MerchantTransactionUpdate) ClearPaymentChannel() *MerchantTransactionUpdate {
	mtu.mutation.ClearPaymentChannel()
	return mtu
}

// SetStatus sets the "Status" field.
func (mtu *MerchantTransactionUpdate) SetStatus(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetStatus(s)
	return mtu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableStatus(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetStatus(*s)
	}
	return mtu
}

// ClearStatus clears the value of the "Status" field.
func (mtu *MerchantTransactionUpdate) ClearStatus() *MerchantTransactionUpdate {
	mtu.mutation.ClearStatus()
	return mtu
}

// SetMerchantID sets the "MerchantID" field.
func (mtu *MerchantTransactionUpdate) SetMerchantID(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetMerchantID(s)
	return mtu
}

// SetNillableMerchantID sets the "MerchantID" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableMerchantID(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetMerchantID(*s)
	}
	return mtu
}

// ClearMerchantID clears the value of the "MerchantID" field.
func (mtu *MerchantTransactionUpdate) ClearMerchantID() *MerchantTransactionUpdate {
	mtu.mutation.ClearMerchantID()
	return mtu
}

// SetTerminalID sets the "TerminalID" field.
func (mtu *MerchantTransactionUpdate) SetTerminalID(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetTerminalID(s)
	return mtu
}

// SetNillableTerminalID sets the "TerminalID" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableTerminalID(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetTerminalID(*s)
	}
	return mtu
}

// ClearTerminalID clears the value of the "TerminalID" field.
func (mtu *MerchantTransactionUpdate) ClearTerminalID() *MerchantTransactionUpdate {
	mtu.mutation.ClearTerminalID()
	return mtu
}

// SetMerchantFullName sets the "MerchantFullName" field.
func (mtu *MerchantTransactionUpdate) SetMerchantFullName(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetMerchantFullName(s)
	return mtu
}

// SetNillableMerchantFullName sets the "MerchantFullName" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableMerchantFullName(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetMerchantFullName(*s)
	}
	return mtu
}

// ClearMerchantFullName clears the value of the "MerchantFullName" field.
func (mtu *MerchantTransactionUpdate) ClearMerchantFullName() *MerchantTransactionUpdate {
	mtu.mutation.ClearMerchantFullName()
	return mtu
}

// SetFromAccount sets the "FromAccount" field.
func (mtu *MerchantTransactionUpdate) SetFromAccount(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetFromAccount(s)
	return mtu
}

// SetNillableFromAccount sets the "FromAccount" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableFromAccount(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetFromAccount(*s)
	}
	return mtu
}

// ClearFromAccount clears the value of the "FromAccount" field.
func (mtu *MerchantTransactionUpdate) ClearFromAccount() *MerchantTransactionUpdate {
	mtu.mutation.ClearFromAccount()
	return mtu
}

// SetSettlementAccount sets the "SettlementAccount" field.
func (mtu *MerchantTransactionUpdate) SetSettlementAccount(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetSettlementAccount(s)
	return mtu
}

// SetNillableSettlementAccount sets the "SettlementAccount" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableSettlementAccount(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetSettlementAccount(*s)
	}
	return mtu
}

// ClearSettlementAccount clears the value of the "SettlementAccount" field.
func (mtu *MerchantTransactionUpdate) ClearSettlementAccount() *MerchantTransactionUpdate {
	mtu.mutation.ClearSettlementAccount()
	return mtu
}

// SetMDRFEETHB sets the "MDR_FEETHB" field.
func (mtu *MerchantTransactionUpdate) SetMDRFEETHB(f float64) *MerchantTransactionUpdate {
	mtu.mutation.ResetMDRFEETHB()
	mtu.mutation.SetMDRFEETHB(f)
	return mtu
}

// SetNillableMDRFEETHB sets the "MDR_FEETHB" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableMDRFEETHB(f *float64) *MerchantTransactionUpdate {
	if f != nil {
		mtu.SetMDRFEETHB(*f)
	}
	return mtu
}

// AddMDRFEETHB adds f to the "MDR_FEETHB" field.
func (mtu *MerchantTransactionUpdate) AddMDRFEETHB(f float64) *MerchantTransactionUpdate {
	mtu.mutation.AddMDRFEETHB(f)
	return mtu
}

// ClearMDRFEETHB clears the value of the "MDR_FEETHB" field.
func (mtu *MerchantTransactionUpdate) ClearMDRFEETHB() *MerchantTransactionUpdate {
	mtu.mutation.ClearMDRFEETHB()
	return mtu
}

// SetTransactionFEETHB sets the "TransactionFEETHB" field.
func (mtu *MerchantTransactionUpdate) SetTransactionFEETHB(f float64) *MerchantTransactionUpdate {
	mtu.mutation.ResetTransactionFEETHB()
	mtu.mutation.SetTransactionFEETHB(f)
	return mtu
}

// SetNillableTransactionFEETHB sets the "TransactionFEETHB" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableTransactionFEETHB(f *float64) *MerchantTransactionUpdate {
	if f != nil {
		mtu.SetTransactionFEETHB(*f)
	}
	return mtu
}

// AddTransactionFEETHB adds f to the "TransactionFEETHB" field.
func (mtu *MerchantTransactionUpdate) AddTransactionFEETHB(f float64) *MerchantTransactionUpdate {
	mtu.mutation.AddTransactionFEETHB(f)
	return mtu
}

// ClearTransactionFEETHB clears the value of the "TransactionFEETHB" field.
func (mtu *MerchantTransactionUpdate) ClearTransactionFEETHB() *MerchantTransactionUpdate {
	mtu.mutation.ClearTransactionFEETHB()
	return mtu
}

// SetTotalFeeincVAT sets the "TotalFeeincVAT" field.
func (mtu *MerchantTransactionUpdate) SetTotalFeeincVAT(f float64) *MerchantTransactionUpdate {
	mtu.mutation.ResetTotalFeeincVAT()
	mtu.mutation.SetTotalFeeincVAT(f)
	return mtu
}

// SetNillableTotalFeeincVAT sets the "TotalFeeincVAT" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableTotalFeeincVAT(f *float64) *MerchantTransactionUpdate {
	if f != nil {
		mtu.SetTotalFeeincVAT(*f)
	}
	return mtu
}

// AddTotalFeeincVAT adds f to the "TotalFeeincVAT" field.
func (mtu *MerchantTransactionUpdate) AddTotalFeeincVAT(f float64) *MerchantTransactionUpdate {
	mtu.mutation.AddTotalFeeincVAT(f)
	return mtu
}

// ClearTotalFeeincVAT clears the value of the "TotalFeeincVAT" field.
func (mtu *MerchantTransactionUpdate) ClearTotalFeeincVAT() *MerchantTransactionUpdate {
	mtu.mutation.ClearTotalFeeincVAT()
	return mtu
}

// SetVATTHB sets the "VATTHB" field.
func (mtu *MerchantTransactionUpdate) SetVATTHB(f float64) *MerchantTransactionUpdate {
	mtu.mutation.ResetVATTHB()
	mtu.mutation.SetVATTHB(f)
	return mtu
}

// SetNillableVATTHB sets the "VATTHB" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableVATTHB(f *float64) *MerchantTransactionUpdate {
	if f != nil {
		mtu.SetVATTHB(*f)
	}
	return mtu
}

// AddVATTHB adds f to the "VATTHB" field.
func (mtu *MerchantTransactionUpdate) AddVATTHB(f float64) *MerchantTransactionUpdate {
	mtu.mutation.AddVATTHB(f)
	return mtu
}

// ClearVATTHB clears the value of the "VATTHB" field.
func (mtu *MerchantTransactionUpdate) ClearVATTHB() *MerchantTransactionUpdate {
	mtu.mutation.ClearVATTHB()
	return mtu
}

// SetTotalFeeExcVAT sets the "TotalFeeExcVAT" field.
func (mtu *MerchantTransactionUpdate) SetTotalFeeExcVAT(f float64) *MerchantTransactionUpdate {
	mtu.mutation.ResetTotalFeeExcVAT()
	mtu.mutation.SetTotalFeeExcVAT(f)
	return mtu
}

// SetNillableTotalFeeExcVAT sets the "TotalFeeExcVAT" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableTotalFeeExcVAT(f *float64) *MerchantTransactionUpdate {
	if f != nil {
		mtu.SetTotalFeeExcVAT(*f)
	}
	return mtu
}

// AddTotalFeeExcVAT adds f to the "TotalFeeExcVAT" field.
func (mtu *MerchantTransactionUpdate) AddTotalFeeExcVAT(f float64) *MerchantTransactionUpdate {
	mtu.mutation.AddTotalFeeExcVAT(f)
	return mtu
}

// ClearTotalFeeExcVAT clears the value of the "TotalFeeExcVAT" field.
func (mtu *MerchantTransactionUpdate) ClearTotalFeeExcVAT() *MerchantTransactionUpdate {
	mtu.mutation.ClearTotalFeeExcVAT()
	return mtu
}

// SetWHTTHB sets the "WHTTHB" field.
func (mtu *MerchantTransactionUpdate) SetWHTTHB(f float64) *MerchantTransactionUpdate {
	mtu.mutation.ResetWHTTHB()
	mtu.mutation.SetWHTTHB(f)
	return mtu
}

// SetNillableWHTTHB sets the "WHTTHB" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableWHTTHB(f *float64) *MerchantTransactionUpdate {
	if f != nil {
		mtu.SetWHTTHB(*f)
	}
	return mtu
}

// AddWHTTHB adds f to the "WHTTHB" field.
func (mtu *MerchantTransactionUpdate) AddWHTTHB(f float64) *MerchantTransactionUpdate {
	mtu.mutation.AddWHTTHB(f)
	return mtu
}

// ClearWHTTHB clears the value of the "WHTTHB" field.
func (mtu *MerchantTransactionUpdate) ClearWHTTHB() *MerchantTransactionUpdate {
	mtu.mutation.ClearWHTTHB()
	return mtu
}

// SetNetPayTHB sets the "NetPayTHB" field.
func (mtu *MerchantTransactionUpdate) SetNetPayTHB(f float64) *MerchantTransactionUpdate {
	mtu.mutation.ResetNetPayTHB()
	mtu.mutation.SetNetPayTHB(f)
	return mtu
}

// SetNillableNetPayTHB sets the "NetPayTHB" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableNetPayTHB(f *float64) *MerchantTransactionUpdate {
	if f != nil {
		mtu.SetNetPayTHB(*f)
	}
	return mtu
}

// AddNetPayTHB adds f to the "NetPayTHB" field.
func (mtu *MerchantTransactionUpdate) AddNetPayTHB(f float64) *MerchantTransactionUpdate {
	mtu.mutation.AddNetPayTHB(f)
	return mtu
}

// ClearNetPayTHB clears the value of the "NetPayTHB" field.
func (mtu *MerchantTransactionUpdate) ClearNetPayTHB() *MerchantTransactionUpdate {
	mtu.mutation.ClearNetPayTHB()
	return mtu
}

// SetTransactionType sets the "TransactionType" field.
func (mtu *MerchantTransactionUpdate) SetTransactionType(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetTransactionType(s)
	return mtu
}

// SetNillableTransactionType sets the "TransactionType" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableTransactionType(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetTransactionType(*s)
	}
	return mtu
}

// ClearTransactionType clears the value of the "TransactionType" field.
func (mtu *MerchantTransactionUpdate) ClearTransactionType() *MerchantTransactionUpdate {
	mtu.mutation.ClearTransactionType()
	return mtu
}

// SetBankCode sets the "BankCode" field.
func (mtu *MerchantTransactionUpdate) SetBankCode(s string) *MerchantTransactionUpdate {
	mtu.mutation.SetBankCode(s)
	return mtu
}

// SetNillableBankCode sets the "BankCode" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableBankCode(s *string) *MerchantTransactionUpdate {
	if s != nil {
		mtu.SetBankCode(*s)
	}
	return mtu
}

// ClearBankCode clears the value of the "BankCode" field.
func (mtu *MerchantTransactionUpdate) ClearBankCode() *MerchantTransactionUpdate {
	mtu.mutation.ClearBankCode()
	return mtu
}

// SetFileimportID sets the "FileimportID" field.
func (mtu *MerchantTransactionUpdate) SetFileimportID(i int) *MerchantTransactionUpdate {
	mtu.mutation.ResetFileimportID()
	mtu.mutation.SetFileimportID(i)
	return mtu
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (mtu *MerchantTransactionUpdate) SetNillableFileimportID(i *int) *MerchantTransactionUpdate {
	if i != nil {
		mtu.SetFileimportID(*i)
	}
	return mtu
}

// AddFileimportID adds i to the "FileimportID" field.
func (mtu *MerchantTransactionUpdate) AddFileimportID(i int) *MerchantTransactionUpdate {
	mtu.mutation.AddFileimportID(i)
	return mtu
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (mtu *MerchantTransactionUpdate) ClearFileimportID() *MerchantTransactionUpdate {
	mtu.mutation.ClearFileimportID()
	return mtu
}

// Mutation returns the MerchantTransactionMutation object of the builder.
func (mtu *MerchantTransactionUpdate) Mutation() *MerchantTransactionMutation {
	return mtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MerchantTransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mtu.hooks) == 0 {
		if err = mtu.check(); err != nil {
			return 0, err
		}
		affected, err = mtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MerchantTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtu.check(); err != nil {
				return 0, err
			}
			mtu.mutation = mutation
			affected, err = mtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mtu.hooks) - 1; i >= 0; i-- {
			mut = mtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MerchantTransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MerchantTransactionUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MerchantTransactionUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtu *MerchantTransactionUpdate) check() error {
	if v, ok := mtu.mutation.TransactionID(); ok {
		if err := merchanttransaction.TransactionIDValidator(v); err != nil {
			return &ValidationError{Name: "transaction_id", err: fmt.Errorf("ent: validator failed for field \"transaction_id\": %w", err)}
		}
	}
	if v, ok := mtu.mutation.PaymentType(); ok {
		if err := merchanttransaction.PaymentTypeValidator(v); err != nil {
			return &ValidationError{Name: "PaymentType", err: fmt.Errorf("ent: validator failed for field \"PaymentType\": %w", err)}
		}
	}
	if v, ok := mtu.mutation.PaymentChannel(); ok {
		if err := merchanttransaction.PaymentChannelValidator(v); err != nil {
			return &ValidationError{Name: "PaymentChannel", err: fmt.Errorf("ent: validator failed for field \"PaymentChannel\": %w", err)}
		}
	}
	if v, ok := mtu.mutation.Status(); ok {
		if err := merchanttransaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := mtu.mutation.MerchantID(); ok {
		if err := merchanttransaction.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "MerchantID", err: fmt.Errorf("ent: validator failed for field \"MerchantID\": %w", err)}
		}
	}
	if v, ok := mtu.mutation.TerminalID(); ok {
		if err := merchanttransaction.TerminalIDValidator(v); err != nil {
			return &ValidationError{Name: "TerminalID", err: fmt.Errorf("ent: validator failed for field \"TerminalID\": %w", err)}
		}
	}
	if v, ok := mtu.mutation.MerchantFullName(); ok {
		if err := merchanttransaction.MerchantFullNameValidator(v); err != nil {
			return &ValidationError{Name: "MerchantFullName", err: fmt.Errorf("ent: validator failed for field \"MerchantFullName\": %w", err)}
		}
	}
	if v, ok := mtu.mutation.FromAccount(); ok {
		if err := merchanttransaction.FromAccountValidator(v); err != nil {
			return &ValidationError{Name: "FromAccount", err: fmt.Errorf("ent: validator failed for field \"FromAccount\": %w", err)}
		}
	}
	if v, ok := mtu.mutation.SettlementAccount(); ok {
		if err := merchanttransaction.SettlementAccountValidator(v); err != nil {
			return &ValidationError{Name: "SettlementAccount", err: fmt.Errorf("ent: validator failed for field \"SettlementAccount\": %w", err)}
		}
	}
	if v, ok := mtu.mutation.TransactionType(); ok {
		if err := merchanttransaction.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "TransactionType", err: fmt.Errorf("ent: validator failed for field \"TransactionType\": %w", err)}
		}
	}
	if v, ok := mtu.mutation.BankCode(); ok {
		if err := merchanttransaction.BankCodeValidator(v); err != nil {
			return &ValidationError{Name: "BankCode", err: fmt.Errorf("ent: validator failed for field \"BankCode\": %w", err)}
		}
	}
	return nil
}

func (mtu *MerchantTransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   merchanttransaction.Table,
			Columns: merchanttransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: merchanttransaction.FieldID,
			},
		},
	}
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldTransactionID,
		})
	}
	if mtu.mutation.TransactionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldTransactionID,
		})
	}
	if value, ok := mtu.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchanttransaction.FieldDateTime,
		})
	}
	if mtu.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: merchanttransaction.FieldDateTime,
		})
	}
	if value, ok := mtu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldAmount,
		})
	}
	if value, ok := mtu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldAmount,
		})
	}
	if mtu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldAmount,
		})
	}
	if value, ok := mtu.mutation.PaymentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldPaymentType,
		})
	}
	if mtu.mutation.PaymentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldPaymentType,
		})
	}
	if value, ok := mtu.mutation.PaymentChannel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldPaymentChannel,
		})
	}
	if mtu.mutation.PaymentChannelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldPaymentChannel,
		})
	}
	if value, ok := mtu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldStatus,
		})
	}
	if mtu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldStatus,
		})
	}
	if value, ok := mtu.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldMerchantID,
		})
	}
	if mtu.mutation.MerchantIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldMerchantID,
		})
	}
	if value, ok := mtu.mutation.TerminalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldTerminalID,
		})
	}
	if mtu.mutation.TerminalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldTerminalID,
		})
	}
	if value, ok := mtu.mutation.MerchantFullName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldMerchantFullName,
		})
	}
	if mtu.mutation.MerchantFullNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldMerchantFullName,
		})
	}
	if value, ok := mtu.mutation.FromAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldFromAccount,
		})
	}
	if mtu.mutation.FromAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldFromAccount,
		})
	}
	if value, ok := mtu.mutation.SettlementAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldSettlementAccount,
		})
	}
	if mtu.mutation.SettlementAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldSettlementAccount,
		})
	}
	if value, ok := mtu.mutation.MDRFEETHB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldMDRFEETHB,
		})
	}
	if value, ok := mtu.mutation.AddedMDRFEETHB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldMDRFEETHB,
		})
	}
	if mtu.mutation.MDRFEETHBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldMDRFEETHB,
		})
	}
	if value, ok := mtu.mutation.TransactionFEETHB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTransactionFEETHB,
		})
	}
	if value, ok := mtu.mutation.AddedTransactionFEETHB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTransactionFEETHB,
		})
	}
	if mtu.mutation.TransactionFEETHBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldTransactionFEETHB,
		})
	}
	if value, ok := mtu.mutation.TotalFeeincVAT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTotalFeeincVAT,
		})
	}
	if value, ok := mtu.mutation.AddedTotalFeeincVAT(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTotalFeeincVAT,
		})
	}
	if mtu.mutation.TotalFeeincVATCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldTotalFeeincVAT,
		})
	}
	if value, ok := mtu.mutation.VATTHB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldVATTHB,
		})
	}
	if value, ok := mtu.mutation.AddedVATTHB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldVATTHB,
		})
	}
	if mtu.mutation.VATTHBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldVATTHB,
		})
	}
	if value, ok := mtu.mutation.TotalFeeExcVAT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTotalFeeExcVAT,
		})
	}
	if value, ok := mtu.mutation.AddedTotalFeeExcVAT(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTotalFeeExcVAT,
		})
	}
	if mtu.mutation.TotalFeeExcVATCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldTotalFeeExcVAT,
		})
	}
	if value, ok := mtu.mutation.WHTTHB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldWHTTHB,
		})
	}
	if value, ok := mtu.mutation.AddedWHTTHB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldWHTTHB,
		})
	}
	if mtu.mutation.WHTTHBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldWHTTHB,
		})
	}
	if value, ok := mtu.mutation.NetPayTHB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldNetPayTHB,
		})
	}
	if value, ok := mtu.mutation.AddedNetPayTHB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldNetPayTHB,
		})
	}
	if mtu.mutation.NetPayTHBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldNetPayTHB,
		})
	}
	if value, ok := mtu.mutation.TransactionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldTransactionType,
		})
	}
	if mtu.mutation.TransactionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldTransactionType,
		})
	}
	if value, ok := mtu.mutation.BankCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldBankCode,
		})
	}
	if mtu.mutation.BankCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldBankCode,
		})
	}
	if value, ok := mtu.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: merchanttransaction.FieldFileimportID,
		})
	}
	if value, ok := mtu.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: merchanttransaction.FieldFileimportID,
		})
	}
	if mtu.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: merchanttransaction.FieldFileimportID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchanttransaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MerchantTransactionUpdateOne is the builder for updating a single MerchantTransaction entity.
type MerchantTransactionUpdateOne struct {
	config
	hooks    []Hook
	mutation *MerchantTransactionMutation
}

// SetTransactionID sets the "transaction_id" field.
func (mtuo *MerchantTransactionUpdateOne) SetTransactionID(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetTransactionID(s)
	return mtuo
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableTransactionID(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetTransactionID(*s)
	}
	return mtuo
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (mtuo *MerchantTransactionUpdateOne) ClearTransactionID() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearTransactionID()
	return mtuo
}

// SetDateTime sets the "dateTime" field.
func (mtuo *MerchantTransactionUpdateOne) SetDateTime(t time.Time) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetDateTime(t)
	return mtuo
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableDateTime(t *time.Time) *MerchantTransactionUpdateOne {
	if t != nil {
		mtuo.SetDateTime(*t)
	}
	return mtuo
}

// ClearDateTime clears the value of the "dateTime" field.
func (mtuo *MerchantTransactionUpdateOne) ClearDateTime() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearDateTime()
	return mtuo
}

// SetAmount sets the "amount" field.
func (mtuo *MerchantTransactionUpdateOne) SetAmount(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.ResetAmount()
	mtuo.mutation.SetAmount(f)
	return mtuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableAmount(f *float64) *MerchantTransactionUpdateOne {
	if f != nil {
		mtuo.SetAmount(*f)
	}
	return mtuo
}

// AddAmount adds f to the "amount" field.
func (mtuo *MerchantTransactionUpdateOne) AddAmount(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.AddAmount(f)
	return mtuo
}

// ClearAmount clears the value of the "amount" field.
func (mtuo *MerchantTransactionUpdateOne) ClearAmount() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearAmount()
	return mtuo
}

// SetPaymentType sets the "PaymentType" field.
func (mtuo *MerchantTransactionUpdateOne) SetPaymentType(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetPaymentType(s)
	return mtuo
}

// SetNillablePaymentType sets the "PaymentType" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillablePaymentType(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetPaymentType(*s)
	}
	return mtuo
}

// ClearPaymentType clears the value of the "PaymentType" field.
func (mtuo *MerchantTransactionUpdateOne) ClearPaymentType() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearPaymentType()
	return mtuo
}

// SetPaymentChannel sets the "PaymentChannel" field.
func (mtuo *MerchantTransactionUpdateOne) SetPaymentChannel(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetPaymentChannel(s)
	return mtuo
}

// SetNillablePaymentChannel sets the "PaymentChannel" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillablePaymentChannel(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetPaymentChannel(*s)
	}
	return mtuo
}

// ClearPaymentChannel clears the value of the "PaymentChannel" field.
func (mtuo *MerchantTransactionUpdateOne) ClearPaymentChannel() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearPaymentChannel()
	return mtuo
}

// SetStatus sets the "Status" field.
func (mtuo *MerchantTransactionUpdateOne) SetStatus(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetStatus(s)
	return mtuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableStatus(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetStatus(*s)
	}
	return mtuo
}

// ClearStatus clears the value of the "Status" field.
func (mtuo *MerchantTransactionUpdateOne) ClearStatus() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearStatus()
	return mtuo
}

// SetMerchantID sets the "MerchantID" field.
func (mtuo *MerchantTransactionUpdateOne) SetMerchantID(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetMerchantID(s)
	return mtuo
}

// SetNillableMerchantID sets the "MerchantID" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableMerchantID(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetMerchantID(*s)
	}
	return mtuo
}

// ClearMerchantID clears the value of the "MerchantID" field.
func (mtuo *MerchantTransactionUpdateOne) ClearMerchantID() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearMerchantID()
	return mtuo
}

// SetTerminalID sets the "TerminalID" field.
func (mtuo *MerchantTransactionUpdateOne) SetTerminalID(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetTerminalID(s)
	return mtuo
}

// SetNillableTerminalID sets the "TerminalID" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableTerminalID(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetTerminalID(*s)
	}
	return mtuo
}

// ClearTerminalID clears the value of the "TerminalID" field.
func (mtuo *MerchantTransactionUpdateOne) ClearTerminalID() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearTerminalID()
	return mtuo
}

// SetMerchantFullName sets the "MerchantFullName" field.
func (mtuo *MerchantTransactionUpdateOne) SetMerchantFullName(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetMerchantFullName(s)
	return mtuo
}

// SetNillableMerchantFullName sets the "MerchantFullName" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableMerchantFullName(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetMerchantFullName(*s)
	}
	return mtuo
}

// ClearMerchantFullName clears the value of the "MerchantFullName" field.
func (mtuo *MerchantTransactionUpdateOne) ClearMerchantFullName() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearMerchantFullName()
	return mtuo
}

// SetFromAccount sets the "FromAccount" field.
func (mtuo *MerchantTransactionUpdateOne) SetFromAccount(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetFromAccount(s)
	return mtuo
}

// SetNillableFromAccount sets the "FromAccount" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableFromAccount(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetFromAccount(*s)
	}
	return mtuo
}

// ClearFromAccount clears the value of the "FromAccount" field.
func (mtuo *MerchantTransactionUpdateOne) ClearFromAccount() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearFromAccount()
	return mtuo
}

// SetSettlementAccount sets the "SettlementAccount" field.
func (mtuo *MerchantTransactionUpdateOne) SetSettlementAccount(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetSettlementAccount(s)
	return mtuo
}

// SetNillableSettlementAccount sets the "SettlementAccount" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableSettlementAccount(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetSettlementAccount(*s)
	}
	return mtuo
}

// ClearSettlementAccount clears the value of the "SettlementAccount" field.
func (mtuo *MerchantTransactionUpdateOne) ClearSettlementAccount() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearSettlementAccount()
	return mtuo
}

// SetMDRFEETHB sets the "MDR_FEETHB" field.
func (mtuo *MerchantTransactionUpdateOne) SetMDRFEETHB(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.ResetMDRFEETHB()
	mtuo.mutation.SetMDRFEETHB(f)
	return mtuo
}

// SetNillableMDRFEETHB sets the "MDR_FEETHB" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableMDRFEETHB(f *float64) *MerchantTransactionUpdateOne {
	if f != nil {
		mtuo.SetMDRFEETHB(*f)
	}
	return mtuo
}

// AddMDRFEETHB adds f to the "MDR_FEETHB" field.
func (mtuo *MerchantTransactionUpdateOne) AddMDRFEETHB(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.AddMDRFEETHB(f)
	return mtuo
}

// ClearMDRFEETHB clears the value of the "MDR_FEETHB" field.
func (mtuo *MerchantTransactionUpdateOne) ClearMDRFEETHB() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearMDRFEETHB()
	return mtuo
}

// SetTransactionFEETHB sets the "TransactionFEETHB" field.
func (mtuo *MerchantTransactionUpdateOne) SetTransactionFEETHB(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.ResetTransactionFEETHB()
	mtuo.mutation.SetTransactionFEETHB(f)
	return mtuo
}

// SetNillableTransactionFEETHB sets the "TransactionFEETHB" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableTransactionFEETHB(f *float64) *MerchantTransactionUpdateOne {
	if f != nil {
		mtuo.SetTransactionFEETHB(*f)
	}
	return mtuo
}

// AddTransactionFEETHB adds f to the "TransactionFEETHB" field.
func (mtuo *MerchantTransactionUpdateOne) AddTransactionFEETHB(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.AddTransactionFEETHB(f)
	return mtuo
}

// ClearTransactionFEETHB clears the value of the "TransactionFEETHB" field.
func (mtuo *MerchantTransactionUpdateOne) ClearTransactionFEETHB() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearTransactionFEETHB()
	return mtuo
}

// SetTotalFeeincVAT sets the "TotalFeeincVAT" field.
func (mtuo *MerchantTransactionUpdateOne) SetTotalFeeincVAT(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.ResetTotalFeeincVAT()
	mtuo.mutation.SetTotalFeeincVAT(f)
	return mtuo
}

// SetNillableTotalFeeincVAT sets the "TotalFeeincVAT" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableTotalFeeincVAT(f *float64) *MerchantTransactionUpdateOne {
	if f != nil {
		mtuo.SetTotalFeeincVAT(*f)
	}
	return mtuo
}

// AddTotalFeeincVAT adds f to the "TotalFeeincVAT" field.
func (mtuo *MerchantTransactionUpdateOne) AddTotalFeeincVAT(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.AddTotalFeeincVAT(f)
	return mtuo
}

// ClearTotalFeeincVAT clears the value of the "TotalFeeincVAT" field.
func (mtuo *MerchantTransactionUpdateOne) ClearTotalFeeincVAT() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearTotalFeeincVAT()
	return mtuo
}

// SetVATTHB sets the "VATTHB" field.
func (mtuo *MerchantTransactionUpdateOne) SetVATTHB(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.ResetVATTHB()
	mtuo.mutation.SetVATTHB(f)
	return mtuo
}

// SetNillableVATTHB sets the "VATTHB" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableVATTHB(f *float64) *MerchantTransactionUpdateOne {
	if f != nil {
		mtuo.SetVATTHB(*f)
	}
	return mtuo
}

// AddVATTHB adds f to the "VATTHB" field.
func (mtuo *MerchantTransactionUpdateOne) AddVATTHB(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.AddVATTHB(f)
	return mtuo
}

// ClearVATTHB clears the value of the "VATTHB" field.
func (mtuo *MerchantTransactionUpdateOne) ClearVATTHB() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearVATTHB()
	return mtuo
}

// SetTotalFeeExcVAT sets the "TotalFeeExcVAT" field.
func (mtuo *MerchantTransactionUpdateOne) SetTotalFeeExcVAT(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.ResetTotalFeeExcVAT()
	mtuo.mutation.SetTotalFeeExcVAT(f)
	return mtuo
}

// SetNillableTotalFeeExcVAT sets the "TotalFeeExcVAT" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableTotalFeeExcVAT(f *float64) *MerchantTransactionUpdateOne {
	if f != nil {
		mtuo.SetTotalFeeExcVAT(*f)
	}
	return mtuo
}

// AddTotalFeeExcVAT adds f to the "TotalFeeExcVAT" field.
func (mtuo *MerchantTransactionUpdateOne) AddTotalFeeExcVAT(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.AddTotalFeeExcVAT(f)
	return mtuo
}

// ClearTotalFeeExcVAT clears the value of the "TotalFeeExcVAT" field.
func (mtuo *MerchantTransactionUpdateOne) ClearTotalFeeExcVAT() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearTotalFeeExcVAT()
	return mtuo
}

// SetWHTTHB sets the "WHTTHB" field.
func (mtuo *MerchantTransactionUpdateOne) SetWHTTHB(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.ResetWHTTHB()
	mtuo.mutation.SetWHTTHB(f)
	return mtuo
}

// SetNillableWHTTHB sets the "WHTTHB" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableWHTTHB(f *float64) *MerchantTransactionUpdateOne {
	if f != nil {
		mtuo.SetWHTTHB(*f)
	}
	return mtuo
}

// AddWHTTHB adds f to the "WHTTHB" field.
func (mtuo *MerchantTransactionUpdateOne) AddWHTTHB(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.AddWHTTHB(f)
	return mtuo
}

// ClearWHTTHB clears the value of the "WHTTHB" field.
func (mtuo *MerchantTransactionUpdateOne) ClearWHTTHB() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearWHTTHB()
	return mtuo
}

// SetNetPayTHB sets the "NetPayTHB" field.
func (mtuo *MerchantTransactionUpdateOne) SetNetPayTHB(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.ResetNetPayTHB()
	mtuo.mutation.SetNetPayTHB(f)
	return mtuo
}

// SetNillableNetPayTHB sets the "NetPayTHB" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableNetPayTHB(f *float64) *MerchantTransactionUpdateOne {
	if f != nil {
		mtuo.SetNetPayTHB(*f)
	}
	return mtuo
}

// AddNetPayTHB adds f to the "NetPayTHB" field.
func (mtuo *MerchantTransactionUpdateOne) AddNetPayTHB(f float64) *MerchantTransactionUpdateOne {
	mtuo.mutation.AddNetPayTHB(f)
	return mtuo
}

// ClearNetPayTHB clears the value of the "NetPayTHB" field.
func (mtuo *MerchantTransactionUpdateOne) ClearNetPayTHB() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearNetPayTHB()
	return mtuo
}

// SetTransactionType sets the "TransactionType" field.
func (mtuo *MerchantTransactionUpdateOne) SetTransactionType(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetTransactionType(s)
	return mtuo
}

// SetNillableTransactionType sets the "TransactionType" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableTransactionType(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetTransactionType(*s)
	}
	return mtuo
}

// ClearTransactionType clears the value of the "TransactionType" field.
func (mtuo *MerchantTransactionUpdateOne) ClearTransactionType() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearTransactionType()
	return mtuo
}

// SetBankCode sets the "BankCode" field.
func (mtuo *MerchantTransactionUpdateOne) SetBankCode(s string) *MerchantTransactionUpdateOne {
	mtuo.mutation.SetBankCode(s)
	return mtuo
}

// SetNillableBankCode sets the "BankCode" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableBankCode(s *string) *MerchantTransactionUpdateOne {
	if s != nil {
		mtuo.SetBankCode(*s)
	}
	return mtuo
}

// ClearBankCode clears the value of the "BankCode" field.
func (mtuo *MerchantTransactionUpdateOne) ClearBankCode() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearBankCode()
	return mtuo
}

// SetFileimportID sets the "FileimportID" field.
func (mtuo *MerchantTransactionUpdateOne) SetFileimportID(i int) *MerchantTransactionUpdateOne {
	mtuo.mutation.ResetFileimportID()
	mtuo.mutation.SetFileimportID(i)
	return mtuo
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (mtuo *MerchantTransactionUpdateOne) SetNillableFileimportID(i *int) *MerchantTransactionUpdateOne {
	if i != nil {
		mtuo.SetFileimportID(*i)
	}
	return mtuo
}

// AddFileimportID adds i to the "FileimportID" field.
func (mtuo *MerchantTransactionUpdateOne) AddFileimportID(i int) *MerchantTransactionUpdateOne {
	mtuo.mutation.AddFileimportID(i)
	return mtuo
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (mtuo *MerchantTransactionUpdateOne) ClearFileimportID() *MerchantTransactionUpdateOne {
	mtuo.mutation.ClearFileimportID()
	return mtuo
}

// Mutation returns the MerchantTransactionMutation object of the builder.
func (mtuo *MerchantTransactionUpdateOne) Mutation() *MerchantTransactionMutation {
	return mtuo.mutation
}

// Save executes the query and returns the updated MerchantTransaction entity.
func (mtuo *MerchantTransactionUpdateOne) Save(ctx context.Context) (*MerchantTransaction, error) {
	var (
		err  error
		node *MerchantTransaction
	)
	if len(mtuo.hooks) == 0 {
		if err = mtuo.check(); err != nil {
			return nil, err
		}
		node, err = mtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MerchantTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtuo.check(); err != nil {
				return nil, err
			}
			mtuo.mutation = mutation
			node, err = mtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtuo.hooks) - 1; i >= 0; i-- {
			mut = mtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MerchantTransactionUpdateOne) SaveX(ctx context.Context) *MerchantTransaction {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MerchantTransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MerchantTransactionUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtuo *MerchantTransactionUpdateOne) check() error {
	if v, ok := mtuo.mutation.TransactionID(); ok {
		if err := merchanttransaction.TransactionIDValidator(v); err != nil {
			return &ValidationError{Name: "transaction_id", err: fmt.Errorf("ent: validator failed for field \"transaction_id\": %w", err)}
		}
	}
	if v, ok := mtuo.mutation.PaymentType(); ok {
		if err := merchanttransaction.PaymentTypeValidator(v); err != nil {
			return &ValidationError{Name: "PaymentType", err: fmt.Errorf("ent: validator failed for field \"PaymentType\": %w", err)}
		}
	}
	if v, ok := mtuo.mutation.PaymentChannel(); ok {
		if err := merchanttransaction.PaymentChannelValidator(v); err != nil {
			return &ValidationError{Name: "PaymentChannel", err: fmt.Errorf("ent: validator failed for field \"PaymentChannel\": %w", err)}
		}
	}
	if v, ok := mtuo.mutation.Status(); ok {
		if err := merchanttransaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := mtuo.mutation.MerchantID(); ok {
		if err := merchanttransaction.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "MerchantID", err: fmt.Errorf("ent: validator failed for field \"MerchantID\": %w", err)}
		}
	}
	if v, ok := mtuo.mutation.TerminalID(); ok {
		if err := merchanttransaction.TerminalIDValidator(v); err != nil {
			return &ValidationError{Name: "TerminalID", err: fmt.Errorf("ent: validator failed for field \"TerminalID\": %w", err)}
		}
	}
	if v, ok := mtuo.mutation.MerchantFullName(); ok {
		if err := merchanttransaction.MerchantFullNameValidator(v); err != nil {
			return &ValidationError{Name: "MerchantFullName", err: fmt.Errorf("ent: validator failed for field \"MerchantFullName\": %w", err)}
		}
	}
	if v, ok := mtuo.mutation.FromAccount(); ok {
		if err := merchanttransaction.FromAccountValidator(v); err != nil {
			return &ValidationError{Name: "FromAccount", err: fmt.Errorf("ent: validator failed for field \"FromAccount\": %w", err)}
		}
	}
	if v, ok := mtuo.mutation.SettlementAccount(); ok {
		if err := merchanttransaction.SettlementAccountValidator(v); err != nil {
			return &ValidationError{Name: "SettlementAccount", err: fmt.Errorf("ent: validator failed for field \"SettlementAccount\": %w", err)}
		}
	}
	if v, ok := mtuo.mutation.TransactionType(); ok {
		if err := merchanttransaction.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "TransactionType", err: fmt.Errorf("ent: validator failed for field \"TransactionType\": %w", err)}
		}
	}
	if v, ok := mtuo.mutation.BankCode(); ok {
		if err := merchanttransaction.BankCodeValidator(v); err != nil {
			return &ValidationError{Name: "BankCode", err: fmt.Errorf("ent: validator failed for field \"BankCode\": %w", err)}
		}
	}
	return nil
}

func (mtuo *MerchantTransactionUpdateOne) sqlSave(ctx context.Context) (_node *MerchantTransaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   merchanttransaction.Table,
			Columns: merchanttransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: merchanttransaction.FieldID,
			},
		},
	}
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MerchantTransaction.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldTransactionID,
		})
	}
	if mtuo.mutation.TransactionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldTransactionID,
		})
	}
	if value, ok := mtuo.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchanttransaction.FieldDateTime,
		})
	}
	if mtuo.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: merchanttransaction.FieldDateTime,
		})
	}
	if value, ok := mtuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldAmount,
		})
	}
	if value, ok := mtuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldAmount,
		})
	}
	if mtuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldAmount,
		})
	}
	if value, ok := mtuo.mutation.PaymentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldPaymentType,
		})
	}
	if mtuo.mutation.PaymentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldPaymentType,
		})
	}
	if value, ok := mtuo.mutation.PaymentChannel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldPaymentChannel,
		})
	}
	if mtuo.mutation.PaymentChannelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldPaymentChannel,
		})
	}
	if value, ok := mtuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldStatus,
		})
	}
	if mtuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldStatus,
		})
	}
	if value, ok := mtuo.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldMerchantID,
		})
	}
	if mtuo.mutation.MerchantIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldMerchantID,
		})
	}
	if value, ok := mtuo.mutation.TerminalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldTerminalID,
		})
	}
	if mtuo.mutation.TerminalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldTerminalID,
		})
	}
	if value, ok := mtuo.mutation.MerchantFullName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldMerchantFullName,
		})
	}
	if mtuo.mutation.MerchantFullNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldMerchantFullName,
		})
	}
	if value, ok := mtuo.mutation.FromAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldFromAccount,
		})
	}
	if mtuo.mutation.FromAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldFromAccount,
		})
	}
	if value, ok := mtuo.mutation.SettlementAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldSettlementAccount,
		})
	}
	if mtuo.mutation.SettlementAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldSettlementAccount,
		})
	}
	if value, ok := mtuo.mutation.MDRFEETHB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldMDRFEETHB,
		})
	}
	if value, ok := mtuo.mutation.AddedMDRFEETHB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldMDRFEETHB,
		})
	}
	if mtuo.mutation.MDRFEETHBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldMDRFEETHB,
		})
	}
	if value, ok := mtuo.mutation.TransactionFEETHB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTransactionFEETHB,
		})
	}
	if value, ok := mtuo.mutation.AddedTransactionFEETHB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTransactionFEETHB,
		})
	}
	if mtuo.mutation.TransactionFEETHBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldTransactionFEETHB,
		})
	}
	if value, ok := mtuo.mutation.TotalFeeincVAT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTotalFeeincVAT,
		})
	}
	if value, ok := mtuo.mutation.AddedTotalFeeincVAT(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTotalFeeincVAT,
		})
	}
	if mtuo.mutation.TotalFeeincVATCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldTotalFeeincVAT,
		})
	}
	if value, ok := mtuo.mutation.VATTHB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldVATTHB,
		})
	}
	if value, ok := mtuo.mutation.AddedVATTHB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldVATTHB,
		})
	}
	if mtuo.mutation.VATTHBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldVATTHB,
		})
	}
	if value, ok := mtuo.mutation.TotalFeeExcVAT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTotalFeeExcVAT,
		})
	}
	if value, ok := mtuo.mutation.AddedTotalFeeExcVAT(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldTotalFeeExcVAT,
		})
	}
	if mtuo.mutation.TotalFeeExcVATCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldTotalFeeExcVAT,
		})
	}
	if value, ok := mtuo.mutation.WHTTHB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldWHTTHB,
		})
	}
	if value, ok := mtuo.mutation.AddedWHTTHB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldWHTTHB,
		})
	}
	if mtuo.mutation.WHTTHBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldWHTTHB,
		})
	}
	if value, ok := mtuo.mutation.NetPayTHB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldNetPayTHB,
		})
	}
	if value, ok := mtuo.mutation.AddedNetPayTHB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: merchanttransaction.FieldNetPayTHB,
		})
	}
	if mtuo.mutation.NetPayTHBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: merchanttransaction.FieldNetPayTHB,
		})
	}
	if value, ok := mtuo.mutation.TransactionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldTransactionType,
		})
	}
	if mtuo.mutation.TransactionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldTransactionType,
		})
	}
	if value, ok := mtuo.mutation.BankCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchanttransaction.FieldBankCode,
		})
	}
	if mtuo.mutation.BankCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: merchanttransaction.FieldBankCode,
		})
	}
	if value, ok := mtuo.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: merchanttransaction.FieldFileimportID,
		})
	}
	if value, ok := mtuo.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: merchanttransaction.FieldFileimportID,
		})
	}
	if mtuo.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: merchanttransaction.FieldFileimportID,
		})
	}
	_node = &MerchantTransaction{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchanttransaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
