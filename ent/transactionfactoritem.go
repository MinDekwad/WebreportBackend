// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/transactionfactoritem"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Transactionfactoritem is the model entity for the Transactionfactoritem schema.
type Transactionfactoritem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TransactionFactorID holds the value of the "TransactionFactorID" field.
	TransactionFactorID int `json:"TransactionFactorID,omitempty"`
	// Min holds the value of the "Min" field.
	Min float64 `json:"Min,omitempty"`
	// Max holds the value of the "Max" field.
	Max float64 `json:"Max,omitempty"`
	// Rank holds the value of the "Rank" field.
	Rank int `json:"Rank,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transactionfactoritem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case transactionfactoritem.FieldMin, transactionfactoritem.FieldMax:
			values[i] = &sql.NullFloat64{}
		case transactionfactoritem.FieldID, transactionfactoritem.FieldTransactionFactorID, transactionfactoritem.FieldRank:
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transactionfactoritem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transactionfactoritem fields.
func (t *Transactionfactoritem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transactionfactoritem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transactionfactoritem.FieldTransactionFactorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionFactorID", values[i])
			} else if value.Valid {
				t.TransactionFactorID = int(value.Int64)
			}
		case transactionfactoritem.FieldMin:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Min", values[i])
			} else if value.Valid {
				t.Min = value.Float64
			}
		case transactionfactoritem.FieldMax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Max", values[i])
			} else if value.Valid {
				t.Max = value.Float64
			}
		case transactionfactoritem.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Rank", values[i])
			} else if value.Valid {
				t.Rank = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Transactionfactoritem.
// Note that you need to call Transactionfactoritem.Unwrap() before calling this method if this Transactionfactoritem
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transactionfactoritem) Update() *TransactionfactoritemUpdateOne {
	return (&TransactionfactoritemClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transactionfactoritem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transactionfactoritem) Unwrap() *Transactionfactoritem {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transactionfactoritem is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transactionfactoritem) String() string {
	var builder strings.Builder
	builder.WriteString("Transactionfactoritem(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", TransactionFactorID=")
	builder.WriteString(fmt.Sprintf("%v", t.TransactionFactorID))
	builder.WriteString(", Min=")
	builder.WriteString(fmt.Sprintf("%v", t.Min))
	builder.WriteString(", Max=")
	builder.WriteString(fmt.Sprintf("%v", t.Max))
	builder.WriteString(", Rank=")
	builder.WriteString(fmt.Sprintf("%v", t.Rank))
	builder.WriteByte(')')
	return builder.String()
}

// Transactionfactoritems is a parsable slice of Transactionfactoritem.
type Transactionfactoritems []*Transactionfactoritem

func (t Transactionfactoritems) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
