// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pointpendinglbtransaction"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PointpendinglbtransactionCreate is the builder for creating a Pointpendinglbtransaction entity.
type PointpendinglbtransactionCreate struct {
	config
	mutation *PointpendinglbtransactionMutation
	hooks    []Hook
}

// SetWalletID sets the "WalletID" field.
func (pc *PointpendinglbtransactionCreate) SetWalletID(s string) *PointpendinglbtransactionCreate {
	pc.mutation.SetWalletID(s)
	return pc
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (pc *PointpendinglbtransactionCreate) SetNillableWalletID(s *string) *PointpendinglbtransactionCreate {
	if s != nil {
		pc.SetWalletID(*s)
	}
	return pc
}

// SetPointLB sets the "PointLB" field.
func (pc *PointpendinglbtransactionCreate) SetPointLB(i int) *PointpendinglbtransactionCreate {
	pc.mutation.SetPointLB(i)
	return pc
}

// SetNillablePointLB sets the "PointLB" field if the given value is not nil.
func (pc *PointpendinglbtransactionCreate) SetNillablePointLB(i *int) *PointpendinglbtransactionCreate {
	if i != nil {
		pc.SetPointLB(*i)
	}
	return pc
}

// SetDateExportLB sets the "DateExportLB" field.
func (pc *PointpendinglbtransactionCreate) SetDateExportLB(t time.Time) *PointpendinglbtransactionCreate {
	pc.mutation.SetDateExportLB(t)
	return pc
}

// SetNillableDateExportLB sets the "DateExportLB" field if the given value is not nil.
func (pc *PointpendinglbtransactionCreate) SetNillableDateExportLB(t *time.Time) *PointpendinglbtransactionCreate {
	if t != nil {
		pc.SetDateExportLB(*t)
	}
	return pc
}

// SetDateGenLB sets the "DateGenLB" field.
func (pc *PointpendinglbtransactionCreate) SetDateGenLB(t time.Time) *PointpendinglbtransactionCreate {
	pc.mutation.SetDateGenLB(t)
	return pc
}

// SetNillableDateGenLB sets the "DateGenLB" field if the given value is not nil.
func (pc *PointpendinglbtransactionCreate) SetNillableDateGenLB(t *time.Time) *PointpendinglbtransactionCreate {
	if t != nil {
		pc.SetDateGenLB(*t)
	}
	return pc
}

// SetNoteLB sets the "NoteLB" field.
func (pc *PointpendinglbtransactionCreate) SetNoteLB(s string) *PointpendinglbtransactionCreate {
	pc.mutation.SetNoteLB(s)
	return pc
}

// SetNillableNoteLB sets the "NoteLB" field if the given value is not nil.
func (pc *PointpendinglbtransactionCreate) SetNillableNoteLB(s *string) *PointpendinglbtransactionCreate {
	if s != nil {
		pc.SetNoteLB(*s)
	}
	return pc
}

// SetStatusExportLB sets the "StatusExportLB" field.
func (pc *PointpendinglbtransactionCreate) SetStatusExportLB(b bool) *PointpendinglbtransactionCreate {
	pc.mutation.SetStatusExportLB(b)
	return pc
}

// SetNillableStatusExportLB sets the "StatusExportLB" field if the given value is not nil.
func (pc *PointpendinglbtransactionCreate) SetNillableStatusExportLB(b *bool) *PointpendinglbtransactionCreate {
	if b != nil {
		pc.SetStatusExportLB(*b)
	}
	return pc
}

// SetLBDate sets the "LBDate" field.
func (pc *PointpendinglbtransactionCreate) SetLBDate(t time.Time) *PointpendinglbtransactionCreate {
	pc.mutation.SetLBDate(t)
	return pc
}

// SetNillableLBDate sets the "LBDate" field if the given value is not nil.
func (pc *PointpendinglbtransactionCreate) SetNillableLBDate(t *time.Time) *PointpendinglbtransactionCreate {
	if t != nil {
		pc.SetLBDate(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PointpendinglbtransactionCreate) SetID(i int) *PointpendinglbtransactionCreate {
	pc.mutation.SetID(i)
	return pc
}

// Mutation returns the PointpendinglbtransactionMutation object of the builder.
func (pc *PointpendinglbtransactionCreate) Mutation() *PointpendinglbtransactionMutation {
	return pc.mutation
}

// Save creates the Pointpendinglbtransaction in the database.
func (pc *PointpendinglbtransactionCreate) Save(ctx context.Context) (*Pointpendinglbtransaction, error) {
	var (
		err  error
		node *Pointpendinglbtransaction
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointpendinglbtransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PointpendinglbtransactionCreate) SaveX(ctx context.Context) *Pointpendinglbtransaction {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pc *PointpendinglbtransactionCreate) defaults() {
	if _, ok := pc.mutation.PointLB(); !ok {
		v := pointpendinglbtransaction.DefaultPointLB
		pc.mutation.SetPointLB(v)
	}
	if _, ok := pc.mutation.StatusExportLB(); !ok {
		v := pointpendinglbtransaction.DefaultStatusExportLB
		pc.mutation.SetStatusExportLB(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PointpendinglbtransactionCreate) check() error {
	if v, ok := pc.mutation.WalletID(); ok {
		if err := pointpendinglbtransaction.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := pc.mutation.NoteLB(); ok {
		if err := pointpendinglbtransaction.NoteLBValidator(v); err != nil {
			return &ValidationError{Name: "NoteLB", err: fmt.Errorf("ent: validator failed for field \"NoteLB\": %w", err)}
		}
	}
	return nil
}

func (pc *PointpendinglbtransactionCreate) sqlSave(ctx context.Context) (*Pointpendinglbtransaction, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (pc *PointpendinglbtransactionCreate) createSpec() (*Pointpendinglbtransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Pointpendinglbtransaction{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pointpendinglbtransaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointpendinglbtransaction.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.WalletID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendinglbtransaction.FieldWalletID,
		})
		_node.WalletID = value
	}
	if value, ok := pc.mutation.PointLB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointpendinglbtransaction.FieldPointLB,
		})
		_node.PointLB = &value
	}
	if value, ok := pc.mutation.DateExportLB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendinglbtransaction.FieldDateExportLB,
		})
		_node.DateExportLB = &value
	}
	if value, ok := pc.mutation.DateGenLB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendinglbtransaction.FieldDateGenLB,
		})
		_node.DateGenLB = &value
	}
	if value, ok := pc.mutation.NoteLB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendinglbtransaction.FieldNoteLB,
		})
		_node.NoteLB = &value
	}
	if value, ok := pc.mutation.StatusExportLB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pointpendinglbtransaction.FieldStatusExportLB,
		})
		_node.StatusExportLB = value
	}
	if value, ok := pc.mutation.LBDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendinglbtransaction.FieldLBDate,
		})
		_node.LBDate = &value
	}
	return _node, _spec
}

// PointpendinglbtransactionCreateBulk is the builder for creating many Pointpendinglbtransaction entities in bulk.
type PointpendinglbtransactionCreateBulk struct {
	config
	builders []*PointpendinglbtransactionCreate
}

// Save creates the Pointpendinglbtransaction entities in the database.
func (pcb *PointpendinglbtransactionCreateBulk) Save(ctx context.Context) ([]*Pointpendinglbtransaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pointpendinglbtransaction, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PointpendinglbtransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PointpendinglbtransactionCreateBulk) SaveX(ctx context.Context) []*Pointpendinglbtransaction {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
