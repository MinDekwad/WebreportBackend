// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pointpendinglbtransaction"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PointpendinglbtransactionUpdate is the builder for updating Pointpendinglbtransaction entities.
type PointpendinglbtransactionUpdate struct {
	config
	hooks    []Hook
	mutation *PointpendinglbtransactionMutation
}

// Where adds a new predicate for the PointpendinglbtransactionUpdate builder.
func (pu *PointpendinglbtransactionUpdate) Where(ps ...predicate.Pointpendinglbtransaction) *PointpendinglbtransactionUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetWalletID sets the "WalletID" field.
func (pu *PointpendinglbtransactionUpdate) SetWalletID(s string) *PointpendinglbtransactionUpdate {
	pu.mutation.SetWalletID(s)
	return pu
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (pu *PointpendinglbtransactionUpdate) SetNillableWalletID(s *string) *PointpendinglbtransactionUpdate {
	if s != nil {
		pu.SetWalletID(*s)
	}
	return pu
}

// ClearWalletID clears the value of the "WalletID" field.
func (pu *PointpendinglbtransactionUpdate) ClearWalletID() *PointpendinglbtransactionUpdate {
	pu.mutation.ClearWalletID()
	return pu
}

// SetPointLB sets the "PointLB" field.
func (pu *PointpendinglbtransactionUpdate) SetPointLB(i int) *PointpendinglbtransactionUpdate {
	pu.mutation.ResetPointLB()
	pu.mutation.SetPointLB(i)
	return pu
}

// SetNillablePointLB sets the "PointLB" field if the given value is not nil.
func (pu *PointpendinglbtransactionUpdate) SetNillablePointLB(i *int) *PointpendinglbtransactionUpdate {
	if i != nil {
		pu.SetPointLB(*i)
	}
	return pu
}

// AddPointLB adds i to the "PointLB" field.
func (pu *PointpendinglbtransactionUpdate) AddPointLB(i int) *PointpendinglbtransactionUpdate {
	pu.mutation.AddPointLB(i)
	return pu
}

// ClearPointLB clears the value of the "PointLB" field.
func (pu *PointpendinglbtransactionUpdate) ClearPointLB() *PointpendinglbtransactionUpdate {
	pu.mutation.ClearPointLB()
	return pu
}

// SetDateExportLB sets the "DateExportLB" field.
func (pu *PointpendinglbtransactionUpdate) SetDateExportLB(t time.Time) *PointpendinglbtransactionUpdate {
	pu.mutation.SetDateExportLB(t)
	return pu
}

// SetNillableDateExportLB sets the "DateExportLB" field if the given value is not nil.
func (pu *PointpendinglbtransactionUpdate) SetNillableDateExportLB(t *time.Time) *PointpendinglbtransactionUpdate {
	if t != nil {
		pu.SetDateExportLB(*t)
	}
	return pu
}

// ClearDateExportLB clears the value of the "DateExportLB" field.
func (pu *PointpendinglbtransactionUpdate) ClearDateExportLB() *PointpendinglbtransactionUpdate {
	pu.mutation.ClearDateExportLB()
	return pu
}

// SetDateGenLB sets the "DateGenLB" field.
func (pu *PointpendinglbtransactionUpdate) SetDateGenLB(t time.Time) *PointpendinglbtransactionUpdate {
	pu.mutation.SetDateGenLB(t)
	return pu
}

// SetNillableDateGenLB sets the "DateGenLB" field if the given value is not nil.
func (pu *PointpendinglbtransactionUpdate) SetNillableDateGenLB(t *time.Time) *PointpendinglbtransactionUpdate {
	if t != nil {
		pu.SetDateGenLB(*t)
	}
	return pu
}

// ClearDateGenLB clears the value of the "DateGenLB" field.
func (pu *PointpendinglbtransactionUpdate) ClearDateGenLB() *PointpendinglbtransactionUpdate {
	pu.mutation.ClearDateGenLB()
	return pu
}

// SetNoteLB sets the "NoteLB" field.
func (pu *PointpendinglbtransactionUpdate) SetNoteLB(s string) *PointpendinglbtransactionUpdate {
	pu.mutation.SetNoteLB(s)
	return pu
}

// SetNillableNoteLB sets the "NoteLB" field if the given value is not nil.
func (pu *PointpendinglbtransactionUpdate) SetNillableNoteLB(s *string) *PointpendinglbtransactionUpdate {
	if s != nil {
		pu.SetNoteLB(*s)
	}
	return pu
}

// ClearNoteLB clears the value of the "NoteLB" field.
func (pu *PointpendinglbtransactionUpdate) ClearNoteLB() *PointpendinglbtransactionUpdate {
	pu.mutation.ClearNoteLB()
	return pu
}

// SetStatusExportLB sets the "StatusExportLB" field.
func (pu *PointpendinglbtransactionUpdate) SetStatusExportLB(b bool) *PointpendinglbtransactionUpdate {
	pu.mutation.SetStatusExportLB(b)
	return pu
}

// SetNillableStatusExportLB sets the "StatusExportLB" field if the given value is not nil.
func (pu *PointpendinglbtransactionUpdate) SetNillableStatusExportLB(b *bool) *PointpendinglbtransactionUpdate {
	if b != nil {
		pu.SetStatusExportLB(*b)
	}
	return pu
}

// ClearStatusExportLB clears the value of the "StatusExportLB" field.
func (pu *PointpendinglbtransactionUpdate) ClearStatusExportLB() *PointpendinglbtransactionUpdate {
	pu.mutation.ClearStatusExportLB()
	return pu
}

// SetLBDate sets the "LBDate" field.
func (pu *PointpendinglbtransactionUpdate) SetLBDate(t time.Time) *PointpendinglbtransactionUpdate {
	pu.mutation.SetLBDate(t)
	return pu
}

// SetNillableLBDate sets the "LBDate" field if the given value is not nil.
func (pu *PointpendinglbtransactionUpdate) SetNillableLBDate(t *time.Time) *PointpendinglbtransactionUpdate {
	if t != nil {
		pu.SetLBDate(*t)
	}
	return pu
}

// ClearLBDate clears the value of the "LBDate" field.
func (pu *PointpendinglbtransactionUpdate) ClearLBDate() *PointpendinglbtransactionUpdate {
	pu.mutation.ClearLBDate()
	return pu
}

// Mutation returns the PointpendinglbtransactionMutation object of the builder.
func (pu *PointpendinglbtransactionUpdate) Mutation() *PointpendinglbtransactionMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PointpendinglbtransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointpendinglbtransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PointpendinglbtransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PointpendinglbtransactionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PointpendinglbtransactionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PointpendinglbtransactionUpdate) check() error {
	if v, ok := pu.mutation.WalletID(); ok {
		if err := pointpendinglbtransaction.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := pu.mutation.NoteLB(); ok {
		if err := pointpendinglbtransaction.NoteLBValidator(v); err != nil {
			return &ValidationError{Name: "NoteLB", err: fmt.Errorf("ent: validator failed for field \"NoteLB\": %w", err)}
		}
	}
	return nil
}

func (pu *PointpendinglbtransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pointpendinglbtransaction.Table,
			Columns: pointpendinglbtransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointpendinglbtransaction.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendinglbtransaction.FieldWalletID,
		})
	}
	if pu.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointpendinglbtransaction.FieldWalletID,
		})
	}
	if value, ok := pu.mutation.PointLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointpendinglbtransaction.FieldPointLB,
		})
	}
	if value, ok := pu.mutation.AddedPointLB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointpendinglbtransaction.FieldPointLB,
		})
	}
	if pu.mutation.PointLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointpendinglbtransaction.FieldPointLB,
		})
	}
	if value, ok := pu.mutation.DateExportLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendinglbtransaction.FieldDateExportLB,
		})
	}
	if pu.mutation.DateExportLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointpendinglbtransaction.FieldDateExportLB,
		})
	}
	if value, ok := pu.mutation.DateGenLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendinglbtransaction.FieldDateGenLB,
		})
	}
	if pu.mutation.DateGenLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointpendinglbtransaction.FieldDateGenLB,
		})
	}
	if value, ok := pu.mutation.NoteLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendinglbtransaction.FieldNoteLB,
		})
	}
	if pu.mutation.NoteLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointpendinglbtransaction.FieldNoteLB,
		})
	}
	if value, ok := pu.mutation.StatusExportLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pointpendinglbtransaction.FieldStatusExportLB,
		})
	}
	if pu.mutation.StatusExportLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: pointpendinglbtransaction.FieldStatusExportLB,
		})
	}
	if value, ok := pu.mutation.LBDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendinglbtransaction.FieldLBDate,
		})
	}
	if pu.mutation.LBDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointpendinglbtransaction.FieldLBDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointpendinglbtransaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PointpendinglbtransactionUpdateOne is the builder for updating a single Pointpendinglbtransaction entity.
type PointpendinglbtransactionUpdateOne struct {
	config
	hooks    []Hook
	mutation *PointpendinglbtransactionMutation
}

// SetWalletID sets the "WalletID" field.
func (puo *PointpendinglbtransactionUpdateOne) SetWalletID(s string) *PointpendinglbtransactionUpdateOne {
	puo.mutation.SetWalletID(s)
	return puo
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (puo *PointpendinglbtransactionUpdateOne) SetNillableWalletID(s *string) *PointpendinglbtransactionUpdateOne {
	if s != nil {
		puo.SetWalletID(*s)
	}
	return puo
}

// ClearWalletID clears the value of the "WalletID" field.
func (puo *PointpendinglbtransactionUpdateOne) ClearWalletID() *PointpendinglbtransactionUpdateOne {
	puo.mutation.ClearWalletID()
	return puo
}

// SetPointLB sets the "PointLB" field.
func (puo *PointpendinglbtransactionUpdateOne) SetPointLB(i int) *PointpendinglbtransactionUpdateOne {
	puo.mutation.ResetPointLB()
	puo.mutation.SetPointLB(i)
	return puo
}

// SetNillablePointLB sets the "PointLB" field if the given value is not nil.
func (puo *PointpendinglbtransactionUpdateOne) SetNillablePointLB(i *int) *PointpendinglbtransactionUpdateOne {
	if i != nil {
		puo.SetPointLB(*i)
	}
	return puo
}

// AddPointLB adds i to the "PointLB" field.
func (puo *PointpendinglbtransactionUpdateOne) AddPointLB(i int) *PointpendinglbtransactionUpdateOne {
	puo.mutation.AddPointLB(i)
	return puo
}

// ClearPointLB clears the value of the "PointLB" field.
func (puo *PointpendinglbtransactionUpdateOne) ClearPointLB() *PointpendinglbtransactionUpdateOne {
	puo.mutation.ClearPointLB()
	return puo
}

// SetDateExportLB sets the "DateExportLB" field.
func (puo *PointpendinglbtransactionUpdateOne) SetDateExportLB(t time.Time) *PointpendinglbtransactionUpdateOne {
	puo.mutation.SetDateExportLB(t)
	return puo
}

// SetNillableDateExportLB sets the "DateExportLB" field if the given value is not nil.
func (puo *PointpendinglbtransactionUpdateOne) SetNillableDateExportLB(t *time.Time) *PointpendinglbtransactionUpdateOne {
	if t != nil {
		puo.SetDateExportLB(*t)
	}
	return puo
}

// ClearDateExportLB clears the value of the "DateExportLB" field.
func (puo *PointpendinglbtransactionUpdateOne) ClearDateExportLB() *PointpendinglbtransactionUpdateOne {
	puo.mutation.ClearDateExportLB()
	return puo
}

// SetDateGenLB sets the "DateGenLB" field.
func (puo *PointpendinglbtransactionUpdateOne) SetDateGenLB(t time.Time) *PointpendinglbtransactionUpdateOne {
	puo.mutation.SetDateGenLB(t)
	return puo
}

// SetNillableDateGenLB sets the "DateGenLB" field if the given value is not nil.
func (puo *PointpendinglbtransactionUpdateOne) SetNillableDateGenLB(t *time.Time) *PointpendinglbtransactionUpdateOne {
	if t != nil {
		puo.SetDateGenLB(*t)
	}
	return puo
}

// ClearDateGenLB clears the value of the "DateGenLB" field.
func (puo *PointpendinglbtransactionUpdateOne) ClearDateGenLB() *PointpendinglbtransactionUpdateOne {
	puo.mutation.ClearDateGenLB()
	return puo
}

// SetNoteLB sets the "NoteLB" field.
func (puo *PointpendinglbtransactionUpdateOne) SetNoteLB(s string) *PointpendinglbtransactionUpdateOne {
	puo.mutation.SetNoteLB(s)
	return puo
}

// SetNillableNoteLB sets the "NoteLB" field if the given value is not nil.
func (puo *PointpendinglbtransactionUpdateOne) SetNillableNoteLB(s *string) *PointpendinglbtransactionUpdateOne {
	if s != nil {
		puo.SetNoteLB(*s)
	}
	return puo
}

// ClearNoteLB clears the value of the "NoteLB" field.
func (puo *PointpendinglbtransactionUpdateOne) ClearNoteLB() *PointpendinglbtransactionUpdateOne {
	puo.mutation.ClearNoteLB()
	return puo
}

// SetStatusExportLB sets the "StatusExportLB" field.
func (puo *PointpendinglbtransactionUpdateOne) SetStatusExportLB(b bool) *PointpendinglbtransactionUpdateOne {
	puo.mutation.SetStatusExportLB(b)
	return puo
}

// SetNillableStatusExportLB sets the "StatusExportLB" field if the given value is not nil.
func (puo *PointpendinglbtransactionUpdateOne) SetNillableStatusExportLB(b *bool) *PointpendinglbtransactionUpdateOne {
	if b != nil {
		puo.SetStatusExportLB(*b)
	}
	return puo
}

// ClearStatusExportLB clears the value of the "StatusExportLB" field.
func (puo *PointpendinglbtransactionUpdateOne) ClearStatusExportLB() *PointpendinglbtransactionUpdateOne {
	puo.mutation.ClearStatusExportLB()
	return puo
}

// SetLBDate sets the "LBDate" field.
func (puo *PointpendinglbtransactionUpdateOne) SetLBDate(t time.Time) *PointpendinglbtransactionUpdateOne {
	puo.mutation.SetLBDate(t)
	return puo
}

// SetNillableLBDate sets the "LBDate" field if the given value is not nil.
func (puo *PointpendinglbtransactionUpdateOne) SetNillableLBDate(t *time.Time) *PointpendinglbtransactionUpdateOne {
	if t != nil {
		puo.SetLBDate(*t)
	}
	return puo
}

// ClearLBDate clears the value of the "LBDate" field.
func (puo *PointpendinglbtransactionUpdateOne) ClearLBDate() *PointpendinglbtransactionUpdateOne {
	puo.mutation.ClearLBDate()
	return puo
}

// Mutation returns the PointpendinglbtransactionMutation object of the builder.
func (puo *PointpendinglbtransactionUpdateOne) Mutation() *PointpendinglbtransactionMutation {
	return puo.mutation
}

// Save executes the query and returns the updated Pointpendinglbtransaction entity.
func (puo *PointpendinglbtransactionUpdateOne) Save(ctx context.Context) (*Pointpendinglbtransaction, error) {
	var (
		err  error
		node *Pointpendinglbtransaction
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointpendinglbtransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PointpendinglbtransactionUpdateOne) SaveX(ctx context.Context) *Pointpendinglbtransaction {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PointpendinglbtransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PointpendinglbtransactionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PointpendinglbtransactionUpdateOne) check() error {
	if v, ok := puo.mutation.WalletID(); ok {
		if err := pointpendinglbtransaction.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := puo.mutation.NoteLB(); ok {
		if err := pointpendinglbtransaction.NoteLBValidator(v); err != nil {
			return &ValidationError{Name: "NoteLB", err: fmt.Errorf("ent: validator failed for field \"NoteLB\": %w", err)}
		}
	}
	return nil
}

func (puo *PointpendinglbtransactionUpdateOne) sqlSave(ctx context.Context) (_node *Pointpendinglbtransaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pointpendinglbtransaction.Table,
			Columns: pointpendinglbtransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointpendinglbtransaction.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pointpendinglbtransaction.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendinglbtransaction.FieldWalletID,
		})
	}
	if puo.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointpendinglbtransaction.FieldWalletID,
		})
	}
	if value, ok := puo.mutation.PointLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointpendinglbtransaction.FieldPointLB,
		})
	}
	if value, ok := puo.mutation.AddedPointLB(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointpendinglbtransaction.FieldPointLB,
		})
	}
	if puo.mutation.PointLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointpendinglbtransaction.FieldPointLB,
		})
	}
	if value, ok := puo.mutation.DateExportLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendinglbtransaction.FieldDateExportLB,
		})
	}
	if puo.mutation.DateExportLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointpendinglbtransaction.FieldDateExportLB,
		})
	}
	if value, ok := puo.mutation.DateGenLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendinglbtransaction.FieldDateGenLB,
		})
	}
	if puo.mutation.DateGenLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointpendinglbtransaction.FieldDateGenLB,
		})
	}
	if value, ok := puo.mutation.NoteLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointpendinglbtransaction.FieldNoteLB,
		})
	}
	if puo.mutation.NoteLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointpendinglbtransaction.FieldNoteLB,
		})
	}
	if value, ok := puo.mutation.StatusExportLB(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pointpendinglbtransaction.FieldStatusExportLB,
		})
	}
	if puo.mutation.StatusExportLBCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: pointpendinglbtransaction.FieldStatusExportLB,
		})
	}
	if value, ok := puo.mutation.LBDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointpendinglbtransaction.FieldLBDate,
		})
	}
	if puo.mutation.LBDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointpendinglbtransaction.FieldLBDate,
		})
	}
	_node = &Pointpendinglbtransaction{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointpendinglbtransaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
