// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/configarea"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigareaUpdate is the builder for updating Configarea entities.
type ConfigareaUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigareaMutation
}

// Where adds a new predicate for the ConfigareaUpdate builder.
func (cu *ConfigareaUpdate) Where(ps ...predicate.Configarea) *ConfigareaUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetProvinceID sets the "ProvinceID" field.
func (cu *ConfigareaUpdate) SetProvinceID(i int) *ConfigareaUpdate {
	cu.mutation.ResetProvinceID()
	cu.mutation.SetProvinceID(i)
	return cu
}

// SetNillableProvinceID sets the "ProvinceID" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableProvinceID(i *int) *ConfigareaUpdate {
	if i != nil {
		cu.SetProvinceID(*i)
	}
	return cu
}

// AddProvinceID adds i to the "ProvinceID" field.
func (cu *ConfigareaUpdate) AddProvinceID(i int) *ConfigareaUpdate {
	cu.mutation.AddProvinceID(i)
	return cu
}

// ClearProvinceID clears the value of the "ProvinceID" field.
func (cu *ConfigareaUpdate) ClearProvinceID() *ConfigareaUpdate {
	cu.mutation.ClearProvinceID()
	return cu
}

// SetProvinceNameTH sets the "ProvinceNameTH" field.
func (cu *ConfigareaUpdate) SetProvinceNameTH(s string) *ConfigareaUpdate {
	cu.mutation.SetProvinceNameTH(s)
	return cu
}

// SetNillableProvinceNameTH sets the "ProvinceNameTH" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableProvinceNameTH(s *string) *ConfigareaUpdate {
	if s != nil {
		cu.SetProvinceNameTH(*s)
	}
	return cu
}

// ClearProvinceNameTH clears the value of the "ProvinceNameTH" field.
func (cu *ConfigareaUpdate) ClearProvinceNameTH() *ConfigareaUpdate {
	cu.mutation.ClearProvinceNameTH()
	return cu
}

// SetDistrictID sets the "DistrictID" field.
func (cu *ConfigareaUpdate) SetDistrictID(i int) *ConfigareaUpdate {
	cu.mutation.ResetDistrictID()
	cu.mutation.SetDistrictID(i)
	return cu
}

// SetNillableDistrictID sets the "DistrictID" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableDistrictID(i *int) *ConfigareaUpdate {
	if i != nil {
		cu.SetDistrictID(*i)
	}
	return cu
}

// AddDistrictID adds i to the "DistrictID" field.
func (cu *ConfigareaUpdate) AddDistrictID(i int) *ConfigareaUpdate {
	cu.mutation.AddDistrictID(i)
	return cu
}

// ClearDistrictID clears the value of the "DistrictID" field.
func (cu *ConfigareaUpdate) ClearDistrictID() *ConfigareaUpdate {
	cu.mutation.ClearDistrictID()
	return cu
}

// SetDistrictNameTH sets the "DistrictNameTH" field.
func (cu *ConfigareaUpdate) SetDistrictNameTH(s string) *ConfigareaUpdate {
	cu.mutation.SetDistrictNameTH(s)
	return cu
}

// SetNillableDistrictNameTH sets the "DistrictNameTH" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableDistrictNameTH(s *string) *ConfigareaUpdate {
	if s != nil {
		cu.SetDistrictNameTH(*s)
	}
	return cu
}

// ClearDistrictNameTH clears the value of the "DistrictNameTH" field.
func (cu *ConfigareaUpdate) ClearDistrictNameTH() *ConfigareaUpdate {
	cu.mutation.ClearDistrictNameTH()
	return cu
}

// SetDistrictNameEN sets the "DistrictNameEN" field.
func (cu *ConfigareaUpdate) SetDistrictNameEN(s string) *ConfigareaUpdate {
	cu.mutation.SetDistrictNameEN(s)
	return cu
}

// SetNillableDistrictNameEN sets the "DistrictNameEN" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableDistrictNameEN(s *string) *ConfigareaUpdate {
	if s != nil {
		cu.SetDistrictNameEN(*s)
	}
	return cu
}

// ClearDistrictNameEN clears the value of the "DistrictNameEN" field.
func (cu *ConfigareaUpdate) ClearDistrictNameEN() *ConfigareaUpdate {
	cu.mutation.ClearDistrictNameEN()
	return cu
}

// SetRank sets the "Rank" field.
func (cu *ConfigareaUpdate) SetRank(s string) *ConfigareaUpdate {
	cu.mutation.SetRank(s)
	return cu
}

// SetNillableRank sets the "Rank" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableRank(s *string) *ConfigareaUpdate {
	if s != nil {
		cu.SetRank(*s)
	}
	return cu
}

// ClearRank clears the value of the "Rank" field.
func (cu *ConfigareaUpdate) ClearRank() *ConfigareaUpdate {
	cu.mutation.ClearRank()
	return cu
}

// SetRankTmp sets the "RankTmp" field.
func (cu *ConfigareaUpdate) SetRankTmp(s string) *ConfigareaUpdate {
	cu.mutation.SetRankTmp(s)
	return cu
}

// SetNillableRankTmp sets the "RankTmp" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableRankTmp(s *string) *ConfigareaUpdate {
	if s != nil {
		cu.SetRankTmp(*s)
	}
	return cu
}

// ClearRankTmp clears the value of the "RankTmp" field.
func (cu *ConfigareaUpdate) ClearRankTmp() *ConfigareaUpdate {
	cu.mutation.ClearRankTmp()
	return cu
}

// SetUpdateDate sets the "UpdateDate" field.
func (cu *ConfigareaUpdate) SetUpdateDate(t time.Time) *ConfigareaUpdate {
	cu.mutation.SetUpdateDate(t)
	return cu
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableUpdateDate(t *time.Time) *ConfigareaUpdate {
	if t != nil {
		cu.SetUpdateDate(*t)
	}
	return cu
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (cu *ConfigareaUpdate) ClearUpdateDate() *ConfigareaUpdate {
	cu.mutation.ClearUpdateDate()
	return cu
}

// SetZipCode sets the "ZipCode" field.
func (cu *ConfigareaUpdate) SetZipCode(s string) *ConfigareaUpdate {
	cu.mutation.SetZipCode(s)
	return cu
}

// SetNillableZipCode sets the "ZipCode" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableZipCode(s *string) *ConfigareaUpdate {
	if s != nil {
		cu.SetZipCode(*s)
	}
	return cu
}

// ClearZipCode clears the value of the "ZipCode" field.
func (cu *ConfigareaUpdate) ClearZipCode() *ConfigareaUpdate {
	cu.mutation.ClearZipCode()
	return cu
}

// SetSubDistrictNameTH sets the "SubDistrictNameTH" field.
func (cu *ConfigareaUpdate) SetSubDistrictNameTH(s string) *ConfigareaUpdate {
	cu.mutation.SetSubDistrictNameTH(s)
	return cu
}

// SetNillableSubDistrictNameTH sets the "SubDistrictNameTH" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableSubDistrictNameTH(s *string) *ConfigareaUpdate {
	if s != nil {
		cu.SetSubDistrictNameTH(*s)
	}
	return cu
}

// ClearSubDistrictNameTH clears the value of the "SubDistrictNameTH" field.
func (cu *ConfigareaUpdate) ClearSubDistrictNameTH() *ConfigareaUpdate {
	cu.mutation.ClearSubDistrictNameTH()
	return cu
}

// SetApproveBy sets the "ApproveBy" field.
func (cu *ConfigareaUpdate) SetApproveBy(s string) *ConfigareaUpdate {
	cu.mutation.SetApproveBy(s)
	return cu
}

// SetNillableApproveBy sets the "ApproveBy" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableApproveBy(s *string) *ConfigareaUpdate {
	if s != nil {
		cu.SetApproveBy(*s)
	}
	return cu
}

// ClearApproveBy clears the value of the "ApproveBy" field.
func (cu *ConfigareaUpdate) ClearApproveBy() *ConfigareaUpdate {
	cu.mutation.ClearApproveBy()
	return cu
}

// SetApproveDate sets the "ApproveDate" field.
func (cu *ConfigareaUpdate) SetApproveDate(t time.Time) *ConfigareaUpdate {
	cu.mutation.SetApproveDate(t)
	return cu
}

// SetNillableApproveDate sets the "ApproveDate" field if the given value is not nil.
func (cu *ConfigareaUpdate) SetNillableApproveDate(t *time.Time) *ConfigareaUpdate {
	if t != nil {
		cu.SetApproveDate(*t)
	}
	return cu
}

// ClearApproveDate clears the value of the "ApproveDate" field.
func (cu *ConfigareaUpdate) ClearApproveDate() *ConfigareaUpdate {
	cu.mutation.ClearApproveDate()
	return cu
}

// Mutation returns the ConfigareaMutation object of the builder.
func (cu *ConfigareaUpdate) Mutation() *ConfigareaMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConfigareaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigareaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConfigareaUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConfigareaUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConfigareaUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConfigareaUpdate) check() error {
	if v, ok := cu.mutation.ProvinceNameTH(); ok {
		if err := configarea.ProvinceNameTHValidator(v); err != nil {
			return &ValidationError{Name: "ProvinceNameTH", err: fmt.Errorf("ent: validator failed for field \"ProvinceNameTH\": %w", err)}
		}
	}
	if v, ok := cu.mutation.DistrictNameTH(); ok {
		if err := configarea.DistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"DistrictNameTH\": %w", err)}
		}
	}
	if v, ok := cu.mutation.DistrictNameEN(); ok {
		if err := configarea.DistrictNameENValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameEN", err: fmt.Errorf("ent: validator failed for field \"DistrictNameEN\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Rank(); ok {
		if err := configarea.RankValidator(v); err != nil {
			return &ValidationError{Name: "Rank", err: fmt.Errorf("ent: validator failed for field \"Rank\": %w", err)}
		}
	}
	if v, ok := cu.mutation.RankTmp(); ok {
		if err := configarea.RankTmpValidator(v); err != nil {
			return &ValidationError{Name: "RankTmp", err: fmt.Errorf("ent: validator failed for field \"RankTmp\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ZipCode(); ok {
		if err := configarea.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "ZipCode", err: fmt.Errorf("ent: validator failed for field \"ZipCode\": %w", err)}
		}
	}
	if v, ok := cu.mutation.SubDistrictNameTH(); ok {
		if err := configarea.SubDistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"SubDistrictNameTH\": %w", err)}
		}
	}
	if v, ok := cu.mutation.ApproveBy(); ok {
		if err := configarea.ApproveByValidator(v); err != nil {
			return &ValidationError{Name: "ApproveBy", err: fmt.Errorf("ent: validator failed for field \"ApproveBy\": %w", err)}
		}
	}
	return nil
}

func (cu *ConfigareaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configarea.Table,
			Columns: configarea.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configarea.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ProvinceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configarea.FieldProvinceID,
		})
	}
	if value, ok := cu.mutation.AddedProvinceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configarea.FieldProvinceID,
		})
	}
	if cu.mutation.ProvinceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: configarea.FieldProvinceID,
		})
	}
	if value, ok := cu.mutation.ProvinceNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldProvinceNameTH,
		})
	}
	if cu.mutation.ProvinceNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldProvinceNameTH,
		})
	}
	if value, ok := cu.mutation.DistrictID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configarea.FieldDistrictID,
		})
	}
	if value, ok := cu.mutation.AddedDistrictID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configarea.FieldDistrictID,
		})
	}
	if cu.mutation.DistrictIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: configarea.FieldDistrictID,
		})
	}
	if value, ok := cu.mutation.DistrictNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldDistrictNameTH,
		})
	}
	if cu.mutation.DistrictNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldDistrictNameTH,
		})
	}
	if value, ok := cu.mutation.DistrictNameEN(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldDistrictNameEN,
		})
	}
	if cu.mutation.DistrictNameENCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldDistrictNameEN,
		})
	}
	if value, ok := cu.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldRank,
		})
	}
	if cu.mutation.RankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldRank,
		})
	}
	if value, ok := cu.mutation.RankTmp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldRankTmp,
		})
	}
	if cu.mutation.RankTmpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldRankTmp,
		})
	}
	if value, ok := cu.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configarea.FieldUpdateDate,
		})
	}
	if cu.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: configarea.FieldUpdateDate,
		})
	}
	if value, ok := cu.mutation.ZipCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldZipCode,
		})
	}
	if cu.mutation.ZipCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldZipCode,
		})
	}
	if value, ok := cu.mutation.SubDistrictNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldSubDistrictNameTH,
		})
	}
	if cu.mutation.SubDistrictNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldSubDistrictNameTH,
		})
	}
	if value, ok := cu.mutation.ApproveBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldApproveBy,
		})
	}
	if cu.mutation.ApproveByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldApproveBy,
		})
	}
	if value, ok := cu.mutation.ApproveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configarea.FieldApproveDate,
		})
	}
	if cu.mutation.ApproveDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: configarea.FieldApproveDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configarea.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ConfigareaUpdateOne is the builder for updating a single Configarea entity.
type ConfigareaUpdateOne struct {
	config
	hooks    []Hook
	mutation *ConfigareaMutation
}

// SetProvinceID sets the "ProvinceID" field.
func (cuo *ConfigareaUpdateOne) SetProvinceID(i int) *ConfigareaUpdateOne {
	cuo.mutation.ResetProvinceID()
	cuo.mutation.SetProvinceID(i)
	return cuo
}

// SetNillableProvinceID sets the "ProvinceID" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableProvinceID(i *int) *ConfigareaUpdateOne {
	if i != nil {
		cuo.SetProvinceID(*i)
	}
	return cuo
}

// AddProvinceID adds i to the "ProvinceID" field.
func (cuo *ConfigareaUpdateOne) AddProvinceID(i int) *ConfigareaUpdateOne {
	cuo.mutation.AddProvinceID(i)
	return cuo
}

// ClearProvinceID clears the value of the "ProvinceID" field.
func (cuo *ConfigareaUpdateOne) ClearProvinceID() *ConfigareaUpdateOne {
	cuo.mutation.ClearProvinceID()
	return cuo
}

// SetProvinceNameTH sets the "ProvinceNameTH" field.
func (cuo *ConfigareaUpdateOne) SetProvinceNameTH(s string) *ConfigareaUpdateOne {
	cuo.mutation.SetProvinceNameTH(s)
	return cuo
}

// SetNillableProvinceNameTH sets the "ProvinceNameTH" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableProvinceNameTH(s *string) *ConfigareaUpdateOne {
	if s != nil {
		cuo.SetProvinceNameTH(*s)
	}
	return cuo
}

// ClearProvinceNameTH clears the value of the "ProvinceNameTH" field.
func (cuo *ConfigareaUpdateOne) ClearProvinceNameTH() *ConfigareaUpdateOne {
	cuo.mutation.ClearProvinceNameTH()
	return cuo
}

// SetDistrictID sets the "DistrictID" field.
func (cuo *ConfigareaUpdateOne) SetDistrictID(i int) *ConfigareaUpdateOne {
	cuo.mutation.ResetDistrictID()
	cuo.mutation.SetDistrictID(i)
	return cuo
}

// SetNillableDistrictID sets the "DistrictID" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableDistrictID(i *int) *ConfigareaUpdateOne {
	if i != nil {
		cuo.SetDistrictID(*i)
	}
	return cuo
}

// AddDistrictID adds i to the "DistrictID" field.
func (cuo *ConfigareaUpdateOne) AddDistrictID(i int) *ConfigareaUpdateOne {
	cuo.mutation.AddDistrictID(i)
	return cuo
}

// ClearDistrictID clears the value of the "DistrictID" field.
func (cuo *ConfigareaUpdateOne) ClearDistrictID() *ConfigareaUpdateOne {
	cuo.mutation.ClearDistrictID()
	return cuo
}

// SetDistrictNameTH sets the "DistrictNameTH" field.
func (cuo *ConfigareaUpdateOne) SetDistrictNameTH(s string) *ConfigareaUpdateOne {
	cuo.mutation.SetDistrictNameTH(s)
	return cuo
}

// SetNillableDistrictNameTH sets the "DistrictNameTH" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableDistrictNameTH(s *string) *ConfigareaUpdateOne {
	if s != nil {
		cuo.SetDistrictNameTH(*s)
	}
	return cuo
}

// ClearDistrictNameTH clears the value of the "DistrictNameTH" field.
func (cuo *ConfigareaUpdateOne) ClearDistrictNameTH() *ConfigareaUpdateOne {
	cuo.mutation.ClearDistrictNameTH()
	return cuo
}

// SetDistrictNameEN sets the "DistrictNameEN" field.
func (cuo *ConfigareaUpdateOne) SetDistrictNameEN(s string) *ConfigareaUpdateOne {
	cuo.mutation.SetDistrictNameEN(s)
	return cuo
}

// SetNillableDistrictNameEN sets the "DistrictNameEN" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableDistrictNameEN(s *string) *ConfigareaUpdateOne {
	if s != nil {
		cuo.SetDistrictNameEN(*s)
	}
	return cuo
}

// ClearDistrictNameEN clears the value of the "DistrictNameEN" field.
func (cuo *ConfigareaUpdateOne) ClearDistrictNameEN() *ConfigareaUpdateOne {
	cuo.mutation.ClearDistrictNameEN()
	return cuo
}

// SetRank sets the "Rank" field.
func (cuo *ConfigareaUpdateOne) SetRank(s string) *ConfigareaUpdateOne {
	cuo.mutation.SetRank(s)
	return cuo
}

// SetNillableRank sets the "Rank" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableRank(s *string) *ConfigareaUpdateOne {
	if s != nil {
		cuo.SetRank(*s)
	}
	return cuo
}

// ClearRank clears the value of the "Rank" field.
func (cuo *ConfigareaUpdateOne) ClearRank() *ConfigareaUpdateOne {
	cuo.mutation.ClearRank()
	return cuo
}

// SetRankTmp sets the "RankTmp" field.
func (cuo *ConfigareaUpdateOne) SetRankTmp(s string) *ConfigareaUpdateOne {
	cuo.mutation.SetRankTmp(s)
	return cuo
}

// SetNillableRankTmp sets the "RankTmp" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableRankTmp(s *string) *ConfigareaUpdateOne {
	if s != nil {
		cuo.SetRankTmp(*s)
	}
	return cuo
}

// ClearRankTmp clears the value of the "RankTmp" field.
func (cuo *ConfigareaUpdateOne) ClearRankTmp() *ConfigareaUpdateOne {
	cuo.mutation.ClearRankTmp()
	return cuo
}

// SetUpdateDate sets the "UpdateDate" field.
func (cuo *ConfigareaUpdateOne) SetUpdateDate(t time.Time) *ConfigareaUpdateOne {
	cuo.mutation.SetUpdateDate(t)
	return cuo
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableUpdateDate(t *time.Time) *ConfigareaUpdateOne {
	if t != nil {
		cuo.SetUpdateDate(*t)
	}
	return cuo
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (cuo *ConfigareaUpdateOne) ClearUpdateDate() *ConfigareaUpdateOne {
	cuo.mutation.ClearUpdateDate()
	return cuo
}

// SetZipCode sets the "ZipCode" field.
func (cuo *ConfigareaUpdateOne) SetZipCode(s string) *ConfigareaUpdateOne {
	cuo.mutation.SetZipCode(s)
	return cuo
}

// SetNillableZipCode sets the "ZipCode" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableZipCode(s *string) *ConfigareaUpdateOne {
	if s != nil {
		cuo.SetZipCode(*s)
	}
	return cuo
}

// ClearZipCode clears the value of the "ZipCode" field.
func (cuo *ConfigareaUpdateOne) ClearZipCode() *ConfigareaUpdateOne {
	cuo.mutation.ClearZipCode()
	return cuo
}

// SetSubDistrictNameTH sets the "SubDistrictNameTH" field.
func (cuo *ConfigareaUpdateOne) SetSubDistrictNameTH(s string) *ConfigareaUpdateOne {
	cuo.mutation.SetSubDistrictNameTH(s)
	return cuo
}

// SetNillableSubDistrictNameTH sets the "SubDistrictNameTH" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableSubDistrictNameTH(s *string) *ConfigareaUpdateOne {
	if s != nil {
		cuo.SetSubDistrictNameTH(*s)
	}
	return cuo
}

// ClearSubDistrictNameTH clears the value of the "SubDistrictNameTH" field.
func (cuo *ConfigareaUpdateOne) ClearSubDistrictNameTH() *ConfigareaUpdateOne {
	cuo.mutation.ClearSubDistrictNameTH()
	return cuo
}

// SetApproveBy sets the "ApproveBy" field.
func (cuo *ConfigareaUpdateOne) SetApproveBy(s string) *ConfigareaUpdateOne {
	cuo.mutation.SetApproveBy(s)
	return cuo
}

// SetNillableApproveBy sets the "ApproveBy" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableApproveBy(s *string) *ConfigareaUpdateOne {
	if s != nil {
		cuo.SetApproveBy(*s)
	}
	return cuo
}

// ClearApproveBy clears the value of the "ApproveBy" field.
func (cuo *ConfigareaUpdateOne) ClearApproveBy() *ConfigareaUpdateOne {
	cuo.mutation.ClearApproveBy()
	return cuo
}

// SetApproveDate sets the "ApproveDate" field.
func (cuo *ConfigareaUpdateOne) SetApproveDate(t time.Time) *ConfigareaUpdateOne {
	cuo.mutation.SetApproveDate(t)
	return cuo
}

// SetNillableApproveDate sets the "ApproveDate" field if the given value is not nil.
func (cuo *ConfigareaUpdateOne) SetNillableApproveDate(t *time.Time) *ConfigareaUpdateOne {
	if t != nil {
		cuo.SetApproveDate(*t)
	}
	return cuo
}

// ClearApproveDate clears the value of the "ApproveDate" field.
func (cuo *ConfigareaUpdateOne) ClearApproveDate() *ConfigareaUpdateOne {
	cuo.mutation.ClearApproveDate()
	return cuo
}

// Mutation returns the ConfigareaMutation object of the builder.
func (cuo *ConfigareaUpdateOne) Mutation() *ConfigareaMutation {
	return cuo.mutation
}

// Save executes the query and returns the updated Configarea entity.
func (cuo *ConfigareaUpdateOne) Save(ctx context.Context) (*Configarea, error) {
	var (
		err  error
		node *Configarea
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigareaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConfigareaUpdateOne) SaveX(ctx context.Context) *Configarea {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConfigareaUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConfigareaUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConfigareaUpdateOne) check() error {
	if v, ok := cuo.mutation.ProvinceNameTH(); ok {
		if err := configarea.ProvinceNameTHValidator(v); err != nil {
			return &ValidationError{Name: "ProvinceNameTH", err: fmt.Errorf("ent: validator failed for field \"ProvinceNameTH\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.DistrictNameTH(); ok {
		if err := configarea.DistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"DistrictNameTH\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.DistrictNameEN(); ok {
		if err := configarea.DistrictNameENValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameEN", err: fmt.Errorf("ent: validator failed for field \"DistrictNameEN\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Rank(); ok {
		if err := configarea.RankValidator(v); err != nil {
			return &ValidationError{Name: "Rank", err: fmt.Errorf("ent: validator failed for field \"Rank\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.RankTmp(); ok {
		if err := configarea.RankTmpValidator(v); err != nil {
			return &ValidationError{Name: "RankTmp", err: fmt.Errorf("ent: validator failed for field \"RankTmp\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ZipCode(); ok {
		if err := configarea.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "ZipCode", err: fmt.Errorf("ent: validator failed for field \"ZipCode\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.SubDistrictNameTH(); ok {
		if err := configarea.SubDistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"SubDistrictNameTH\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.ApproveBy(); ok {
		if err := configarea.ApproveByValidator(v); err != nil {
			return &ValidationError{Name: "ApproveBy", err: fmt.Errorf("ent: validator failed for field \"ApproveBy\": %w", err)}
		}
	}
	return nil
}

func (cuo *ConfigareaUpdateOne) sqlSave(ctx context.Context) (_node *Configarea, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configarea.Table,
			Columns: configarea.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configarea.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Configarea.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ProvinceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configarea.FieldProvinceID,
		})
	}
	if value, ok := cuo.mutation.AddedProvinceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configarea.FieldProvinceID,
		})
	}
	if cuo.mutation.ProvinceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: configarea.FieldProvinceID,
		})
	}
	if value, ok := cuo.mutation.ProvinceNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldProvinceNameTH,
		})
	}
	if cuo.mutation.ProvinceNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldProvinceNameTH,
		})
	}
	if value, ok := cuo.mutation.DistrictID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configarea.FieldDistrictID,
		})
	}
	if value, ok := cuo.mutation.AddedDistrictID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configarea.FieldDistrictID,
		})
	}
	if cuo.mutation.DistrictIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: configarea.FieldDistrictID,
		})
	}
	if value, ok := cuo.mutation.DistrictNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldDistrictNameTH,
		})
	}
	if cuo.mutation.DistrictNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldDistrictNameTH,
		})
	}
	if value, ok := cuo.mutation.DistrictNameEN(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldDistrictNameEN,
		})
	}
	if cuo.mutation.DistrictNameENCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldDistrictNameEN,
		})
	}
	if value, ok := cuo.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldRank,
		})
	}
	if cuo.mutation.RankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldRank,
		})
	}
	if value, ok := cuo.mutation.RankTmp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldRankTmp,
		})
	}
	if cuo.mutation.RankTmpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldRankTmp,
		})
	}
	if value, ok := cuo.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configarea.FieldUpdateDate,
		})
	}
	if cuo.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: configarea.FieldUpdateDate,
		})
	}
	if value, ok := cuo.mutation.ZipCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldZipCode,
		})
	}
	if cuo.mutation.ZipCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldZipCode,
		})
	}
	if value, ok := cuo.mutation.SubDistrictNameTH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldSubDistrictNameTH,
		})
	}
	if cuo.mutation.SubDistrictNameTHCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldSubDistrictNameTH,
		})
	}
	if value, ok := cuo.mutation.ApproveBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldApproveBy,
		})
	}
	if cuo.mutation.ApproveByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configarea.FieldApproveBy,
		})
	}
	if value, ok := cuo.mutation.ApproveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configarea.FieldApproveDate,
		})
	}
	if cuo.mutation.ApproveDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: configarea.FieldApproveDate,
		})
	}
	_node = &Configarea{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configarea.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
