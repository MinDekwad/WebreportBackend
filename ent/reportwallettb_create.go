// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-report2/ent/reportwallettb"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReportwallettbCreate is the builder for creating a Reportwallettb entity.
type ReportwallettbCreate struct {
	config
	mutation *ReportwallettbMutation
	hooks    []Hook
}

// SetWalletid sets the "walletid" field.
func (rc *ReportwallettbCreate) SetWalletid(s string) *ReportwallettbCreate {
	rc.mutation.SetWalletid(s)
	return rc
}

// SetWalletTypeName sets the "WalletTypeName" field.
func (rc *ReportwallettbCreate) SetWalletTypeName(s string) *ReportwallettbCreate {
	rc.mutation.SetWalletTypeName(s)
	return rc
}

// SetNillableWalletTypeName sets the "WalletTypeName" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableWalletTypeName(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetWalletTypeName(*s)
	}
	return rc
}

// SetWalletPhoneno sets the "WalletPhoneno" field.
func (rc *ReportwallettbCreate) SetWalletPhoneno(s string) *ReportwallettbCreate {
	rc.mutation.SetWalletPhoneno(s)
	return rc
}

// SetNillableWalletPhoneno sets the "WalletPhoneno" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableWalletPhoneno(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetWalletPhoneno(*s)
	}
	return rc
}

// SetWalletName sets the "WalletName" field.
func (rc *ReportwallettbCreate) SetWalletName(s string) *ReportwallettbCreate {
	rc.mutation.SetWalletName(s)
	return rc
}

// SetNillableWalletName sets the "WalletName" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableWalletName(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetWalletName(*s)
	}
	return rc
}

// SetCitizenId sets the "CitizenId" field.
func (rc *ReportwallettbCreate) SetCitizenId(s string) *ReportwallettbCreate {
	rc.mutation.SetCitizenId(s)
	return rc
}

// SetNillableCitizenId sets the "CitizenId" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableCitizenId(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetCitizenId(*s)
	}
	return rc
}

// SetStatus sets the "Status" field.
func (rc *ReportwallettbCreate) SetStatus(s string) *ReportwallettbCreate {
	rc.mutation.SetStatus(s)
	return rc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableStatus(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetStatus(*s)
	}
	return rc
}

// SetRegisterDate sets the "RegisterDate" field.
func (rc *ReportwallettbCreate) SetRegisterDate(t time.Time) *ReportwallettbCreate {
	rc.mutation.SetRegisterDate(t)
	return rc
}

// SetNillableRegisterDate sets the "RegisterDate" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableRegisterDate(t *time.Time) *ReportwallettbCreate {
	if t != nil {
		rc.SetRegisterDate(*t)
	}
	return rc
}

// SetGroupUser sets the "GroupUser" field.
func (rc *ReportwallettbCreate) SetGroupUser(i int) *ReportwallettbCreate {
	rc.mutation.SetGroupUser(i)
	return rc
}

// SetNillableGroupUser sets the "GroupUser" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableGroupUser(i *int) *ReportwallettbCreate {
	if i != nil {
		rc.SetGroupUser(*i)
	}
	return rc
}

// SetUserAgent sets the "UserAgent" field.
func (rc *ReportwallettbCreate) SetUserAgent(s string) *ReportwallettbCreate {
	rc.mutation.SetUserAgent(s)
	return rc
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableUserAgent(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetUserAgent(*s)
	}
	return rc
}

// SetKYCDate sets the "KYC_Date" field.
func (rc *ReportwallettbCreate) SetKYCDate(t time.Time) *ReportwallettbCreate {
	rc.mutation.SetKYCDate(t)
	return rc
}

// SetNillableKYCDate sets the "KYC_Date" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableKYCDate(t *time.Time) *ReportwallettbCreate {
	if t != nil {
		rc.SetKYCDate(*t)
	}
	return rc
}

// SetATMCard sets the "ATMCard" field.
func (rc *ReportwallettbCreate) SetATMCard(s string) *ReportwallettbCreate {
	rc.mutation.SetATMCard(s)
	return rc
}

// SetNillableATMCard sets the "ATMCard" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableATMCard(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetATMCard(*s)
	}
	return rc
}

// SetAccountNo sets the "AccountNo" field.
func (rc *ReportwallettbCreate) SetAccountNo(s string) *ReportwallettbCreate {
	rc.mutation.SetAccountNo(s)
	return rc
}

// SetNillableAccountNo sets the "AccountNo" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableAccountNo(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetAccountNo(*s)
	}
	return rc
}

// SetAddressDetail sets the "AddressDetail" field.
func (rc *ReportwallettbCreate) SetAddressDetail(s string) *ReportwallettbCreate {
	rc.mutation.SetAddressDetail(s)
	return rc
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableAddressDetail(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetAddressDetail(*s)
	}
	return rc
}

// SetStreet sets the "Street" field.
func (rc *ReportwallettbCreate) SetStreet(s string) *ReportwallettbCreate {
	rc.mutation.SetStreet(s)
	return rc
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableStreet(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetStreet(*s)
	}
	return rc
}

// SetDistrict sets the "District" field.
func (rc *ReportwallettbCreate) SetDistrict(s string) *ReportwallettbCreate {
	rc.mutation.SetDistrict(s)
	return rc
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableDistrict(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetDistrict(*s)
	}
	return rc
}

// SetSubDistrict sets the "SubDistrict" field.
func (rc *ReportwallettbCreate) SetSubDistrict(s string) *ReportwallettbCreate {
	rc.mutation.SetSubDistrict(s)
	return rc
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableSubDistrict(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetSubDistrict(*s)
	}
	return rc
}

// SetProvince sets the "Province" field.
func (rc *ReportwallettbCreate) SetProvince(s string) *ReportwallettbCreate {
	rc.mutation.SetProvince(s)
	return rc
}

// SetNillableProvince sets the "Province" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableProvince(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetProvince(*s)
	}
	return rc
}

// SetPostalCode sets the "PostalCode" field.
func (rc *ReportwallettbCreate) SetPostalCode(s string) *ReportwallettbCreate {
	rc.mutation.SetPostalCode(s)
	return rc
}

// SetNillablePostalCode sets the "PostalCode" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillablePostalCode(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetPostalCode(*s)
	}
	return rc
}

// SetIsKYC sets the "isKYC" field.
func (rc *ReportwallettbCreate) SetIsKYC(s string) *ReportwallettbCreate {
	rc.mutation.SetIsKYC(s)
	return rc
}

// SetNillableIsKYC sets the "isKYC" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableIsKYC(s *string) *ReportwallettbCreate {
	if s != nil {
		rc.SetIsKYC(*s)
	}
	return rc
}

// SetUpdateDate sets the "UpdateDate" field.
func (rc *ReportwallettbCreate) SetUpdateDate(t time.Time) *ReportwallettbCreate {
	rc.mutation.SetUpdateDate(t)
	return rc
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (rc *ReportwallettbCreate) SetNillableUpdateDate(t *time.Time) *ReportwallettbCreate {
	if t != nil {
		rc.SetUpdateDate(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReportwallettbCreate) SetID(i int) *ReportwallettbCreate {
	rc.mutation.SetID(i)
	return rc
}

// Mutation returns the ReportwallettbMutation object of the builder.
func (rc *ReportwallettbCreate) Mutation() *ReportwallettbMutation {
	return rc.mutation
}

// Save creates the Reportwallettb in the database.
func (rc *ReportwallettbCreate) Save(ctx context.Context) (*Reportwallettb, error) {
	var (
		err  error
		node *Reportwallettb
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportwallettbMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReportwallettbCreate) SaveX(ctx context.Context) *Reportwallettb {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReportwallettbCreate) check() error {
	if _, ok := rc.mutation.Walletid(); !ok {
		return &ValidationError{Name: "walletid", err: errors.New("ent: missing required field \"walletid\"")}
	}
	if v, ok := rc.mutation.Walletid(); ok {
		if err := reportwallettb.WalletidValidator(v); err != nil {
			return &ValidationError{Name: "walletid", err: fmt.Errorf("ent: validator failed for field \"walletid\": %w", err)}
		}
	}
	if v, ok := rc.mutation.WalletTypeName(); ok {
		if err := reportwallettb.WalletTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletTypeName", err: fmt.Errorf("ent: validator failed for field \"WalletTypeName\": %w", err)}
		}
	}
	if v, ok := rc.mutation.WalletPhoneno(); ok {
		if err := reportwallettb.WalletPhonenoValidator(v); err != nil {
			return &ValidationError{Name: "WalletPhoneno", err: fmt.Errorf("ent: validator failed for field \"WalletPhoneno\": %w", err)}
		}
	}
	if v, ok := rc.mutation.WalletName(); ok {
		if err := reportwallettb.WalletNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletName", err: fmt.Errorf("ent: validator failed for field \"WalletName\": %w", err)}
		}
	}
	if v, ok := rc.mutation.CitizenId(); ok {
		if err := reportwallettb.CitizenIdValidator(v); err != nil {
			return &ValidationError{Name: "CitizenId", err: fmt.Errorf("ent: validator failed for field \"CitizenId\": %w", err)}
		}
	}
	if v, ok := rc.mutation.Status(); ok {
		if err := reportwallettb.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := rc.mutation.UserAgent(); ok {
		if err := reportwallettb.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "UserAgent", err: fmt.Errorf("ent: validator failed for field \"UserAgent\": %w", err)}
		}
	}
	if v, ok := rc.mutation.ATMCard(); ok {
		if err := reportwallettb.ATMCardValidator(v); err != nil {
			return &ValidationError{Name: "ATMCard", err: fmt.Errorf("ent: validator failed for field \"ATMCard\": %w", err)}
		}
	}
	if v, ok := rc.mutation.AccountNo(); ok {
		if err := reportwallettb.AccountNoValidator(v); err != nil {
			return &ValidationError{Name: "AccountNo", err: fmt.Errorf("ent: validator failed for field \"AccountNo\": %w", err)}
		}
	}
	if v, ok := rc.mutation.Province(); ok {
		if err := reportwallettb.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "Province", err: fmt.Errorf("ent: validator failed for field \"Province\": %w", err)}
		}
	}
	if v, ok := rc.mutation.PostalCode(); ok {
		if err := reportwallettb.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "PostalCode", err: fmt.Errorf("ent: validator failed for field \"PostalCode\": %w", err)}
		}
	}
	if v, ok := rc.mutation.IsKYC(); ok {
		if err := reportwallettb.IsKYCValidator(v); err != nil {
			return &ValidationError{Name: "isKYC", err: fmt.Errorf("ent: validator failed for field \"isKYC\": %w", err)}
		}
	}
	return nil
}

func (rc *ReportwallettbCreate) sqlSave(ctx context.Context) (*Reportwallettb, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (rc *ReportwallettbCreate) createSpec() (*Reportwallettb, *sqlgraph.CreateSpec) {
	var (
		_node = &Reportwallettb{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reportwallettb.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reportwallettb.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Walletid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletid,
		})
		_node.Walletid = value
	}
	if value, ok := rc.mutation.WalletTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletTypeName,
		})
		_node.WalletTypeName = &value
	}
	if value, ok := rc.mutation.WalletPhoneno(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletPhoneno,
		})
		_node.WalletPhoneno = &value
	}
	if value, ok := rc.mutation.WalletName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletName,
		})
		_node.WalletName = &value
	}
	if value, ok := rc.mutation.CitizenId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldCitizenId,
		})
		_node.CitizenId = &value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldStatus,
		})
		_node.Status = &value
	}
	if value, ok := rc.mutation.RegisterDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallettb.FieldRegisterDate,
		})
		_node.RegisterDate = &value
	}
	if value, ok := rc.mutation.GroupUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reportwallettb.FieldGroupUser,
		})
		_node.GroupUser = &value
	}
	if value, ok := rc.mutation.UserAgent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldUserAgent,
		})
		_node.UserAgent = &value
	}
	if value, ok := rc.mutation.KYCDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallettb.FieldKYCDate,
		})
		_node.KYCDate = &value
	}
	if value, ok := rc.mutation.ATMCard(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldATMCard,
		})
		_node.ATMCard = &value
	}
	if value, ok := rc.mutation.AccountNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldAccountNo,
		})
		_node.AccountNo = &value
	}
	if value, ok := rc.mutation.AddressDetail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldAddressDetail,
		})
		_node.AddressDetail = &value
	}
	if value, ok := rc.mutation.Street(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldStreet,
		})
		_node.Street = &value
	}
	if value, ok := rc.mutation.District(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldDistrict,
		})
		_node.District = &value
	}
	if value, ok := rc.mutation.SubDistrict(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldSubDistrict,
		})
		_node.SubDistrict = &value
	}
	if value, ok := rc.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldProvince,
		})
		_node.Province = &value
	}
	if value, ok := rc.mutation.PostalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldPostalCode,
		})
		_node.PostalCode = &value
	}
	if value, ok := rc.mutation.IsKYC(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldIsKYC,
		})
		_node.IsKYC = &value
	}
	if value, ok := rc.mutation.UpdateDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallettb.FieldUpdateDate,
		})
		_node.UpdateDate = &value
	}
	return _node, _spec
}

// ReportwallettbCreateBulk is the builder for creating many Reportwallettb entities in bulk.
type ReportwallettbCreateBulk struct {
	config
	builders []*ReportwallettbCreate
}

// Save creates the Reportwallettb entities in the database.
func (rcb *ReportwallettbCreateBulk) Save(ctx context.Context) ([]*Reportwallettb, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reportwallettb, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportwallettbMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReportwallettbCreateBulk) SaveX(ctx context.Context) []*Reportwallettb {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
