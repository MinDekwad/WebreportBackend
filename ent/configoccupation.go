// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/configoccupation"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Configoccupation is the model entity for the Configoccupation schema.
type Configoccupation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OccupationName holds the value of the "OccupationName" field.
	OccupationName string `json:"OccupationName,omitempty"`
	// Rank holds the value of the "Rank" field.
	Rank string `json:"Rank,omitempty"`
	// RankTmp holds the value of the "RankTmp" field.
	RankTmp string `json:"RankTmp,omitempty"`
	// UpdateDate holds the value of the "UpdateDate" field.
	UpdateDate time.Time `json:"UpdateDate,omitempty"`
	// ApproveBy holds the value of the "ApproveBy" field.
	ApproveBy *string `json:"ApproveBy,omitempty"`
	// ApproveDate holds the value of the "ApproveDate" field.
	ApproveDate *time.Time `json:"ApproveDate,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Configoccupation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case configoccupation.FieldID:
			values[i] = &sql.NullInt64{}
		case configoccupation.FieldOccupationName, configoccupation.FieldRank, configoccupation.FieldRankTmp, configoccupation.FieldApproveBy:
			values[i] = &sql.NullString{}
		case configoccupation.FieldUpdateDate, configoccupation.FieldApproveDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Configoccupation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Configoccupation fields.
func (c *Configoccupation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case configoccupation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case configoccupation.FieldOccupationName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OccupationName", values[i])
			} else if value.Valid {
				c.OccupationName = value.String
			}
		case configoccupation.FieldRank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Rank", values[i])
			} else if value.Valid {
				c.Rank = value.String
			}
		case configoccupation.FieldRankTmp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RankTmp", values[i])
			} else if value.Valid {
				c.RankTmp = value.String
			}
		case configoccupation.FieldUpdateDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdateDate", values[i])
			} else if value.Valid {
				c.UpdateDate = value.Time
			}
		case configoccupation.FieldApproveBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApproveBy", values[i])
			} else if value.Valid {
				c.ApproveBy = new(string)
				*c.ApproveBy = value.String
			}
		case configoccupation.FieldApproveDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApproveDate", values[i])
			} else if value.Valid {
				c.ApproveDate = new(time.Time)
				*c.ApproveDate = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Configoccupation.
// Note that you need to call Configoccupation.Unwrap() before calling this method if this Configoccupation
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Configoccupation) Update() *ConfigoccupationUpdateOne {
	return (&ConfigoccupationClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Configoccupation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Configoccupation) Unwrap() *Configoccupation {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Configoccupation is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Configoccupation) String() string {
	var builder strings.Builder
	builder.WriteString("Configoccupation(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", OccupationName=")
	builder.WriteString(c.OccupationName)
	builder.WriteString(", Rank=")
	builder.WriteString(c.Rank)
	builder.WriteString(", RankTmp=")
	builder.WriteString(c.RankTmp)
	builder.WriteString(", UpdateDate=")
	builder.WriteString(c.UpdateDate.Format(time.ANSIC))
	if v := c.ApproveBy; v != nil {
		builder.WriteString(", ApproveBy=")
		builder.WriteString(*v)
	}
	if v := c.ApproveDate; v != nil {
		builder.WriteString(", ApproveDate=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Configoccupations is a parsable slice of Configoccupation.
type Configoccupations []*Configoccupation

func (c Configoccupations) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
