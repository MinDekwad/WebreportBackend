// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"go-api-report2/ent/migrate"

	"go-api-report2/ent/agentkyc"
	"go-api-report2/ent/agenttype"
	"go-api-report2/ent/areahistory"
	"go-api-report2/ent/bankdetail"
	"go-api-report2/ent/bulk"
	"go-api-report2/ent/configarea"
	"go-api-report2/ent/configdatecalculaterank"
	"go-api-report2/ent/configoccupation"
	"go-api-report2/ent/configpoint"
	"go-api-report2/ent/consumer"
	"go-api-report2/ent/fileimport"
	"go-api-report2/ent/fileinsert"
	"go-api-report2/ent/limitpoint"
	"go-api-report2/ent/loanbinding"
	"go-api-report2/ent/logexport"
	"go-api-report2/ent/merchanttransaction"
	"go-api-report2/ent/occupationhistory"
	"go-api-report2/ent/pendingkyc"
	"go-api-report2/ent/pendingloanbinding"
	"go-api-report2/ent/pointcsv"
	"go-api-report2/ent/pointkycrv"
	"go-api-report2/ent/pointpendingkyctransaction"
	"go-api-report2/ent/pointpendinglbtransaction"
	"go-api-report2/ent/pointtransaction"
	"go-api-report2/ent/ranking"
	"go-api-report2/ent/reportwallet"
	"go-api-report2/ent/reportwallettb"
	"go-api-report2/ent/statementendingbalanc"
	"go-api-report2/ent/transactionfactor"
	"go-api-report2/ent/transactionfactorhistory"
	"go-api-report2/ent/transactionfactoritem"
	"go-api-report2/ent/transactionfactoritemtmp"
	"go-api-report2/ent/userprofile"
	"go-api-report2/ent/userwallet"
	"go-api-report2/ent/watchlist"
	"go-api-report2/ent/watchlisthistory"
	"go-api-report2/ent/watchlisttype"
	"go-api-report2/ent/writelog"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Agentkyc is the client for interacting with the Agentkyc builders.
	Agentkyc *AgentkycClient
	// Agenttype is the client for interacting with the Agenttype builders.
	Agenttype *AgenttypeClient
	// Areahistory is the client for interacting with the Areahistory builders.
	Areahistory *AreahistoryClient
	// Bankdetail is the client for interacting with the Bankdetail builders.
	Bankdetail *BankdetailClient
	// Bulk is the client for interacting with the Bulk builders.
	Bulk *BulkClient
	// Configarea is the client for interacting with the Configarea builders.
	Configarea *ConfigareaClient
	// Configdatecalculaterank is the client for interacting with the Configdatecalculaterank builders.
	Configdatecalculaterank *ConfigdatecalculaterankClient
	// Configoccupation is the client for interacting with the Configoccupation builders.
	Configoccupation *ConfigoccupationClient
	// Configpoint is the client for interacting with the Configpoint builders.
	Configpoint *ConfigpointClient
	// Consumer is the client for interacting with the Consumer builders.
	Consumer *ConsumerClient
	// Fileimport is the client for interacting with the Fileimport builders.
	Fileimport *FileimportClient
	// Fileinsert is the client for interacting with the Fileinsert builders.
	Fileinsert *FileinsertClient
	// Limitpoint is the client for interacting with the Limitpoint builders.
	Limitpoint *LimitpointClient
	// Loanbinding is the client for interacting with the Loanbinding builders.
	Loanbinding *LoanbindingClient
	// Logexport is the client for interacting with the Logexport builders.
	Logexport *LogexportClient
	// MerchantTransaction is the client for interacting with the MerchantTransaction builders.
	MerchantTransaction *MerchantTransactionClient
	// Occupationhistory is the client for interacting with the Occupationhistory builders.
	Occupationhistory *OccupationhistoryClient
	// Pendingkyc is the client for interacting with the Pendingkyc builders.
	Pendingkyc *PendingkycClient
	// Pendingloanbinding is the client for interacting with the Pendingloanbinding builders.
	Pendingloanbinding *PendingloanbindingClient
	// Pointcsv is the client for interacting with the Pointcsv builders.
	Pointcsv *PointcsvClient
	// Pointkycrv is the client for interacting with the Pointkycrv builders.
	Pointkycrv *PointkycrvClient
	// Pointpendingkyctransaction is the client for interacting with the Pointpendingkyctransaction builders.
	Pointpendingkyctransaction *PointpendingkyctransactionClient
	// Pointpendinglbtransaction is the client for interacting with the Pointpendinglbtransaction builders.
	Pointpendinglbtransaction *PointpendinglbtransactionClient
	// Pointtransaction is the client for interacting with the Pointtransaction builders.
	Pointtransaction *PointtransactionClient
	// Ranking is the client for interacting with the Ranking builders.
	Ranking *RankingClient
	// ReportWallet is the client for interacting with the ReportWallet builders.
	ReportWallet *ReportWalletClient
	// Reportwallettb is the client for interacting with the Reportwallettb builders.
	Reportwallettb *ReportwallettbClient
	// StatementEndingBalanc is the client for interacting with the StatementEndingBalanc builders.
	StatementEndingBalanc *StatementEndingBalancClient
	// Transactionfactor is the client for interacting with the Transactionfactor builders.
	Transactionfactor *TransactionfactorClient
	// Transactionfactorhistory is the client for interacting with the Transactionfactorhistory builders.
	Transactionfactorhistory *TransactionfactorhistoryClient
	// Transactionfactoritem is the client for interacting with the Transactionfactoritem builders.
	Transactionfactoritem *TransactionfactoritemClient
	// Transactionfactoritemtmp is the client for interacting with the Transactionfactoritemtmp builders.
	Transactionfactoritemtmp *TransactionfactoritemtmpClient
	// Userprofile is the client for interacting with the Userprofile builders.
	Userprofile *UserprofileClient
	// Userwallet is the client for interacting with the Userwallet builders.
	Userwallet *UserwalletClient
	// Watchlist is the client for interacting with the Watchlist builders.
	Watchlist *WatchlistClient
	// Watchlisthistory is the client for interacting with the Watchlisthistory builders.
	Watchlisthistory *WatchlisthistoryClient
	// Watchlisttype is the client for interacting with the Watchlisttype builders.
	Watchlisttype *WatchlisttypeClient
	// Writelog is the client for interacting with the Writelog builders.
	Writelog *WritelogClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Agentkyc = NewAgentkycClient(c.config)
	c.Agenttype = NewAgenttypeClient(c.config)
	c.Areahistory = NewAreahistoryClient(c.config)
	c.Bankdetail = NewBankdetailClient(c.config)
	c.Bulk = NewBulkClient(c.config)
	c.Configarea = NewConfigareaClient(c.config)
	c.Configdatecalculaterank = NewConfigdatecalculaterankClient(c.config)
	c.Configoccupation = NewConfigoccupationClient(c.config)
	c.Configpoint = NewConfigpointClient(c.config)
	c.Consumer = NewConsumerClient(c.config)
	c.Fileimport = NewFileimportClient(c.config)
	c.Fileinsert = NewFileinsertClient(c.config)
	c.Limitpoint = NewLimitpointClient(c.config)
	c.Loanbinding = NewLoanbindingClient(c.config)
	c.Logexport = NewLogexportClient(c.config)
	c.MerchantTransaction = NewMerchantTransactionClient(c.config)
	c.Occupationhistory = NewOccupationhistoryClient(c.config)
	c.Pendingkyc = NewPendingkycClient(c.config)
	c.Pendingloanbinding = NewPendingloanbindingClient(c.config)
	c.Pointcsv = NewPointcsvClient(c.config)
	c.Pointkycrv = NewPointkycrvClient(c.config)
	c.Pointpendingkyctransaction = NewPointpendingkyctransactionClient(c.config)
	c.Pointpendinglbtransaction = NewPointpendinglbtransactionClient(c.config)
	c.Pointtransaction = NewPointtransactionClient(c.config)
	c.Ranking = NewRankingClient(c.config)
	c.ReportWallet = NewReportWalletClient(c.config)
	c.Reportwallettb = NewReportwallettbClient(c.config)
	c.StatementEndingBalanc = NewStatementEndingBalancClient(c.config)
	c.Transactionfactor = NewTransactionfactorClient(c.config)
	c.Transactionfactorhistory = NewTransactionfactorhistoryClient(c.config)
	c.Transactionfactoritem = NewTransactionfactoritemClient(c.config)
	c.Transactionfactoritemtmp = NewTransactionfactoritemtmpClient(c.config)
	c.Userprofile = NewUserprofileClient(c.config)
	c.Userwallet = NewUserwalletClient(c.config)
	c.Watchlist = NewWatchlistClient(c.config)
	c.Watchlisthistory = NewWatchlisthistoryClient(c.config)
	c.Watchlisttype = NewWatchlisttypeClient(c.config)
	c.Writelog = NewWritelogClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		Agentkyc:                   NewAgentkycClient(cfg),
		Agenttype:                  NewAgenttypeClient(cfg),
		Areahistory:                NewAreahistoryClient(cfg),
		Bankdetail:                 NewBankdetailClient(cfg),
		Bulk:                       NewBulkClient(cfg),
		Configarea:                 NewConfigareaClient(cfg),
		Configdatecalculaterank:    NewConfigdatecalculaterankClient(cfg),
		Configoccupation:           NewConfigoccupationClient(cfg),
		Configpoint:                NewConfigpointClient(cfg),
		Consumer:                   NewConsumerClient(cfg),
		Fileimport:                 NewFileimportClient(cfg),
		Fileinsert:                 NewFileinsertClient(cfg),
		Limitpoint:                 NewLimitpointClient(cfg),
		Loanbinding:                NewLoanbindingClient(cfg),
		Logexport:                  NewLogexportClient(cfg),
		MerchantTransaction:        NewMerchantTransactionClient(cfg),
		Occupationhistory:          NewOccupationhistoryClient(cfg),
		Pendingkyc:                 NewPendingkycClient(cfg),
		Pendingloanbinding:         NewPendingloanbindingClient(cfg),
		Pointcsv:                   NewPointcsvClient(cfg),
		Pointkycrv:                 NewPointkycrvClient(cfg),
		Pointpendingkyctransaction: NewPointpendingkyctransactionClient(cfg),
		Pointpendinglbtransaction:  NewPointpendinglbtransactionClient(cfg),
		Pointtransaction:           NewPointtransactionClient(cfg),
		Ranking:                    NewRankingClient(cfg),
		ReportWallet:               NewReportWalletClient(cfg),
		Reportwallettb:             NewReportwallettbClient(cfg),
		StatementEndingBalanc:      NewStatementEndingBalancClient(cfg),
		Transactionfactor:          NewTransactionfactorClient(cfg),
		Transactionfactorhistory:   NewTransactionfactorhistoryClient(cfg),
		Transactionfactoritem:      NewTransactionfactoritemClient(cfg),
		Transactionfactoritemtmp:   NewTransactionfactoritemtmpClient(cfg),
		Userprofile:                NewUserprofileClient(cfg),
		Userwallet:                 NewUserwalletClient(cfg),
		Watchlist:                  NewWatchlistClient(cfg),
		Watchlisthistory:           NewWatchlisthistoryClient(cfg),
		Watchlisttype:              NewWatchlisttypeClient(cfg),
		Writelog:                   NewWritelogClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                     cfg,
		Agentkyc:                   NewAgentkycClient(cfg),
		Agenttype:                  NewAgenttypeClient(cfg),
		Areahistory:                NewAreahistoryClient(cfg),
		Bankdetail:                 NewBankdetailClient(cfg),
		Bulk:                       NewBulkClient(cfg),
		Configarea:                 NewConfigareaClient(cfg),
		Configdatecalculaterank:    NewConfigdatecalculaterankClient(cfg),
		Configoccupation:           NewConfigoccupationClient(cfg),
		Configpoint:                NewConfigpointClient(cfg),
		Consumer:                   NewConsumerClient(cfg),
		Fileimport:                 NewFileimportClient(cfg),
		Fileinsert:                 NewFileinsertClient(cfg),
		Limitpoint:                 NewLimitpointClient(cfg),
		Loanbinding:                NewLoanbindingClient(cfg),
		Logexport:                  NewLogexportClient(cfg),
		MerchantTransaction:        NewMerchantTransactionClient(cfg),
		Occupationhistory:          NewOccupationhistoryClient(cfg),
		Pendingkyc:                 NewPendingkycClient(cfg),
		Pendingloanbinding:         NewPendingloanbindingClient(cfg),
		Pointcsv:                   NewPointcsvClient(cfg),
		Pointkycrv:                 NewPointkycrvClient(cfg),
		Pointpendingkyctransaction: NewPointpendingkyctransactionClient(cfg),
		Pointpendinglbtransaction:  NewPointpendinglbtransactionClient(cfg),
		Pointtransaction:           NewPointtransactionClient(cfg),
		Ranking:                    NewRankingClient(cfg),
		ReportWallet:               NewReportWalletClient(cfg),
		Reportwallettb:             NewReportwallettbClient(cfg),
		StatementEndingBalanc:      NewStatementEndingBalancClient(cfg),
		Transactionfactor:          NewTransactionfactorClient(cfg),
		Transactionfactorhistory:   NewTransactionfactorhistoryClient(cfg),
		Transactionfactoritem:      NewTransactionfactoritemClient(cfg),
		Transactionfactoritemtmp:   NewTransactionfactoritemtmpClient(cfg),
		Userprofile:                NewUserprofileClient(cfg),
		Userwallet:                 NewUserwalletClient(cfg),
		Watchlist:                  NewWatchlistClient(cfg),
		Watchlisthistory:           NewWatchlisthistoryClient(cfg),
		Watchlisttype:              NewWatchlisttypeClient(cfg),
		Writelog:                   NewWritelogClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Agentkyc.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Agentkyc.Use(hooks...)
	c.Agenttype.Use(hooks...)
	c.Areahistory.Use(hooks...)
	c.Bankdetail.Use(hooks...)
	c.Bulk.Use(hooks...)
	c.Configarea.Use(hooks...)
	c.Configdatecalculaterank.Use(hooks...)
	c.Configoccupation.Use(hooks...)
	c.Configpoint.Use(hooks...)
	c.Consumer.Use(hooks...)
	c.Fileimport.Use(hooks...)
	c.Fileinsert.Use(hooks...)
	c.Limitpoint.Use(hooks...)
	c.Loanbinding.Use(hooks...)
	c.Logexport.Use(hooks...)
	c.MerchantTransaction.Use(hooks...)
	c.Occupationhistory.Use(hooks...)
	c.Pendingkyc.Use(hooks...)
	c.Pendingloanbinding.Use(hooks...)
	c.Pointcsv.Use(hooks...)
	c.Pointkycrv.Use(hooks...)
	c.Pointpendingkyctransaction.Use(hooks...)
	c.Pointpendinglbtransaction.Use(hooks...)
	c.Pointtransaction.Use(hooks...)
	c.Ranking.Use(hooks...)
	c.ReportWallet.Use(hooks...)
	c.Reportwallettb.Use(hooks...)
	c.StatementEndingBalanc.Use(hooks...)
	c.Transactionfactor.Use(hooks...)
	c.Transactionfactorhistory.Use(hooks...)
	c.Transactionfactoritem.Use(hooks...)
	c.Transactionfactoritemtmp.Use(hooks...)
	c.Userprofile.Use(hooks...)
	c.Userwallet.Use(hooks...)
	c.Watchlist.Use(hooks...)
	c.Watchlisthistory.Use(hooks...)
	c.Watchlisttype.Use(hooks...)
	c.Writelog.Use(hooks...)
}

// AgentkycClient is a client for the Agentkyc schema.
type AgentkycClient struct {
	config
}

// NewAgentkycClient returns a client for the Agentkyc from the given config.
func NewAgentkycClient(c config) *AgentkycClient {
	return &AgentkycClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agentkyc.Hooks(f(g(h())))`.
func (c *AgentkycClient) Use(hooks ...Hook) {
	c.hooks.Agentkyc = append(c.hooks.Agentkyc, hooks...)
}

// Create returns a create builder for Agentkyc.
func (c *AgentkycClient) Create() *AgentkycCreate {
	mutation := newAgentkycMutation(c.config, OpCreate)
	return &AgentkycCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Agentkyc entities.
func (c *AgentkycClient) CreateBulk(builders ...*AgentkycCreate) *AgentkycCreateBulk {
	return &AgentkycCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Agentkyc.
func (c *AgentkycClient) Update() *AgentkycUpdate {
	mutation := newAgentkycMutation(c.config, OpUpdate)
	return &AgentkycUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentkycClient) UpdateOne(a *Agentkyc) *AgentkycUpdateOne {
	mutation := newAgentkycMutation(c.config, OpUpdateOne, withAgentkyc(a))
	return &AgentkycUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentkycClient) UpdateOneID(id int) *AgentkycUpdateOne {
	mutation := newAgentkycMutation(c.config, OpUpdateOne, withAgentkycID(id))
	return &AgentkycUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Agentkyc.
func (c *AgentkycClient) Delete() *AgentkycDelete {
	mutation := newAgentkycMutation(c.config, OpDelete)
	return &AgentkycDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AgentkycClient) DeleteOne(a *Agentkyc) *AgentkycDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AgentkycClient) DeleteOneID(id int) *AgentkycDeleteOne {
	builder := c.Delete().Where(agentkyc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentkycDeleteOne{builder}
}

// Query returns a query builder for Agentkyc.
func (c *AgentkycClient) Query() *AgentkycQuery {
	return &AgentkycQuery{config: c.config}
}

// Get returns a Agentkyc entity by its id.
func (c *AgentkycClient) Get(ctx context.Context, id int) (*Agentkyc, error) {
	return c.Query().Where(agentkyc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentkycClient) GetX(ctx context.Context, id int) *Agentkyc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AgentkycClient) Hooks() []Hook {
	return c.hooks.Agentkyc
}

// AgenttypeClient is a client for the Agenttype schema.
type AgenttypeClient struct {
	config
}

// NewAgenttypeClient returns a client for the Agenttype from the given config.
func NewAgenttypeClient(c config) *AgenttypeClient {
	return &AgenttypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agenttype.Hooks(f(g(h())))`.
func (c *AgenttypeClient) Use(hooks ...Hook) {
	c.hooks.Agenttype = append(c.hooks.Agenttype, hooks...)
}

// Create returns a create builder for Agenttype.
func (c *AgenttypeClient) Create() *AgenttypeCreate {
	mutation := newAgenttypeMutation(c.config, OpCreate)
	return &AgenttypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Agenttype entities.
func (c *AgenttypeClient) CreateBulk(builders ...*AgenttypeCreate) *AgenttypeCreateBulk {
	return &AgenttypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Agenttype.
func (c *AgenttypeClient) Update() *AgenttypeUpdate {
	mutation := newAgenttypeMutation(c.config, OpUpdate)
	return &AgenttypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgenttypeClient) UpdateOne(a *Agenttype) *AgenttypeUpdateOne {
	mutation := newAgenttypeMutation(c.config, OpUpdateOne, withAgenttype(a))
	return &AgenttypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgenttypeClient) UpdateOneID(id int) *AgenttypeUpdateOne {
	mutation := newAgenttypeMutation(c.config, OpUpdateOne, withAgenttypeID(id))
	return &AgenttypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Agenttype.
func (c *AgenttypeClient) Delete() *AgenttypeDelete {
	mutation := newAgenttypeMutation(c.config, OpDelete)
	return &AgenttypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AgenttypeClient) DeleteOne(a *Agenttype) *AgenttypeDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AgenttypeClient) DeleteOneID(id int) *AgenttypeDeleteOne {
	builder := c.Delete().Where(agenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgenttypeDeleteOne{builder}
}

// Query returns a query builder for Agenttype.
func (c *AgenttypeClient) Query() *AgenttypeQuery {
	return &AgenttypeQuery{config: c.config}
}

// Get returns a Agenttype entity by its id.
func (c *AgenttypeClient) Get(ctx context.Context, id int) (*Agenttype, error) {
	return c.Query().Where(agenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgenttypeClient) GetX(ctx context.Context, id int) *Agenttype {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AgenttypeClient) Hooks() []Hook {
	return c.hooks.Agenttype
}

// AreahistoryClient is a client for the Areahistory schema.
type AreahistoryClient struct {
	config
}

// NewAreahistoryClient returns a client for the Areahistory from the given config.
func NewAreahistoryClient(c config) *AreahistoryClient {
	return &AreahistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `areahistory.Hooks(f(g(h())))`.
func (c *AreahistoryClient) Use(hooks ...Hook) {
	c.hooks.Areahistory = append(c.hooks.Areahistory, hooks...)
}

// Create returns a create builder for Areahistory.
func (c *AreahistoryClient) Create() *AreahistoryCreate {
	mutation := newAreahistoryMutation(c.config, OpCreate)
	return &AreahistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Areahistory entities.
func (c *AreahistoryClient) CreateBulk(builders ...*AreahistoryCreate) *AreahistoryCreateBulk {
	return &AreahistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Areahistory.
func (c *AreahistoryClient) Update() *AreahistoryUpdate {
	mutation := newAreahistoryMutation(c.config, OpUpdate)
	return &AreahistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AreahistoryClient) UpdateOne(a *Areahistory) *AreahistoryUpdateOne {
	mutation := newAreahistoryMutation(c.config, OpUpdateOne, withAreahistory(a))
	return &AreahistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AreahistoryClient) UpdateOneID(id int) *AreahistoryUpdateOne {
	mutation := newAreahistoryMutation(c.config, OpUpdateOne, withAreahistoryID(id))
	return &AreahistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Areahistory.
func (c *AreahistoryClient) Delete() *AreahistoryDelete {
	mutation := newAreahistoryMutation(c.config, OpDelete)
	return &AreahistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AreahistoryClient) DeleteOne(a *Areahistory) *AreahistoryDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AreahistoryClient) DeleteOneID(id int) *AreahistoryDeleteOne {
	builder := c.Delete().Where(areahistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AreahistoryDeleteOne{builder}
}

// Query returns a query builder for Areahistory.
func (c *AreahistoryClient) Query() *AreahistoryQuery {
	return &AreahistoryQuery{config: c.config}
}

// Get returns a Areahistory entity by its id.
func (c *AreahistoryClient) Get(ctx context.Context, id int) (*Areahistory, error) {
	return c.Query().Where(areahistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AreahistoryClient) GetX(ctx context.Context, id int) *Areahistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AreahistoryClient) Hooks() []Hook {
	return c.hooks.Areahistory
}

// BankdetailClient is a client for the Bankdetail schema.
type BankdetailClient struct {
	config
}

// NewBankdetailClient returns a client for the Bankdetail from the given config.
func NewBankdetailClient(c config) *BankdetailClient {
	return &BankdetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bankdetail.Hooks(f(g(h())))`.
func (c *BankdetailClient) Use(hooks ...Hook) {
	c.hooks.Bankdetail = append(c.hooks.Bankdetail, hooks...)
}

// Create returns a create builder for Bankdetail.
func (c *BankdetailClient) Create() *BankdetailCreate {
	mutation := newBankdetailMutation(c.config, OpCreate)
	return &BankdetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bankdetail entities.
func (c *BankdetailClient) CreateBulk(builders ...*BankdetailCreate) *BankdetailCreateBulk {
	return &BankdetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bankdetail.
func (c *BankdetailClient) Update() *BankdetailUpdate {
	mutation := newBankdetailMutation(c.config, OpUpdate)
	return &BankdetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BankdetailClient) UpdateOne(b *Bankdetail) *BankdetailUpdateOne {
	mutation := newBankdetailMutation(c.config, OpUpdateOne, withBankdetail(b))
	return &BankdetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BankdetailClient) UpdateOneID(id int) *BankdetailUpdateOne {
	mutation := newBankdetailMutation(c.config, OpUpdateOne, withBankdetailID(id))
	return &BankdetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bankdetail.
func (c *BankdetailClient) Delete() *BankdetailDelete {
	mutation := newBankdetailMutation(c.config, OpDelete)
	return &BankdetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BankdetailClient) DeleteOne(b *Bankdetail) *BankdetailDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BankdetailClient) DeleteOneID(id int) *BankdetailDeleteOne {
	builder := c.Delete().Where(bankdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BankdetailDeleteOne{builder}
}

// Query returns a query builder for Bankdetail.
func (c *BankdetailClient) Query() *BankdetailQuery {
	return &BankdetailQuery{config: c.config}
}

// Get returns a Bankdetail entity by its id.
func (c *BankdetailClient) Get(ctx context.Context, id int) (*Bankdetail, error) {
	return c.Query().Where(bankdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BankdetailClient) GetX(ctx context.Context, id int) *Bankdetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatements queries the statements edge of a Bankdetail.
func (c *BankdetailClient) QueryStatements(b *Bankdetail) *StatementEndingBalancQuery {
	query := &StatementEndingBalancQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bankdetail.Table, bankdetail.FieldID, id),
			sqlgraph.To(statementendingbalanc.Table, statementendingbalanc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bankdetail.StatementsTable, bankdetail.StatementsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BankdetailClient) Hooks() []Hook {
	return c.hooks.Bankdetail
}

// BulkClient is a client for the Bulk schema.
type BulkClient struct {
	config
}

// NewBulkClient returns a client for the Bulk from the given config.
func NewBulkClient(c config) *BulkClient {
	return &BulkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bulk.Hooks(f(g(h())))`.
func (c *BulkClient) Use(hooks ...Hook) {
	c.hooks.Bulk = append(c.hooks.Bulk, hooks...)
}

// Create returns a create builder for Bulk.
func (c *BulkClient) Create() *BulkCreate {
	mutation := newBulkMutation(c.config, OpCreate)
	return &BulkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bulk entities.
func (c *BulkClient) CreateBulk(builders ...*BulkCreate) *BulkCreateBulk {
	return &BulkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bulk.
func (c *BulkClient) Update() *BulkUpdate {
	mutation := newBulkMutation(c.config, OpUpdate)
	return &BulkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BulkClient) UpdateOne(b *Bulk) *BulkUpdateOne {
	mutation := newBulkMutation(c.config, OpUpdateOne, withBulk(b))
	return &BulkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BulkClient) UpdateOneID(id int) *BulkUpdateOne {
	mutation := newBulkMutation(c.config, OpUpdateOne, withBulkID(id))
	return &BulkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bulk.
func (c *BulkClient) Delete() *BulkDelete {
	mutation := newBulkMutation(c.config, OpDelete)
	return &BulkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BulkClient) DeleteOne(b *Bulk) *BulkDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BulkClient) DeleteOneID(id int) *BulkDeleteOne {
	builder := c.Delete().Where(bulk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BulkDeleteOne{builder}
}

// Query returns a query builder for Bulk.
func (c *BulkClient) Query() *BulkQuery {
	return &BulkQuery{config: c.config}
}

// Get returns a Bulk entity by its id.
func (c *BulkClient) Get(ctx context.Context, id int) (*Bulk, error) {
	return c.Query().Where(bulk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BulkClient) GetX(ctx context.Context, id int) *Bulk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BulkClient) Hooks() []Hook {
	return c.hooks.Bulk
}

// ConfigareaClient is a client for the Configarea schema.
type ConfigareaClient struct {
	config
}

// NewConfigareaClient returns a client for the Configarea from the given config.
func NewConfigareaClient(c config) *ConfigareaClient {
	return &ConfigareaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `configarea.Hooks(f(g(h())))`.
func (c *ConfigareaClient) Use(hooks ...Hook) {
	c.hooks.Configarea = append(c.hooks.Configarea, hooks...)
}

// Create returns a create builder for Configarea.
func (c *ConfigareaClient) Create() *ConfigareaCreate {
	mutation := newConfigareaMutation(c.config, OpCreate)
	return &ConfigareaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Configarea entities.
func (c *ConfigareaClient) CreateBulk(builders ...*ConfigareaCreate) *ConfigareaCreateBulk {
	return &ConfigareaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Configarea.
func (c *ConfigareaClient) Update() *ConfigareaUpdate {
	mutation := newConfigareaMutation(c.config, OpUpdate)
	return &ConfigareaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConfigareaClient) UpdateOne(co *Configarea) *ConfigareaUpdateOne {
	mutation := newConfigareaMutation(c.config, OpUpdateOne, withConfigarea(co))
	return &ConfigareaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConfigareaClient) UpdateOneID(id int) *ConfigareaUpdateOne {
	mutation := newConfigareaMutation(c.config, OpUpdateOne, withConfigareaID(id))
	return &ConfigareaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Configarea.
func (c *ConfigareaClient) Delete() *ConfigareaDelete {
	mutation := newConfigareaMutation(c.config, OpDelete)
	return &ConfigareaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConfigareaClient) DeleteOne(co *Configarea) *ConfigareaDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConfigareaClient) DeleteOneID(id int) *ConfigareaDeleteOne {
	builder := c.Delete().Where(configarea.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConfigareaDeleteOne{builder}
}

// Query returns a query builder for Configarea.
func (c *ConfigareaClient) Query() *ConfigareaQuery {
	return &ConfigareaQuery{config: c.config}
}

// Get returns a Configarea entity by its id.
func (c *ConfigareaClient) Get(ctx context.Context, id int) (*Configarea, error) {
	return c.Query().Where(configarea.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConfigareaClient) GetX(ctx context.Context, id int) *Configarea {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConfigareaClient) Hooks() []Hook {
	return c.hooks.Configarea
}

// ConfigdatecalculaterankClient is a client for the Configdatecalculaterank schema.
type ConfigdatecalculaterankClient struct {
	config
}

// NewConfigdatecalculaterankClient returns a client for the Configdatecalculaterank from the given config.
func NewConfigdatecalculaterankClient(c config) *ConfigdatecalculaterankClient {
	return &ConfigdatecalculaterankClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `configdatecalculaterank.Hooks(f(g(h())))`.
func (c *ConfigdatecalculaterankClient) Use(hooks ...Hook) {
	c.hooks.Configdatecalculaterank = append(c.hooks.Configdatecalculaterank, hooks...)
}

// Create returns a create builder for Configdatecalculaterank.
func (c *ConfigdatecalculaterankClient) Create() *ConfigdatecalculaterankCreate {
	mutation := newConfigdatecalculaterankMutation(c.config, OpCreate)
	return &ConfigdatecalculaterankCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Configdatecalculaterank entities.
func (c *ConfigdatecalculaterankClient) CreateBulk(builders ...*ConfigdatecalculaterankCreate) *ConfigdatecalculaterankCreateBulk {
	return &ConfigdatecalculaterankCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Configdatecalculaterank.
func (c *ConfigdatecalculaterankClient) Update() *ConfigdatecalculaterankUpdate {
	mutation := newConfigdatecalculaterankMutation(c.config, OpUpdate)
	return &ConfigdatecalculaterankUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConfigdatecalculaterankClient) UpdateOne(co *Configdatecalculaterank) *ConfigdatecalculaterankUpdateOne {
	mutation := newConfigdatecalculaterankMutation(c.config, OpUpdateOne, withConfigdatecalculaterank(co))
	return &ConfigdatecalculaterankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConfigdatecalculaterankClient) UpdateOneID(id int) *ConfigdatecalculaterankUpdateOne {
	mutation := newConfigdatecalculaterankMutation(c.config, OpUpdateOne, withConfigdatecalculaterankID(id))
	return &ConfigdatecalculaterankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Configdatecalculaterank.
func (c *ConfigdatecalculaterankClient) Delete() *ConfigdatecalculaterankDelete {
	mutation := newConfigdatecalculaterankMutation(c.config, OpDelete)
	return &ConfigdatecalculaterankDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConfigdatecalculaterankClient) DeleteOne(co *Configdatecalculaterank) *ConfigdatecalculaterankDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConfigdatecalculaterankClient) DeleteOneID(id int) *ConfigdatecalculaterankDeleteOne {
	builder := c.Delete().Where(configdatecalculaterank.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConfigdatecalculaterankDeleteOne{builder}
}

// Query returns a query builder for Configdatecalculaterank.
func (c *ConfigdatecalculaterankClient) Query() *ConfigdatecalculaterankQuery {
	return &ConfigdatecalculaterankQuery{config: c.config}
}

// Get returns a Configdatecalculaterank entity by its id.
func (c *ConfigdatecalculaterankClient) Get(ctx context.Context, id int) (*Configdatecalculaterank, error) {
	return c.Query().Where(configdatecalculaterank.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConfigdatecalculaterankClient) GetX(ctx context.Context, id int) *Configdatecalculaterank {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConfigdatecalculaterankClient) Hooks() []Hook {
	return c.hooks.Configdatecalculaterank
}

// ConfigoccupationClient is a client for the Configoccupation schema.
type ConfigoccupationClient struct {
	config
}

// NewConfigoccupationClient returns a client for the Configoccupation from the given config.
func NewConfigoccupationClient(c config) *ConfigoccupationClient {
	return &ConfigoccupationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `configoccupation.Hooks(f(g(h())))`.
func (c *ConfigoccupationClient) Use(hooks ...Hook) {
	c.hooks.Configoccupation = append(c.hooks.Configoccupation, hooks...)
}

// Create returns a create builder for Configoccupation.
func (c *ConfigoccupationClient) Create() *ConfigoccupationCreate {
	mutation := newConfigoccupationMutation(c.config, OpCreate)
	return &ConfigoccupationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Configoccupation entities.
func (c *ConfigoccupationClient) CreateBulk(builders ...*ConfigoccupationCreate) *ConfigoccupationCreateBulk {
	return &ConfigoccupationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Configoccupation.
func (c *ConfigoccupationClient) Update() *ConfigoccupationUpdate {
	mutation := newConfigoccupationMutation(c.config, OpUpdate)
	return &ConfigoccupationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConfigoccupationClient) UpdateOne(co *Configoccupation) *ConfigoccupationUpdateOne {
	mutation := newConfigoccupationMutation(c.config, OpUpdateOne, withConfigoccupation(co))
	return &ConfigoccupationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConfigoccupationClient) UpdateOneID(id int) *ConfigoccupationUpdateOne {
	mutation := newConfigoccupationMutation(c.config, OpUpdateOne, withConfigoccupationID(id))
	return &ConfigoccupationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Configoccupation.
func (c *ConfigoccupationClient) Delete() *ConfigoccupationDelete {
	mutation := newConfigoccupationMutation(c.config, OpDelete)
	return &ConfigoccupationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConfigoccupationClient) DeleteOne(co *Configoccupation) *ConfigoccupationDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConfigoccupationClient) DeleteOneID(id int) *ConfigoccupationDeleteOne {
	builder := c.Delete().Where(configoccupation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConfigoccupationDeleteOne{builder}
}

// Query returns a query builder for Configoccupation.
func (c *ConfigoccupationClient) Query() *ConfigoccupationQuery {
	return &ConfigoccupationQuery{config: c.config}
}

// Get returns a Configoccupation entity by its id.
func (c *ConfigoccupationClient) Get(ctx context.Context, id int) (*Configoccupation, error) {
	return c.Query().Where(configoccupation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConfigoccupationClient) GetX(ctx context.Context, id int) *Configoccupation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConfigoccupationClient) Hooks() []Hook {
	return c.hooks.Configoccupation
}

// ConfigpointClient is a client for the Configpoint schema.
type ConfigpointClient struct {
	config
}

// NewConfigpointClient returns a client for the Configpoint from the given config.
func NewConfigpointClient(c config) *ConfigpointClient {
	return &ConfigpointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `configpoint.Hooks(f(g(h())))`.
func (c *ConfigpointClient) Use(hooks ...Hook) {
	c.hooks.Configpoint = append(c.hooks.Configpoint, hooks...)
}

// Create returns a create builder for Configpoint.
func (c *ConfigpointClient) Create() *ConfigpointCreate {
	mutation := newConfigpointMutation(c.config, OpCreate)
	return &ConfigpointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Configpoint entities.
func (c *ConfigpointClient) CreateBulk(builders ...*ConfigpointCreate) *ConfigpointCreateBulk {
	return &ConfigpointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Configpoint.
func (c *ConfigpointClient) Update() *ConfigpointUpdate {
	mutation := newConfigpointMutation(c.config, OpUpdate)
	return &ConfigpointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConfigpointClient) UpdateOne(co *Configpoint) *ConfigpointUpdateOne {
	mutation := newConfigpointMutation(c.config, OpUpdateOne, withConfigpoint(co))
	return &ConfigpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConfigpointClient) UpdateOneID(id int) *ConfigpointUpdateOne {
	mutation := newConfigpointMutation(c.config, OpUpdateOne, withConfigpointID(id))
	return &ConfigpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Configpoint.
func (c *ConfigpointClient) Delete() *ConfigpointDelete {
	mutation := newConfigpointMutation(c.config, OpDelete)
	return &ConfigpointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConfigpointClient) DeleteOne(co *Configpoint) *ConfigpointDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConfigpointClient) DeleteOneID(id int) *ConfigpointDeleteOne {
	builder := c.Delete().Where(configpoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConfigpointDeleteOne{builder}
}

// Query returns a query builder for Configpoint.
func (c *ConfigpointClient) Query() *ConfigpointQuery {
	return &ConfigpointQuery{config: c.config}
}

// Get returns a Configpoint entity by its id.
func (c *ConfigpointClient) Get(ctx context.Context, id int) (*Configpoint, error) {
	return c.Query().Where(configpoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConfigpointClient) GetX(ctx context.Context, id int) *Configpoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConfigpointClient) Hooks() []Hook {
	return c.hooks.Configpoint
}

// ConsumerClient is a client for the Consumer schema.
type ConsumerClient struct {
	config
}

// NewConsumerClient returns a client for the Consumer from the given config.
func NewConsumerClient(c config) *ConsumerClient {
	return &ConsumerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `consumer.Hooks(f(g(h())))`.
func (c *ConsumerClient) Use(hooks ...Hook) {
	c.hooks.Consumer = append(c.hooks.Consumer, hooks...)
}

// Create returns a create builder for Consumer.
func (c *ConsumerClient) Create() *ConsumerCreate {
	mutation := newConsumerMutation(c.config, OpCreate)
	return &ConsumerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Consumer entities.
func (c *ConsumerClient) CreateBulk(builders ...*ConsumerCreate) *ConsumerCreateBulk {
	return &ConsumerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Consumer.
func (c *ConsumerClient) Update() *ConsumerUpdate {
	mutation := newConsumerMutation(c.config, OpUpdate)
	return &ConsumerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConsumerClient) UpdateOne(co *Consumer) *ConsumerUpdateOne {
	mutation := newConsumerMutation(c.config, OpUpdateOne, withConsumer(co))
	return &ConsumerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConsumerClient) UpdateOneID(id int) *ConsumerUpdateOne {
	mutation := newConsumerMutation(c.config, OpUpdateOne, withConsumerID(id))
	return &ConsumerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Consumer.
func (c *ConsumerClient) Delete() *ConsumerDelete {
	mutation := newConsumerMutation(c.config, OpDelete)
	return &ConsumerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConsumerClient) DeleteOne(co *Consumer) *ConsumerDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConsumerClient) DeleteOneID(id int) *ConsumerDeleteOne {
	builder := c.Delete().Where(consumer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConsumerDeleteOne{builder}
}

// Query returns a query builder for Consumer.
func (c *ConsumerClient) Query() *ConsumerQuery {
	return &ConsumerQuery{config: c.config}
}

// Get returns a Consumer entity by its id.
func (c *ConsumerClient) Get(ctx context.Context, id int) (*Consumer, error) {
	return c.Query().Where(consumer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConsumerClient) GetX(ctx context.Context, id int) *Consumer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConsumerClient) Hooks() []Hook {
	return c.hooks.Consumer
}

// FileimportClient is a client for the Fileimport schema.
type FileimportClient struct {
	config
}

// NewFileimportClient returns a client for the Fileimport from the given config.
func NewFileimportClient(c config) *FileimportClient {
	return &FileimportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fileimport.Hooks(f(g(h())))`.
func (c *FileimportClient) Use(hooks ...Hook) {
	c.hooks.Fileimport = append(c.hooks.Fileimport, hooks...)
}

// Create returns a create builder for Fileimport.
func (c *FileimportClient) Create() *FileimportCreate {
	mutation := newFileimportMutation(c.config, OpCreate)
	return &FileimportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fileimport entities.
func (c *FileimportClient) CreateBulk(builders ...*FileimportCreate) *FileimportCreateBulk {
	return &FileimportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fileimport.
func (c *FileimportClient) Update() *FileimportUpdate {
	mutation := newFileimportMutation(c.config, OpUpdate)
	return &FileimportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileimportClient) UpdateOne(f *Fileimport) *FileimportUpdateOne {
	mutation := newFileimportMutation(c.config, OpUpdateOne, withFileimport(f))
	return &FileimportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileimportClient) UpdateOneID(id int) *FileimportUpdateOne {
	mutation := newFileimportMutation(c.config, OpUpdateOne, withFileimportID(id))
	return &FileimportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fileimport.
func (c *FileimportClient) Delete() *FileimportDelete {
	mutation := newFileimportMutation(c.config, OpDelete)
	return &FileimportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileimportClient) DeleteOne(f *Fileimport) *FileimportDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileimportClient) DeleteOneID(id int) *FileimportDeleteOne {
	builder := c.Delete().Where(fileimport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileimportDeleteOne{builder}
}

// Query returns a query builder for Fileimport.
func (c *FileimportClient) Query() *FileimportQuery {
	return &FileimportQuery{config: c.config}
}

// Get returns a Fileimport entity by its id.
func (c *FileimportClient) Get(ctx context.Context, id int) (*Fileimport, error) {
	return c.Query().Where(fileimport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileimportClient) GetX(ctx context.Context, id int) *Fileimport {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FileimportClient) Hooks() []Hook {
	return c.hooks.Fileimport
}

// FileinsertClient is a client for the Fileinsert schema.
type FileinsertClient struct {
	config
}

// NewFileinsertClient returns a client for the Fileinsert from the given config.
func NewFileinsertClient(c config) *FileinsertClient {
	return &FileinsertClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fileinsert.Hooks(f(g(h())))`.
func (c *FileinsertClient) Use(hooks ...Hook) {
	c.hooks.Fileinsert = append(c.hooks.Fileinsert, hooks...)
}

// Create returns a create builder for Fileinsert.
func (c *FileinsertClient) Create() *FileinsertCreate {
	mutation := newFileinsertMutation(c.config, OpCreate)
	return &FileinsertCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fileinsert entities.
func (c *FileinsertClient) CreateBulk(builders ...*FileinsertCreate) *FileinsertCreateBulk {
	return &FileinsertCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fileinsert.
func (c *FileinsertClient) Update() *FileinsertUpdate {
	mutation := newFileinsertMutation(c.config, OpUpdate)
	return &FileinsertUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileinsertClient) UpdateOne(f *Fileinsert) *FileinsertUpdateOne {
	mutation := newFileinsertMutation(c.config, OpUpdateOne, withFileinsert(f))
	return &FileinsertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileinsertClient) UpdateOneID(id int) *FileinsertUpdateOne {
	mutation := newFileinsertMutation(c.config, OpUpdateOne, withFileinsertID(id))
	return &FileinsertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fileinsert.
func (c *FileinsertClient) Delete() *FileinsertDelete {
	mutation := newFileinsertMutation(c.config, OpDelete)
	return &FileinsertDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileinsertClient) DeleteOne(f *Fileinsert) *FileinsertDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileinsertClient) DeleteOneID(id int) *FileinsertDeleteOne {
	builder := c.Delete().Where(fileinsert.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileinsertDeleteOne{builder}
}

// Query returns a query builder for Fileinsert.
func (c *FileinsertClient) Query() *FileinsertQuery {
	return &FileinsertQuery{config: c.config}
}

// Get returns a Fileinsert entity by its id.
func (c *FileinsertClient) Get(ctx context.Context, id int) (*Fileinsert, error) {
	return c.Query().Where(fileinsert.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileinsertClient) GetX(ctx context.Context, id int) *Fileinsert {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FileinsertClient) Hooks() []Hook {
	return c.hooks.Fileinsert
}

// LimitpointClient is a client for the Limitpoint schema.
type LimitpointClient struct {
	config
}

// NewLimitpointClient returns a client for the Limitpoint from the given config.
func NewLimitpointClient(c config) *LimitpointClient {
	return &LimitpointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `limitpoint.Hooks(f(g(h())))`.
func (c *LimitpointClient) Use(hooks ...Hook) {
	c.hooks.Limitpoint = append(c.hooks.Limitpoint, hooks...)
}

// Create returns a create builder for Limitpoint.
func (c *LimitpointClient) Create() *LimitpointCreate {
	mutation := newLimitpointMutation(c.config, OpCreate)
	return &LimitpointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Limitpoint entities.
func (c *LimitpointClient) CreateBulk(builders ...*LimitpointCreate) *LimitpointCreateBulk {
	return &LimitpointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Limitpoint.
func (c *LimitpointClient) Update() *LimitpointUpdate {
	mutation := newLimitpointMutation(c.config, OpUpdate)
	return &LimitpointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LimitpointClient) UpdateOne(l *Limitpoint) *LimitpointUpdateOne {
	mutation := newLimitpointMutation(c.config, OpUpdateOne, withLimitpoint(l))
	return &LimitpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LimitpointClient) UpdateOneID(id int) *LimitpointUpdateOne {
	mutation := newLimitpointMutation(c.config, OpUpdateOne, withLimitpointID(id))
	return &LimitpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Limitpoint.
func (c *LimitpointClient) Delete() *LimitpointDelete {
	mutation := newLimitpointMutation(c.config, OpDelete)
	return &LimitpointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LimitpointClient) DeleteOne(l *Limitpoint) *LimitpointDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LimitpointClient) DeleteOneID(id int) *LimitpointDeleteOne {
	builder := c.Delete().Where(limitpoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LimitpointDeleteOne{builder}
}

// Query returns a query builder for Limitpoint.
func (c *LimitpointClient) Query() *LimitpointQuery {
	return &LimitpointQuery{config: c.config}
}

// Get returns a Limitpoint entity by its id.
func (c *LimitpointClient) Get(ctx context.Context, id int) (*Limitpoint, error) {
	return c.Query().Where(limitpoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LimitpointClient) GetX(ctx context.Context, id int) *Limitpoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LimitpointClient) Hooks() []Hook {
	return c.hooks.Limitpoint
}

// LoanbindingClient is a client for the Loanbinding schema.
type LoanbindingClient struct {
	config
}

// NewLoanbindingClient returns a client for the Loanbinding from the given config.
func NewLoanbindingClient(c config) *LoanbindingClient {
	return &LoanbindingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `loanbinding.Hooks(f(g(h())))`.
func (c *LoanbindingClient) Use(hooks ...Hook) {
	c.hooks.Loanbinding = append(c.hooks.Loanbinding, hooks...)
}

// Create returns a create builder for Loanbinding.
func (c *LoanbindingClient) Create() *LoanbindingCreate {
	mutation := newLoanbindingMutation(c.config, OpCreate)
	return &LoanbindingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Loanbinding entities.
func (c *LoanbindingClient) CreateBulk(builders ...*LoanbindingCreate) *LoanbindingCreateBulk {
	return &LoanbindingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Loanbinding.
func (c *LoanbindingClient) Update() *LoanbindingUpdate {
	mutation := newLoanbindingMutation(c.config, OpUpdate)
	return &LoanbindingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoanbindingClient) UpdateOne(l *Loanbinding) *LoanbindingUpdateOne {
	mutation := newLoanbindingMutation(c.config, OpUpdateOne, withLoanbinding(l))
	return &LoanbindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoanbindingClient) UpdateOneID(id int) *LoanbindingUpdateOne {
	mutation := newLoanbindingMutation(c.config, OpUpdateOne, withLoanbindingID(id))
	return &LoanbindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Loanbinding.
func (c *LoanbindingClient) Delete() *LoanbindingDelete {
	mutation := newLoanbindingMutation(c.config, OpDelete)
	return &LoanbindingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LoanbindingClient) DeleteOne(l *Loanbinding) *LoanbindingDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LoanbindingClient) DeleteOneID(id int) *LoanbindingDeleteOne {
	builder := c.Delete().Where(loanbinding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoanbindingDeleteOne{builder}
}

// Query returns a query builder for Loanbinding.
func (c *LoanbindingClient) Query() *LoanbindingQuery {
	return &LoanbindingQuery{config: c.config}
}

// Get returns a Loanbinding entity by its id.
func (c *LoanbindingClient) Get(ctx context.Context, id int) (*Loanbinding, error) {
	return c.Query().Where(loanbinding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoanbindingClient) GetX(ctx context.Context, id int) *Loanbinding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LoanbindingClient) Hooks() []Hook {
	return c.hooks.Loanbinding
}

// LogexportClient is a client for the Logexport schema.
type LogexportClient struct {
	config
}

// NewLogexportClient returns a client for the Logexport from the given config.
func NewLogexportClient(c config) *LogexportClient {
	return &LogexportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `logexport.Hooks(f(g(h())))`.
func (c *LogexportClient) Use(hooks ...Hook) {
	c.hooks.Logexport = append(c.hooks.Logexport, hooks...)
}

// Create returns a create builder for Logexport.
func (c *LogexportClient) Create() *LogexportCreate {
	mutation := newLogexportMutation(c.config, OpCreate)
	return &LogexportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Logexport entities.
func (c *LogexportClient) CreateBulk(builders ...*LogexportCreate) *LogexportCreateBulk {
	return &LogexportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Logexport.
func (c *LogexportClient) Update() *LogexportUpdate {
	mutation := newLogexportMutation(c.config, OpUpdate)
	return &LogexportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LogexportClient) UpdateOne(l *Logexport) *LogexportUpdateOne {
	mutation := newLogexportMutation(c.config, OpUpdateOne, withLogexport(l))
	return &LogexportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LogexportClient) UpdateOneID(id int) *LogexportUpdateOne {
	mutation := newLogexportMutation(c.config, OpUpdateOne, withLogexportID(id))
	return &LogexportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Logexport.
func (c *LogexportClient) Delete() *LogexportDelete {
	mutation := newLogexportMutation(c.config, OpDelete)
	return &LogexportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LogexportClient) DeleteOne(l *Logexport) *LogexportDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LogexportClient) DeleteOneID(id int) *LogexportDeleteOne {
	builder := c.Delete().Where(logexport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LogexportDeleteOne{builder}
}

// Query returns a query builder for Logexport.
func (c *LogexportClient) Query() *LogexportQuery {
	return &LogexportQuery{config: c.config}
}

// Get returns a Logexport entity by its id.
func (c *LogexportClient) Get(ctx context.Context, id int) (*Logexport, error) {
	return c.Query().Where(logexport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LogexportClient) GetX(ctx context.Context, id int) *Logexport {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LogexportClient) Hooks() []Hook {
	return c.hooks.Logexport
}

// MerchantTransactionClient is a client for the MerchantTransaction schema.
type MerchantTransactionClient struct {
	config
}

// NewMerchantTransactionClient returns a client for the MerchantTransaction from the given config.
func NewMerchantTransactionClient(c config) *MerchantTransactionClient {
	return &MerchantTransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `merchanttransaction.Hooks(f(g(h())))`.
func (c *MerchantTransactionClient) Use(hooks ...Hook) {
	c.hooks.MerchantTransaction = append(c.hooks.MerchantTransaction, hooks...)
}

// Create returns a create builder for MerchantTransaction.
func (c *MerchantTransactionClient) Create() *MerchantTransactionCreate {
	mutation := newMerchantTransactionMutation(c.config, OpCreate)
	return &MerchantTransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MerchantTransaction entities.
func (c *MerchantTransactionClient) CreateBulk(builders ...*MerchantTransactionCreate) *MerchantTransactionCreateBulk {
	return &MerchantTransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MerchantTransaction.
func (c *MerchantTransactionClient) Update() *MerchantTransactionUpdate {
	mutation := newMerchantTransactionMutation(c.config, OpUpdate)
	return &MerchantTransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MerchantTransactionClient) UpdateOne(mt *MerchantTransaction) *MerchantTransactionUpdateOne {
	mutation := newMerchantTransactionMutation(c.config, OpUpdateOne, withMerchantTransaction(mt))
	return &MerchantTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MerchantTransactionClient) UpdateOneID(id int) *MerchantTransactionUpdateOne {
	mutation := newMerchantTransactionMutation(c.config, OpUpdateOne, withMerchantTransactionID(id))
	return &MerchantTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MerchantTransaction.
func (c *MerchantTransactionClient) Delete() *MerchantTransactionDelete {
	mutation := newMerchantTransactionMutation(c.config, OpDelete)
	return &MerchantTransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MerchantTransactionClient) DeleteOne(mt *MerchantTransaction) *MerchantTransactionDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MerchantTransactionClient) DeleteOneID(id int) *MerchantTransactionDeleteOne {
	builder := c.Delete().Where(merchanttransaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MerchantTransactionDeleteOne{builder}
}

// Query returns a query builder for MerchantTransaction.
func (c *MerchantTransactionClient) Query() *MerchantTransactionQuery {
	return &MerchantTransactionQuery{config: c.config}
}

// Get returns a MerchantTransaction entity by its id.
func (c *MerchantTransactionClient) Get(ctx context.Context, id int) (*MerchantTransaction, error) {
	return c.Query().Where(merchanttransaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MerchantTransactionClient) GetX(ctx context.Context, id int) *MerchantTransaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MerchantTransactionClient) Hooks() []Hook {
	return c.hooks.MerchantTransaction
}

// OccupationhistoryClient is a client for the Occupationhistory schema.
type OccupationhistoryClient struct {
	config
}

// NewOccupationhistoryClient returns a client for the Occupationhistory from the given config.
func NewOccupationhistoryClient(c config) *OccupationhistoryClient {
	return &OccupationhistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `occupationhistory.Hooks(f(g(h())))`.
func (c *OccupationhistoryClient) Use(hooks ...Hook) {
	c.hooks.Occupationhistory = append(c.hooks.Occupationhistory, hooks...)
}

// Create returns a create builder for Occupationhistory.
func (c *OccupationhistoryClient) Create() *OccupationhistoryCreate {
	mutation := newOccupationhistoryMutation(c.config, OpCreate)
	return &OccupationhistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Occupationhistory entities.
func (c *OccupationhistoryClient) CreateBulk(builders ...*OccupationhistoryCreate) *OccupationhistoryCreateBulk {
	return &OccupationhistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Occupationhistory.
func (c *OccupationhistoryClient) Update() *OccupationhistoryUpdate {
	mutation := newOccupationhistoryMutation(c.config, OpUpdate)
	return &OccupationhistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OccupationhistoryClient) UpdateOne(o *Occupationhistory) *OccupationhistoryUpdateOne {
	mutation := newOccupationhistoryMutation(c.config, OpUpdateOne, withOccupationhistory(o))
	return &OccupationhistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OccupationhistoryClient) UpdateOneID(id int) *OccupationhistoryUpdateOne {
	mutation := newOccupationhistoryMutation(c.config, OpUpdateOne, withOccupationhistoryID(id))
	return &OccupationhistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Occupationhistory.
func (c *OccupationhistoryClient) Delete() *OccupationhistoryDelete {
	mutation := newOccupationhistoryMutation(c.config, OpDelete)
	return &OccupationhistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OccupationhistoryClient) DeleteOne(o *Occupationhistory) *OccupationhistoryDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OccupationhistoryClient) DeleteOneID(id int) *OccupationhistoryDeleteOne {
	builder := c.Delete().Where(occupationhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OccupationhistoryDeleteOne{builder}
}

// Query returns a query builder for Occupationhistory.
func (c *OccupationhistoryClient) Query() *OccupationhistoryQuery {
	return &OccupationhistoryQuery{config: c.config}
}

// Get returns a Occupationhistory entity by its id.
func (c *OccupationhistoryClient) Get(ctx context.Context, id int) (*Occupationhistory, error) {
	return c.Query().Where(occupationhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OccupationhistoryClient) GetX(ctx context.Context, id int) *Occupationhistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OccupationhistoryClient) Hooks() []Hook {
	return c.hooks.Occupationhistory
}

// PendingkycClient is a client for the Pendingkyc schema.
type PendingkycClient struct {
	config
}

// NewPendingkycClient returns a client for the Pendingkyc from the given config.
func NewPendingkycClient(c config) *PendingkycClient {
	return &PendingkycClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pendingkyc.Hooks(f(g(h())))`.
func (c *PendingkycClient) Use(hooks ...Hook) {
	c.hooks.Pendingkyc = append(c.hooks.Pendingkyc, hooks...)
}

// Create returns a create builder for Pendingkyc.
func (c *PendingkycClient) Create() *PendingkycCreate {
	mutation := newPendingkycMutation(c.config, OpCreate)
	return &PendingkycCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pendingkyc entities.
func (c *PendingkycClient) CreateBulk(builders ...*PendingkycCreate) *PendingkycCreateBulk {
	return &PendingkycCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pendingkyc.
func (c *PendingkycClient) Update() *PendingkycUpdate {
	mutation := newPendingkycMutation(c.config, OpUpdate)
	return &PendingkycUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PendingkycClient) UpdateOne(pe *Pendingkyc) *PendingkycUpdateOne {
	mutation := newPendingkycMutation(c.config, OpUpdateOne, withPendingkyc(pe))
	return &PendingkycUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PendingkycClient) UpdateOneID(id int) *PendingkycUpdateOne {
	mutation := newPendingkycMutation(c.config, OpUpdateOne, withPendingkycID(id))
	return &PendingkycUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pendingkyc.
func (c *PendingkycClient) Delete() *PendingkycDelete {
	mutation := newPendingkycMutation(c.config, OpDelete)
	return &PendingkycDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PendingkycClient) DeleteOne(pe *Pendingkyc) *PendingkycDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PendingkycClient) DeleteOneID(id int) *PendingkycDeleteOne {
	builder := c.Delete().Where(pendingkyc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PendingkycDeleteOne{builder}
}

// Query returns a query builder for Pendingkyc.
func (c *PendingkycClient) Query() *PendingkycQuery {
	return &PendingkycQuery{config: c.config}
}

// Get returns a Pendingkyc entity by its id.
func (c *PendingkycClient) Get(ctx context.Context, id int) (*Pendingkyc, error) {
	return c.Query().Where(pendingkyc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PendingkycClient) GetX(ctx context.Context, id int) *Pendingkyc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PendingkycClient) Hooks() []Hook {
	return c.hooks.Pendingkyc
}

// PendingloanbindingClient is a client for the Pendingloanbinding schema.
type PendingloanbindingClient struct {
	config
}

// NewPendingloanbindingClient returns a client for the Pendingloanbinding from the given config.
func NewPendingloanbindingClient(c config) *PendingloanbindingClient {
	return &PendingloanbindingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pendingloanbinding.Hooks(f(g(h())))`.
func (c *PendingloanbindingClient) Use(hooks ...Hook) {
	c.hooks.Pendingloanbinding = append(c.hooks.Pendingloanbinding, hooks...)
}

// Create returns a create builder for Pendingloanbinding.
func (c *PendingloanbindingClient) Create() *PendingloanbindingCreate {
	mutation := newPendingloanbindingMutation(c.config, OpCreate)
	return &PendingloanbindingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pendingloanbinding entities.
func (c *PendingloanbindingClient) CreateBulk(builders ...*PendingloanbindingCreate) *PendingloanbindingCreateBulk {
	return &PendingloanbindingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pendingloanbinding.
func (c *PendingloanbindingClient) Update() *PendingloanbindingUpdate {
	mutation := newPendingloanbindingMutation(c.config, OpUpdate)
	return &PendingloanbindingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PendingloanbindingClient) UpdateOne(pe *Pendingloanbinding) *PendingloanbindingUpdateOne {
	mutation := newPendingloanbindingMutation(c.config, OpUpdateOne, withPendingloanbinding(pe))
	return &PendingloanbindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PendingloanbindingClient) UpdateOneID(id int) *PendingloanbindingUpdateOne {
	mutation := newPendingloanbindingMutation(c.config, OpUpdateOne, withPendingloanbindingID(id))
	return &PendingloanbindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pendingloanbinding.
func (c *PendingloanbindingClient) Delete() *PendingloanbindingDelete {
	mutation := newPendingloanbindingMutation(c.config, OpDelete)
	return &PendingloanbindingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PendingloanbindingClient) DeleteOne(pe *Pendingloanbinding) *PendingloanbindingDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PendingloanbindingClient) DeleteOneID(id int) *PendingloanbindingDeleteOne {
	builder := c.Delete().Where(pendingloanbinding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PendingloanbindingDeleteOne{builder}
}

// Query returns a query builder for Pendingloanbinding.
func (c *PendingloanbindingClient) Query() *PendingloanbindingQuery {
	return &PendingloanbindingQuery{config: c.config}
}

// Get returns a Pendingloanbinding entity by its id.
func (c *PendingloanbindingClient) Get(ctx context.Context, id int) (*Pendingloanbinding, error) {
	return c.Query().Where(pendingloanbinding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PendingloanbindingClient) GetX(ctx context.Context, id int) *Pendingloanbinding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PendingloanbindingClient) Hooks() []Hook {
	return c.hooks.Pendingloanbinding
}

// PointcsvClient is a client for the Pointcsv schema.
type PointcsvClient struct {
	config
}

// NewPointcsvClient returns a client for the Pointcsv from the given config.
func NewPointcsvClient(c config) *PointcsvClient {
	return &PointcsvClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pointcsv.Hooks(f(g(h())))`.
func (c *PointcsvClient) Use(hooks ...Hook) {
	c.hooks.Pointcsv = append(c.hooks.Pointcsv, hooks...)
}

// Create returns a create builder for Pointcsv.
func (c *PointcsvClient) Create() *PointcsvCreate {
	mutation := newPointcsvMutation(c.config, OpCreate)
	return &PointcsvCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pointcsv entities.
func (c *PointcsvClient) CreateBulk(builders ...*PointcsvCreate) *PointcsvCreateBulk {
	return &PointcsvCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pointcsv.
func (c *PointcsvClient) Update() *PointcsvUpdate {
	mutation := newPointcsvMutation(c.config, OpUpdate)
	return &PointcsvUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PointcsvClient) UpdateOne(po *Pointcsv) *PointcsvUpdateOne {
	mutation := newPointcsvMutation(c.config, OpUpdateOne, withPointcsv(po))
	return &PointcsvUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PointcsvClient) UpdateOneID(id int) *PointcsvUpdateOne {
	mutation := newPointcsvMutation(c.config, OpUpdateOne, withPointcsvID(id))
	return &PointcsvUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pointcsv.
func (c *PointcsvClient) Delete() *PointcsvDelete {
	mutation := newPointcsvMutation(c.config, OpDelete)
	return &PointcsvDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PointcsvClient) DeleteOne(po *Pointcsv) *PointcsvDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PointcsvClient) DeleteOneID(id int) *PointcsvDeleteOne {
	builder := c.Delete().Where(pointcsv.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PointcsvDeleteOne{builder}
}

// Query returns a query builder for Pointcsv.
func (c *PointcsvClient) Query() *PointcsvQuery {
	return &PointcsvQuery{config: c.config}
}

// Get returns a Pointcsv entity by its id.
func (c *PointcsvClient) Get(ctx context.Context, id int) (*Pointcsv, error) {
	return c.Query().Where(pointcsv.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PointcsvClient) GetX(ctx context.Context, id int) *Pointcsv {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PointcsvClient) Hooks() []Hook {
	return c.hooks.Pointcsv
}

// PointkycrvClient is a client for the Pointkycrv schema.
type PointkycrvClient struct {
	config
}

// NewPointkycrvClient returns a client for the Pointkycrv from the given config.
func NewPointkycrvClient(c config) *PointkycrvClient {
	return &PointkycrvClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pointkycrv.Hooks(f(g(h())))`.
func (c *PointkycrvClient) Use(hooks ...Hook) {
	c.hooks.Pointkycrv = append(c.hooks.Pointkycrv, hooks...)
}

// Create returns a create builder for Pointkycrv.
func (c *PointkycrvClient) Create() *PointkycrvCreate {
	mutation := newPointkycrvMutation(c.config, OpCreate)
	return &PointkycrvCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pointkycrv entities.
func (c *PointkycrvClient) CreateBulk(builders ...*PointkycrvCreate) *PointkycrvCreateBulk {
	return &PointkycrvCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pointkycrv.
func (c *PointkycrvClient) Update() *PointkycrvUpdate {
	mutation := newPointkycrvMutation(c.config, OpUpdate)
	return &PointkycrvUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PointkycrvClient) UpdateOne(po *Pointkycrv) *PointkycrvUpdateOne {
	mutation := newPointkycrvMutation(c.config, OpUpdateOne, withPointkycrv(po))
	return &PointkycrvUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PointkycrvClient) UpdateOneID(id int) *PointkycrvUpdateOne {
	mutation := newPointkycrvMutation(c.config, OpUpdateOne, withPointkycrvID(id))
	return &PointkycrvUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pointkycrv.
func (c *PointkycrvClient) Delete() *PointkycrvDelete {
	mutation := newPointkycrvMutation(c.config, OpDelete)
	return &PointkycrvDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PointkycrvClient) DeleteOne(po *Pointkycrv) *PointkycrvDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PointkycrvClient) DeleteOneID(id int) *PointkycrvDeleteOne {
	builder := c.Delete().Where(pointkycrv.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PointkycrvDeleteOne{builder}
}

// Query returns a query builder for Pointkycrv.
func (c *PointkycrvClient) Query() *PointkycrvQuery {
	return &PointkycrvQuery{config: c.config}
}

// Get returns a Pointkycrv entity by its id.
func (c *PointkycrvClient) Get(ctx context.Context, id int) (*Pointkycrv, error) {
	return c.Query().Where(pointkycrv.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PointkycrvClient) GetX(ctx context.Context, id int) *Pointkycrv {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PointkycrvClient) Hooks() []Hook {
	return c.hooks.Pointkycrv
}

// PointpendingkyctransactionClient is a client for the Pointpendingkyctransaction schema.
type PointpendingkyctransactionClient struct {
	config
}

// NewPointpendingkyctransactionClient returns a client for the Pointpendingkyctransaction from the given config.
func NewPointpendingkyctransactionClient(c config) *PointpendingkyctransactionClient {
	return &PointpendingkyctransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pointpendingkyctransaction.Hooks(f(g(h())))`.
func (c *PointpendingkyctransactionClient) Use(hooks ...Hook) {
	c.hooks.Pointpendingkyctransaction = append(c.hooks.Pointpendingkyctransaction, hooks...)
}

// Create returns a create builder for Pointpendingkyctransaction.
func (c *PointpendingkyctransactionClient) Create() *PointpendingkyctransactionCreate {
	mutation := newPointpendingkyctransactionMutation(c.config, OpCreate)
	return &PointpendingkyctransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pointpendingkyctransaction entities.
func (c *PointpendingkyctransactionClient) CreateBulk(builders ...*PointpendingkyctransactionCreate) *PointpendingkyctransactionCreateBulk {
	return &PointpendingkyctransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pointpendingkyctransaction.
func (c *PointpendingkyctransactionClient) Update() *PointpendingkyctransactionUpdate {
	mutation := newPointpendingkyctransactionMutation(c.config, OpUpdate)
	return &PointpendingkyctransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PointpendingkyctransactionClient) UpdateOne(po *Pointpendingkyctransaction) *PointpendingkyctransactionUpdateOne {
	mutation := newPointpendingkyctransactionMutation(c.config, OpUpdateOne, withPointpendingkyctransaction(po))
	return &PointpendingkyctransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PointpendingkyctransactionClient) UpdateOneID(id int) *PointpendingkyctransactionUpdateOne {
	mutation := newPointpendingkyctransactionMutation(c.config, OpUpdateOne, withPointpendingkyctransactionID(id))
	return &PointpendingkyctransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pointpendingkyctransaction.
func (c *PointpendingkyctransactionClient) Delete() *PointpendingkyctransactionDelete {
	mutation := newPointpendingkyctransactionMutation(c.config, OpDelete)
	return &PointpendingkyctransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PointpendingkyctransactionClient) DeleteOne(po *Pointpendingkyctransaction) *PointpendingkyctransactionDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PointpendingkyctransactionClient) DeleteOneID(id int) *PointpendingkyctransactionDeleteOne {
	builder := c.Delete().Where(pointpendingkyctransaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PointpendingkyctransactionDeleteOne{builder}
}

// Query returns a query builder for Pointpendingkyctransaction.
func (c *PointpendingkyctransactionClient) Query() *PointpendingkyctransactionQuery {
	return &PointpendingkyctransactionQuery{config: c.config}
}

// Get returns a Pointpendingkyctransaction entity by its id.
func (c *PointpendingkyctransactionClient) Get(ctx context.Context, id int) (*Pointpendingkyctransaction, error) {
	return c.Query().Where(pointpendingkyctransaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PointpendingkyctransactionClient) GetX(ctx context.Context, id int) *Pointpendingkyctransaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PointpendingkyctransactionClient) Hooks() []Hook {
	return c.hooks.Pointpendingkyctransaction
}

// PointpendinglbtransactionClient is a client for the Pointpendinglbtransaction schema.
type PointpendinglbtransactionClient struct {
	config
}

// NewPointpendinglbtransactionClient returns a client for the Pointpendinglbtransaction from the given config.
func NewPointpendinglbtransactionClient(c config) *PointpendinglbtransactionClient {
	return &PointpendinglbtransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pointpendinglbtransaction.Hooks(f(g(h())))`.
func (c *PointpendinglbtransactionClient) Use(hooks ...Hook) {
	c.hooks.Pointpendinglbtransaction = append(c.hooks.Pointpendinglbtransaction, hooks...)
}

// Create returns a create builder for Pointpendinglbtransaction.
func (c *PointpendinglbtransactionClient) Create() *PointpendinglbtransactionCreate {
	mutation := newPointpendinglbtransactionMutation(c.config, OpCreate)
	return &PointpendinglbtransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pointpendinglbtransaction entities.
func (c *PointpendinglbtransactionClient) CreateBulk(builders ...*PointpendinglbtransactionCreate) *PointpendinglbtransactionCreateBulk {
	return &PointpendinglbtransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pointpendinglbtransaction.
func (c *PointpendinglbtransactionClient) Update() *PointpendinglbtransactionUpdate {
	mutation := newPointpendinglbtransactionMutation(c.config, OpUpdate)
	return &PointpendinglbtransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PointpendinglbtransactionClient) UpdateOne(po *Pointpendinglbtransaction) *PointpendinglbtransactionUpdateOne {
	mutation := newPointpendinglbtransactionMutation(c.config, OpUpdateOne, withPointpendinglbtransaction(po))
	return &PointpendinglbtransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PointpendinglbtransactionClient) UpdateOneID(id int) *PointpendinglbtransactionUpdateOne {
	mutation := newPointpendinglbtransactionMutation(c.config, OpUpdateOne, withPointpendinglbtransactionID(id))
	return &PointpendinglbtransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pointpendinglbtransaction.
func (c *PointpendinglbtransactionClient) Delete() *PointpendinglbtransactionDelete {
	mutation := newPointpendinglbtransactionMutation(c.config, OpDelete)
	return &PointpendinglbtransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PointpendinglbtransactionClient) DeleteOne(po *Pointpendinglbtransaction) *PointpendinglbtransactionDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PointpendinglbtransactionClient) DeleteOneID(id int) *PointpendinglbtransactionDeleteOne {
	builder := c.Delete().Where(pointpendinglbtransaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PointpendinglbtransactionDeleteOne{builder}
}

// Query returns a query builder for Pointpendinglbtransaction.
func (c *PointpendinglbtransactionClient) Query() *PointpendinglbtransactionQuery {
	return &PointpendinglbtransactionQuery{config: c.config}
}

// Get returns a Pointpendinglbtransaction entity by its id.
func (c *PointpendinglbtransactionClient) Get(ctx context.Context, id int) (*Pointpendinglbtransaction, error) {
	return c.Query().Where(pointpendinglbtransaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PointpendinglbtransactionClient) GetX(ctx context.Context, id int) *Pointpendinglbtransaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PointpendinglbtransactionClient) Hooks() []Hook {
	return c.hooks.Pointpendinglbtransaction
}

// PointtransactionClient is a client for the Pointtransaction schema.
type PointtransactionClient struct {
	config
}

// NewPointtransactionClient returns a client for the Pointtransaction from the given config.
func NewPointtransactionClient(c config) *PointtransactionClient {
	return &PointtransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pointtransaction.Hooks(f(g(h())))`.
func (c *PointtransactionClient) Use(hooks ...Hook) {
	c.hooks.Pointtransaction = append(c.hooks.Pointtransaction, hooks...)
}

// Create returns a create builder for Pointtransaction.
func (c *PointtransactionClient) Create() *PointtransactionCreate {
	mutation := newPointtransactionMutation(c.config, OpCreate)
	return &PointtransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pointtransaction entities.
func (c *PointtransactionClient) CreateBulk(builders ...*PointtransactionCreate) *PointtransactionCreateBulk {
	return &PointtransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pointtransaction.
func (c *PointtransactionClient) Update() *PointtransactionUpdate {
	mutation := newPointtransactionMutation(c.config, OpUpdate)
	return &PointtransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PointtransactionClient) UpdateOne(po *Pointtransaction) *PointtransactionUpdateOne {
	mutation := newPointtransactionMutation(c.config, OpUpdateOne, withPointtransaction(po))
	return &PointtransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PointtransactionClient) UpdateOneID(id int) *PointtransactionUpdateOne {
	mutation := newPointtransactionMutation(c.config, OpUpdateOne, withPointtransactionID(id))
	return &PointtransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pointtransaction.
func (c *PointtransactionClient) Delete() *PointtransactionDelete {
	mutation := newPointtransactionMutation(c.config, OpDelete)
	return &PointtransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PointtransactionClient) DeleteOne(po *Pointtransaction) *PointtransactionDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PointtransactionClient) DeleteOneID(id int) *PointtransactionDeleteOne {
	builder := c.Delete().Where(pointtransaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PointtransactionDeleteOne{builder}
}

// Query returns a query builder for Pointtransaction.
func (c *PointtransactionClient) Query() *PointtransactionQuery {
	return &PointtransactionQuery{config: c.config}
}

// Get returns a Pointtransaction entity by its id.
func (c *PointtransactionClient) Get(ctx context.Context, id int) (*Pointtransaction, error) {
	return c.Query().Where(pointtransaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PointtransactionClient) GetX(ctx context.Context, id int) *Pointtransaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PointtransactionClient) Hooks() []Hook {
	return c.hooks.Pointtransaction
}

// RankingClient is a client for the Ranking schema.
type RankingClient struct {
	config
}

// NewRankingClient returns a client for the Ranking from the given config.
func NewRankingClient(c config) *RankingClient {
	return &RankingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ranking.Hooks(f(g(h())))`.
func (c *RankingClient) Use(hooks ...Hook) {
	c.hooks.Ranking = append(c.hooks.Ranking, hooks...)
}

// Create returns a create builder for Ranking.
func (c *RankingClient) Create() *RankingCreate {
	mutation := newRankingMutation(c.config, OpCreate)
	return &RankingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ranking entities.
func (c *RankingClient) CreateBulk(builders ...*RankingCreate) *RankingCreateBulk {
	return &RankingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ranking.
func (c *RankingClient) Update() *RankingUpdate {
	mutation := newRankingMutation(c.config, OpUpdate)
	return &RankingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RankingClient) UpdateOne(r *Ranking) *RankingUpdateOne {
	mutation := newRankingMutation(c.config, OpUpdateOne, withRanking(r))
	return &RankingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RankingClient) UpdateOneID(id int) *RankingUpdateOne {
	mutation := newRankingMutation(c.config, OpUpdateOne, withRankingID(id))
	return &RankingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ranking.
func (c *RankingClient) Delete() *RankingDelete {
	mutation := newRankingMutation(c.config, OpDelete)
	return &RankingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RankingClient) DeleteOne(r *Ranking) *RankingDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RankingClient) DeleteOneID(id int) *RankingDeleteOne {
	builder := c.Delete().Where(ranking.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RankingDeleteOne{builder}
}

// Query returns a query builder for Ranking.
func (c *RankingClient) Query() *RankingQuery {
	return &RankingQuery{config: c.config}
}

// Get returns a Ranking entity by its id.
func (c *RankingClient) Get(ctx context.Context, id int) (*Ranking, error) {
	return c.Query().Where(ranking.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RankingClient) GetX(ctx context.Context, id int) *Ranking {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RankingClient) Hooks() []Hook {
	return c.hooks.Ranking
}

// ReportWalletClient is a client for the ReportWallet schema.
type ReportWalletClient struct {
	config
}

// NewReportWalletClient returns a client for the ReportWallet from the given config.
func NewReportWalletClient(c config) *ReportWalletClient {
	return &ReportWalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reportwallet.Hooks(f(g(h())))`.
func (c *ReportWalletClient) Use(hooks ...Hook) {
	c.hooks.ReportWallet = append(c.hooks.ReportWallet, hooks...)
}

// Create returns a create builder for ReportWallet.
func (c *ReportWalletClient) Create() *ReportWalletCreate {
	mutation := newReportWalletMutation(c.config, OpCreate)
	return &ReportWalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReportWallet entities.
func (c *ReportWalletClient) CreateBulk(builders ...*ReportWalletCreate) *ReportWalletCreateBulk {
	return &ReportWalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReportWallet.
func (c *ReportWalletClient) Update() *ReportWalletUpdate {
	mutation := newReportWalletMutation(c.config, OpUpdate)
	return &ReportWalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReportWalletClient) UpdateOne(rw *ReportWallet) *ReportWalletUpdateOne {
	mutation := newReportWalletMutation(c.config, OpUpdateOne, withReportWallet(rw))
	return &ReportWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReportWalletClient) UpdateOneID(id int) *ReportWalletUpdateOne {
	mutation := newReportWalletMutation(c.config, OpUpdateOne, withReportWalletID(id))
	return &ReportWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReportWallet.
func (c *ReportWalletClient) Delete() *ReportWalletDelete {
	mutation := newReportWalletMutation(c.config, OpDelete)
	return &ReportWalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReportWalletClient) DeleteOne(rw *ReportWallet) *ReportWalletDeleteOne {
	return c.DeleteOneID(rw.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReportWalletClient) DeleteOneID(id int) *ReportWalletDeleteOne {
	builder := c.Delete().Where(reportwallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReportWalletDeleteOne{builder}
}

// Query returns a query builder for ReportWallet.
func (c *ReportWalletClient) Query() *ReportWalletQuery {
	return &ReportWalletQuery{config: c.config}
}

// Get returns a ReportWallet entity by its id.
func (c *ReportWalletClient) Get(ctx context.Context, id int) (*ReportWallet, error) {
	return c.Query().Where(reportwallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReportWalletClient) GetX(ctx context.Context, id int) *ReportWallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReportWalletClient) Hooks() []Hook {
	return c.hooks.ReportWallet
}

// ReportwallettbClient is a client for the Reportwallettb schema.
type ReportwallettbClient struct {
	config
}

// NewReportwallettbClient returns a client for the Reportwallettb from the given config.
func NewReportwallettbClient(c config) *ReportwallettbClient {
	return &ReportwallettbClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reportwallettb.Hooks(f(g(h())))`.
func (c *ReportwallettbClient) Use(hooks ...Hook) {
	c.hooks.Reportwallettb = append(c.hooks.Reportwallettb, hooks...)
}

// Create returns a create builder for Reportwallettb.
func (c *ReportwallettbClient) Create() *ReportwallettbCreate {
	mutation := newReportwallettbMutation(c.config, OpCreate)
	return &ReportwallettbCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reportwallettb entities.
func (c *ReportwallettbClient) CreateBulk(builders ...*ReportwallettbCreate) *ReportwallettbCreateBulk {
	return &ReportwallettbCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reportwallettb.
func (c *ReportwallettbClient) Update() *ReportwallettbUpdate {
	mutation := newReportwallettbMutation(c.config, OpUpdate)
	return &ReportwallettbUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReportwallettbClient) UpdateOne(r *Reportwallettb) *ReportwallettbUpdateOne {
	mutation := newReportwallettbMutation(c.config, OpUpdateOne, withReportwallettb(r))
	return &ReportwallettbUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReportwallettbClient) UpdateOneID(id int) *ReportwallettbUpdateOne {
	mutation := newReportwallettbMutation(c.config, OpUpdateOne, withReportwallettbID(id))
	return &ReportwallettbUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reportwallettb.
func (c *ReportwallettbClient) Delete() *ReportwallettbDelete {
	mutation := newReportwallettbMutation(c.config, OpDelete)
	return &ReportwallettbDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReportwallettbClient) DeleteOne(r *Reportwallettb) *ReportwallettbDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReportwallettbClient) DeleteOneID(id int) *ReportwallettbDeleteOne {
	builder := c.Delete().Where(reportwallettb.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReportwallettbDeleteOne{builder}
}

// Query returns a query builder for Reportwallettb.
func (c *ReportwallettbClient) Query() *ReportwallettbQuery {
	return &ReportwallettbQuery{config: c.config}
}

// Get returns a Reportwallettb entity by its id.
func (c *ReportwallettbClient) Get(ctx context.Context, id int) (*Reportwallettb, error) {
	return c.Query().Where(reportwallettb.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReportwallettbClient) GetX(ctx context.Context, id int) *Reportwallettb {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReportwallettbClient) Hooks() []Hook {
	return c.hooks.Reportwallettb
}

// StatementEndingBalancClient is a client for the StatementEndingBalanc schema.
type StatementEndingBalancClient struct {
	config
}

// NewStatementEndingBalancClient returns a client for the StatementEndingBalanc from the given config.
func NewStatementEndingBalancClient(c config) *StatementEndingBalancClient {
	return &StatementEndingBalancClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statementendingbalanc.Hooks(f(g(h())))`.
func (c *StatementEndingBalancClient) Use(hooks ...Hook) {
	c.hooks.StatementEndingBalanc = append(c.hooks.StatementEndingBalanc, hooks...)
}

// Create returns a create builder for StatementEndingBalanc.
func (c *StatementEndingBalancClient) Create() *StatementEndingBalancCreate {
	mutation := newStatementEndingBalancMutation(c.config, OpCreate)
	return &StatementEndingBalancCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StatementEndingBalanc entities.
func (c *StatementEndingBalancClient) CreateBulk(builders ...*StatementEndingBalancCreate) *StatementEndingBalancCreateBulk {
	return &StatementEndingBalancCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StatementEndingBalanc.
func (c *StatementEndingBalancClient) Update() *StatementEndingBalancUpdate {
	mutation := newStatementEndingBalancMutation(c.config, OpUpdate)
	return &StatementEndingBalancUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatementEndingBalancClient) UpdateOne(seb *StatementEndingBalanc) *StatementEndingBalancUpdateOne {
	mutation := newStatementEndingBalancMutation(c.config, OpUpdateOne, withStatementEndingBalanc(seb))
	return &StatementEndingBalancUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatementEndingBalancClient) UpdateOneID(id int) *StatementEndingBalancUpdateOne {
	mutation := newStatementEndingBalancMutation(c.config, OpUpdateOne, withStatementEndingBalancID(id))
	return &StatementEndingBalancUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatementEndingBalanc.
func (c *StatementEndingBalancClient) Delete() *StatementEndingBalancDelete {
	mutation := newStatementEndingBalancMutation(c.config, OpDelete)
	return &StatementEndingBalancDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatementEndingBalancClient) DeleteOne(seb *StatementEndingBalanc) *StatementEndingBalancDeleteOne {
	return c.DeleteOneID(seb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatementEndingBalancClient) DeleteOneID(id int) *StatementEndingBalancDeleteOne {
	builder := c.Delete().Where(statementendingbalanc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatementEndingBalancDeleteOne{builder}
}

// Query returns a query builder for StatementEndingBalanc.
func (c *StatementEndingBalancClient) Query() *StatementEndingBalancQuery {
	return &StatementEndingBalancQuery{config: c.config}
}

// Get returns a StatementEndingBalanc entity by its id.
func (c *StatementEndingBalancClient) Get(ctx context.Context, id int) (*StatementEndingBalanc, error) {
	return c.Query().Where(statementendingbalanc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatementEndingBalancClient) GetX(ctx context.Context, id int) *StatementEndingBalanc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBank queries the bank edge of a StatementEndingBalanc.
func (c *StatementEndingBalancClient) QueryBank(seb *StatementEndingBalanc) *BankdetailQuery {
	query := &BankdetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := seb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statementendingbalanc.Table, statementendingbalanc.FieldID, id),
			sqlgraph.To(bankdetail.Table, bankdetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statementendingbalanc.BankTable, statementendingbalanc.BankColumn),
		)
		fromV = sqlgraph.Neighbors(seb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatementEndingBalancClient) Hooks() []Hook {
	return c.hooks.StatementEndingBalanc
}

// TransactionfactorClient is a client for the Transactionfactor schema.
type TransactionfactorClient struct {
	config
}

// NewTransactionfactorClient returns a client for the Transactionfactor from the given config.
func NewTransactionfactorClient(c config) *TransactionfactorClient {
	return &TransactionfactorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactionfactor.Hooks(f(g(h())))`.
func (c *TransactionfactorClient) Use(hooks ...Hook) {
	c.hooks.Transactionfactor = append(c.hooks.Transactionfactor, hooks...)
}

// Create returns a create builder for Transactionfactor.
func (c *TransactionfactorClient) Create() *TransactionfactorCreate {
	mutation := newTransactionfactorMutation(c.config, OpCreate)
	return &TransactionfactorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transactionfactor entities.
func (c *TransactionfactorClient) CreateBulk(builders ...*TransactionfactorCreate) *TransactionfactorCreateBulk {
	return &TransactionfactorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transactionfactor.
func (c *TransactionfactorClient) Update() *TransactionfactorUpdate {
	mutation := newTransactionfactorMutation(c.config, OpUpdate)
	return &TransactionfactorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionfactorClient) UpdateOne(t *Transactionfactor) *TransactionfactorUpdateOne {
	mutation := newTransactionfactorMutation(c.config, OpUpdateOne, withTransactionfactor(t))
	return &TransactionfactorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionfactorClient) UpdateOneID(id int) *TransactionfactorUpdateOne {
	mutation := newTransactionfactorMutation(c.config, OpUpdateOne, withTransactionfactorID(id))
	return &TransactionfactorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transactionfactor.
func (c *TransactionfactorClient) Delete() *TransactionfactorDelete {
	mutation := newTransactionfactorMutation(c.config, OpDelete)
	return &TransactionfactorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TransactionfactorClient) DeleteOne(t *Transactionfactor) *TransactionfactorDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TransactionfactorClient) DeleteOneID(id int) *TransactionfactorDeleteOne {
	builder := c.Delete().Where(transactionfactor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionfactorDeleteOne{builder}
}

// Query returns a query builder for Transactionfactor.
func (c *TransactionfactorClient) Query() *TransactionfactorQuery {
	return &TransactionfactorQuery{config: c.config}
}

// Get returns a Transactionfactor entity by its id.
func (c *TransactionfactorClient) Get(ctx context.Context, id int) (*Transactionfactor, error) {
	return c.Query().Where(transactionfactor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionfactorClient) GetX(ctx context.Context, id int) *Transactionfactor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransactionhistory queries the transactionhistory edge of a Transactionfactor.
func (c *TransactionfactorClient) QueryTransactionhistory(t *Transactionfactor) *TransactionfactorhistoryQuery {
	query := &TransactionfactorhistoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transactionfactor.Table, transactionfactor.FieldID, id),
			sqlgraph.To(transactionfactorhistory.Table, transactionfactorhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, transactionfactor.TransactionhistoryTable, transactionfactor.TransactionhistoryColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionfactorClient) Hooks() []Hook {
	return c.hooks.Transactionfactor
}

// TransactionfactorhistoryClient is a client for the Transactionfactorhistory schema.
type TransactionfactorhistoryClient struct {
	config
}

// NewTransactionfactorhistoryClient returns a client for the Transactionfactorhistory from the given config.
func NewTransactionfactorhistoryClient(c config) *TransactionfactorhistoryClient {
	return &TransactionfactorhistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactionfactorhistory.Hooks(f(g(h())))`.
func (c *TransactionfactorhistoryClient) Use(hooks ...Hook) {
	c.hooks.Transactionfactorhistory = append(c.hooks.Transactionfactorhistory, hooks...)
}

// Create returns a create builder for Transactionfactorhistory.
func (c *TransactionfactorhistoryClient) Create() *TransactionfactorhistoryCreate {
	mutation := newTransactionfactorhistoryMutation(c.config, OpCreate)
	return &TransactionfactorhistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transactionfactorhistory entities.
func (c *TransactionfactorhistoryClient) CreateBulk(builders ...*TransactionfactorhistoryCreate) *TransactionfactorhistoryCreateBulk {
	return &TransactionfactorhistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transactionfactorhistory.
func (c *TransactionfactorhistoryClient) Update() *TransactionfactorhistoryUpdate {
	mutation := newTransactionfactorhistoryMutation(c.config, OpUpdate)
	return &TransactionfactorhistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionfactorhistoryClient) UpdateOne(t *Transactionfactorhistory) *TransactionfactorhistoryUpdateOne {
	mutation := newTransactionfactorhistoryMutation(c.config, OpUpdateOne, withTransactionfactorhistory(t))
	return &TransactionfactorhistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionfactorhistoryClient) UpdateOneID(id int) *TransactionfactorhistoryUpdateOne {
	mutation := newTransactionfactorhistoryMutation(c.config, OpUpdateOne, withTransactionfactorhistoryID(id))
	return &TransactionfactorhistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transactionfactorhistory.
func (c *TransactionfactorhistoryClient) Delete() *TransactionfactorhistoryDelete {
	mutation := newTransactionfactorhistoryMutation(c.config, OpDelete)
	return &TransactionfactorhistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TransactionfactorhistoryClient) DeleteOne(t *Transactionfactorhistory) *TransactionfactorhistoryDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TransactionfactorhistoryClient) DeleteOneID(id int) *TransactionfactorhistoryDeleteOne {
	builder := c.Delete().Where(transactionfactorhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionfactorhistoryDeleteOne{builder}
}

// Query returns a query builder for Transactionfactorhistory.
func (c *TransactionfactorhistoryClient) Query() *TransactionfactorhistoryQuery {
	return &TransactionfactorhistoryQuery{config: c.config}
}

// Get returns a Transactionfactorhistory entity by its id.
func (c *TransactionfactorhistoryClient) Get(ctx context.Context, id int) (*Transactionfactorhistory, error) {
	return c.Query().Where(transactionfactorhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionfactorhistoryClient) GetX(ctx context.Context, id int) *Transactionfactorhistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransactionfactor queries the Transactionfactor edge of a Transactionfactorhistory.
func (c *TransactionfactorhistoryClient) QueryTransactionfactor(t *Transactionfactorhistory) *TransactionfactorQuery {
	query := &TransactionfactorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transactionfactorhistory.Table, transactionfactorhistory.FieldID, id),
			sqlgraph.To(transactionfactor.Table, transactionfactor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transactionfactorhistory.TransactionfactorTable, transactionfactorhistory.TransactionfactorColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionfactorhistoryClient) Hooks() []Hook {
	return c.hooks.Transactionfactorhistory
}

// TransactionfactoritemClient is a client for the Transactionfactoritem schema.
type TransactionfactoritemClient struct {
	config
}

// NewTransactionfactoritemClient returns a client for the Transactionfactoritem from the given config.
func NewTransactionfactoritemClient(c config) *TransactionfactoritemClient {
	return &TransactionfactoritemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactionfactoritem.Hooks(f(g(h())))`.
func (c *TransactionfactoritemClient) Use(hooks ...Hook) {
	c.hooks.Transactionfactoritem = append(c.hooks.Transactionfactoritem, hooks...)
}

// Create returns a create builder for Transactionfactoritem.
func (c *TransactionfactoritemClient) Create() *TransactionfactoritemCreate {
	mutation := newTransactionfactoritemMutation(c.config, OpCreate)
	return &TransactionfactoritemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transactionfactoritem entities.
func (c *TransactionfactoritemClient) CreateBulk(builders ...*TransactionfactoritemCreate) *TransactionfactoritemCreateBulk {
	return &TransactionfactoritemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transactionfactoritem.
func (c *TransactionfactoritemClient) Update() *TransactionfactoritemUpdate {
	mutation := newTransactionfactoritemMutation(c.config, OpUpdate)
	return &TransactionfactoritemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionfactoritemClient) UpdateOne(t *Transactionfactoritem) *TransactionfactoritemUpdateOne {
	mutation := newTransactionfactoritemMutation(c.config, OpUpdateOne, withTransactionfactoritem(t))
	return &TransactionfactoritemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionfactoritemClient) UpdateOneID(id int) *TransactionfactoritemUpdateOne {
	mutation := newTransactionfactoritemMutation(c.config, OpUpdateOne, withTransactionfactoritemID(id))
	return &TransactionfactoritemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transactionfactoritem.
func (c *TransactionfactoritemClient) Delete() *TransactionfactoritemDelete {
	mutation := newTransactionfactoritemMutation(c.config, OpDelete)
	return &TransactionfactoritemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TransactionfactoritemClient) DeleteOne(t *Transactionfactoritem) *TransactionfactoritemDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TransactionfactoritemClient) DeleteOneID(id int) *TransactionfactoritemDeleteOne {
	builder := c.Delete().Where(transactionfactoritem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionfactoritemDeleteOne{builder}
}

// Query returns a query builder for Transactionfactoritem.
func (c *TransactionfactoritemClient) Query() *TransactionfactoritemQuery {
	return &TransactionfactoritemQuery{config: c.config}
}

// Get returns a Transactionfactoritem entity by its id.
func (c *TransactionfactoritemClient) Get(ctx context.Context, id int) (*Transactionfactoritem, error) {
	return c.Query().Where(transactionfactoritem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionfactoritemClient) GetX(ctx context.Context, id int) *Transactionfactoritem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TransactionfactoritemClient) Hooks() []Hook {
	return c.hooks.Transactionfactoritem
}

// TransactionfactoritemtmpClient is a client for the Transactionfactoritemtmp schema.
type TransactionfactoritemtmpClient struct {
	config
}

// NewTransactionfactoritemtmpClient returns a client for the Transactionfactoritemtmp from the given config.
func NewTransactionfactoritemtmpClient(c config) *TransactionfactoritemtmpClient {
	return &TransactionfactoritemtmpClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactionfactoritemtmp.Hooks(f(g(h())))`.
func (c *TransactionfactoritemtmpClient) Use(hooks ...Hook) {
	c.hooks.Transactionfactoritemtmp = append(c.hooks.Transactionfactoritemtmp, hooks...)
}

// Create returns a create builder for Transactionfactoritemtmp.
func (c *TransactionfactoritemtmpClient) Create() *TransactionfactoritemtmpCreate {
	mutation := newTransactionfactoritemtmpMutation(c.config, OpCreate)
	return &TransactionfactoritemtmpCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transactionfactoritemtmp entities.
func (c *TransactionfactoritemtmpClient) CreateBulk(builders ...*TransactionfactoritemtmpCreate) *TransactionfactoritemtmpCreateBulk {
	return &TransactionfactoritemtmpCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transactionfactoritemtmp.
func (c *TransactionfactoritemtmpClient) Update() *TransactionfactoritemtmpUpdate {
	mutation := newTransactionfactoritemtmpMutation(c.config, OpUpdate)
	return &TransactionfactoritemtmpUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionfactoritemtmpClient) UpdateOne(t *Transactionfactoritemtmp) *TransactionfactoritemtmpUpdateOne {
	mutation := newTransactionfactoritemtmpMutation(c.config, OpUpdateOne, withTransactionfactoritemtmp(t))
	return &TransactionfactoritemtmpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionfactoritemtmpClient) UpdateOneID(id int) *TransactionfactoritemtmpUpdateOne {
	mutation := newTransactionfactoritemtmpMutation(c.config, OpUpdateOne, withTransactionfactoritemtmpID(id))
	return &TransactionfactoritemtmpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transactionfactoritemtmp.
func (c *TransactionfactoritemtmpClient) Delete() *TransactionfactoritemtmpDelete {
	mutation := newTransactionfactoritemtmpMutation(c.config, OpDelete)
	return &TransactionfactoritemtmpDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TransactionfactoritemtmpClient) DeleteOne(t *Transactionfactoritemtmp) *TransactionfactoritemtmpDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TransactionfactoritemtmpClient) DeleteOneID(id int) *TransactionfactoritemtmpDeleteOne {
	builder := c.Delete().Where(transactionfactoritemtmp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionfactoritemtmpDeleteOne{builder}
}

// Query returns a query builder for Transactionfactoritemtmp.
func (c *TransactionfactoritemtmpClient) Query() *TransactionfactoritemtmpQuery {
	return &TransactionfactoritemtmpQuery{config: c.config}
}

// Get returns a Transactionfactoritemtmp entity by its id.
func (c *TransactionfactoritemtmpClient) Get(ctx context.Context, id int) (*Transactionfactoritemtmp, error) {
	return c.Query().Where(transactionfactoritemtmp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionfactoritemtmpClient) GetX(ctx context.Context, id int) *Transactionfactoritemtmp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TransactionfactoritemtmpClient) Hooks() []Hook {
	return c.hooks.Transactionfactoritemtmp
}

// UserprofileClient is a client for the Userprofile schema.
type UserprofileClient struct {
	config
}

// NewUserprofileClient returns a client for the Userprofile from the given config.
func NewUserprofileClient(c config) *UserprofileClient {
	return &UserprofileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userprofile.Hooks(f(g(h())))`.
func (c *UserprofileClient) Use(hooks ...Hook) {
	c.hooks.Userprofile = append(c.hooks.Userprofile, hooks...)
}

// Create returns a create builder for Userprofile.
func (c *UserprofileClient) Create() *UserprofileCreate {
	mutation := newUserprofileMutation(c.config, OpCreate)
	return &UserprofileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Userprofile entities.
func (c *UserprofileClient) CreateBulk(builders ...*UserprofileCreate) *UserprofileCreateBulk {
	return &UserprofileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Userprofile.
func (c *UserprofileClient) Update() *UserprofileUpdate {
	mutation := newUserprofileMutation(c.config, OpUpdate)
	return &UserprofileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserprofileClient) UpdateOne(u *Userprofile) *UserprofileUpdateOne {
	mutation := newUserprofileMutation(c.config, OpUpdateOne, withUserprofile(u))
	return &UserprofileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserprofileClient) UpdateOneID(id int) *UserprofileUpdateOne {
	mutation := newUserprofileMutation(c.config, OpUpdateOne, withUserprofileID(id))
	return &UserprofileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Userprofile.
func (c *UserprofileClient) Delete() *UserprofileDelete {
	mutation := newUserprofileMutation(c.config, OpDelete)
	return &UserprofileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserprofileClient) DeleteOne(u *Userprofile) *UserprofileDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserprofileClient) DeleteOneID(id int) *UserprofileDeleteOne {
	builder := c.Delete().Where(userprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserprofileDeleteOne{builder}
}

// Query returns a query builder for Userprofile.
func (c *UserprofileClient) Query() *UserprofileQuery {
	return &UserprofileQuery{config: c.config}
}

// Get returns a Userprofile entity by its id.
func (c *UserprofileClient) Get(ctx context.Context, id int) (*Userprofile, error) {
	return c.Query().Where(userprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserprofileClient) GetX(ctx context.Context, id int) *Userprofile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserprofileClient) Hooks() []Hook {
	return c.hooks.Userprofile
}

// UserwalletClient is a client for the Userwallet schema.
type UserwalletClient struct {
	config
}

// NewUserwalletClient returns a client for the Userwallet from the given config.
func NewUserwalletClient(c config) *UserwalletClient {
	return &UserwalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userwallet.Hooks(f(g(h())))`.
func (c *UserwalletClient) Use(hooks ...Hook) {
	c.hooks.Userwallet = append(c.hooks.Userwallet, hooks...)
}

// Create returns a create builder for Userwallet.
func (c *UserwalletClient) Create() *UserwalletCreate {
	mutation := newUserwalletMutation(c.config, OpCreate)
	return &UserwalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Userwallet entities.
func (c *UserwalletClient) CreateBulk(builders ...*UserwalletCreate) *UserwalletCreateBulk {
	return &UserwalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Userwallet.
func (c *UserwalletClient) Update() *UserwalletUpdate {
	mutation := newUserwalletMutation(c.config, OpUpdate)
	return &UserwalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserwalletClient) UpdateOne(u *Userwallet) *UserwalletUpdateOne {
	mutation := newUserwalletMutation(c.config, OpUpdateOne, withUserwallet(u))
	return &UserwalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserwalletClient) UpdateOneID(id int) *UserwalletUpdateOne {
	mutation := newUserwalletMutation(c.config, OpUpdateOne, withUserwalletID(id))
	return &UserwalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Userwallet.
func (c *UserwalletClient) Delete() *UserwalletDelete {
	mutation := newUserwalletMutation(c.config, OpDelete)
	return &UserwalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserwalletClient) DeleteOne(u *Userwallet) *UserwalletDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserwalletClient) DeleteOneID(id int) *UserwalletDeleteOne {
	builder := c.Delete().Where(userwallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserwalletDeleteOne{builder}
}

// Query returns a query builder for Userwallet.
func (c *UserwalletClient) Query() *UserwalletQuery {
	return &UserwalletQuery{config: c.config}
}

// Get returns a Userwallet entity by its id.
func (c *UserwalletClient) Get(ctx context.Context, id int) (*Userwallet, error) {
	return c.Query().Where(userwallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserwalletClient) GetX(ctx context.Context, id int) *Userwallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserwalletClient) Hooks() []Hook {
	return c.hooks.Userwallet
}

// WatchlistClient is a client for the Watchlist schema.
type WatchlistClient struct {
	config
}

// NewWatchlistClient returns a client for the Watchlist from the given config.
func NewWatchlistClient(c config) *WatchlistClient {
	return &WatchlistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `watchlist.Hooks(f(g(h())))`.
func (c *WatchlistClient) Use(hooks ...Hook) {
	c.hooks.Watchlist = append(c.hooks.Watchlist, hooks...)
}

// Create returns a create builder for Watchlist.
func (c *WatchlistClient) Create() *WatchlistCreate {
	mutation := newWatchlistMutation(c.config, OpCreate)
	return &WatchlistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Watchlist entities.
func (c *WatchlistClient) CreateBulk(builders ...*WatchlistCreate) *WatchlistCreateBulk {
	return &WatchlistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Watchlist.
func (c *WatchlistClient) Update() *WatchlistUpdate {
	mutation := newWatchlistMutation(c.config, OpUpdate)
	return &WatchlistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WatchlistClient) UpdateOne(w *Watchlist) *WatchlistUpdateOne {
	mutation := newWatchlistMutation(c.config, OpUpdateOne, withWatchlist(w))
	return &WatchlistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WatchlistClient) UpdateOneID(id int) *WatchlistUpdateOne {
	mutation := newWatchlistMutation(c.config, OpUpdateOne, withWatchlistID(id))
	return &WatchlistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Watchlist.
func (c *WatchlistClient) Delete() *WatchlistDelete {
	mutation := newWatchlistMutation(c.config, OpDelete)
	return &WatchlistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WatchlistClient) DeleteOne(w *Watchlist) *WatchlistDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WatchlistClient) DeleteOneID(id int) *WatchlistDeleteOne {
	builder := c.Delete().Where(watchlist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WatchlistDeleteOne{builder}
}

// Query returns a query builder for Watchlist.
func (c *WatchlistClient) Query() *WatchlistQuery {
	return &WatchlistQuery{config: c.config}
}

// Get returns a Watchlist entity by its id.
func (c *WatchlistClient) Get(ctx context.Context, id int) (*Watchlist, error) {
	return c.Query().Where(watchlist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WatchlistClient) GetX(ctx context.Context, id int) *Watchlist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRelated queries the related edge of a Watchlist.
func (c *WatchlistClient) QueryRelated(w *Watchlist) *WatchlisttypeQuery {
	query := &WatchlisttypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(watchlist.Table, watchlist.FieldID, id),
			sqlgraph.To(watchlisttype.Table, watchlisttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, watchlist.RelatedTable, watchlist.RelatedColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WatchlistClient) Hooks() []Hook {
	return c.hooks.Watchlist
}

// WatchlisthistoryClient is a client for the Watchlisthistory schema.
type WatchlisthistoryClient struct {
	config
}

// NewWatchlisthistoryClient returns a client for the Watchlisthistory from the given config.
func NewWatchlisthistoryClient(c config) *WatchlisthistoryClient {
	return &WatchlisthistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `watchlisthistory.Hooks(f(g(h())))`.
func (c *WatchlisthistoryClient) Use(hooks ...Hook) {
	c.hooks.Watchlisthistory = append(c.hooks.Watchlisthistory, hooks...)
}

// Create returns a create builder for Watchlisthistory.
func (c *WatchlisthistoryClient) Create() *WatchlisthistoryCreate {
	mutation := newWatchlisthistoryMutation(c.config, OpCreate)
	return &WatchlisthistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Watchlisthistory entities.
func (c *WatchlisthistoryClient) CreateBulk(builders ...*WatchlisthistoryCreate) *WatchlisthistoryCreateBulk {
	return &WatchlisthistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Watchlisthistory.
func (c *WatchlisthistoryClient) Update() *WatchlisthistoryUpdate {
	mutation := newWatchlisthistoryMutation(c.config, OpUpdate)
	return &WatchlisthistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WatchlisthistoryClient) UpdateOne(w *Watchlisthistory) *WatchlisthistoryUpdateOne {
	mutation := newWatchlisthistoryMutation(c.config, OpUpdateOne, withWatchlisthistory(w))
	return &WatchlisthistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WatchlisthistoryClient) UpdateOneID(id int) *WatchlisthistoryUpdateOne {
	mutation := newWatchlisthistoryMutation(c.config, OpUpdateOne, withWatchlisthistoryID(id))
	return &WatchlisthistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Watchlisthistory.
func (c *WatchlisthistoryClient) Delete() *WatchlisthistoryDelete {
	mutation := newWatchlisthistoryMutation(c.config, OpDelete)
	return &WatchlisthistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WatchlisthistoryClient) DeleteOne(w *Watchlisthistory) *WatchlisthistoryDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WatchlisthistoryClient) DeleteOneID(id int) *WatchlisthistoryDeleteOne {
	builder := c.Delete().Where(watchlisthistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WatchlisthistoryDeleteOne{builder}
}

// Query returns a query builder for Watchlisthistory.
func (c *WatchlisthistoryClient) Query() *WatchlisthistoryQuery {
	return &WatchlisthistoryQuery{config: c.config}
}

// Get returns a Watchlisthistory entity by its id.
func (c *WatchlisthistoryClient) Get(ctx context.Context, id int) (*Watchlisthistory, error) {
	return c.Query().Where(watchlisthistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WatchlisthistoryClient) GetX(ctx context.Context, id int) *Watchlisthistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WatchlisthistoryClient) Hooks() []Hook {
	return c.hooks.Watchlisthistory
}

// WatchlisttypeClient is a client for the Watchlisttype schema.
type WatchlisttypeClient struct {
	config
}

// NewWatchlisttypeClient returns a client for the Watchlisttype from the given config.
func NewWatchlisttypeClient(c config) *WatchlisttypeClient {
	return &WatchlisttypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `watchlisttype.Hooks(f(g(h())))`.
func (c *WatchlisttypeClient) Use(hooks ...Hook) {
	c.hooks.Watchlisttype = append(c.hooks.Watchlisttype, hooks...)
}

// Create returns a create builder for Watchlisttype.
func (c *WatchlisttypeClient) Create() *WatchlisttypeCreate {
	mutation := newWatchlisttypeMutation(c.config, OpCreate)
	return &WatchlisttypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Watchlisttype entities.
func (c *WatchlisttypeClient) CreateBulk(builders ...*WatchlisttypeCreate) *WatchlisttypeCreateBulk {
	return &WatchlisttypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Watchlisttype.
func (c *WatchlisttypeClient) Update() *WatchlisttypeUpdate {
	mutation := newWatchlisttypeMutation(c.config, OpUpdate)
	return &WatchlisttypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WatchlisttypeClient) UpdateOne(w *Watchlisttype) *WatchlisttypeUpdateOne {
	mutation := newWatchlisttypeMutation(c.config, OpUpdateOne, withWatchlisttype(w))
	return &WatchlisttypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WatchlisttypeClient) UpdateOneID(id int) *WatchlisttypeUpdateOne {
	mutation := newWatchlisttypeMutation(c.config, OpUpdateOne, withWatchlisttypeID(id))
	return &WatchlisttypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Watchlisttype.
func (c *WatchlisttypeClient) Delete() *WatchlisttypeDelete {
	mutation := newWatchlisttypeMutation(c.config, OpDelete)
	return &WatchlisttypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WatchlisttypeClient) DeleteOne(w *Watchlisttype) *WatchlisttypeDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WatchlisttypeClient) DeleteOneID(id int) *WatchlisttypeDeleteOne {
	builder := c.Delete().Where(watchlisttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WatchlisttypeDeleteOne{builder}
}

// Query returns a query builder for Watchlisttype.
func (c *WatchlisttypeClient) Query() *WatchlisttypeQuery {
	return &WatchlisttypeQuery{config: c.config}
}

// Get returns a Watchlisttype entity by its id.
func (c *WatchlisttypeClient) Get(ctx context.Context, id int) (*Watchlisttype, error) {
	return c.Query().Where(watchlisttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WatchlisttypeClient) GetX(ctx context.Context, id int) *Watchlisttype {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWatchlist queries the watchlist edge of a Watchlisttype.
func (c *WatchlisttypeClient) QueryWatchlist(w *Watchlisttype) *WatchlistQuery {
	query := &WatchlistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(watchlisttype.Table, watchlisttype.FieldID, id),
			sqlgraph.To(watchlist.Table, watchlist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, watchlisttype.WatchlistTable, watchlisttype.WatchlistColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WatchlisttypeClient) Hooks() []Hook {
	return c.hooks.Watchlisttype
}

// WritelogClient is a client for the Writelog schema.
type WritelogClient struct {
	config
}

// NewWritelogClient returns a client for the Writelog from the given config.
func NewWritelogClient(c config) *WritelogClient {
	return &WritelogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `writelog.Hooks(f(g(h())))`.
func (c *WritelogClient) Use(hooks ...Hook) {
	c.hooks.Writelog = append(c.hooks.Writelog, hooks...)
}

// Create returns a create builder for Writelog.
func (c *WritelogClient) Create() *WritelogCreate {
	mutation := newWritelogMutation(c.config, OpCreate)
	return &WritelogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Writelog entities.
func (c *WritelogClient) CreateBulk(builders ...*WritelogCreate) *WritelogCreateBulk {
	return &WritelogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Writelog.
func (c *WritelogClient) Update() *WritelogUpdate {
	mutation := newWritelogMutation(c.config, OpUpdate)
	return &WritelogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WritelogClient) UpdateOne(w *Writelog) *WritelogUpdateOne {
	mutation := newWritelogMutation(c.config, OpUpdateOne, withWritelog(w))
	return &WritelogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WritelogClient) UpdateOneID(id int) *WritelogUpdateOne {
	mutation := newWritelogMutation(c.config, OpUpdateOne, withWritelogID(id))
	return &WritelogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Writelog.
func (c *WritelogClient) Delete() *WritelogDelete {
	mutation := newWritelogMutation(c.config, OpDelete)
	return &WritelogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WritelogClient) DeleteOne(w *Writelog) *WritelogDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WritelogClient) DeleteOneID(id int) *WritelogDeleteOne {
	builder := c.Delete().Where(writelog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WritelogDeleteOne{builder}
}

// Query returns a query builder for Writelog.
func (c *WritelogClient) Query() *WritelogQuery {
	return &WritelogQuery{config: c.config}
}

// Get returns a Writelog entity by its id.
func (c *WritelogClient) Get(ctx context.Context, id int) (*Writelog, error) {
	return c.Query().Where(writelog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WritelogClient) GetX(ctx context.Context, id int) *Writelog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WritelogClient) Hooks() []Hook {
	return c.hooks.Writelog
}
