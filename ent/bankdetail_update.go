// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/bankdetail"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/statementendingbalanc"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BankdetailUpdate is the builder for updating Bankdetail entities.
type BankdetailUpdate struct {
	config
	hooks    []Hook
	mutation *BankdetailMutation
}

// Where adds a new predicate for the BankdetailUpdate builder.
func (bu *BankdetailUpdate) Where(ps ...predicate.Bankdetail) *BankdetailUpdate {
	bu.mutation.predicates = append(bu.mutation.predicates, ps...)
	return bu
}

// SetBankAccountNo sets the "Bank_AccountNo" field.
func (bu *BankdetailUpdate) SetBankAccountNo(s string) *BankdetailUpdate {
	bu.mutation.SetBankAccountNo(s)
	return bu
}

// SetNillableBankAccountNo sets the "Bank_AccountNo" field if the given value is not nil.
func (bu *BankdetailUpdate) SetNillableBankAccountNo(s *string) *BankdetailUpdate {
	if s != nil {
		bu.SetBankAccountNo(*s)
	}
	return bu
}

// ClearBankAccountNo clears the value of the "Bank_AccountNo" field.
func (bu *BankdetailUpdate) ClearBankAccountNo() *BankdetailUpdate {
	bu.mutation.ClearBankAccountNo()
	return bu
}

// SetBankName sets the "Bank_Name" field.
func (bu *BankdetailUpdate) SetBankName(s string) *BankdetailUpdate {
	bu.mutation.SetBankName(s)
	return bu
}

// SetNillableBankName sets the "Bank_Name" field if the given value is not nil.
func (bu *BankdetailUpdate) SetNillableBankName(s *string) *BankdetailUpdate {
	if s != nil {
		bu.SetBankName(*s)
	}
	return bu
}

// ClearBankName clears the value of the "Bank_Name" field.
func (bu *BankdetailUpdate) ClearBankName() *BankdetailUpdate {
	bu.mutation.ClearBankName()
	return bu
}

// SetBankAccountName sets the "Bank_AccountName" field.
func (bu *BankdetailUpdate) SetBankAccountName(s string) *BankdetailUpdate {
	bu.mutation.SetBankAccountName(s)
	return bu
}

// SetNillableBankAccountName sets the "Bank_AccountName" field if the given value is not nil.
func (bu *BankdetailUpdate) SetNillableBankAccountName(s *string) *BankdetailUpdate {
	if s != nil {
		bu.SetBankAccountName(*s)
	}
	return bu
}

// ClearBankAccountName clears the value of the "Bank_AccountName" field.
func (bu *BankdetailUpdate) ClearBankAccountName() *BankdetailUpdate {
	bu.mutation.ClearBankAccountName()
	return bu
}

// AddStatementIDs adds the "statements" edge to the StatementEndingBalanc entity by IDs.
func (bu *BankdetailUpdate) AddStatementIDs(ids ...int) *BankdetailUpdate {
	bu.mutation.AddStatementIDs(ids...)
	return bu
}

// AddStatements adds the "statements" edges to the StatementEndingBalanc entity.
func (bu *BankdetailUpdate) AddStatements(s ...*StatementEndingBalanc) *BankdetailUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.AddStatementIDs(ids...)
}

// Mutation returns the BankdetailMutation object of the builder.
func (bu *BankdetailUpdate) Mutation() *BankdetailMutation {
	return bu.mutation
}

// ClearStatements clears all "statements" edges to the StatementEndingBalanc entity.
func (bu *BankdetailUpdate) ClearStatements() *BankdetailUpdate {
	bu.mutation.ClearStatements()
	return bu
}

// RemoveStatementIDs removes the "statements" edge to StatementEndingBalanc entities by IDs.
func (bu *BankdetailUpdate) RemoveStatementIDs(ids ...int) *BankdetailUpdate {
	bu.mutation.RemoveStatementIDs(ids...)
	return bu
}

// RemoveStatements removes "statements" edges to StatementEndingBalanc entities.
func (bu *BankdetailUpdate) RemoveStatements(s ...*StatementEndingBalanc) *BankdetailUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.RemoveStatementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BankdetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankdetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BankdetailUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BankdetailUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BankdetailUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BankdetailUpdate) check() error {
	if v, ok := bu.mutation.BankAccountNo(); ok {
		if err := bankdetail.BankAccountNoValidator(v); err != nil {
			return &ValidationError{Name: "Bank_AccountNo", err: fmt.Errorf("ent: validator failed for field \"Bank_AccountNo\": %w", err)}
		}
	}
	if v, ok := bu.mutation.BankName(); ok {
		if err := bankdetail.BankNameValidator(v); err != nil {
			return &ValidationError{Name: "Bank_Name", err: fmt.Errorf("ent: validator failed for field \"Bank_Name\": %w", err)}
		}
	}
	if v, ok := bu.mutation.BankAccountName(); ok {
		if err := bankdetail.BankAccountNameValidator(v); err != nil {
			return &ValidationError{Name: "Bank_AccountName", err: fmt.Errorf("ent: validator failed for field \"Bank_AccountName\": %w", err)}
		}
	}
	return nil
}

func (bu *BankdetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bankdetail.Table,
			Columns: bankdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bankdetail.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BankAccountNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankdetail.FieldBankAccountNo,
		})
	}
	if bu.mutation.BankAccountNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bankdetail.FieldBankAccountNo,
		})
	}
	if value, ok := bu.mutation.BankName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankdetail.FieldBankName,
		})
	}
	if bu.mutation.BankNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bankdetail.FieldBankName,
		})
	}
	if value, ok := bu.mutation.BankAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankdetail.FieldBankAccountName,
		})
	}
	if bu.mutation.BankAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bankdetail.FieldBankAccountName,
		})
	}
	if bu.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bankdetail.StatementsTable,
			Columns: []string{bankdetail.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statementendingbalanc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedStatementsIDs(); len(nodes) > 0 && !bu.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bankdetail.StatementsTable,
			Columns: []string{bankdetail.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statementendingbalanc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.StatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bankdetail.StatementsTable,
			Columns: []string{bankdetail.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statementendingbalanc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BankdetailUpdateOne is the builder for updating a single Bankdetail entity.
type BankdetailUpdateOne struct {
	config
	hooks    []Hook
	mutation *BankdetailMutation
}

// SetBankAccountNo sets the "Bank_AccountNo" field.
func (buo *BankdetailUpdateOne) SetBankAccountNo(s string) *BankdetailUpdateOne {
	buo.mutation.SetBankAccountNo(s)
	return buo
}

// SetNillableBankAccountNo sets the "Bank_AccountNo" field if the given value is not nil.
func (buo *BankdetailUpdateOne) SetNillableBankAccountNo(s *string) *BankdetailUpdateOne {
	if s != nil {
		buo.SetBankAccountNo(*s)
	}
	return buo
}

// ClearBankAccountNo clears the value of the "Bank_AccountNo" field.
func (buo *BankdetailUpdateOne) ClearBankAccountNo() *BankdetailUpdateOne {
	buo.mutation.ClearBankAccountNo()
	return buo
}

// SetBankName sets the "Bank_Name" field.
func (buo *BankdetailUpdateOne) SetBankName(s string) *BankdetailUpdateOne {
	buo.mutation.SetBankName(s)
	return buo
}

// SetNillableBankName sets the "Bank_Name" field if the given value is not nil.
func (buo *BankdetailUpdateOne) SetNillableBankName(s *string) *BankdetailUpdateOne {
	if s != nil {
		buo.SetBankName(*s)
	}
	return buo
}

// ClearBankName clears the value of the "Bank_Name" field.
func (buo *BankdetailUpdateOne) ClearBankName() *BankdetailUpdateOne {
	buo.mutation.ClearBankName()
	return buo
}

// SetBankAccountName sets the "Bank_AccountName" field.
func (buo *BankdetailUpdateOne) SetBankAccountName(s string) *BankdetailUpdateOne {
	buo.mutation.SetBankAccountName(s)
	return buo
}

// SetNillableBankAccountName sets the "Bank_AccountName" field if the given value is not nil.
func (buo *BankdetailUpdateOne) SetNillableBankAccountName(s *string) *BankdetailUpdateOne {
	if s != nil {
		buo.SetBankAccountName(*s)
	}
	return buo
}

// ClearBankAccountName clears the value of the "Bank_AccountName" field.
func (buo *BankdetailUpdateOne) ClearBankAccountName() *BankdetailUpdateOne {
	buo.mutation.ClearBankAccountName()
	return buo
}

// AddStatementIDs adds the "statements" edge to the StatementEndingBalanc entity by IDs.
func (buo *BankdetailUpdateOne) AddStatementIDs(ids ...int) *BankdetailUpdateOne {
	buo.mutation.AddStatementIDs(ids...)
	return buo
}

// AddStatements adds the "statements" edges to the StatementEndingBalanc entity.
func (buo *BankdetailUpdateOne) AddStatements(s ...*StatementEndingBalanc) *BankdetailUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.AddStatementIDs(ids...)
}

// Mutation returns the BankdetailMutation object of the builder.
func (buo *BankdetailUpdateOne) Mutation() *BankdetailMutation {
	return buo.mutation
}

// ClearStatements clears all "statements" edges to the StatementEndingBalanc entity.
func (buo *BankdetailUpdateOne) ClearStatements() *BankdetailUpdateOne {
	buo.mutation.ClearStatements()
	return buo
}

// RemoveStatementIDs removes the "statements" edge to StatementEndingBalanc entities by IDs.
func (buo *BankdetailUpdateOne) RemoveStatementIDs(ids ...int) *BankdetailUpdateOne {
	buo.mutation.RemoveStatementIDs(ids...)
	return buo
}

// RemoveStatements removes "statements" edges to StatementEndingBalanc entities.
func (buo *BankdetailUpdateOne) RemoveStatements(s ...*StatementEndingBalanc) *BankdetailUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.RemoveStatementIDs(ids...)
}

// Save executes the query and returns the updated Bankdetail entity.
func (buo *BankdetailUpdateOne) Save(ctx context.Context) (*Bankdetail, error) {
	var (
		err  error
		node *Bankdetail
	)
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankdetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BankdetailUpdateOne) SaveX(ctx context.Context) *Bankdetail {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BankdetailUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BankdetailUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BankdetailUpdateOne) check() error {
	if v, ok := buo.mutation.BankAccountNo(); ok {
		if err := bankdetail.BankAccountNoValidator(v); err != nil {
			return &ValidationError{Name: "Bank_AccountNo", err: fmt.Errorf("ent: validator failed for field \"Bank_AccountNo\": %w", err)}
		}
	}
	if v, ok := buo.mutation.BankName(); ok {
		if err := bankdetail.BankNameValidator(v); err != nil {
			return &ValidationError{Name: "Bank_Name", err: fmt.Errorf("ent: validator failed for field \"Bank_Name\": %w", err)}
		}
	}
	if v, ok := buo.mutation.BankAccountName(); ok {
		if err := bankdetail.BankAccountNameValidator(v); err != nil {
			return &ValidationError{Name: "Bank_AccountName", err: fmt.Errorf("ent: validator failed for field \"Bank_AccountName\": %w", err)}
		}
	}
	return nil
}

func (buo *BankdetailUpdateOne) sqlSave(ctx context.Context) (_node *Bankdetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bankdetail.Table,
			Columns: bankdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bankdetail.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bankdetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.BankAccountNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankdetail.FieldBankAccountNo,
		})
	}
	if buo.mutation.BankAccountNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bankdetail.FieldBankAccountNo,
		})
	}
	if value, ok := buo.mutation.BankName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankdetail.FieldBankName,
		})
	}
	if buo.mutation.BankNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bankdetail.FieldBankName,
		})
	}
	if value, ok := buo.mutation.BankAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankdetail.FieldBankAccountName,
		})
	}
	if buo.mutation.BankAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bankdetail.FieldBankAccountName,
		})
	}
	if buo.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bankdetail.StatementsTable,
			Columns: []string{bankdetail.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statementendingbalanc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedStatementsIDs(); len(nodes) > 0 && !buo.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bankdetail.StatementsTable,
			Columns: []string{bankdetail.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statementendingbalanc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.StatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bankdetail.StatementsTable,
			Columns: []string{bankdetail.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statementendingbalanc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bankdetail{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
