// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pointkycrv"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PointkycrvUpdate is the builder for updating Pointkycrv entities.
type PointkycrvUpdate struct {
	config
	hooks    []Hook
	mutation *PointkycrvMutation
}

// Where adds a new predicate for the PointkycrvUpdate builder.
func (pu *PointkycrvUpdate) Where(ps ...predicate.Pointkycrv) *PointkycrvUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetDateTimeGen sets the "DateTimeGen" field.
func (pu *PointkycrvUpdate) SetDateTimeGen(t time.Time) *PointkycrvUpdate {
	pu.mutation.SetDateTimeGen(t)
	return pu
}

// SetNillableDateTimeGen sets the "DateTimeGen" field if the given value is not nil.
func (pu *PointkycrvUpdate) SetNillableDateTimeGen(t *time.Time) *PointkycrvUpdate {
	if t != nil {
		pu.SetDateTimeGen(*t)
	}
	return pu
}

// ClearDateTimeGen clears the value of the "DateTimeGen" field.
func (pu *PointkycrvUpdate) ClearDateTimeGen() *PointkycrvUpdate {
	pu.mutation.ClearDateTimeGen()
	return pu
}

// SetWalletID sets the "WalletID" field.
func (pu *PointkycrvUpdate) SetWalletID(s string) *PointkycrvUpdate {
	pu.mutation.SetWalletID(s)
	return pu
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (pu *PointkycrvUpdate) SetNillableWalletID(s *string) *PointkycrvUpdate {
	if s != nil {
		pu.SetWalletID(*s)
	}
	return pu
}

// ClearWalletID clears the value of the "WalletID" field.
func (pu *PointkycrvUpdate) ClearWalletID() *PointkycrvUpdate {
	pu.mutation.ClearWalletID()
	return pu
}

// SetStatusGen sets the "StatusGen" field.
func (pu *PointkycrvUpdate) SetStatusGen(s string) *PointkycrvUpdate {
	pu.mutation.SetStatusGen(s)
	return pu
}

// SetNillableStatusGen sets the "StatusGen" field if the given value is not nil.
func (pu *PointkycrvUpdate) SetNillableStatusGen(s *string) *PointkycrvUpdate {
	if s != nil {
		pu.SetStatusGen(*s)
	}
	return pu
}

// ClearStatusGen clears the value of the "StatusGen" field.
func (pu *PointkycrvUpdate) ClearStatusGen() *PointkycrvUpdate {
	pu.mutation.ClearStatusGen()
	return pu
}

// SetKYCDate sets the "KYCDate" field.
func (pu *PointkycrvUpdate) SetKYCDate(t time.Time) *PointkycrvUpdate {
	pu.mutation.SetKYCDate(t)
	return pu
}

// SetNillableKYCDate sets the "KYCDate" field if the given value is not nil.
func (pu *PointkycrvUpdate) SetNillableKYCDate(t *time.Time) *PointkycrvUpdate {
	if t != nil {
		pu.SetKYCDate(*t)
	}
	return pu
}

// ClearKYCDate clears the value of the "KYCDate" field.
func (pu *PointkycrvUpdate) ClearKYCDate() *PointkycrvUpdate {
	pu.mutation.ClearKYCDate()
	return pu
}

// SetRVDate sets the "RVDate" field.
func (pu *PointkycrvUpdate) SetRVDate(t time.Time) *PointkycrvUpdate {
	pu.mutation.SetRVDate(t)
	return pu
}

// SetNillableRVDate sets the "RVDate" field if the given value is not nil.
func (pu *PointkycrvUpdate) SetNillableRVDate(t *time.Time) *PointkycrvUpdate {
	if t != nil {
		pu.SetRVDate(*t)
	}
	return pu
}

// ClearRVDate clears the value of the "RVDate" field.
func (pu *PointkycrvUpdate) ClearRVDate() *PointkycrvUpdate {
	pu.mutation.ClearRVDate()
	return pu
}

// SetType sets the "Type" field.
func (pu *PointkycrvUpdate) SetType(s string) *PointkycrvUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (pu *PointkycrvUpdate) SetNillableType(s *string) *PointkycrvUpdate {
	if s != nil {
		pu.SetType(*s)
	}
	return pu
}

// ClearType clears the value of the "Type" field.
func (pu *PointkycrvUpdate) ClearType() *PointkycrvUpdate {
	pu.mutation.ClearType()
	return pu
}

// SetPoint sets the "Point" field.
func (pu *PointkycrvUpdate) SetPoint(i int) *PointkycrvUpdate {
	pu.mutation.ResetPoint()
	pu.mutation.SetPoint(i)
	return pu
}

// SetNillablePoint sets the "Point" field if the given value is not nil.
func (pu *PointkycrvUpdate) SetNillablePoint(i *int) *PointkycrvUpdate {
	if i != nil {
		pu.SetPoint(*i)
	}
	return pu
}

// AddPoint adds i to the "Point" field.
func (pu *PointkycrvUpdate) AddPoint(i int) *PointkycrvUpdate {
	pu.mutation.AddPoint(i)
	return pu
}

// ClearPoint clears the value of the "Point" field.
func (pu *PointkycrvUpdate) ClearPoint() *PointkycrvUpdate {
	pu.mutation.ClearPoint()
	return pu
}

// SetFileimportID sets the "FileimportID" field.
func (pu *PointkycrvUpdate) SetFileimportID(i int) *PointkycrvUpdate {
	pu.mutation.ResetFileimportID()
	pu.mutation.SetFileimportID(i)
	return pu
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (pu *PointkycrvUpdate) SetNillableFileimportID(i *int) *PointkycrvUpdate {
	if i != nil {
		pu.SetFileimportID(*i)
	}
	return pu
}

// AddFileimportID adds i to the "FileimportID" field.
func (pu *PointkycrvUpdate) AddFileimportID(i int) *PointkycrvUpdate {
	pu.mutation.AddFileimportID(i)
	return pu
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (pu *PointkycrvUpdate) ClearFileimportID() *PointkycrvUpdate {
	pu.mutation.ClearFileimportID()
	return pu
}

// Mutation returns the PointkycrvMutation object of the builder.
func (pu *PointkycrvUpdate) Mutation() *PointkycrvMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PointkycrvUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointkycrvMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PointkycrvUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PointkycrvUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PointkycrvUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PointkycrvUpdate) check() error {
	if v, ok := pu.mutation.WalletID(); ok {
		if err := pointkycrv.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := pu.mutation.StatusGen(); ok {
		if err := pointkycrv.StatusGenValidator(v); err != nil {
			return &ValidationError{Name: "StatusGen", err: fmt.Errorf("ent: validator failed for field \"StatusGen\": %w", err)}
		}
	}
	if v, ok := pu.mutation.GetType(); ok {
		if err := pointkycrv.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (pu *PointkycrvUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pointkycrv.Table,
			Columns: pointkycrv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointkycrv.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DateTimeGen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointkycrv.FieldDateTimeGen,
		})
	}
	if pu.mutation.DateTimeGenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointkycrv.FieldDateTimeGen,
		})
	}
	if value, ok := pu.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointkycrv.FieldWalletID,
		})
	}
	if pu.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointkycrv.FieldWalletID,
		})
	}
	if value, ok := pu.mutation.StatusGen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointkycrv.FieldStatusGen,
		})
	}
	if pu.mutation.StatusGenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointkycrv.FieldStatusGen,
		})
	}
	if value, ok := pu.mutation.KYCDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointkycrv.FieldKYCDate,
		})
	}
	if pu.mutation.KYCDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointkycrv.FieldKYCDate,
		})
	}
	if value, ok := pu.mutation.RVDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointkycrv.FieldRVDate,
		})
	}
	if pu.mutation.RVDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointkycrv.FieldRVDate,
		})
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointkycrv.FieldType,
		})
	}
	if pu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointkycrv.FieldType,
		})
	}
	if value, ok := pu.mutation.Point(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointkycrv.FieldPoint,
		})
	}
	if value, ok := pu.mutation.AddedPoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointkycrv.FieldPoint,
		})
	}
	if pu.mutation.PointCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointkycrv.FieldPoint,
		})
	}
	if value, ok := pu.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointkycrv.FieldFileimportID,
		})
	}
	if value, ok := pu.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointkycrv.FieldFileimportID,
		})
	}
	if pu.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointkycrv.FieldFileimportID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointkycrv.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PointkycrvUpdateOne is the builder for updating a single Pointkycrv entity.
type PointkycrvUpdateOne struct {
	config
	hooks    []Hook
	mutation *PointkycrvMutation
}

// SetDateTimeGen sets the "DateTimeGen" field.
func (puo *PointkycrvUpdateOne) SetDateTimeGen(t time.Time) *PointkycrvUpdateOne {
	puo.mutation.SetDateTimeGen(t)
	return puo
}

// SetNillableDateTimeGen sets the "DateTimeGen" field if the given value is not nil.
func (puo *PointkycrvUpdateOne) SetNillableDateTimeGen(t *time.Time) *PointkycrvUpdateOne {
	if t != nil {
		puo.SetDateTimeGen(*t)
	}
	return puo
}

// ClearDateTimeGen clears the value of the "DateTimeGen" field.
func (puo *PointkycrvUpdateOne) ClearDateTimeGen() *PointkycrvUpdateOne {
	puo.mutation.ClearDateTimeGen()
	return puo
}

// SetWalletID sets the "WalletID" field.
func (puo *PointkycrvUpdateOne) SetWalletID(s string) *PointkycrvUpdateOne {
	puo.mutation.SetWalletID(s)
	return puo
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (puo *PointkycrvUpdateOne) SetNillableWalletID(s *string) *PointkycrvUpdateOne {
	if s != nil {
		puo.SetWalletID(*s)
	}
	return puo
}

// ClearWalletID clears the value of the "WalletID" field.
func (puo *PointkycrvUpdateOne) ClearWalletID() *PointkycrvUpdateOne {
	puo.mutation.ClearWalletID()
	return puo
}

// SetStatusGen sets the "StatusGen" field.
func (puo *PointkycrvUpdateOne) SetStatusGen(s string) *PointkycrvUpdateOne {
	puo.mutation.SetStatusGen(s)
	return puo
}

// SetNillableStatusGen sets the "StatusGen" field if the given value is not nil.
func (puo *PointkycrvUpdateOne) SetNillableStatusGen(s *string) *PointkycrvUpdateOne {
	if s != nil {
		puo.SetStatusGen(*s)
	}
	return puo
}

// ClearStatusGen clears the value of the "StatusGen" field.
func (puo *PointkycrvUpdateOne) ClearStatusGen() *PointkycrvUpdateOne {
	puo.mutation.ClearStatusGen()
	return puo
}

// SetKYCDate sets the "KYCDate" field.
func (puo *PointkycrvUpdateOne) SetKYCDate(t time.Time) *PointkycrvUpdateOne {
	puo.mutation.SetKYCDate(t)
	return puo
}

// SetNillableKYCDate sets the "KYCDate" field if the given value is not nil.
func (puo *PointkycrvUpdateOne) SetNillableKYCDate(t *time.Time) *PointkycrvUpdateOne {
	if t != nil {
		puo.SetKYCDate(*t)
	}
	return puo
}

// ClearKYCDate clears the value of the "KYCDate" field.
func (puo *PointkycrvUpdateOne) ClearKYCDate() *PointkycrvUpdateOne {
	puo.mutation.ClearKYCDate()
	return puo
}

// SetRVDate sets the "RVDate" field.
func (puo *PointkycrvUpdateOne) SetRVDate(t time.Time) *PointkycrvUpdateOne {
	puo.mutation.SetRVDate(t)
	return puo
}

// SetNillableRVDate sets the "RVDate" field if the given value is not nil.
func (puo *PointkycrvUpdateOne) SetNillableRVDate(t *time.Time) *PointkycrvUpdateOne {
	if t != nil {
		puo.SetRVDate(*t)
	}
	return puo
}

// ClearRVDate clears the value of the "RVDate" field.
func (puo *PointkycrvUpdateOne) ClearRVDate() *PointkycrvUpdateOne {
	puo.mutation.ClearRVDate()
	return puo
}

// SetType sets the "Type" field.
func (puo *PointkycrvUpdateOne) SetType(s string) *PointkycrvUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (puo *PointkycrvUpdateOne) SetNillableType(s *string) *PointkycrvUpdateOne {
	if s != nil {
		puo.SetType(*s)
	}
	return puo
}

// ClearType clears the value of the "Type" field.
func (puo *PointkycrvUpdateOne) ClearType() *PointkycrvUpdateOne {
	puo.mutation.ClearType()
	return puo
}

// SetPoint sets the "Point" field.
func (puo *PointkycrvUpdateOne) SetPoint(i int) *PointkycrvUpdateOne {
	puo.mutation.ResetPoint()
	puo.mutation.SetPoint(i)
	return puo
}

// SetNillablePoint sets the "Point" field if the given value is not nil.
func (puo *PointkycrvUpdateOne) SetNillablePoint(i *int) *PointkycrvUpdateOne {
	if i != nil {
		puo.SetPoint(*i)
	}
	return puo
}

// AddPoint adds i to the "Point" field.
func (puo *PointkycrvUpdateOne) AddPoint(i int) *PointkycrvUpdateOne {
	puo.mutation.AddPoint(i)
	return puo
}

// ClearPoint clears the value of the "Point" field.
func (puo *PointkycrvUpdateOne) ClearPoint() *PointkycrvUpdateOne {
	puo.mutation.ClearPoint()
	return puo
}

// SetFileimportID sets the "FileimportID" field.
func (puo *PointkycrvUpdateOne) SetFileimportID(i int) *PointkycrvUpdateOne {
	puo.mutation.ResetFileimportID()
	puo.mutation.SetFileimportID(i)
	return puo
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (puo *PointkycrvUpdateOne) SetNillableFileimportID(i *int) *PointkycrvUpdateOne {
	if i != nil {
		puo.SetFileimportID(*i)
	}
	return puo
}

// AddFileimportID adds i to the "FileimportID" field.
func (puo *PointkycrvUpdateOne) AddFileimportID(i int) *PointkycrvUpdateOne {
	puo.mutation.AddFileimportID(i)
	return puo
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (puo *PointkycrvUpdateOne) ClearFileimportID() *PointkycrvUpdateOne {
	puo.mutation.ClearFileimportID()
	return puo
}

// Mutation returns the PointkycrvMutation object of the builder.
func (puo *PointkycrvUpdateOne) Mutation() *PointkycrvMutation {
	return puo.mutation
}

// Save executes the query and returns the updated Pointkycrv entity.
func (puo *PointkycrvUpdateOne) Save(ctx context.Context) (*Pointkycrv, error) {
	var (
		err  error
		node *Pointkycrv
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointkycrvMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PointkycrvUpdateOne) SaveX(ctx context.Context) *Pointkycrv {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PointkycrvUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PointkycrvUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PointkycrvUpdateOne) check() error {
	if v, ok := puo.mutation.WalletID(); ok {
		if err := pointkycrv.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := puo.mutation.StatusGen(); ok {
		if err := pointkycrv.StatusGenValidator(v); err != nil {
			return &ValidationError{Name: "StatusGen", err: fmt.Errorf("ent: validator failed for field \"StatusGen\": %w", err)}
		}
	}
	if v, ok := puo.mutation.GetType(); ok {
		if err := pointkycrv.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (puo *PointkycrvUpdateOne) sqlSave(ctx context.Context) (_node *Pointkycrv, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pointkycrv.Table,
			Columns: pointkycrv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointkycrv.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pointkycrv.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.DateTimeGen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointkycrv.FieldDateTimeGen,
		})
	}
	if puo.mutation.DateTimeGenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointkycrv.FieldDateTimeGen,
		})
	}
	if value, ok := puo.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointkycrv.FieldWalletID,
		})
	}
	if puo.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointkycrv.FieldWalletID,
		})
	}
	if value, ok := puo.mutation.StatusGen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointkycrv.FieldStatusGen,
		})
	}
	if puo.mutation.StatusGenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointkycrv.FieldStatusGen,
		})
	}
	if value, ok := puo.mutation.KYCDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointkycrv.FieldKYCDate,
		})
	}
	if puo.mutation.KYCDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointkycrv.FieldKYCDate,
		})
	}
	if value, ok := puo.mutation.RVDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointkycrv.FieldRVDate,
		})
	}
	if puo.mutation.RVDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointkycrv.FieldRVDate,
		})
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointkycrv.FieldType,
		})
	}
	if puo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointkycrv.FieldType,
		})
	}
	if value, ok := puo.mutation.Point(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointkycrv.FieldPoint,
		})
	}
	if value, ok := puo.mutation.AddedPoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointkycrv.FieldPoint,
		})
	}
	if puo.mutation.PointCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointkycrv.FieldPoint,
		})
	}
	if value, ok := puo.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointkycrv.FieldFileimportID,
		})
	}
	if value, ok := puo.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointkycrv.FieldFileimportID,
		})
	}
	if puo.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointkycrv.FieldFileimportID,
		})
	}
	_node = &Pointkycrv{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointkycrv.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
