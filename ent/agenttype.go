// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/agenttype"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Agenttype is the model entity for the Agenttype schema.
type Agenttype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Agentid holds the value of the "agentid" field.
	Agentid *string `json:"agentid,omitempty"`
	// Agentname holds the value of the "agentname" field.
	Agentname *string `json:"agentname,omitempty"`
	// Agenttype holds the value of the "agenttype" field.
	Agenttype *string `json:"agenttype,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Agenttype) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case agenttype.FieldID:
			values[i] = &sql.NullInt64{}
		case agenttype.FieldAgentid, agenttype.FieldAgentname, agenttype.FieldAgenttype:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Agenttype", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Agenttype fields.
func (a *Agenttype) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agenttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case agenttype.FieldAgentid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agentid", values[i])
			} else if value.Valid {
				a.Agentid = new(string)
				*a.Agentid = value.String
			}
		case agenttype.FieldAgentname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agentname", values[i])
			} else if value.Valid {
				a.Agentname = new(string)
				*a.Agentname = value.String
			}
		case agenttype.FieldAgenttype:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agenttype", values[i])
			} else if value.Valid {
				a.Agenttype = new(string)
				*a.Agenttype = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Agenttype.
// Note that you need to call Agenttype.Unwrap() before calling this method if this Agenttype
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Agenttype) Update() *AgenttypeUpdateOne {
	return (&AgenttypeClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Agenttype entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Agenttype) Unwrap() *Agenttype {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Agenttype is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Agenttype) String() string {
	var builder strings.Builder
	builder.WriteString("Agenttype(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	if v := a.Agentid; v != nil {
		builder.WriteString(", agentid=")
		builder.WriteString(*v)
	}
	if v := a.Agentname; v != nil {
		builder.WriteString(", agentname=")
		builder.WriteString(*v)
	}
	if v := a.Agenttype; v != nil {
		builder.WriteString(", agenttype=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Agenttypes is a parsable slice of Agenttype.
type Agenttypes []*Agenttype

func (a Agenttypes) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
