// Code generated by entc, DO NOT EDIT.

package transactionfactor

const (
	// Label holds the string label denoting the transactionfactor type in the database.
	Label = "transactionfactor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTransactionFactorName holds the string denoting the transactionfactorname field in the database.
	FieldTransactionFactorName = "TransactionFactorName"
	// FieldTransactionType holds the string denoting the transactiontype field in the database.
	FieldTransactionType = "TransactionType"
	// FieldPaymentChannel holds the string denoting the paymentchannel field in the database.
	FieldPaymentChannel = "PaymentChannel"
	// FieldPaymentType holds the string denoting the paymenttype field in the database.
	FieldPaymentType = "PaymentType"
	// FieldNumDay holds the string denoting the numday field in the database.
	FieldNumDay = "NumDay"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "Date"
	// FieldUpdateDate holds the string denoting the updatedate field in the database.
	FieldUpdateDate = "UpdateDate"
	// FieldStatusApprove holds the string denoting the statusapprove field in the database.
	FieldStatusApprove = "StatusApprove"

	// EdgeTransactionhistory holds the string denoting the transactionhistory edge name in mutations.
	EdgeTransactionhistory = "transactionhistory"

	// Table holds the table name of the transactionfactor in the database.
	Table = "transaction_factor"
	// TransactionhistoryTable is the table the holds the transactionhistory relation/edge.
	TransactionhistoryTable = "transaction_factor_history"
	// TransactionhistoryInverseTable is the table name for the Transactionfactorhistory entity.
	// It exists in this package in order to avoid circular dependency with the "transactionfactorhistory" package.
	TransactionhistoryInverseTable = "transaction_factor_history"
	// TransactionhistoryColumn is the table column denoting the transactionhistory relation/edge.
	TransactionhistoryColumn = "TransactionFactorID"
)

// Columns holds all SQL columns for transactionfactor fields.
var Columns = []string{
	FieldID,
	FieldTransactionFactorName,
	FieldTransactionType,
	FieldPaymentChannel,
	FieldPaymentType,
	FieldNumDay,
	FieldDate,
	FieldUpdateDate,
	FieldStatusApprove,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TransactionFactorNameValidator is a validator for the "TransactionFactorName" field. It is called by the builders before save.
	TransactionFactorNameValidator func(string) error
	// TransactionTypeValidator is a validator for the "TransactionType" field. It is called by the builders before save.
	TransactionTypeValidator func(string) error
	// PaymentChannelValidator is a validator for the "PaymentChannel" field. It is called by the builders before save.
	PaymentChannelValidator func(string) error
	// PaymentTypeValidator is a validator for the "PaymentType" field. It is called by the builders before save.
	PaymentTypeValidator func(string) error
	// DateValidator is a validator for the "Date" field. It is called by the builders before save.
	DateValidator func(string) error
	// StatusApproveValidator is a validator for the "StatusApprove" field. It is called by the builders before save.
	StatusApproveValidator func(string) error
)
