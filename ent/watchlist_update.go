// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/watchlist"
	"go-api-report2/ent/watchlisttype"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WatchlistUpdate is the builder for updating Watchlist entities.
type WatchlistUpdate struct {
	config
	hooks    []Hook
	mutation *WatchlistMutation
}

// Where adds a new predicate for the WatchlistUpdate builder.
func (wu *WatchlistUpdate) Where(ps ...predicate.Watchlist) *WatchlistUpdate {
	wu.mutation.predicates = append(wu.mutation.predicates, ps...)
	return wu
}

// SetName sets the "Name" field.
func (wu *WatchlistUpdate) SetName(s string) *WatchlistUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetTaxID sets the "TaxID" field.
func (wu *WatchlistUpdate) SetTaxID(s string) *WatchlistUpdate {
	wu.mutation.SetTaxID(s)
	return wu
}

// SetRankWatchlist sets the "RankWatchlist" field.
func (wu *WatchlistUpdate) SetRankWatchlist(i int) *WatchlistUpdate {
	wu.mutation.ResetRankWatchlist()
	wu.mutation.SetRankWatchlist(i)
	return wu
}

// SetNillableRankWatchlist sets the "RankWatchlist" field if the given value is not nil.
func (wu *WatchlistUpdate) SetNillableRankWatchlist(i *int) *WatchlistUpdate {
	if i != nil {
		wu.SetRankWatchlist(*i)
	}
	return wu
}

// AddRankWatchlist adds i to the "RankWatchlist" field.
func (wu *WatchlistUpdate) AddRankWatchlist(i int) *WatchlistUpdate {
	wu.mutation.AddRankWatchlist(i)
	return wu
}

// ClearRankWatchlist clears the value of the "RankWatchlist" field.
func (wu *WatchlistUpdate) ClearRankWatchlist() *WatchlistUpdate {
	wu.mutation.ClearRankWatchlist()
	return wu
}

// SetFileimportID sets the "FileimportID" field.
func (wu *WatchlistUpdate) SetFileimportID(i int) *WatchlistUpdate {
	wu.mutation.ResetFileimportID()
	wu.mutation.SetFileimportID(i)
	return wu
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (wu *WatchlistUpdate) SetNillableFileimportID(i *int) *WatchlistUpdate {
	if i != nil {
		wu.SetFileimportID(*i)
	}
	return wu
}

// AddFileimportID adds i to the "FileimportID" field.
func (wu *WatchlistUpdate) AddFileimportID(i int) *WatchlistUpdate {
	wu.mutation.AddFileimportID(i)
	return wu
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (wu *WatchlistUpdate) ClearFileimportID() *WatchlistUpdate {
	wu.mutation.ClearFileimportID()
	return wu
}

// SetIsDeleted sets the "IsDeleted" field.
func (wu *WatchlistUpdate) SetIsDeleted(b bool) *WatchlistUpdate {
	wu.mutation.SetIsDeleted(b)
	return wu
}

// SetNillableIsDeleted sets the "IsDeleted" field if the given value is not nil.
func (wu *WatchlistUpdate) SetNillableIsDeleted(b *bool) *WatchlistUpdate {
	if b != nil {
		wu.SetIsDeleted(*b)
	}
	return wu
}

// ClearIsDeleted clears the value of the "IsDeleted" field.
func (wu *WatchlistUpdate) ClearIsDeleted() *WatchlistUpdate {
	wu.mutation.ClearIsDeleted()
	return wu
}

// SetImportDate sets the "ImportDate" field.
func (wu *WatchlistUpdate) SetImportDate(t time.Time) *WatchlistUpdate {
	wu.mutation.SetImportDate(t)
	return wu
}

// SetNillableImportDate sets the "ImportDate" field if the given value is not nil.
func (wu *WatchlistUpdate) SetNillableImportDate(t *time.Time) *WatchlistUpdate {
	if t != nil {
		wu.SetImportDate(*t)
	}
	return wu
}

// ClearImportDate clears the value of the "ImportDate" field.
func (wu *WatchlistUpdate) ClearImportDate() *WatchlistUpdate {
	wu.mutation.ClearImportDate()
	return wu
}

// SetUserUpload sets the "UserUpload" field.
func (wu *WatchlistUpdate) SetUserUpload(s string) *WatchlistUpdate {
	wu.mutation.SetUserUpload(s)
	return wu
}

// SetNillableUserUpload sets the "UserUpload" field if the given value is not nil.
func (wu *WatchlistUpdate) SetNillableUserUpload(s *string) *WatchlistUpdate {
	if s != nil {
		wu.SetUserUpload(*s)
	}
	return wu
}

// ClearUserUpload clears the value of the "UserUpload" field.
func (wu *WatchlistUpdate) ClearUserUpload() *WatchlistUpdate {
	wu.mutation.ClearUserUpload()
	return wu
}

// SetRelatedID sets the "related" edge to the Watchlisttype entity by ID.
func (wu *WatchlistUpdate) SetRelatedID(id int) *WatchlistUpdate {
	wu.mutation.SetRelatedID(id)
	return wu
}

// SetNillableRelatedID sets the "related" edge to the Watchlisttype entity by ID if the given value is not nil.
func (wu *WatchlistUpdate) SetNillableRelatedID(id *int) *WatchlistUpdate {
	if id != nil {
		wu = wu.SetRelatedID(*id)
	}
	return wu
}

// SetRelated sets the "related" edge to the Watchlisttype entity.
func (wu *WatchlistUpdate) SetRelated(w *Watchlisttype) *WatchlistUpdate {
	return wu.SetRelatedID(w.ID)
}

// Mutation returns the WatchlistMutation object of the builder.
func (wu *WatchlistUpdate) Mutation() *WatchlistMutation {
	return wu.mutation
}

// ClearRelated clears the "related" edge to the Watchlisttype entity.
func (wu *WatchlistUpdate) ClearRelated() *WatchlistUpdate {
	wu.mutation.ClearRelated()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WatchlistUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		if err = wu.check(); err != nil {
			return 0, err
		}
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WatchlistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wu.check(); err != nil {
				return 0, err
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WatchlistUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WatchlistUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WatchlistUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WatchlistUpdate) check() error {
	if v, ok := wu.mutation.Name(); ok {
		if err := watchlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := wu.mutation.TaxID(); ok {
		if err := watchlist.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "TaxID", err: fmt.Errorf("ent: validator failed for field \"TaxID\": %w", err)}
		}
	}
	if v, ok := wu.mutation.UserUpload(); ok {
		if err := watchlist.UserUploadValidator(v); err != nil {
			return &ValidationError{Name: "UserUpload", err: fmt.Errorf("ent: validator failed for field \"UserUpload\": %w", err)}
		}
	}
	return nil
}

func (wu *WatchlistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   watchlist.Table,
			Columns: watchlist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: watchlist.FieldID,
			},
		},
	}
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlist.FieldName,
		})
	}
	if value, ok := wu.mutation.TaxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlist.FieldTaxID,
		})
	}
	if value, ok := wu.mutation.RankWatchlist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlist.FieldRankWatchlist,
		})
	}
	if value, ok := wu.mutation.AddedRankWatchlist(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlist.FieldRankWatchlist,
		})
	}
	if wu.mutation.RankWatchlistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: watchlist.FieldRankWatchlist,
		})
	}
	if value, ok := wu.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlist.FieldFileimportID,
		})
	}
	if value, ok := wu.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlist.FieldFileimportID,
		})
	}
	if wu.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: watchlist.FieldFileimportID,
		})
	}
	if value, ok := wu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: watchlist.FieldIsDeleted,
		})
	}
	if wu.mutation.IsDeletedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: watchlist.FieldIsDeleted,
		})
	}
	if value, ok := wu.mutation.ImportDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: watchlist.FieldImportDate,
		})
	}
	if wu.mutation.ImportDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: watchlist.FieldImportDate,
		})
	}
	if value, ok := wu.mutation.UserUpload(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlist.FieldUserUpload,
		})
	}
	if wu.mutation.UserUploadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: watchlist.FieldUserUpload,
		})
	}
	if wu.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   watchlist.RelatedTable,
			Columns: []string{watchlist.RelatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlisttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RelatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   watchlist.RelatedTable,
			Columns: []string{watchlist.RelatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlisttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{watchlist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WatchlistUpdateOne is the builder for updating a single Watchlist entity.
type WatchlistUpdateOne struct {
	config
	hooks    []Hook
	mutation *WatchlistMutation
}

// SetName sets the "Name" field.
func (wuo *WatchlistUpdateOne) SetName(s string) *WatchlistUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetTaxID sets the "TaxID" field.
func (wuo *WatchlistUpdateOne) SetTaxID(s string) *WatchlistUpdateOne {
	wuo.mutation.SetTaxID(s)
	return wuo
}

// SetRankWatchlist sets the "RankWatchlist" field.
func (wuo *WatchlistUpdateOne) SetRankWatchlist(i int) *WatchlistUpdateOne {
	wuo.mutation.ResetRankWatchlist()
	wuo.mutation.SetRankWatchlist(i)
	return wuo
}

// SetNillableRankWatchlist sets the "RankWatchlist" field if the given value is not nil.
func (wuo *WatchlistUpdateOne) SetNillableRankWatchlist(i *int) *WatchlistUpdateOne {
	if i != nil {
		wuo.SetRankWatchlist(*i)
	}
	return wuo
}

// AddRankWatchlist adds i to the "RankWatchlist" field.
func (wuo *WatchlistUpdateOne) AddRankWatchlist(i int) *WatchlistUpdateOne {
	wuo.mutation.AddRankWatchlist(i)
	return wuo
}

// ClearRankWatchlist clears the value of the "RankWatchlist" field.
func (wuo *WatchlistUpdateOne) ClearRankWatchlist() *WatchlistUpdateOne {
	wuo.mutation.ClearRankWatchlist()
	return wuo
}

// SetFileimportID sets the "FileimportID" field.
func (wuo *WatchlistUpdateOne) SetFileimportID(i int) *WatchlistUpdateOne {
	wuo.mutation.ResetFileimportID()
	wuo.mutation.SetFileimportID(i)
	return wuo
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (wuo *WatchlistUpdateOne) SetNillableFileimportID(i *int) *WatchlistUpdateOne {
	if i != nil {
		wuo.SetFileimportID(*i)
	}
	return wuo
}

// AddFileimportID adds i to the "FileimportID" field.
func (wuo *WatchlistUpdateOne) AddFileimportID(i int) *WatchlistUpdateOne {
	wuo.mutation.AddFileimportID(i)
	return wuo
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (wuo *WatchlistUpdateOne) ClearFileimportID() *WatchlistUpdateOne {
	wuo.mutation.ClearFileimportID()
	return wuo
}

// SetIsDeleted sets the "IsDeleted" field.
func (wuo *WatchlistUpdateOne) SetIsDeleted(b bool) *WatchlistUpdateOne {
	wuo.mutation.SetIsDeleted(b)
	return wuo
}

// SetNillableIsDeleted sets the "IsDeleted" field if the given value is not nil.
func (wuo *WatchlistUpdateOne) SetNillableIsDeleted(b *bool) *WatchlistUpdateOne {
	if b != nil {
		wuo.SetIsDeleted(*b)
	}
	return wuo
}

// ClearIsDeleted clears the value of the "IsDeleted" field.
func (wuo *WatchlistUpdateOne) ClearIsDeleted() *WatchlistUpdateOne {
	wuo.mutation.ClearIsDeleted()
	return wuo
}

// SetImportDate sets the "ImportDate" field.
func (wuo *WatchlistUpdateOne) SetImportDate(t time.Time) *WatchlistUpdateOne {
	wuo.mutation.SetImportDate(t)
	return wuo
}

// SetNillableImportDate sets the "ImportDate" field if the given value is not nil.
func (wuo *WatchlistUpdateOne) SetNillableImportDate(t *time.Time) *WatchlistUpdateOne {
	if t != nil {
		wuo.SetImportDate(*t)
	}
	return wuo
}

// ClearImportDate clears the value of the "ImportDate" field.
func (wuo *WatchlistUpdateOne) ClearImportDate() *WatchlistUpdateOne {
	wuo.mutation.ClearImportDate()
	return wuo
}

// SetUserUpload sets the "UserUpload" field.
func (wuo *WatchlistUpdateOne) SetUserUpload(s string) *WatchlistUpdateOne {
	wuo.mutation.SetUserUpload(s)
	return wuo
}

// SetNillableUserUpload sets the "UserUpload" field if the given value is not nil.
func (wuo *WatchlistUpdateOne) SetNillableUserUpload(s *string) *WatchlistUpdateOne {
	if s != nil {
		wuo.SetUserUpload(*s)
	}
	return wuo
}

// ClearUserUpload clears the value of the "UserUpload" field.
func (wuo *WatchlistUpdateOne) ClearUserUpload() *WatchlistUpdateOne {
	wuo.mutation.ClearUserUpload()
	return wuo
}

// SetRelatedID sets the "related" edge to the Watchlisttype entity by ID.
func (wuo *WatchlistUpdateOne) SetRelatedID(id int) *WatchlistUpdateOne {
	wuo.mutation.SetRelatedID(id)
	return wuo
}

// SetNillableRelatedID sets the "related" edge to the Watchlisttype entity by ID if the given value is not nil.
func (wuo *WatchlistUpdateOne) SetNillableRelatedID(id *int) *WatchlistUpdateOne {
	if id != nil {
		wuo = wuo.SetRelatedID(*id)
	}
	return wuo
}

// SetRelated sets the "related" edge to the Watchlisttype entity.
func (wuo *WatchlistUpdateOne) SetRelated(w *Watchlisttype) *WatchlistUpdateOne {
	return wuo.SetRelatedID(w.ID)
}

// Mutation returns the WatchlistMutation object of the builder.
func (wuo *WatchlistUpdateOne) Mutation() *WatchlistMutation {
	return wuo.mutation
}

// ClearRelated clears the "related" edge to the Watchlisttype entity.
func (wuo *WatchlistUpdateOne) ClearRelated() *WatchlistUpdateOne {
	wuo.mutation.ClearRelated()
	return wuo
}

// Save executes the query and returns the updated Watchlist entity.
func (wuo *WatchlistUpdateOne) Save(ctx context.Context) (*Watchlist, error) {
	var (
		err  error
		node *Watchlist
	)
	if len(wuo.hooks) == 0 {
		if err = wuo.check(); err != nil {
			return nil, err
		}
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WatchlistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wuo.check(); err != nil {
				return nil, err
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			mut = wuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WatchlistUpdateOne) SaveX(ctx context.Context) *Watchlist {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WatchlistUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WatchlistUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WatchlistUpdateOne) check() error {
	if v, ok := wuo.mutation.Name(); ok {
		if err := watchlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := wuo.mutation.TaxID(); ok {
		if err := watchlist.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "TaxID", err: fmt.Errorf("ent: validator failed for field \"TaxID\": %w", err)}
		}
	}
	if v, ok := wuo.mutation.UserUpload(); ok {
		if err := watchlist.UserUploadValidator(v); err != nil {
			return &ValidationError{Name: "UserUpload", err: fmt.Errorf("ent: validator failed for field \"UserUpload\": %w", err)}
		}
	}
	return nil
}

func (wuo *WatchlistUpdateOne) sqlSave(ctx context.Context) (_node *Watchlist, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   watchlist.Table,
			Columns: watchlist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: watchlist.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Watchlist.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlist.FieldName,
		})
	}
	if value, ok := wuo.mutation.TaxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlist.FieldTaxID,
		})
	}
	if value, ok := wuo.mutation.RankWatchlist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlist.FieldRankWatchlist,
		})
	}
	if value, ok := wuo.mutation.AddedRankWatchlist(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlist.FieldRankWatchlist,
		})
	}
	if wuo.mutation.RankWatchlistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: watchlist.FieldRankWatchlist,
		})
	}
	if value, ok := wuo.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlist.FieldFileimportID,
		})
	}
	if value, ok := wuo.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlist.FieldFileimportID,
		})
	}
	if wuo.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: watchlist.FieldFileimportID,
		})
	}
	if value, ok := wuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: watchlist.FieldIsDeleted,
		})
	}
	if wuo.mutation.IsDeletedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: watchlist.FieldIsDeleted,
		})
	}
	if value, ok := wuo.mutation.ImportDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: watchlist.FieldImportDate,
		})
	}
	if wuo.mutation.ImportDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: watchlist.FieldImportDate,
		})
	}
	if value, ok := wuo.mutation.UserUpload(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlist.FieldUserUpload,
		})
	}
	if wuo.mutation.UserUploadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: watchlist.FieldUserUpload,
		})
	}
	if wuo.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   watchlist.RelatedTable,
			Columns: []string{watchlist.RelatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlisttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RelatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   watchlist.RelatedTable,
			Columns: []string{watchlist.RelatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: watchlisttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Watchlist{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{watchlist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
