// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/configoccupation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigoccupationCreate is the builder for creating a Configoccupation entity.
type ConfigoccupationCreate struct {
	config
	mutation *ConfigoccupationMutation
	hooks    []Hook
}

// SetOccupationName sets the "OccupationName" field.
func (cc *ConfigoccupationCreate) SetOccupationName(s string) *ConfigoccupationCreate {
	cc.mutation.SetOccupationName(s)
	return cc
}

// SetNillableOccupationName sets the "OccupationName" field if the given value is not nil.
func (cc *ConfigoccupationCreate) SetNillableOccupationName(s *string) *ConfigoccupationCreate {
	if s != nil {
		cc.SetOccupationName(*s)
	}
	return cc
}

// SetRank sets the "Rank" field.
func (cc *ConfigoccupationCreate) SetRank(s string) *ConfigoccupationCreate {
	cc.mutation.SetRank(s)
	return cc
}

// SetNillableRank sets the "Rank" field if the given value is not nil.
func (cc *ConfigoccupationCreate) SetNillableRank(s *string) *ConfigoccupationCreate {
	if s != nil {
		cc.SetRank(*s)
	}
	return cc
}

// SetRankTmp sets the "RankTmp" field.
func (cc *ConfigoccupationCreate) SetRankTmp(s string) *ConfigoccupationCreate {
	cc.mutation.SetRankTmp(s)
	return cc
}

// SetNillableRankTmp sets the "RankTmp" field if the given value is not nil.
func (cc *ConfigoccupationCreate) SetNillableRankTmp(s *string) *ConfigoccupationCreate {
	if s != nil {
		cc.SetRankTmp(*s)
	}
	return cc
}

// SetUpdateDate sets the "UpdateDate" field.
func (cc *ConfigoccupationCreate) SetUpdateDate(t time.Time) *ConfigoccupationCreate {
	cc.mutation.SetUpdateDate(t)
	return cc
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (cc *ConfigoccupationCreate) SetNillableUpdateDate(t *time.Time) *ConfigoccupationCreate {
	if t != nil {
		cc.SetUpdateDate(*t)
	}
	return cc
}

// SetApproveBy sets the "ApproveBy" field.
func (cc *ConfigoccupationCreate) SetApproveBy(s string) *ConfigoccupationCreate {
	cc.mutation.SetApproveBy(s)
	return cc
}

// SetNillableApproveBy sets the "ApproveBy" field if the given value is not nil.
func (cc *ConfigoccupationCreate) SetNillableApproveBy(s *string) *ConfigoccupationCreate {
	if s != nil {
		cc.SetApproveBy(*s)
	}
	return cc
}

// SetApproveDate sets the "ApproveDate" field.
func (cc *ConfigoccupationCreate) SetApproveDate(t time.Time) *ConfigoccupationCreate {
	cc.mutation.SetApproveDate(t)
	return cc
}

// SetNillableApproveDate sets the "ApproveDate" field if the given value is not nil.
func (cc *ConfigoccupationCreate) SetNillableApproveDate(t *time.Time) *ConfigoccupationCreate {
	if t != nil {
		cc.SetApproveDate(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConfigoccupationCreate) SetID(i int) *ConfigoccupationCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the ConfigoccupationMutation object of the builder.
func (cc *ConfigoccupationCreate) Mutation() *ConfigoccupationMutation {
	return cc.mutation
}

// Save creates the Configoccupation in the database.
func (cc *ConfigoccupationCreate) Save(ctx context.Context) (*Configoccupation, error) {
	var (
		err  error
		node *Configoccupation
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigoccupationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConfigoccupationCreate) SaveX(ctx context.Context) *Configoccupation {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConfigoccupationCreate) check() error {
	if v, ok := cc.mutation.OccupationName(); ok {
		if err := configoccupation.OccupationNameValidator(v); err != nil {
			return &ValidationError{Name: "OccupationName", err: fmt.Errorf("ent: validator failed for field \"OccupationName\": %w", err)}
		}
	}
	if v, ok := cc.mutation.Rank(); ok {
		if err := configoccupation.RankValidator(v); err != nil {
			return &ValidationError{Name: "Rank", err: fmt.Errorf("ent: validator failed for field \"Rank\": %w", err)}
		}
	}
	if v, ok := cc.mutation.RankTmp(); ok {
		if err := configoccupation.RankTmpValidator(v); err != nil {
			return &ValidationError{Name: "RankTmp", err: fmt.Errorf("ent: validator failed for field \"RankTmp\": %w", err)}
		}
	}
	if v, ok := cc.mutation.ApproveBy(); ok {
		if err := configoccupation.ApproveByValidator(v); err != nil {
			return &ValidationError{Name: "ApproveBy", err: fmt.Errorf("ent: validator failed for field \"ApproveBy\": %w", err)}
		}
	}
	return nil
}

func (cc *ConfigoccupationCreate) sqlSave(ctx context.Context) (*Configoccupation, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (cc *ConfigoccupationCreate) createSpec() (*Configoccupation, *sqlgraph.CreateSpec) {
	var (
		_node = &Configoccupation{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: configoccupation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configoccupation.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.OccupationName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldOccupationName,
		})
		_node.OccupationName = value
	}
	if value, ok := cc.mutation.Rank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldRank,
		})
		_node.Rank = value
	}
	if value, ok := cc.mutation.RankTmp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldRankTmp,
		})
		_node.RankTmp = value
	}
	if value, ok := cc.mutation.UpdateDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configoccupation.FieldUpdateDate,
		})
		_node.UpdateDate = value
	}
	if value, ok := cc.mutation.ApproveBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configoccupation.FieldApproveBy,
		})
		_node.ApproveBy = &value
	}
	if value, ok := cc.mutation.ApproveDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configoccupation.FieldApproveDate,
		})
		_node.ApproveDate = &value
	}
	return _node, _spec
}

// ConfigoccupationCreateBulk is the builder for creating many Configoccupation entities in bulk.
type ConfigoccupationCreateBulk struct {
	config
	builders []*ConfigoccupationCreate
}

// Save creates the Configoccupation entities in the database.
func (ccb *ConfigoccupationCreateBulk) Save(ctx context.Context) ([]*Configoccupation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Configoccupation, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigoccupationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConfigoccupationCreateBulk) SaveX(ctx context.Context) []*Configoccupation {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
