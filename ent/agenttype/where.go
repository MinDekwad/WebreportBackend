// Code generated by entc, DO NOT EDIT.

package agenttype

import (
	"go-api-report2/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Agentid applies equality check predicate on the "agentid" field. It's identical to AgentidEQ.
func Agentid(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentid), v))
	})
}

// Agentname applies equality check predicate on the "agentname" field. It's identical to AgentnameEQ.
func Agentname(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentname), v))
	})
}

// Agenttype applies equality check predicate on the "agenttype" field. It's identical to AgenttypeEQ.
func Agenttype(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgenttype), v))
	})
}

// AgentidEQ applies the EQ predicate on the "agentid" field.
func AgentidEQ(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentid), v))
	})
}

// AgentidNEQ applies the NEQ predicate on the "agentid" field.
func AgentidNEQ(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgentid), v))
	})
}

// AgentidIn applies the In predicate on the "agentid" field.
func AgentidIn(vs ...string) predicate.Agenttype {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgentid), v...))
	})
}

// AgentidNotIn applies the NotIn predicate on the "agentid" field.
func AgentidNotIn(vs ...string) predicate.Agenttype {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgentid), v...))
	})
}

// AgentidGT applies the GT predicate on the "agentid" field.
func AgentidGT(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgentid), v))
	})
}

// AgentidGTE applies the GTE predicate on the "agentid" field.
func AgentidGTE(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgentid), v))
	})
}

// AgentidLT applies the LT predicate on the "agentid" field.
func AgentidLT(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgentid), v))
	})
}

// AgentidLTE applies the LTE predicate on the "agentid" field.
func AgentidLTE(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgentid), v))
	})
}

// AgentidContains applies the Contains predicate on the "agentid" field.
func AgentidContains(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAgentid), v))
	})
}

// AgentidHasPrefix applies the HasPrefix predicate on the "agentid" field.
func AgentidHasPrefix(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAgentid), v))
	})
}

// AgentidHasSuffix applies the HasSuffix predicate on the "agentid" field.
func AgentidHasSuffix(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAgentid), v))
	})
}

// AgentidIsNil applies the IsNil predicate on the "agentid" field.
func AgentidIsNil() predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgentid)))
	})
}

// AgentidNotNil applies the NotNil predicate on the "agentid" field.
func AgentidNotNil() predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgentid)))
	})
}

// AgentidEqualFold applies the EqualFold predicate on the "agentid" field.
func AgentidEqualFold(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAgentid), v))
	})
}

// AgentidContainsFold applies the ContainsFold predicate on the "agentid" field.
func AgentidContainsFold(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAgentid), v))
	})
}

// AgentnameEQ applies the EQ predicate on the "agentname" field.
func AgentnameEQ(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentname), v))
	})
}

// AgentnameNEQ applies the NEQ predicate on the "agentname" field.
func AgentnameNEQ(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgentname), v))
	})
}

// AgentnameIn applies the In predicate on the "agentname" field.
func AgentnameIn(vs ...string) predicate.Agenttype {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgentname), v...))
	})
}

// AgentnameNotIn applies the NotIn predicate on the "agentname" field.
func AgentnameNotIn(vs ...string) predicate.Agenttype {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgentname), v...))
	})
}

// AgentnameGT applies the GT predicate on the "agentname" field.
func AgentnameGT(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgentname), v))
	})
}

// AgentnameGTE applies the GTE predicate on the "agentname" field.
func AgentnameGTE(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgentname), v))
	})
}

// AgentnameLT applies the LT predicate on the "agentname" field.
func AgentnameLT(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgentname), v))
	})
}

// AgentnameLTE applies the LTE predicate on the "agentname" field.
func AgentnameLTE(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgentname), v))
	})
}

// AgentnameContains applies the Contains predicate on the "agentname" field.
func AgentnameContains(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAgentname), v))
	})
}

// AgentnameHasPrefix applies the HasPrefix predicate on the "agentname" field.
func AgentnameHasPrefix(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAgentname), v))
	})
}

// AgentnameHasSuffix applies the HasSuffix predicate on the "agentname" field.
func AgentnameHasSuffix(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAgentname), v))
	})
}

// AgentnameIsNil applies the IsNil predicate on the "agentname" field.
func AgentnameIsNil() predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgentname)))
	})
}

// AgentnameNotNil applies the NotNil predicate on the "agentname" field.
func AgentnameNotNil() predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgentname)))
	})
}

// AgentnameEqualFold applies the EqualFold predicate on the "agentname" field.
func AgentnameEqualFold(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAgentname), v))
	})
}

// AgentnameContainsFold applies the ContainsFold predicate on the "agentname" field.
func AgentnameContainsFold(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAgentname), v))
	})
}

// AgenttypeEQ applies the EQ predicate on the "agenttype" field.
func AgenttypeEQ(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgenttype), v))
	})
}

// AgenttypeNEQ applies the NEQ predicate on the "agenttype" field.
func AgenttypeNEQ(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgenttype), v))
	})
}

// AgenttypeIn applies the In predicate on the "agenttype" field.
func AgenttypeIn(vs ...string) predicate.Agenttype {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgenttype), v...))
	})
}

// AgenttypeNotIn applies the NotIn predicate on the "agenttype" field.
func AgenttypeNotIn(vs ...string) predicate.Agenttype {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agenttype(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgenttype), v...))
	})
}

// AgenttypeGT applies the GT predicate on the "agenttype" field.
func AgenttypeGT(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgenttype), v))
	})
}

// AgenttypeGTE applies the GTE predicate on the "agenttype" field.
func AgenttypeGTE(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgenttype), v))
	})
}

// AgenttypeLT applies the LT predicate on the "agenttype" field.
func AgenttypeLT(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgenttype), v))
	})
}

// AgenttypeLTE applies the LTE predicate on the "agenttype" field.
func AgenttypeLTE(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgenttype), v))
	})
}

// AgenttypeContains applies the Contains predicate on the "agenttype" field.
func AgenttypeContains(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAgenttype), v))
	})
}

// AgenttypeHasPrefix applies the HasPrefix predicate on the "agenttype" field.
func AgenttypeHasPrefix(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAgenttype), v))
	})
}

// AgenttypeHasSuffix applies the HasSuffix predicate on the "agenttype" field.
func AgenttypeHasSuffix(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAgenttype), v))
	})
}

// AgenttypeIsNil applies the IsNil predicate on the "agenttype" field.
func AgenttypeIsNil() predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgenttype)))
	})
}

// AgenttypeNotNil applies the NotNil predicate on the "agenttype" field.
func AgenttypeNotNil() predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgenttype)))
	})
}

// AgenttypeEqualFold applies the EqualFold predicate on the "agenttype" field.
func AgenttypeEqualFold(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAgenttype), v))
	})
}

// AgenttypeContainsFold applies the ContainsFold predicate on the "agenttype" field.
func AgenttypeContainsFold(v string) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAgenttype), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Agenttype) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Agenttype) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Agenttype) predicate.Agenttype {
	return predicate.Agenttype(func(s *sql.Selector) {
		p(s.Not())
	})
}
