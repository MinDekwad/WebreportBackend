// Code generated by entc, DO NOT EDIT.

package writelog

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AdminID applies equality check predicate on the "admin_id" field. It's identical to AdminIDEQ.
func AdminID(v int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdminID), v))
	})
}

// Resource applies equality check predicate on the "resource" field. It's identical to ResourceEQ.
func Resource(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResource), v))
	})
}

// Actions applies equality check predicate on the "actions" field. It's identical to ActionsEQ.
func Actions(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActions), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// AdminIDEQ applies the EQ predicate on the "admin_id" field.
func AdminIDEQ(v int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdminID), v))
	})
}

// AdminIDNEQ applies the NEQ predicate on the "admin_id" field.
func AdminIDNEQ(v int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdminID), v))
	})
}

// AdminIDIn applies the In predicate on the "admin_id" field.
func AdminIDIn(vs ...int) predicate.Writelog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Writelog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdminID), v...))
	})
}

// AdminIDNotIn applies the NotIn predicate on the "admin_id" field.
func AdminIDNotIn(vs ...int) predicate.Writelog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Writelog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdminID), v...))
	})
}

// AdminIDGT applies the GT predicate on the "admin_id" field.
func AdminIDGT(v int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdminID), v))
	})
}

// AdminIDGTE applies the GTE predicate on the "admin_id" field.
func AdminIDGTE(v int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdminID), v))
	})
}

// AdminIDLT applies the LT predicate on the "admin_id" field.
func AdminIDLT(v int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdminID), v))
	})
}

// AdminIDLTE applies the LTE predicate on the "admin_id" field.
func AdminIDLTE(v int) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdminID), v))
	})
}

// ResourceEQ applies the EQ predicate on the "resource" field.
func ResourceEQ(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResource), v))
	})
}

// ResourceNEQ applies the NEQ predicate on the "resource" field.
func ResourceNEQ(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResource), v))
	})
}

// ResourceIn applies the In predicate on the "resource" field.
func ResourceIn(vs ...string) predicate.Writelog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Writelog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResource), v...))
	})
}

// ResourceNotIn applies the NotIn predicate on the "resource" field.
func ResourceNotIn(vs ...string) predicate.Writelog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Writelog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResource), v...))
	})
}

// ResourceGT applies the GT predicate on the "resource" field.
func ResourceGT(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResource), v))
	})
}

// ResourceGTE applies the GTE predicate on the "resource" field.
func ResourceGTE(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResource), v))
	})
}

// ResourceLT applies the LT predicate on the "resource" field.
func ResourceLT(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResource), v))
	})
}

// ResourceLTE applies the LTE predicate on the "resource" field.
func ResourceLTE(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResource), v))
	})
}

// ResourceContains applies the Contains predicate on the "resource" field.
func ResourceContains(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResource), v))
	})
}

// ResourceHasPrefix applies the HasPrefix predicate on the "resource" field.
func ResourceHasPrefix(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResource), v))
	})
}

// ResourceHasSuffix applies the HasSuffix predicate on the "resource" field.
func ResourceHasSuffix(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResource), v))
	})
}

// ResourceIsNil applies the IsNil predicate on the "resource" field.
func ResourceIsNil() predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResource)))
	})
}

// ResourceNotNil applies the NotNil predicate on the "resource" field.
func ResourceNotNil() predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResource)))
	})
}

// ResourceEqualFold applies the EqualFold predicate on the "resource" field.
func ResourceEqualFold(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResource), v))
	})
}

// ResourceContainsFold applies the ContainsFold predicate on the "resource" field.
func ResourceContainsFold(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResource), v))
	})
}

// ActionsEQ applies the EQ predicate on the "actions" field.
func ActionsEQ(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActions), v))
	})
}

// ActionsNEQ applies the NEQ predicate on the "actions" field.
func ActionsNEQ(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActions), v))
	})
}

// ActionsIn applies the In predicate on the "actions" field.
func ActionsIn(vs ...string) predicate.Writelog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Writelog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActions), v...))
	})
}

// ActionsNotIn applies the NotIn predicate on the "actions" field.
func ActionsNotIn(vs ...string) predicate.Writelog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Writelog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActions), v...))
	})
}

// ActionsGT applies the GT predicate on the "actions" field.
func ActionsGT(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActions), v))
	})
}

// ActionsGTE applies the GTE predicate on the "actions" field.
func ActionsGTE(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActions), v))
	})
}

// ActionsLT applies the LT predicate on the "actions" field.
func ActionsLT(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActions), v))
	})
}

// ActionsLTE applies the LTE predicate on the "actions" field.
func ActionsLTE(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActions), v))
	})
}

// ActionsContains applies the Contains predicate on the "actions" field.
func ActionsContains(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldActions), v))
	})
}

// ActionsHasPrefix applies the HasPrefix predicate on the "actions" field.
func ActionsHasPrefix(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldActions), v))
	})
}

// ActionsHasSuffix applies the HasSuffix predicate on the "actions" field.
func ActionsHasSuffix(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldActions), v))
	})
}

// ActionsIsNil applies the IsNil predicate on the "actions" field.
func ActionsIsNil() predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActions)))
	})
}

// ActionsNotNil applies the NotNil predicate on the "actions" field.
func ActionsNotNil() predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActions)))
	})
}

// ActionsEqualFold applies the EqualFold predicate on the "actions" field.
func ActionsEqualFold(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldActions), v))
	})
}

// ActionsContainsFold applies the ContainsFold predicate on the "actions" field.
func ActionsContainsFold(v string) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldActions), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Writelog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Writelog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Writelog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Writelog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Writelog) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Writelog) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Writelog) predicate.Writelog {
	return predicate.Writelog(func(s *sql.Selector) {
		p(s.Not())
	})
}
