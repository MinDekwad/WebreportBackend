// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/bulk"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BulkUpdate is the builder for updating Bulk entities.
type BulkUpdate struct {
	config
	hooks    []Hook
	mutation *BulkMutation
}

// Where adds a new predicate for the BulkUpdate builder.
func (bu *BulkUpdate) Where(ps ...predicate.Bulk) *BulkUpdate {
	bu.mutation.predicates = append(bu.mutation.predicates, ps...)
	return bu
}

// SetBulkCreditSameday sets the "bulkCreditSameday" field.
func (bu *BulkUpdate) SetBulkCreditSameday(f float64) *BulkUpdate {
	bu.mutation.ResetBulkCreditSameday()
	bu.mutation.SetBulkCreditSameday(f)
	return bu
}

// SetNillableBulkCreditSameday sets the "bulkCreditSameday" field if the given value is not nil.
func (bu *BulkUpdate) SetNillableBulkCreditSameday(f *float64) *BulkUpdate {
	if f != nil {
		bu.SetBulkCreditSameday(*f)
	}
	return bu
}

// AddBulkCreditSameday adds f to the "bulkCreditSameday" field.
func (bu *BulkUpdate) AddBulkCreditSameday(f float64) *BulkUpdate {
	bu.mutation.AddBulkCreditSameday(f)
	return bu
}

// ClearBulkCreditSameday clears the value of the "bulkCreditSameday" field.
func (bu *BulkUpdate) ClearBulkCreditSameday() *BulkUpdate {
	bu.mutation.ClearBulkCreditSameday()
	return bu
}

// SetBulkCreditSamedayFee sets the "bulkCreditSamedayFee" field.
func (bu *BulkUpdate) SetBulkCreditSamedayFee(f float64) *BulkUpdate {
	bu.mutation.ResetBulkCreditSamedayFee()
	bu.mutation.SetBulkCreditSamedayFee(f)
	return bu
}

// SetNillableBulkCreditSamedayFee sets the "bulkCreditSamedayFee" field if the given value is not nil.
func (bu *BulkUpdate) SetNillableBulkCreditSamedayFee(f *float64) *BulkUpdate {
	if f != nil {
		bu.SetBulkCreditSamedayFee(*f)
	}
	return bu
}

// AddBulkCreditSamedayFee adds f to the "bulkCreditSamedayFee" field.
func (bu *BulkUpdate) AddBulkCreditSamedayFee(f float64) *BulkUpdate {
	bu.mutation.AddBulkCreditSamedayFee(f)
	return bu
}

// ClearBulkCreditSamedayFee clears the value of the "bulkCreditSamedayFee" field.
func (bu *BulkUpdate) ClearBulkCreditSamedayFee() *BulkUpdate {
	bu.mutation.ClearBulkCreditSamedayFee()
	return bu
}

// SetTransfertobankaccount sets the "transfertobankaccount" field.
func (bu *BulkUpdate) SetTransfertobankaccount(f float64) *BulkUpdate {
	bu.mutation.ResetTransfertobankaccount()
	bu.mutation.SetTransfertobankaccount(f)
	return bu
}

// SetNillableTransfertobankaccount sets the "transfertobankaccount" field if the given value is not nil.
func (bu *BulkUpdate) SetNillableTransfertobankaccount(f *float64) *BulkUpdate {
	if f != nil {
		bu.SetTransfertobankaccount(*f)
	}
	return bu
}

// AddTransfertobankaccount adds f to the "transfertobankaccount" field.
func (bu *BulkUpdate) AddTransfertobankaccount(f float64) *BulkUpdate {
	bu.mutation.AddTransfertobankaccount(f)
	return bu
}

// ClearTransfertobankaccount clears the value of the "transfertobankaccount" field.
func (bu *BulkUpdate) ClearTransfertobankaccount() *BulkUpdate {
	bu.mutation.ClearTransfertobankaccount()
	return bu
}

// SetDateTime sets the "dateTime" field.
func (bu *BulkUpdate) SetDateTime(t time.Time) *BulkUpdate {
	bu.mutation.SetDateTime(t)
	return bu
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (bu *BulkUpdate) SetNillableDateTime(t *time.Time) *BulkUpdate {
	if t != nil {
		bu.SetDateTime(*t)
	}
	return bu
}

// ClearDateTime clears the value of the "dateTime" field.
func (bu *BulkUpdate) ClearDateTime() *BulkUpdate {
	bu.mutation.ClearDateTime()
	return bu
}

// Mutation returns the BulkMutation object of the builder.
func (bu *BulkUpdate) Mutation() *BulkMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BulkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BulkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BulkUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BulkUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BulkUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BulkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bulk.Table,
			Columns: bulk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bulk.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BulkCreditSameday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldBulkCreditSameday,
		})
	}
	if value, ok := bu.mutation.AddedBulkCreditSameday(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldBulkCreditSameday,
		})
	}
	if bu.mutation.BulkCreditSamedayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: bulk.FieldBulkCreditSameday,
		})
	}
	if value, ok := bu.mutation.BulkCreditSamedayFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldBulkCreditSamedayFee,
		})
	}
	if value, ok := bu.mutation.AddedBulkCreditSamedayFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldBulkCreditSamedayFee,
		})
	}
	if bu.mutation.BulkCreditSamedayFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: bulk.FieldBulkCreditSamedayFee,
		})
	}
	if value, ok := bu.mutation.Transfertobankaccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldTransfertobankaccount,
		})
	}
	if value, ok := bu.mutation.AddedTransfertobankaccount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldTransfertobankaccount,
		})
	}
	if bu.mutation.TransfertobankaccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: bulk.FieldTransfertobankaccount,
		})
	}
	if value, ok := bu.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bulk.FieldDateTime,
		})
	}
	if bu.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: bulk.FieldDateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bulk.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BulkUpdateOne is the builder for updating a single Bulk entity.
type BulkUpdateOne struct {
	config
	hooks    []Hook
	mutation *BulkMutation
}

// SetBulkCreditSameday sets the "bulkCreditSameday" field.
func (buo *BulkUpdateOne) SetBulkCreditSameday(f float64) *BulkUpdateOne {
	buo.mutation.ResetBulkCreditSameday()
	buo.mutation.SetBulkCreditSameday(f)
	return buo
}

// SetNillableBulkCreditSameday sets the "bulkCreditSameday" field if the given value is not nil.
func (buo *BulkUpdateOne) SetNillableBulkCreditSameday(f *float64) *BulkUpdateOne {
	if f != nil {
		buo.SetBulkCreditSameday(*f)
	}
	return buo
}

// AddBulkCreditSameday adds f to the "bulkCreditSameday" field.
func (buo *BulkUpdateOne) AddBulkCreditSameday(f float64) *BulkUpdateOne {
	buo.mutation.AddBulkCreditSameday(f)
	return buo
}

// ClearBulkCreditSameday clears the value of the "bulkCreditSameday" field.
func (buo *BulkUpdateOne) ClearBulkCreditSameday() *BulkUpdateOne {
	buo.mutation.ClearBulkCreditSameday()
	return buo
}

// SetBulkCreditSamedayFee sets the "bulkCreditSamedayFee" field.
func (buo *BulkUpdateOne) SetBulkCreditSamedayFee(f float64) *BulkUpdateOne {
	buo.mutation.ResetBulkCreditSamedayFee()
	buo.mutation.SetBulkCreditSamedayFee(f)
	return buo
}

// SetNillableBulkCreditSamedayFee sets the "bulkCreditSamedayFee" field if the given value is not nil.
func (buo *BulkUpdateOne) SetNillableBulkCreditSamedayFee(f *float64) *BulkUpdateOne {
	if f != nil {
		buo.SetBulkCreditSamedayFee(*f)
	}
	return buo
}

// AddBulkCreditSamedayFee adds f to the "bulkCreditSamedayFee" field.
func (buo *BulkUpdateOne) AddBulkCreditSamedayFee(f float64) *BulkUpdateOne {
	buo.mutation.AddBulkCreditSamedayFee(f)
	return buo
}

// ClearBulkCreditSamedayFee clears the value of the "bulkCreditSamedayFee" field.
func (buo *BulkUpdateOne) ClearBulkCreditSamedayFee() *BulkUpdateOne {
	buo.mutation.ClearBulkCreditSamedayFee()
	return buo
}

// SetTransfertobankaccount sets the "transfertobankaccount" field.
func (buo *BulkUpdateOne) SetTransfertobankaccount(f float64) *BulkUpdateOne {
	buo.mutation.ResetTransfertobankaccount()
	buo.mutation.SetTransfertobankaccount(f)
	return buo
}

// SetNillableTransfertobankaccount sets the "transfertobankaccount" field if the given value is not nil.
func (buo *BulkUpdateOne) SetNillableTransfertobankaccount(f *float64) *BulkUpdateOne {
	if f != nil {
		buo.SetTransfertobankaccount(*f)
	}
	return buo
}

// AddTransfertobankaccount adds f to the "transfertobankaccount" field.
func (buo *BulkUpdateOne) AddTransfertobankaccount(f float64) *BulkUpdateOne {
	buo.mutation.AddTransfertobankaccount(f)
	return buo
}

// ClearTransfertobankaccount clears the value of the "transfertobankaccount" field.
func (buo *BulkUpdateOne) ClearTransfertobankaccount() *BulkUpdateOne {
	buo.mutation.ClearTransfertobankaccount()
	return buo
}

// SetDateTime sets the "dateTime" field.
func (buo *BulkUpdateOne) SetDateTime(t time.Time) *BulkUpdateOne {
	buo.mutation.SetDateTime(t)
	return buo
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (buo *BulkUpdateOne) SetNillableDateTime(t *time.Time) *BulkUpdateOne {
	if t != nil {
		buo.SetDateTime(*t)
	}
	return buo
}

// ClearDateTime clears the value of the "dateTime" field.
func (buo *BulkUpdateOne) ClearDateTime() *BulkUpdateOne {
	buo.mutation.ClearDateTime()
	return buo
}

// Mutation returns the BulkMutation object of the builder.
func (buo *BulkUpdateOne) Mutation() *BulkMutation {
	return buo.mutation
}

// Save executes the query and returns the updated Bulk entity.
func (buo *BulkUpdateOne) Save(ctx context.Context) (*Bulk, error) {
	var (
		err  error
		node *Bulk
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BulkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BulkUpdateOne) SaveX(ctx context.Context) *Bulk {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BulkUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BulkUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BulkUpdateOne) sqlSave(ctx context.Context) (_node *Bulk, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bulk.Table,
			Columns: bulk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bulk.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bulk.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.BulkCreditSameday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldBulkCreditSameday,
		})
	}
	if value, ok := buo.mutation.AddedBulkCreditSameday(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldBulkCreditSameday,
		})
	}
	if buo.mutation.BulkCreditSamedayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: bulk.FieldBulkCreditSameday,
		})
	}
	if value, ok := buo.mutation.BulkCreditSamedayFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldBulkCreditSamedayFee,
		})
	}
	if value, ok := buo.mutation.AddedBulkCreditSamedayFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldBulkCreditSamedayFee,
		})
	}
	if buo.mutation.BulkCreditSamedayFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: bulk.FieldBulkCreditSamedayFee,
		})
	}
	if value, ok := buo.mutation.Transfertobankaccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldTransfertobankaccount,
		})
	}
	if value, ok := buo.mutation.AddedTransfertobankaccount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: bulk.FieldTransfertobankaccount,
		})
	}
	if buo.mutation.TransfertobankaccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: bulk.FieldTransfertobankaccount,
		})
	}
	if value, ok := buo.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bulk.FieldDateTime,
		})
	}
	if buo.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: bulk.FieldDateTime,
		})
	}
	_node = &Bulk{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bulk.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
