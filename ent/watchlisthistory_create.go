// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-report2/ent/watchlisthistory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WatchlisthistoryCreate is the builder for creating a Watchlisthistory entity.
type WatchlisthistoryCreate struct {
	config
	mutation *WatchlisthistoryMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (wc *WatchlisthistoryCreate) SetName(s string) *WatchlisthistoryCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetTaxID sets the "TaxID" field.
func (wc *WatchlisthistoryCreate) SetTaxID(s string) *WatchlisthistoryCreate {
	wc.mutation.SetTaxID(s)
	return wc
}

// SetTypeName sets the "TypeName" field.
func (wc *WatchlisthistoryCreate) SetTypeName(s string) *WatchlisthistoryCreate {
	wc.mutation.SetTypeName(s)
	return wc
}

// SetRankWatchlist sets the "RankWatchlist" field.
func (wc *WatchlisthistoryCreate) SetRankWatchlist(i int) *WatchlisthistoryCreate {
	wc.mutation.SetRankWatchlist(i)
	return wc
}

// SetNillableRankWatchlist sets the "RankWatchlist" field if the given value is not nil.
func (wc *WatchlisthistoryCreate) SetNillableRankWatchlist(i *int) *WatchlisthistoryCreate {
	if i != nil {
		wc.SetRankWatchlist(*i)
	}
	return wc
}

// SetStatusDel sets the "StatusDel" field.
func (wc *WatchlisthistoryCreate) SetStatusDel(i int) *WatchlisthistoryCreate {
	wc.mutation.SetStatusDel(i)
	return wc
}

// SetNillableStatusDel sets the "StatusDel" field if the given value is not nil.
func (wc *WatchlisthistoryCreate) SetNillableStatusDel(i *int) *WatchlisthistoryCreate {
	if i != nil {
		wc.SetStatusDel(*i)
	}
	return wc
}

// SetDateCalRank sets the "DateCalRank" field.
func (wc *WatchlisthistoryCreate) SetDateCalRank(t time.Time) *WatchlisthistoryCreate {
	wc.mutation.SetDateCalRank(t)
	return wc
}

// SetNillableDateCalRank sets the "DateCalRank" field if the given value is not nil.
func (wc *WatchlisthistoryCreate) SetNillableDateCalRank(t *time.Time) *WatchlisthistoryCreate {
	if t != nil {
		wc.SetDateCalRank(*t)
	}
	return wc
}

// SetID sets the "id" field.
func (wc *WatchlisthistoryCreate) SetID(i int) *WatchlisthistoryCreate {
	wc.mutation.SetID(i)
	return wc
}

// Mutation returns the WatchlisthistoryMutation object of the builder.
func (wc *WatchlisthistoryCreate) Mutation() *WatchlisthistoryMutation {
	return wc.mutation
}

// Save creates the Watchlisthistory in the database.
func (wc *WatchlisthistoryCreate) Save(ctx context.Context) (*Watchlisthistory, error) {
	var (
		err  error
		node *Watchlisthistory
	)
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WatchlisthistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			node, err = wc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WatchlisthistoryCreate) SaveX(ctx context.Context) *Watchlisthistory {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (wc *WatchlisthistoryCreate) check() error {
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New("ent: missing required field \"Name\"")}
	}
	if v, ok := wc.mutation.Name(); ok {
		if err := watchlisthistory.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if _, ok := wc.mutation.TaxID(); !ok {
		return &ValidationError{Name: "TaxID", err: errors.New("ent: missing required field \"TaxID\"")}
	}
	if v, ok := wc.mutation.TaxID(); ok {
		if err := watchlisthistory.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "TaxID", err: fmt.Errorf("ent: validator failed for field \"TaxID\": %w", err)}
		}
	}
	if _, ok := wc.mutation.TypeName(); !ok {
		return &ValidationError{Name: "TypeName", err: errors.New("ent: missing required field \"TypeName\"")}
	}
	if v, ok := wc.mutation.TypeName(); ok {
		if err := watchlisthistory.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "TypeName", err: fmt.Errorf("ent: validator failed for field \"TypeName\": %w", err)}
		}
	}
	return nil
}

func (wc *WatchlisthistoryCreate) sqlSave(ctx context.Context) (*Watchlisthistory, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (wc *WatchlisthistoryCreate) createSpec() (*Watchlisthistory, *sqlgraph.CreateSpec) {
	var (
		_node = &Watchlisthistory{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: watchlisthistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: watchlisthistory.FieldID,
			},
		}
	)
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisthistory.FieldName,
		})
		_node.Name = value
	}
	if value, ok := wc.mutation.TaxID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisthistory.FieldTaxID,
		})
		_node.TaxID = value
	}
	if value, ok := wc.mutation.TypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: watchlisthistory.FieldTypeName,
		})
		_node.TypeName = value
	}
	if value, ok := wc.mutation.RankWatchlist(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisthistory.FieldRankWatchlist,
		})
		_node.RankWatchlist = value
	}
	if value, ok := wc.mutation.StatusDel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: watchlisthistory.FieldStatusDel,
		})
		_node.StatusDel = value
	}
	if value, ok := wc.mutation.DateCalRank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: watchlisthistory.FieldDateCalRank,
		})
		_node.DateCalRank = &value
	}
	return _node, _spec
}

// WatchlisthistoryCreateBulk is the builder for creating many Watchlisthistory entities in bulk.
type WatchlisthistoryCreateBulk struct {
	config
	builders []*WatchlisthistoryCreate
}

// Save creates the Watchlisthistory entities in the database.
func (wcb *WatchlisthistoryCreateBulk) Save(ctx context.Context) ([]*Watchlisthistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Watchlisthistory, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WatchlisthistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WatchlisthistoryCreateBulk) SaveX(ctx context.Context) []*Watchlisthistory {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
