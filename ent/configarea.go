// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/configarea"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Configarea is the model entity for the Configarea schema.
type Configarea struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProvinceID holds the value of the "ProvinceID" field.
	ProvinceID int `json:"ProvinceID,omitempty"`
	// ProvinceNameTH holds the value of the "ProvinceNameTH" field.
	ProvinceNameTH string `json:"ProvinceNameTH,omitempty"`
	// DistrictID holds the value of the "DistrictID" field.
	DistrictID int `json:"DistrictID,omitempty"`
	// DistrictNameTH holds the value of the "DistrictNameTH" field.
	DistrictNameTH string `json:"DistrictNameTH,omitempty"`
	// DistrictNameEN holds the value of the "DistrictNameEN" field.
	DistrictNameEN string `json:"DistrictNameEN,omitempty"`
	// Rank holds the value of the "Rank" field.
	Rank string `json:"Rank,omitempty"`
	// RankTmp holds the value of the "RankTmp" field.
	RankTmp string `json:"RankTmp,omitempty"`
	// UpdateDate holds the value of the "UpdateDate" field.
	UpdateDate time.Time `json:"UpdateDate,omitempty"`
	// ZipCode holds the value of the "ZipCode" field.
	ZipCode string `json:"ZipCode,omitempty"`
	// SubDistrictNameTH holds the value of the "SubDistrictNameTH" field.
	SubDistrictNameTH string `json:"SubDistrictNameTH,omitempty"`
	// ApproveBy holds the value of the "ApproveBy" field.
	ApproveBy *string `json:"ApproveBy,omitempty"`
	// ApproveDate holds the value of the "ApproveDate" field.
	ApproveDate *time.Time `json:"ApproveDate,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Configarea) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case configarea.FieldID, configarea.FieldProvinceID, configarea.FieldDistrictID:
			values[i] = &sql.NullInt64{}
		case configarea.FieldProvinceNameTH, configarea.FieldDistrictNameTH, configarea.FieldDistrictNameEN, configarea.FieldRank, configarea.FieldRankTmp, configarea.FieldZipCode, configarea.FieldSubDistrictNameTH, configarea.FieldApproveBy:
			values[i] = &sql.NullString{}
		case configarea.FieldUpdateDate, configarea.FieldApproveDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Configarea", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Configarea fields.
func (c *Configarea) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case configarea.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case configarea.FieldProvinceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ProvinceID", values[i])
			} else if value.Valid {
				c.ProvinceID = int(value.Int64)
			}
		case configarea.FieldProvinceNameTH:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProvinceNameTH", values[i])
			} else if value.Valid {
				c.ProvinceNameTH = value.String
			}
		case configarea.FieldDistrictID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DistrictID", values[i])
			} else if value.Valid {
				c.DistrictID = int(value.Int64)
			}
		case configarea.FieldDistrictNameTH:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DistrictNameTH", values[i])
			} else if value.Valid {
				c.DistrictNameTH = value.String
			}
		case configarea.FieldDistrictNameEN:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DistrictNameEN", values[i])
			} else if value.Valid {
				c.DistrictNameEN = value.String
			}
		case configarea.FieldRank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Rank", values[i])
			} else if value.Valid {
				c.Rank = value.String
			}
		case configarea.FieldRankTmp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RankTmp", values[i])
			} else if value.Valid {
				c.RankTmp = value.String
			}
		case configarea.FieldUpdateDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdateDate", values[i])
			} else if value.Valid {
				c.UpdateDate = value.Time
			}
		case configarea.FieldZipCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ZipCode", values[i])
			} else if value.Valid {
				c.ZipCode = value.String
			}
		case configarea.FieldSubDistrictNameTH:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SubDistrictNameTH", values[i])
			} else if value.Valid {
				c.SubDistrictNameTH = value.String
			}
		case configarea.FieldApproveBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApproveBy", values[i])
			} else if value.Valid {
				c.ApproveBy = new(string)
				*c.ApproveBy = value.String
			}
		case configarea.FieldApproveDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApproveDate", values[i])
			} else if value.Valid {
				c.ApproveDate = new(time.Time)
				*c.ApproveDate = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Configarea.
// Note that you need to call Configarea.Unwrap() before calling this method if this Configarea
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Configarea) Update() *ConfigareaUpdateOne {
	return (&ConfigareaClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Configarea entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Configarea) Unwrap() *Configarea {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Configarea is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Configarea) String() string {
	var builder strings.Builder
	builder.WriteString("Configarea(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", ProvinceID=")
	builder.WriteString(fmt.Sprintf("%v", c.ProvinceID))
	builder.WriteString(", ProvinceNameTH=")
	builder.WriteString(c.ProvinceNameTH)
	builder.WriteString(", DistrictID=")
	builder.WriteString(fmt.Sprintf("%v", c.DistrictID))
	builder.WriteString(", DistrictNameTH=")
	builder.WriteString(c.DistrictNameTH)
	builder.WriteString(", DistrictNameEN=")
	builder.WriteString(c.DistrictNameEN)
	builder.WriteString(", Rank=")
	builder.WriteString(c.Rank)
	builder.WriteString(", RankTmp=")
	builder.WriteString(c.RankTmp)
	builder.WriteString(", UpdateDate=")
	builder.WriteString(c.UpdateDate.Format(time.ANSIC))
	builder.WriteString(", ZipCode=")
	builder.WriteString(c.ZipCode)
	builder.WriteString(", SubDistrictNameTH=")
	builder.WriteString(c.SubDistrictNameTH)
	if v := c.ApproveBy; v != nil {
		builder.WriteString(", ApproveBy=")
		builder.WriteString(*v)
	}
	if v := c.ApproveDate; v != nil {
		builder.WriteString(", ApproveDate=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Configareas is a parsable slice of Configarea.
type Configareas []*Configarea

func (c Configareas) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
