// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/areahistory"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Areahistory is the model entity for the Areahistory schema.
type Areahistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WalletID holds the value of the "WalletID" field.
	WalletID string `json:"WalletID,omitempty"`
	// ProvinceNameTH holds the value of the "ProvinceNameTH" field.
	ProvinceNameTH string `json:"ProvinceNameTH,omitempty"`
	// DistrictNameTH holds the value of the "DistrictNameTH" field.
	DistrictNameTH string `json:"DistrictNameTH,omitempty"`
	// SubDistrict holds the value of the "SubDistrict" field.
	SubDistrict *string `json:"SubDistrict,omitempty"`
	// RankArea holds the value of the "RankArea" field.
	RankArea int `json:"RankArea,omitempty"`
	// DateCalRank holds the value of the "DateCalRank" field.
	DateCalRank *time.Time `json:"DateCalRank,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Areahistory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case areahistory.FieldID, areahistory.FieldRankArea:
			values[i] = &sql.NullInt64{}
		case areahistory.FieldWalletID, areahistory.FieldProvinceNameTH, areahistory.FieldDistrictNameTH, areahistory.FieldSubDistrict:
			values[i] = &sql.NullString{}
		case areahistory.FieldDateCalRank:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Areahistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Areahistory fields.
func (a *Areahistory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case areahistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case areahistory.FieldWalletID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletID", values[i])
			} else if value.Valid {
				a.WalletID = value.String
			}
		case areahistory.FieldProvinceNameTH:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProvinceNameTH", values[i])
			} else if value.Valid {
				a.ProvinceNameTH = value.String
			}
		case areahistory.FieldDistrictNameTH:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DistrictNameTH", values[i])
			} else if value.Valid {
				a.DistrictNameTH = value.String
			}
		case areahistory.FieldSubDistrict:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SubDistrict", values[i])
			} else if value.Valid {
				a.SubDistrict = new(string)
				*a.SubDistrict = value.String
			}
		case areahistory.FieldRankArea:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RankArea", values[i])
			} else if value.Valid {
				a.RankArea = int(value.Int64)
			}
		case areahistory.FieldDateCalRank:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DateCalRank", values[i])
			} else if value.Valid {
				a.DateCalRank = new(time.Time)
				*a.DateCalRank = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Areahistory.
// Note that you need to call Areahistory.Unwrap() before calling this method if this Areahistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Areahistory) Update() *AreahistoryUpdateOne {
	return (&AreahistoryClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Areahistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Areahistory) Unwrap() *Areahistory {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Areahistory is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Areahistory) String() string {
	var builder strings.Builder
	builder.WriteString("Areahistory(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", WalletID=")
	builder.WriteString(a.WalletID)
	builder.WriteString(", ProvinceNameTH=")
	builder.WriteString(a.ProvinceNameTH)
	builder.WriteString(", DistrictNameTH=")
	builder.WriteString(a.DistrictNameTH)
	if v := a.SubDistrict; v != nil {
		builder.WriteString(", SubDistrict=")
		builder.WriteString(*v)
	}
	builder.WriteString(", RankArea=")
	builder.WriteString(fmt.Sprintf("%v", a.RankArea))
	if v := a.DateCalRank; v != nil {
		builder.WriteString(", DateCalRank=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Areahistories is a parsable slice of Areahistory.
type Areahistories []*Areahistory

func (a Areahistories) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
