// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/fileimport"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileimportUpdate is the builder for updating Fileimport entities.
type FileimportUpdate struct {
	config
	hooks    []Hook
	mutation *FileimportMutation
}

// Where adds a new predicate for the FileimportUpdate builder.
func (fu *FileimportUpdate) Where(ps ...predicate.Fileimport) *FileimportUpdate {
	fu.mutation.predicates = append(fu.mutation.predicates, ps...)
	return fu
}

// SetFilename sets the "filename" field.
func (fu *FileimportUpdate) SetFilename(s string) *FileimportUpdate {
	fu.mutation.SetFilename(s)
	return fu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (fu *FileimportUpdate) SetNillableFilename(s *string) *FileimportUpdate {
	if s != nil {
		fu.SetFilename(*s)
	}
	return fu
}

// ClearFilename clears the value of the "filename" field.
func (fu *FileimportUpdate) ClearFilename() *FileimportUpdate {
	fu.mutation.ClearFilename()
	return fu
}

// SetFiletype sets the "filetype" field.
func (fu *FileimportUpdate) SetFiletype(s string) *FileimportUpdate {
	fu.mutation.SetFiletype(s)
	return fu
}

// SetNillableFiletype sets the "filetype" field if the given value is not nil.
func (fu *FileimportUpdate) SetNillableFiletype(s *string) *FileimportUpdate {
	if s != nil {
		fu.SetFiletype(*s)
	}
	return fu
}

// ClearFiletype clears the value of the "filetype" field.
func (fu *FileimportUpdate) ClearFiletype() *FileimportUpdate {
	fu.mutation.ClearFiletype()
	return fu
}

// SetImportdate sets the "importdate" field.
func (fu *FileimportUpdate) SetImportdate(t time.Time) *FileimportUpdate {
	fu.mutation.SetImportdate(t)
	return fu
}

// SetNillableImportdate sets the "importdate" field if the given value is not nil.
func (fu *FileimportUpdate) SetNillableImportdate(t *time.Time) *FileimportUpdate {
	if t != nil {
		fu.SetImportdate(*t)
	}
	return fu
}

// ClearImportdate clears the value of the "importdate" field.
func (fu *FileimportUpdate) ClearImportdate() *FileimportUpdate {
	fu.mutation.ClearImportdate()
	return fu
}

// SetStatus sets the "status" field.
func (fu *FileimportUpdate) SetStatus(s string) *FileimportUpdate {
	fu.mutation.SetStatus(s)
	return fu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fu *FileimportUpdate) SetNillableStatus(s *string) *FileimportUpdate {
	if s != nil {
		fu.SetStatus(*s)
	}
	return fu
}

// ClearStatus clears the value of the "status" field.
func (fu *FileimportUpdate) ClearStatus() *FileimportUpdate {
	fu.mutation.ClearStatus()
	return fu
}

// Mutation returns the FileimportMutation object of the builder.
func (fu *FileimportUpdate) Mutation() *FileimportMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileimportUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileimportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileimportUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileimportUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileimportUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileimportUpdate) check() error {
	if v, ok := fu.mutation.Filename(); ok {
		if err := fileimport.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf("ent: validator failed for field \"filename\": %w", err)}
		}
	}
	if v, ok := fu.mutation.Filetype(); ok {
		if err := fileimport.FiletypeValidator(v); err != nil {
			return &ValidationError{Name: "filetype", err: fmt.Errorf("ent: validator failed for field \"filetype\": %w", err)}
		}
	}
	if v, ok := fu.mutation.Status(); ok {
		if err := fileimport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (fu *FileimportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileimport.Table,
			Columns: fileimport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileimport.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileimport.FieldFilename,
		})
	}
	if fu.mutation.FilenameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fileimport.FieldFilename,
		})
	}
	if value, ok := fu.mutation.Filetype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileimport.FieldFiletype,
		})
	}
	if fu.mutation.FiletypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fileimport.FieldFiletype,
		})
	}
	if value, ok := fu.mutation.Importdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileimport.FieldImportdate,
		})
	}
	if fu.mutation.ImportdateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fileimport.FieldImportdate,
		})
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileimport.FieldStatus,
		})
	}
	if fu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fileimport.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileimport.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FileimportUpdateOne is the builder for updating a single Fileimport entity.
type FileimportUpdateOne struct {
	config
	hooks    []Hook
	mutation *FileimportMutation
}

// SetFilename sets the "filename" field.
func (fuo *FileimportUpdateOne) SetFilename(s string) *FileimportUpdateOne {
	fuo.mutation.SetFilename(s)
	return fuo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (fuo *FileimportUpdateOne) SetNillableFilename(s *string) *FileimportUpdateOne {
	if s != nil {
		fuo.SetFilename(*s)
	}
	return fuo
}

// ClearFilename clears the value of the "filename" field.
func (fuo *FileimportUpdateOne) ClearFilename() *FileimportUpdateOne {
	fuo.mutation.ClearFilename()
	return fuo
}

// SetFiletype sets the "filetype" field.
func (fuo *FileimportUpdateOne) SetFiletype(s string) *FileimportUpdateOne {
	fuo.mutation.SetFiletype(s)
	return fuo
}

// SetNillableFiletype sets the "filetype" field if the given value is not nil.
func (fuo *FileimportUpdateOne) SetNillableFiletype(s *string) *FileimportUpdateOne {
	if s != nil {
		fuo.SetFiletype(*s)
	}
	return fuo
}

// ClearFiletype clears the value of the "filetype" field.
func (fuo *FileimportUpdateOne) ClearFiletype() *FileimportUpdateOne {
	fuo.mutation.ClearFiletype()
	return fuo
}

// SetImportdate sets the "importdate" field.
func (fuo *FileimportUpdateOne) SetImportdate(t time.Time) *FileimportUpdateOne {
	fuo.mutation.SetImportdate(t)
	return fuo
}

// SetNillableImportdate sets the "importdate" field if the given value is not nil.
func (fuo *FileimportUpdateOne) SetNillableImportdate(t *time.Time) *FileimportUpdateOne {
	if t != nil {
		fuo.SetImportdate(*t)
	}
	return fuo
}

// ClearImportdate clears the value of the "importdate" field.
func (fuo *FileimportUpdateOne) ClearImportdate() *FileimportUpdateOne {
	fuo.mutation.ClearImportdate()
	return fuo
}

// SetStatus sets the "status" field.
func (fuo *FileimportUpdateOne) SetStatus(s string) *FileimportUpdateOne {
	fuo.mutation.SetStatus(s)
	return fuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fuo *FileimportUpdateOne) SetNillableStatus(s *string) *FileimportUpdateOne {
	if s != nil {
		fuo.SetStatus(*s)
	}
	return fuo
}

// ClearStatus clears the value of the "status" field.
func (fuo *FileimportUpdateOne) ClearStatus() *FileimportUpdateOne {
	fuo.mutation.ClearStatus()
	return fuo
}

// Mutation returns the FileimportMutation object of the builder.
func (fuo *FileimportUpdateOne) Mutation() *FileimportMutation {
	return fuo.mutation
}

// Save executes the query and returns the updated Fileimport entity.
func (fuo *FileimportUpdateOne) Save(ctx context.Context) (*Fileimport, error) {
	var (
		err  error
		node *Fileimport
	)
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileimportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileimportUpdateOne) SaveX(ctx context.Context) *Fileimport {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileimportUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileimportUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileimportUpdateOne) check() error {
	if v, ok := fuo.mutation.Filename(); ok {
		if err := fileimport.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf("ent: validator failed for field \"filename\": %w", err)}
		}
	}
	if v, ok := fuo.mutation.Filetype(); ok {
		if err := fileimport.FiletypeValidator(v); err != nil {
			return &ValidationError{Name: "filetype", err: fmt.Errorf("ent: validator failed for field \"filetype\": %w", err)}
		}
	}
	if v, ok := fuo.mutation.Status(); ok {
		if err := fileimport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (fuo *FileimportUpdateOne) sqlSave(ctx context.Context) (_node *Fileimport, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileimport.Table,
			Columns: fileimport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileimport.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Fileimport.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileimport.FieldFilename,
		})
	}
	if fuo.mutation.FilenameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fileimport.FieldFilename,
		})
	}
	if value, ok := fuo.mutation.Filetype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileimport.FieldFiletype,
		})
	}
	if fuo.mutation.FiletypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fileimport.FieldFiletype,
		})
	}
	if value, ok := fuo.mutation.Importdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileimport.FieldImportdate,
		})
	}
	if fuo.mutation.ImportdateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fileimport.FieldImportdate,
		})
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileimport.FieldStatus,
		})
	}
	if fuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fileimport.FieldStatus,
		})
	}
	_node = &Fileimport{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileimport.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
