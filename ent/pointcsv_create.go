// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pointcsv"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PointcsvCreate is the builder for creating a Pointcsv entity.
type PointcsvCreate struct {
	config
	mutation *PointcsvMutation
	hooks    []Hook
}

// SetWalletID sets the "WalletID" field.
func (pc *PointcsvCreate) SetWalletID(s string) *PointcsvCreate {
	pc.mutation.SetWalletID(s)
	return pc
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (pc *PointcsvCreate) SetNillableWalletID(s *string) *PointcsvCreate {
	if s != nil {
		pc.SetWalletID(*s)
	}
	return pc
}

// SetCreateDate sets the "CreateDate" field.
func (pc *PointcsvCreate) SetCreateDate(t time.Time) *PointcsvCreate {
	pc.mutation.SetCreateDate(t)
	return pc
}

// SetNillableCreateDate sets the "CreateDate" field if the given value is not nil.
func (pc *PointcsvCreate) SetNillableCreateDate(t *time.Time) *PointcsvCreate {
	if t != nil {
		pc.SetCreateDate(*t)
	}
	return pc
}

// SetAdjustamount sets the "Adjustamount" field.
func (pc *PointcsvCreate) SetAdjustamount(i int) *PointcsvCreate {
	pc.mutation.SetAdjustamount(i)
	return pc
}

// SetNillableAdjustamount sets the "Adjustamount" field if the given value is not nil.
func (pc *PointcsvCreate) SetNillableAdjustamount(i *int) *PointcsvCreate {
	if i != nil {
		pc.SetAdjustamount(*i)
	}
	return pc
}

// SetNote sets the "Note" field.
func (pc *PointcsvCreate) SetNote(s string) *PointcsvCreate {
	pc.mutation.SetNote(s)
	return pc
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (pc *PointcsvCreate) SetNillableNote(s *string) *PointcsvCreate {
	if s != nil {
		pc.SetNote(*s)
	}
	return pc
}

// SetPointTranDate sets the "PointTranDate" field.
func (pc *PointcsvCreate) SetPointTranDate(t time.Time) *PointcsvCreate {
	pc.mutation.SetPointTranDate(t)
	return pc
}

// SetNillablePointTranDate sets the "PointTranDate" field if the given value is not nil.
func (pc *PointcsvCreate) SetNillablePointTranDate(t *time.Time) *PointcsvCreate {
	if t != nil {
		pc.SetPointTranDate(*t)
	}
	return pc
}

// SetActionExport sets the "ActionExport" field.
func (pc *PointcsvCreate) SetActionExport(i int) *PointcsvCreate {
	pc.mutation.SetActionExport(i)
	return pc
}

// SetNillableActionExport sets the "ActionExport" field if the given value is not nil.
func (pc *PointcsvCreate) SetNillableActionExport(i *int) *PointcsvCreate {
	if i != nil {
		pc.SetActionExport(*i)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PointcsvCreate) SetID(i int) *PointcsvCreate {
	pc.mutation.SetID(i)
	return pc
}

// Mutation returns the PointcsvMutation object of the builder.
func (pc *PointcsvCreate) Mutation() *PointcsvMutation {
	return pc.mutation
}

// Save creates the Pointcsv in the database.
func (pc *PointcsvCreate) Save(ctx context.Context) (*Pointcsv, error) {
	var (
		err  error
		node *Pointcsv
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointcsvMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PointcsvCreate) SaveX(ctx context.Context) *Pointcsv {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (pc *PointcsvCreate) check() error {
	if v, ok := pc.mutation.WalletID(); ok {
		if err := pointcsv.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := pc.mutation.Note(); ok {
		if err := pointcsv.NoteValidator(v); err != nil {
			return &ValidationError{Name: "Note", err: fmt.Errorf("ent: validator failed for field \"Note\": %w", err)}
		}
	}
	return nil
}

func (pc *PointcsvCreate) sqlSave(ctx context.Context) (*Pointcsv, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (pc *PointcsvCreate) createSpec() (*Pointcsv, *sqlgraph.CreateSpec) {
	var (
		_node = &Pointcsv{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pointcsv.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointcsv.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.WalletID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointcsv.FieldWalletID,
		})
		_node.WalletID = value
	}
	if value, ok := pc.mutation.CreateDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointcsv.FieldCreateDate,
		})
		_node.CreateDate = value
	}
	if value, ok := pc.mutation.Adjustamount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointcsv.FieldAdjustamount,
		})
		_node.Adjustamount = value
	}
	if value, ok := pc.mutation.Note(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointcsv.FieldNote,
		})
		_node.Note = &value
	}
	if value, ok := pc.mutation.PointTranDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointcsv.FieldPointTranDate,
		})
		_node.PointTranDate = value
	}
	if value, ok := pc.mutation.ActionExport(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointcsv.FieldActionExport,
		})
		_node.ActionExport = value
	}
	return _node, _spec
}

// PointcsvCreateBulk is the builder for creating many Pointcsv entities in bulk.
type PointcsvCreateBulk struct {
	config
	builders []*PointcsvCreate
}

// Save creates the Pointcsv entities in the database.
func (pcb *PointcsvCreateBulk) Save(ctx context.Context) ([]*Pointcsv, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pointcsv, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PointcsvMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PointcsvCreateBulk) SaveX(ctx context.Context) []*Pointcsv {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
