// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/bankdetail"
	"go-api-report2/ent/statementendingbalanc"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatementEndingBalancCreate is the builder for creating a StatementEndingBalanc entity.
type StatementEndingBalancCreate struct {
	config
	mutation *StatementEndingBalancMutation
	hooks    []Hook
}

// SetStatementBalance sets the "Statement_Balance" field.
func (sebc *StatementEndingBalancCreate) SetStatementBalance(f float64) *StatementEndingBalancCreate {
	sebc.mutation.SetStatementBalance(f)
	return sebc
}

// SetNillableStatementBalance sets the "Statement_Balance" field if the given value is not nil.
func (sebc *StatementEndingBalancCreate) SetNillableStatementBalance(f *float64) *StatementEndingBalancCreate {
	if f != nil {
		sebc.SetStatementBalance(*f)
	}
	return sebc
}

// SetStatementDate sets the "Statement_Date" field.
func (sebc *StatementEndingBalancCreate) SetStatementDate(t time.Time) *StatementEndingBalancCreate {
	sebc.mutation.SetStatementDate(t)
	return sebc
}

// SetNillableStatementDate sets the "Statement_Date" field if the given value is not nil.
func (sebc *StatementEndingBalancCreate) SetNillableStatementDate(t *time.Time) *StatementEndingBalancCreate {
	if t != nil {
		sebc.SetStatementDate(*t)
	}
	return sebc
}

// SetID sets the "id" field.
func (sebc *StatementEndingBalancCreate) SetID(i int) *StatementEndingBalancCreate {
	sebc.mutation.SetID(i)
	return sebc
}

// SetBankID sets the "bank" edge to the Bankdetail entity by ID.
func (sebc *StatementEndingBalancCreate) SetBankID(id int) *StatementEndingBalancCreate {
	sebc.mutation.SetBankID(id)
	return sebc
}

// SetNillableBankID sets the "bank" edge to the Bankdetail entity by ID if the given value is not nil.
func (sebc *StatementEndingBalancCreate) SetNillableBankID(id *int) *StatementEndingBalancCreate {
	if id != nil {
		sebc = sebc.SetBankID(*id)
	}
	return sebc
}

// SetBank sets the "bank" edge to the Bankdetail entity.
func (sebc *StatementEndingBalancCreate) SetBank(b *Bankdetail) *StatementEndingBalancCreate {
	return sebc.SetBankID(b.ID)
}

// Mutation returns the StatementEndingBalancMutation object of the builder.
func (sebc *StatementEndingBalancCreate) Mutation() *StatementEndingBalancMutation {
	return sebc.mutation
}

// Save creates the StatementEndingBalanc in the database.
func (sebc *StatementEndingBalancCreate) Save(ctx context.Context) (*StatementEndingBalanc, error) {
	var (
		err  error
		node *StatementEndingBalanc
	)
	if len(sebc.hooks) == 0 {
		if err = sebc.check(); err != nil {
			return nil, err
		}
		node, err = sebc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatementEndingBalancMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sebc.check(); err != nil {
				return nil, err
			}
			sebc.mutation = mutation
			node, err = sebc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sebc.hooks) - 1; i >= 0; i-- {
			mut = sebc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sebc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sebc *StatementEndingBalancCreate) SaveX(ctx context.Context) *StatementEndingBalanc {
	v, err := sebc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (sebc *StatementEndingBalancCreate) check() error {
	return nil
}

func (sebc *StatementEndingBalancCreate) sqlSave(ctx context.Context) (*StatementEndingBalanc, error) {
	_node, _spec := sebc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sebc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (sebc *StatementEndingBalancCreate) createSpec() (*StatementEndingBalanc, *sqlgraph.CreateSpec) {
	var (
		_node = &StatementEndingBalanc{config: sebc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: statementendingbalanc.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statementendingbalanc.FieldID,
			},
		}
	)
	if id, ok := sebc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sebc.mutation.StatementBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statementendingbalanc.FieldStatementBalance,
		})
		_node.StatementBalance = &value
	}
	if value, ok := sebc.mutation.StatementDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statementendingbalanc.FieldStatementDate,
		})
		_node.StatementDate = &value
	}
	if nodes := sebc.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statementendingbalanc.BankTable,
			Columns: []string{statementendingbalanc.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StatementEndingBalancCreateBulk is the builder for creating many StatementEndingBalanc entities in bulk.
type StatementEndingBalancCreateBulk struct {
	config
	builders []*StatementEndingBalancCreate
}

// Save creates the StatementEndingBalanc entities in the database.
func (sebcb *StatementEndingBalancCreateBulk) Save(ctx context.Context) ([]*StatementEndingBalanc, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sebcb.builders))
	nodes := make([]*StatementEndingBalanc, len(sebcb.builders))
	mutators := make([]Mutator, len(sebcb.builders))
	for i := range sebcb.builders {
		func(i int, root context.Context) {
			builder := sebcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatementEndingBalancMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sebcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sebcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sebcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sebcb *StatementEndingBalancCreateBulk) SaveX(ctx context.Context) []*StatementEndingBalanc {
	v, err := sebcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
