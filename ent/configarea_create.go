// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/configarea"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigareaCreate is the builder for creating a Configarea entity.
type ConfigareaCreate struct {
	config
	mutation *ConfigareaMutation
	hooks    []Hook
}

// SetProvinceID sets the "ProvinceID" field.
func (cc *ConfigareaCreate) SetProvinceID(i int) *ConfigareaCreate {
	cc.mutation.SetProvinceID(i)
	return cc
}

// SetNillableProvinceID sets the "ProvinceID" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableProvinceID(i *int) *ConfigareaCreate {
	if i != nil {
		cc.SetProvinceID(*i)
	}
	return cc
}

// SetProvinceNameTH sets the "ProvinceNameTH" field.
func (cc *ConfigareaCreate) SetProvinceNameTH(s string) *ConfigareaCreate {
	cc.mutation.SetProvinceNameTH(s)
	return cc
}

// SetNillableProvinceNameTH sets the "ProvinceNameTH" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableProvinceNameTH(s *string) *ConfigareaCreate {
	if s != nil {
		cc.SetProvinceNameTH(*s)
	}
	return cc
}

// SetDistrictID sets the "DistrictID" field.
func (cc *ConfigareaCreate) SetDistrictID(i int) *ConfigareaCreate {
	cc.mutation.SetDistrictID(i)
	return cc
}

// SetNillableDistrictID sets the "DistrictID" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableDistrictID(i *int) *ConfigareaCreate {
	if i != nil {
		cc.SetDistrictID(*i)
	}
	return cc
}

// SetDistrictNameTH sets the "DistrictNameTH" field.
func (cc *ConfigareaCreate) SetDistrictNameTH(s string) *ConfigareaCreate {
	cc.mutation.SetDistrictNameTH(s)
	return cc
}

// SetNillableDistrictNameTH sets the "DistrictNameTH" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableDistrictNameTH(s *string) *ConfigareaCreate {
	if s != nil {
		cc.SetDistrictNameTH(*s)
	}
	return cc
}

// SetDistrictNameEN sets the "DistrictNameEN" field.
func (cc *ConfigareaCreate) SetDistrictNameEN(s string) *ConfigareaCreate {
	cc.mutation.SetDistrictNameEN(s)
	return cc
}

// SetNillableDistrictNameEN sets the "DistrictNameEN" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableDistrictNameEN(s *string) *ConfigareaCreate {
	if s != nil {
		cc.SetDistrictNameEN(*s)
	}
	return cc
}

// SetRank sets the "Rank" field.
func (cc *ConfigareaCreate) SetRank(s string) *ConfigareaCreate {
	cc.mutation.SetRank(s)
	return cc
}

// SetNillableRank sets the "Rank" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableRank(s *string) *ConfigareaCreate {
	if s != nil {
		cc.SetRank(*s)
	}
	return cc
}

// SetRankTmp sets the "RankTmp" field.
func (cc *ConfigareaCreate) SetRankTmp(s string) *ConfigareaCreate {
	cc.mutation.SetRankTmp(s)
	return cc
}

// SetNillableRankTmp sets the "RankTmp" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableRankTmp(s *string) *ConfigareaCreate {
	if s != nil {
		cc.SetRankTmp(*s)
	}
	return cc
}

// SetUpdateDate sets the "UpdateDate" field.
func (cc *ConfigareaCreate) SetUpdateDate(t time.Time) *ConfigareaCreate {
	cc.mutation.SetUpdateDate(t)
	return cc
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableUpdateDate(t *time.Time) *ConfigareaCreate {
	if t != nil {
		cc.SetUpdateDate(*t)
	}
	return cc
}

// SetZipCode sets the "ZipCode" field.
func (cc *ConfigareaCreate) SetZipCode(s string) *ConfigareaCreate {
	cc.mutation.SetZipCode(s)
	return cc
}

// SetNillableZipCode sets the "ZipCode" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableZipCode(s *string) *ConfigareaCreate {
	if s != nil {
		cc.SetZipCode(*s)
	}
	return cc
}

// SetSubDistrictNameTH sets the "SubDistrictNameTH" field.
func (cc *ConfigareaCreate) SetSubDistrictNameTH(s string) *ConfigareaCreate {
	cc.mutation.SetSubDistrictNameTH(s)
	return cc
}

// SetNillableSubDistrictNameTH sets the "SubDistrictNameTH" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableSubDistrictNameTH(s *string) *ConfigareaCreate {
	if s != nil {
		cc.SetSubDistrictNameTH(*s)
	}
	return cc
}

// SetApproveBy sets the "ApproveBy" field.
func (cc *ConfigareaCreate) SetApproveBy(s string) *ConfigareaCreate {
	cc.mutation.SetApproveBy(s)
	return cc
}

// SetNillableApproveBy sets the "ApproveBy" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableApproveBy(s *string) *ConfigareaCreate {
	if s != nil {
		cc.SetApproveBy(*s)
	}
	return cc
}

// SetApproveDate sets the "ApproveDate" field.
func (cc *ConfigareaCreate) SetApproveDate(t time.Time) *ConfigareaCreate {
	cc.mutation.SetApproveDate(t)
	return cc
}

// SetNillableApproveDate sets the "ApproveDate" field if the given value is not nil.
func (cc *ConfigareaCreate) SetNillableApproveDate(t *time.Time) *ConfigareaCreate {
	if t != nil {
		cc.SetApproveDate(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConfigareaCreate) SetID(i int) *ConfigareaCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the ConfigareaMutation object of the builder.
func (cc *ConfigareaCreate) Mutation() *ConfigareaMutation {
	return cc.mutation
}

// Save creates the Configarea in the database.
func (cc *ConfigareaCreate) Save(ctx context.Context) (*Configarea, error) {
	var (
		err  error
		node *Configarea
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigareaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConfigareaCreate) SaveX(ctx context.Context) *Configarea {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConfigareaCreate) check() error {
	if v, ok := cc.mutation.ProvinceNameTH(); ok {
		if err := configarea.ProvinceNameTHValidator(v); err != nil {
			return &ValidationError{Name: "ProvinceNameTH", err: fmt.Errorf("ent: validator failed for field \"ProvinceNameTH\": %w", err)}
		}
	}
	if v, ok := cc.mutation.DistrictNameTH(); ok {
		if err := configarea.DistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"DistrictNameTH\": %w", err)}
		}
	}
	if v, ok := cc.mutation.DistrictNameEN(); ok {
		if err := configarea.DistrictNameENValidator(v); err != nil {
			return &ValidationError{Name: "DistrictNameEN", err: fmt.Errorf("ent: validator failed for field \"DistrictNameEN\": %w", err)}
		}
	}
	if v, ok := cc.mutation.Rank(); ok {
		if err := configarea.RankValidator(v); err != nil {
			return &ValidationError{Name: "Rank", err: fmt.Errorf("ent: validator failed for field \"Rank\": %w", err)}
		}
	}
	if v, ok := cc.mutation.RankTmp(); ok {
		if err := configarea.RankTmpValidator(v); err != nil {
			return &ValidationError{Name: "RankTmp", err: fmt.Errorf("ent: validator failed for field \"RankTmp\": %w", err)}
		}
	}
	if v, ok := cc.mutation.ZipCode(); ok {
		if err := configarea.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "ZipCode", err: fmt.Errorf("ent: validator failed for field \"ZipCode\": %w", err)}
		}
	}
	if v, ok := cc.mutation.SubDistrictNameTH(); ok {
		if err := configarea.SubDistrictNameTHValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrictNameTH", err: fmt.Errorf("ent: validator failed for field \"SubDistrictNameTH\": %w", err)}
		}
	}
	if v, ok := cc.mutation.ApproveBy(); ok {
		if err := configarea.ApproveByValidator(v); err != nil {
			return &ValidationError{Name: "ApproveBy", err: fmt.Errorf("ent: validator failed for field \"ApproveBy\": %w", err)}
		}
	}
	return nil
}

func (cc *ConfigareaCreate) sqlSave(ctx context.Context) (*Configarea, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (cc *ConfigareaCreate) createSpec() (*Configarea, *sqlgraph.CreateSpec) {
	var (
		_node = &Configarea{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: configarea.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configarea.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.ProvinceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configarea.FieldProvinceID,
		})
		_node.ProvinceID = value
	}
	if value, ok := cc.mutation.ProvinceNameTH(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldProvinceNameTH,
		})
		_node.ProvinceNameTH = value
	}
	if value, ok := cc.mutation.DistrictID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: configarea.FieldDistrictID,
		})
		_node.DistrictID = value
	}
	if value, ok := cc.mutation.DistrictNameTH(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldDistrictNameTH,
		})
		_node.DistrictNameTH = value
	}
	if value, ok := cc.mutation.DistrictNameEN(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldDistrictNameEN,
		})
		_node.DistrictNameEN = value
	}
	if value, ok := cc.mutation.Rank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldRank,
		})
		_node.Rank = value
	}
	if value, ok := cc.mutation.RankTmp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldRankTmp,
		})
		_node.RankTmp = value
	}
	if value, ok := cc.mutation.UpdateDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configarea.FieldUpdateDate,
		})
		_node.UpdateDate = value
	}
	if value, ok := cc.mutation.ZipCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldZipCode,
		})
		_node.ZipCode = value
	}
	if value, ok := cc.mutation.SubDistrictNameTH(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldSubDistrictNameTH,
		})
		_node.SubDistrictNameTH = value
	}
	if value, ok := cc.mutation.ApproveBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configarea.FieldApproveBy,
		})
		_node.ApproveBy = &value
	}
	if value, ok := cc.mutation.ApproveDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configarea.FieldApproveDate,
		})
		_node.ApproveDate = &value
	}
	return _node, _spec
}

// ConfigareaCreateBulk is the builder for creating many Configarea entities in bulk.
type ConfigareaCreateBulk struct {
	config
	builders []*ConfigareaCreate
}

// Save creates the Configarea entities in the database.
func (ccb *ConfigareaCreateBulk) Save(ctx context.Context) ([]*Configarea, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Configarea, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigareaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConfigareaCreateBulk) SaveX(ctx context.Context) []*Configarea {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
