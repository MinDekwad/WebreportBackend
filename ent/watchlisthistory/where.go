// Code generated by entc, DO NOT EDIT.

package watchlisthistory

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// TaxID applies equality check predicate on the "TaxID" field. It's identical to TaxIDEQ.
func TaxID(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxID), v))
	})
}

// TypeName applies equality check predicate on the "TypeName" field. It's identical to TypeNameEQ.
func TypeName(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeName), v))
	})
}

// RankWatchlist applies equality check predicate on the "RankWatchlist" field. It's identical to RankWatchlistEQ.
func RankWatchlist(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankWatchlist), v))
	})
}

// StatusDel applies equality check predicate on the "StatusDel" field. It's identical to StatusDelEQ.
func StatusDel(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDel), v))
	})
}

// DateCalRank applies equality check predicate on the "DateCalRank" field. It's identical to DateCalRankEQ.
func DateCalRank(v time.Time) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateCalRank), v))
	})
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TaxIDEQ applies the EQ predicate on the "TaxID" field.
func TaxIDEQ(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxID), v))
	})
}

// TaxIDNEQ applies the NEQ predicate on the "TaxID" field.
func TaxIDNEQ(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxID), v))
	})
}

// TaxIDIn applies the In predicate on the "TaxID" field.
func TaxIDIn(vs ...string) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxID), v...))
	})
}

// TaxIDNotIn applies the NotIn predicate on the "TaxID" field.
func TaxIDNotIn(vs ...string) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxID), v...))
	})
}

// TaxIDGT applies the GT predicate on the "TaxID" field.
func TaxIDGT(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxID), v))
	})
}

// TaxIDGTE applies the GTE predicate on the "TaxID" field.
func TaxIDGTE(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxID), v))
	})
}

// TaxIDLT applies the LT predicate on the "TaxID" field.
func TaxIDLT(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxID), v))
	})
}

// TaxIDLTE applies the LTE predicate on the "TaxID" field.
func TaxIDLTE(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxID), v))
	})
}

// TaxIDContains applies the Contains predicate on the "TaxID" field.
func TaxIDContains(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaxID), v))
	})
}

// TaxIDHasPrefix applies the HasPrefix predicate on the "TaxID" field.
func TaxIDHasPrefix(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaxID), v))
	})
}

// TaxIDHasSuffix applies the HasSuffix predicate on the "TaxID" field.
func TaxIDHasSuffix(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaxID), v))
	})
}

// TaxIDEqualFold applies the EqualFold predicate on the "TaxID" field.
func TaxIDEqualFold(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaxID), v))
	})
}

// TaxIDContainsFold applies the ContainsFold predicate on the "TaxID" field.
func TaxIDContainsFold(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaxID), v))
	})
}

// TypeNameEQ applies the EQ predicate on the "TypeName" field.
func TypeNameEQ(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeName), v))
	})
}

// TypeNameNEQ applies the NEQ predicate on the "TypeName" field.
func TypeNameNEQ(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeName), v))
	})
}

// TypeNameIn applies the In predicate on the "TypeName" field.
func TypeNameIn(vs ...string) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeName), v...))
	})
}

// TypeNameNotIn applies the NotIn predicate on the "TypeName" field.
func TypeNameNotIn(vs ...string) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeName), v...))
	})
}

// TypeNameGT applies the GT predicate on the "TypeName" field.
func TypeNameGT(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeName), v))
	})
}

// TypeNameGTE applies the GTE predicate on the "TypeName" field.
func TypeNameGTE(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeName), v))
	})
}

// TypeNameLT applies the LT predicate on the "TypeName" field.
func TypeNameLT(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeName), v))
	})
}

// TypeNameLTE applies the LTE predicate on the "TypeName" field.
func TypeNameLTE(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeName), v))
	})
}

// TypeNameContains applies the Contains predicate on the "TypeName" field.
func TypeNameContains(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTypeName), v))
	})
}

// TypeNameHasPrefix applies the HasPrefix predicate on the "TypeName" field.
func TypeNameHasPrefix(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTypeName), v))
	})
}

// TypeNameHasSuffix applies the HasSuffix predicate on the "TypeName" field.
func TypeNameHasSuffix(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTypeName), v))
	})
}

// TypeNameEqualFold applies the EqualFold predicate on the "TypeName" field.
func TypeNameEqualFold(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTypeName), v))
	})
}

// TypeNameContainsFold applies the ContainsFold predicate on the "TypeName" field.
func TypeNameContainsFold(v string) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTypeName), v))
	})
}

// RankWatchlistEQ applies the EQ predicate on the "RankWatchlist" field.
func RankWatchlistEQ(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistNEQ applies the NEQ predicate on the "RankWatchlist" field.
func RankWatchlistNEQ(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistIn applies the In predicate on the "RankWatchlist" field.
func RankWatchlistIn(vs ...int) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRankWatchlist), v...))
	})
}

// RankWatchlistNotIn applies the NotIn predicate on the "RankWatchlist" field.
func RankWatchlistNotIn(vs ...int) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRankWatchlist), v...))
	})
}

// RankWatchlistGT applies the GT predicate on the "RankWatchlist" field.
func RankWatchlistGT(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistGTE applies the GTE predicate on the "RankWatchlist" field.
func RankWatchlistGTE(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistLT applies the LT predicate on the "RankWatchlist" field.
func RankWatchlistLT(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistLTE applies the LTE predicate on the "RankWatchlist" field.
func RankWatchlistLTE(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistIsNil applies the IsNil predicate on the "RankWatchlist" field.
func RankWatchlistIsNil() predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRankWatchlist)))
	})
}

// RankWatchlistNotNil applies the NotNil predicate on the "RankWatchlist" field.
func RankWatchlistNotNil() predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRankWatchlist)))
	})
}

// StatusDelEQ applies the EQ predicate on the "StatusDel" field.
func StatusDelEQ(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDel), v))
	})
}

// StatusDelNEQ applies the NEQ predicate on the "StatusDel" field.
func StatusDelNEQ(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusDel), v))
	})
}

// StatusDelIn applies the In predicate on the "StatusDel" field.
func StatusDelIn(vs ...int) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusDel), v...))
	})
}

// StatusDelNotIn applies the NotIn predicate on the "StatusDel" field.
func StatusDelNotIn(vs ...int) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusDel), v...))
	})
}

// StatusDelGT applies the GT predicate on the "StatusDel" field.
func StatusDelGT(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusDel), v))
	})
}

// StatusDelGTE applies the GTE predicate on the "StatusDel" field.
func StatusDelGTE(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusDel), v))
	})
}

// StatusDelLT applies the LT predicate on the "StatusDel" field.
func StatusDelLT(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusDel), v))
	})
}

// StatusDelLTE applies the LTE predicate on the "StatusDel" field.
func StatusDelLTE(v int) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusDel), v))
	})
}

// StatusDelIsNil applies the IsNil predicate on the "StatusDel" field.
func StatusDelIsNil() predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusDel)))
	})
}

// StatusDelNotNil applies the NotNil predicate on the "StatusDel" field.
func StatusDelNotNil() predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusDel)))
	})
}

// DateCalRankEQ applies the EQ predicate on the "DateCalRank" field.
func DateCalRankEQ(v time.Time) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankNEQ applies the NEQ predicate on the "DateCalRank" field.
func DateCalRankNEQ(v time.Time) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankIn applies the In predicate on the "DateCalRank" field.
func DateCalRankIn(vs ...time.Time) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateCalRank), v...))
	})
}

// DateCalRankNotIn applies the NotIn predicate on the "DateCalRank" field.
func DateCalRankNotIn(vs ...time.Time) predicate.Watchlisthistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateCalRank), v...))
	})
}

// DateCalRankGT applies the GT predicate on the "DateCalRank" field.
func DateCalRankGT(v time.Time) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankGTE applies the GTE predicate on the "DateCalRank" field.
func DateCalRankGTE(v time.Time) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankLT applies the LT predicate on the "DateCalRank" field.
func DateCalRankLT(v time.Time) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankLTE applies the LTE predicate on the "DateCalRank" field.
func DateCalRankLTE(v time.Time) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankIsNil applies the IsNil predicate on the "DateCalRank" field.
func DateCalRankIsNil() predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateCalRank)))
	})
}

// DateCalRankNotNil applies the NotNil predicate on the "DateCalRank" field.
func DateCalRankNotNil() predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateCalRank)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Watchlisthistory) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Watchlisthistory) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Watchlisthistory) predicate.Watchlisthistory {
	return predicate.Watchlisthistory(func(s *sql.Selector) {
		p(s.Not())
	})
}
