// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/pointcsv"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PointcsvUpdate is the builder for updating Pointcsv entities.
type PointcsvUpdate struct {
	config
	hooks    []Hook
	mutation *PointcsvMutation
}

// Where adds a new predicate for the PointcsvUpdate builder.
func (pu *PointcsvUpdate) Where(ps ...predicate.Pointcsv) *PointcsvUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetWalletID sets the "WalletID" field.
func (pu *PointcsvUpdate) SetWalletID(s string) *PointcsvUpdate {
	pu.mutation.SetWalletID(s)
	return pu
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (pu *PointcsvUpdate) SetNillableWalletID(s *string) *PointcsvUpdate {
	if s != nil {
		pu.SetWalletID(*s)
	}
	return pu
}

// ClearWalletID clears the value of the "WalletID" field.
func (pu *PointcsvUpdate) ClearWalletID() *PointcsvUpdate {
	pu.mutation.ClearWalletID()
	return pu
}

// SetCreateDate sets the "CreateDate" field.
func (pu *PointcsvUpdate) SetCreateDate(t time.Time) *PointcsvUpdate {
	pu.mutation.SetCreateDate(t)
	return pu
}

// SetNillableCreateDate sets the "CreateDate" field if the given value is not nil.
func (pu *PointcsvUpdate) SetNillableCreateDate(t *time.Time) *PointcsvUpdate {
	if t != nil {
		pu.SetCreateDate(*t)
	}
	return pu
}

// ClearCreateDate clears the value of the "CreateDate" field.
func (pu *PointcsvUpdate) ClearCreateDate() *PointcsvUpdate {
	pu.mutation.ClearCreateDate()
	return pu
}

// SetAdjustamount sets the "Adjustamount" field.
func (pu *PointcsvUpdate) SetAdjustamount(i int) *PointcsvUpdate {
	pu.mutation.ResetAdjustamount()
	pu.mutation.SetAdjustamount(i)
	return pu
}

// SetNillableAdjustamount sets the "Adjustamount" field if the given value is not nil.
func (pu *PointcsvUpdate) SetNillableAdjustamount(i *int) *PointcsvUpdate {
	if i != nil {
		pu.SetAdjustamount(*i)
	}
	return pu
}

// AddAdjustamount adds i to the "Adjustamount" field.
func (pu *PointcsvUpdate) AddAdjustamount(i int) *PointcsvUpdate {
	pu.mutation.AddAdjustamount(i)
	return pu
}

// ClearAdjustamount clears the value of the "Adjustamount" field.
func (pu *PointcsvUpdate) ClearAdjustamount() *PointcsvUpdate {
	pu.mutation.ClearAdjustamount()
	return pu
}

// SetNote sets the "Note" field.
func (pu *PointcsvUpdate) SetNote(s string) *PointcsvUpdate {
	pu.mutation.SetNote(s)
	return pu
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (pu *PointcsvUpdate) SetNillableNote(s *string) *PointcsvUpdate {
	if s != nil {
		pu.SetNote(*s)
	}
	return pu
}

// ClearNote clears the value of the "Note" field.
func (pu *PointcsvUpdate) ClearNote() *PointcsvUpdate {
	pu.mutation.ClearNote()
	return pu
}

// SetPointTranDate sets the "PointTranDate" field.
func (pu *PointcsvUpdate) SetPointTranDate(t time.Time) *PointcsvUpdate {
	pu.mutation.SetPointTranDate(t)
	return pu
}

// SetNillablePointTranDate sets the "PointTranDate" field if the given value is not nil.
func (pu *PointcsvUpdate) SetNillablePointTranDate(t *time.Time) *PointcsvUpdate {
	if t != nil {
		pu.SetPointTranDate(*t)
	}
	return pu
}

// ClearPointTranDate clears the value of the "PointTranDate" field.
func (pu *PointcsvUpdate) ClearPointTranDate() *PointcsvUpdate {
	pu.mutation.ClearPointTranDate()
	return pu
}

// SetActionExport sets the "ActionExport" field.
func (pu *PointcsvUpdate) SetActionExport(i int) *PointcsvUpdate {
	pu.mutation.ResetActionExport()
	pu.mutation.SetActionExport(i)
	return pu
}

// SetNillableActionExport sets the "ActionExport" field if the given value is not nil.
func (pu *PointcsvUpdate) SetNillableActionExport(i *int) *PointcsvUpdate {
	if i != nil {
		pu.SetActionExport(*i)
	}
	return pu
}

// AddActionExport adds i to the "ActionExport" field.
func (pu *PointcsvUpdate) AddActionExport(i int) *PointcsvUpdate {
	pu.mutation.AddActionExport(i)
	return pu
}

// ClearActionExport clears the value of the "ActionExport" field.
func (pu *PointcsvUpdate) ClearActionExport() *PointcsvUpdate {
	pu.mutation.ClearActionExport()
	return pu
}

// Mutation returns the PointcsvMutation object of the builder.
func (pu *PointcsvUpdate) Mutation() *PointcsvMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PointcsvUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointcsvMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PointcsvUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PointcsvUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PointcsvUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PointcsvUpdate) check() error {
	if v, ok := pu.mutation.WalletID(); ok {
		if err := pointcsv.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Note(); ok {
		if err := pointcsv.NoteValidator(v); err != nil {
			return &ValidationError{Name: "Note", err: fmt.Errorf("ent: validator failed for field \"Note\": %w", err)}
		}
	}
	return nil
}

func (pu *PointcsvUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pointcsv.Table,
			Columns: pointcsv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointcsv.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointcsv.FieldWalletID,
		})
	}
	if pu.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointcsv.FieldWalletID,
		})
	}
	if value, ok := pu.mutation.CreateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointcsv.FieldCreateDate,
		})
	}
	if pu.mutation.CreateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointcsv.FieldCreateDate,
		})
	}
	if value, ok := pu.mutation.Adjustamount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointcsv.FieldAdjustamount,
		})
	}
	if value, ok := pu.mutation.AddedAdjustamount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointcsv.FieldAdjustamount,
		})
	}
	if pu.mutation.AdjustamountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointcsv.FieldAdjustamount,
		})
	}
	if value, ok := pu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointcsv.FieldNote,
		})
	}
	if pu.mutation.NoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointcsv.FieldNote,
		})
	}
	if value, ok := pu.mutation.PointTranDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointcsv.FieldPointTranDate,
		})
	}
	if pu.mutation.PointTranDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointcsv.FieldPointTranDate,
		})
	}
	if value, ok := pu.mutation.ActionExport(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointcsv.FieldActionExport,
		})
	}
	if value, ok := pu.mutation.AddedActionExport(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointcsv.FieldActionExport,
		})
	}
	if pu.mutation.ActionExportCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointcsv.FieldActionExport,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointcsv.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PointcsvUpdateOne is the builder for updating a single Pointcsv entity.
type PointcsvUpdateOne struct {
	config
	hooks    []Hook
	mutation *PointcsvMutation
}

// SetWalletID sets the "WalletID" field.
func (puo *PointcsvUpdateOne) SetWalletID(s string) *PointcsvUpdateOne {
	puo.mutation.SetWalletID(s)
	return puo
}

// SetNillableWalletID sets the "WalletID" field if the given value is not nil.
func (puo *PointcsvUpdateOne) SetNillableWalletID(s *string) *PointcsvUpdateOne {
	if s != nil {
		puo.SetWalletID(*s)
	}
	return puo
}

// ClearWalletID clears the value of the "WalletID" field.
func (puo *PointcsvUpdateOne) ClearWalletID() *PointcsvUpdateOne {
	puo.mutation.ClearWalletID()
	return puo
}

// SetCreateDate sets the "CreateDate" field.
func (puo *PointcsvUpdateOne) SetCreateDate(t time.Time) *PointcsvUpdateOne {
	puo.mutation.SetCreateDate(t)
	return puo
}

// SetNillableCreateDate sets the "CreateDate" field if the given value is not nil.
func (puo *PointcsvUpdateOne) SetNillableCreateDate(t *time.Time) *PointcsvUpdateOne {
	if t != nil {
		puo.SetCreateDate(*t)
	}
	return puo
}

// ClearCreateDate clears the value of the "CreateDate" field.
func (puo *PointcsvUpdateOne) ClearCreateDate() *PointcsvUpdateOne {
	puo.mutation.ClearCreateDate()
	return puo
}

// SetAdjustamount sets the "Adjustamount" field.
func (puo *PointcsvUpdateOne) SetAdjustamount(i int) *PointcsvUpdateOne {
	puo.mutation.ResetAdjustamount()
	puo.mutation.SetAdjustamount(i)
	return puo
}

// SetNillableAdjustamount sets the "Adjustamount" field if the given value is not nil.
func (puo *PointcsvUpdateOne) SetNillableAdjustamount(i *int) *PointcsvUpdateOne {
	if i != nil {
		puo.SetAdjustamount(*i)
	}
	return puo
}

// AddAdjustamount adds i to the "Adjustamount" field.
func (puo *PointcsvUpdateOne) AddAdjustamount(i int) *PointcsvUpdateOne {
	puo.mutation.AddAdjustamount(i)
	return puo
}

// ClearAdjustamount clears the value of the "Adjustamount" field.
func (puo *PointcsvUpdateOne) ClearAdjustamount() *PointcsvUpdateOne {
	puo.mutation.ClearAdjustamount()
	return puo
}

// SetNote sets the "Note" field.
func (puo *PointcsvUpdateOne) SetNote(s string) *PointcsvUpdateOne {
	puo.mutation.SetNote(s)
	return puo
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (puo *PointcsvUpdateOne) SetNillableNote(s *string) *PointcsvUpdateOne {
	if s != nil {
		puo.SetNote(*s)
	}
	return puo
}

// ClearNote clears the value of the "Note" field.
func (puo *PointcsvUpdateOne) ClearNote() *PointcsvUpdateOne {
	puo.mutation.ClearNote()
	return puo
}

// SetPointTranDate sets the "PointTranDate" field.
func (puo *PointcsvUpdateOne) SetPointTranDate(t time.Time) *PointcsvUpdateOne {
	puo.mutation.SetPointTranDate(t)
	return puo
}

// SetNillablePointTranDate sets the "PointTranDate" field if the given value is not nil.
func (puo *PointcsvUpdateOne) SetNillablePointTranDate(t *time.Time) *PointcsvUpdateOne {
	if t != nil {
		puo.SetPointTranDate(*t)
	}
	return puo
}

// ClearPointTranDate clears the value of the "PointTranDate" field.
func (puo *PointcsvUpdateOne) ClearPointTranDate() *PointcsvUpdateOne {
	puo.mutation.ClearPointTranDate()
	return puo
}

// SetActionExport sets the "ActionExport" field.
func (puo *PointcsvUpdateOne) SetActionExport(i int) *PointcsvUpdateOne {
	puo.mutation.ResetActionExport()
	puo.mutation.SetActionExport(i)
	return puo
}

// SetNillableActionExport sets the "ActionExport" field if the given value is not nil.
func (puo *PointcsvUpdateOne) SetNillableActionExport(i *int) *PointcsvUpdateOne {
	if i != nil {
		puo.SetActionExport(*i)
	}
	return puo
}

// AddActionExport adds i to the "ActionExport" field.
func (puo *PointcsvUpdateOne) AddActionExport(i int) *PointcsvUpdateOne {
	puo.mutation.AddActionExport(i)
	return puo
}

// ClearActionExport clears the value of the "ActionExport" field.
func (puo *PointcsvUpdateOne) ClearActionExport() *PointcsvUpdateOne {
	puo.mutation.ClearActionExport()
	return puo
}

// Mutation returns the PointcsvMutation object of the builder.
func (puo *PointcsvUpdateOne) Mutation() *PointcsvMutation {
	return puo.mutation
}

// Save executes the query and returns the updated Pointcsv entity.
func (puo *PointcsvUpdateOne) Save(ctx context.Context) (*Pointcsv, error) {
	var (
		err  error
		node *Pointcsv
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PointcsvMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PointcsvUpdateOne) SaveX(ctx context.Context) *Pointcsv {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PointcsvUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PointcsvUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PointcsvUpdateOne) check() error {
	if v, ok := puo.mutation.WalletID(); ok {
		if err := pointcsv.WalletIDValidator(v); err != nil {
			return &ValidationError{Name: "WalletID", err: fmt.Errorf("ent: validator failed for field \"WalletID\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Note(); ok {
		if err := pointcsv.NoteValidator(v); err != nil {
			return &ValidationError{Name: "Note", err: fmt.Errorf("ent: validator failed for field \"Note\": %w", err)}
		}
	}
	return nil
}

func (puo *PointcsvUpdateOne) sqlSave(ctx context.Context) (_node *Pointcsv, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pointcsv.Table,
			Columns: pointcsv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pointcsv.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pointcsv.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.WalletID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointcsv.FieldWalletID,
		})
	}
	if puo.mutation.WalletIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointcsv.FieldWalletID,
		})
	}
	if value, ok := puo.mutation.CreateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointcsv.FieldCreateDate,
		})
	}
	if puo.mutation.CreateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointcsv.FieldCreateDate,
		})
	}
	if value, ok := puo.mutation.Adjustamount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointcsv.FieldAdjustamount,
		})
	}
	if value, ok := puo.mutation.AddedAdjustamount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointcsv.FieldAdjustamount,
		})
	}
	if puo.mutation.AdjustamountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointcsv.FieldAdjustamount,
		})
	}
	if value, ok := puo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pointcsv.FieldNote,
		})
	}
	if puo.mutation.NoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pointcsv.FieldNote,
		})
	}
	if value, ok := puo.mutation.PointTranDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pointcsv.FieldPointTranDate,
		})
	}
	if puo.mutation.PointTranDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pointcsv.FieldPointTranDate,
		})
	}
	if value, ok := puo.mutation.ActionExport(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointcsv.FieldActionExport,
		})
	}
	if value, ok := puo.mutation.AddedActionExport(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pointcsv.FieldActionExport,
		})
	}
	if puo.mutation.ActionExportCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: pointcsv.FieldActionExport,
		})
	}
	_node = &Pointcsv{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointcsv.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
