// Code generated by entc, DO NOT EDIT.

package areahistory

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WalletID applies equality check predicate on the "WalletID" field. It's identical to WalletIDEQ.
func WalletID(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletID), v))
	})
}

// ProvinceNameTH applies equality check predicate on the "ProvinceNameTH" field. It's identical to ProvinceNameTHEQ.
func ProvinceNameTH(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvinceNameTH), v))
	})
}

// DistrictNameTH applies equality check predicate on the "DistrictNameTH" field. It's identical to DistrictNameTHEQ.
func DistrictNameTH(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictNameTH), v))
	})
}

// SubDistrict applies equality check predicate on the "SubDistrict" field. It's identical to SubDistrictEQ.
func SubDistrict(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubDistrict), v))
	})
}

// RankArea applies equality check predicate on the "RankArea" field. It's identical to RankAreaEQ.
func RankArea(v int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankArea), v))
	})
}

// DateCalRank applies equality check predicate on the "DateCalRank" field. It's identical to DateCalRankEQ.
func DateCalRank(v time.Time) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateCalRank), v))
	})
}

// WalletIDEQ applies the EQ predicate on the "WalletID" field.
func WalletIDEQ(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletID), v))
	})
}

// WalletIDNEQ applies the NEQ predicate on the "WalletID" field.
func WalletIDNEQ(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletID), v))
	})
}

// WalletIDIn applies the In predicate on the "WalletID" field.
func WalletIDIn(vs ...string) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalletID), v...))
	})
}

// WalletIDNotIn applies the NotIn predicate on the "WalletID" field.
func WalletIDNotIn(vs ...string) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalletID), v...))
	})
}

// WalletIDGT applies the GT predicate on the "WalletID" field.
func WalletIDGT(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletID), v))
	})
}

// WalletIDGTE applies the GTE predicate on the "WalletID" field.
func WalletIDGTE(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletID), v))
	})
}

// WalletIDLT applies the LT predicate on the "WalletID" field.
func WalletIDLT(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletID), v))
	})
}

// WalletIDLTE applies the LTE predicate on the "WalletID" field.
func WalletIDLTE(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletID), v))
	})
}

// WalletIDContains applies the Contains predicate on the "WalletID" field.
func WalletIDContains(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletID), v))
	})
}

// WalletIDHasPrefix applies the HasPrefix predicate on the "WalletID" field.
func WalletIDHasPrefix(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletID), v))
	})
}

// WalletIDHasSuffix applies the HasSuffix predicate on the "WalletID" field.
func WalletIDHasSuffix(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletID), v))
	})
}

// WalletIDEqualFold applies the EqualFold predicate on the "WalletID" field.
func WalletIDEqualFold(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletID), v))
	})
}

// WalletIDContainsFold applies the ContainsFold predicate on the "WalletID" field.
func WalletIDContainsFold(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletID), v))
	})
}

// ProvinceNameTHEQ applies the EQ predicate on the "ProvinceNameTH" field.
func ProvinceNameTHEQ(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHNEQ applies the NEQ predicate on the "ProvinceNameTH" field.
func ProvinceNameTHNEQ(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHIn applies the In predicate on the "ProvinceNameTH" field.
func ProvinceNameTHIn(vs ...string) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvinceNameTH), v...))
	})
}

// ProvinceNameTHNotIn applies the NotIn predicate on the "ProvinceNameTH" field.
func ProvinceNameTHNotIn(vs ...string) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvinceNameTH), v...))
	})
}

// ProvinceNameTHGT applies the GT predicate on the "ProvinceNameTH" field.
func ProvinceNameTHGT(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHGTE applies the GTE predicate on the "ProvinceNameTH" field.
func ProvinceNameTHGTE(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHLT applies the LT predicate on the "ProvinceNameTH" field.
func ProvinceNameTHLT(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHLTE applies the LTE predicate on the "ProvinceNameTH" field.
func ProvinceNameTHLTE(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHContains applies the Contains predicate on the "ProvinceNameTH" field.
func ProvinceNameTHContains(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHHasPrefix applies the HasPrefix predicate on the "ProvinceNameTH" field.
func ProvinceNameTHHasPrefix(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHHasSuffix applies the HasSuffix predicate on the "ProvinceNameTH" field.
func ProvinceNameTHHasSuffix(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHIsNil applies the IsNil predicate on the "ProvinceNameTH" field.
func ProvinceNameTHIsNil() predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProvinceNameTH)))
	})
}

// ProvinceNameTHNotNil applies the NotNil predicate on the "ProvinceNameTH" field.
func ProvinceNameTHNotNil() predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProvinceNameTH)))
	})
}

// ProvinceNameTHEqualFold applies the EqualFold predicate on the "ProvinceNameTH" field.
func ProvinceNameTHEqualFold(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHContainsFold applies the ContainsFold predicate on the "ProvinceNameTH" field.
func ProvinceNameTHContainsFold(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvinceNameTH), v))
	})
}

// DistrictNameTHEQ applies the EQ predicate on the "DistrictNameTH" field.
func DistrictNameTHEQ(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHNEQ applies the NEQ predicate on the "DistrictNameTH" field.
func DistrictNameTHNEQ(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHIn applies the In predicate on the "DistrictNameTH" field.
func DistrictNameTHIn(vs ...string) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrictNameTH), v...))
	})
}

// DistrictNameTHNotIn applies the NotIn predicate on the "DistrictNameTH" field.
func DistrictNameTHNotIn(vs ...string) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrictNameTH), v...))
	})
}

// DistrictNameTHGT applies the GT predicate on the "DistrictNameTH" field.
func DistrictNameTHGT(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHGTE applies the GTE predicate on the "DistrictNameTH" field.
func DistrictNameTHGTE(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHLT applies the LT predicate on the "DistrictNameTH" field.
func DistrictNameTHLT(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHLTE applies the LTE predicate on the "DistrictNameTH" field.
func DistrictNameTHLTE(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHContains applies the Contains predicate on the "DistrictNameTH" field.
func DistrictNameTHContains(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHHasPrefix applies the HasPrefix predicate on the "DistrictNameTH" field.
func DistrictNameTHHasPrefix(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHHasSuffix applies the HasSuffix predicate on the "DistrictNameTH" field.
func DistrictNameTHHasSuffix(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHIsNil applies the IsNil predicate on the "DistrictNameTH" field.
func DistrictNameTHIsNil() predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistrictNameTH)))
	})
}

// DistrictNameTHNotNil applies the NotNil predicate on the "DistrictNameTH" field.
func DistrictNameTHNotNil() predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistrictNameTH)))
	})
}

// DistrictNameTHEqualFold applies the EqualFold predicate on the "DistrictNameTH" field.
func DistrictNameTHEqualFold(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHContainsFold applies the ContainsFold predicate on the "DistrictNameTH" field.
func DistrictNameTHContainsFold(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrictNameTH), v))
	})
}

// SubDistrictEQ applies the EQ predicate on the "SubDistrict" field.
func SubDistrictEQ(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictNEQ applies the NEQ predicate on the "SubDistrict" field.
func SubDistrictNEQ(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictIn applies the In predicate on the "SubDistrict" field.
func SubDistrictIn(vs ...string) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubDistrict), v...))
	})
}

// SubDistrictNotIn applies the NotIn predicate on the "SubDistrict" field.
func SubDistrictNotIn(vs ...string) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubDistrict), v...))
	})
}

// SubDistrictGT applies the GT predicate on the "SubDistrict" field.
func SubDistrictGT(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictGTE applies the GTE predicate on the "SubDistrict" field.
func SubDistrictGTE(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictLT applies the LT predicate on the "SubDistrict" field.
func SubDistrictLT(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictLTE applies the LTE predicate on the "SubDistrict" field.
func SubDistrictLTE(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictContains applies the Contains predicate on the "SubDistrict" field.
func SubDistrictContains(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictHasPrefix applies the HasPrefix predicate on the "SubDistrict" field.
func SubDistrictHasPrefix(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictHasSuffix applies the HasSuffix predicate on the "SubDistrict" field.
func SubDistrictHasSuffix(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictIsNil applies the IsNil predicate on the "SubDistrict" field.
func SubDistrictIsNil() predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubDistrict)))
	})
}

// SubDistrictNotNil applies the NotNil predicate on the "SubDistrict" field.
func SubDistrictNotNil() predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubDistrict)))
	})
}

// SubDistrictEqualFold applies the EqualFold predicate on the "SubDistrict" field.
func SubDistrictEqualFold(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictContainsFold applies the ContainsFold predicate on the "SubDistrict" field.
func SubDistrictContainsFold(v string) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubDistrict), v))
	})
}

// RankAreaEQ applies the EQ predicate on the "RankArea" field.
func RankAreaEQ(v int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankArea), v))
	})
}

// RankAreaNEQ applies the NEQ predicate on the "RankArea" field.
func RankAreaNEQ(v int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRankArea), v))
	})
}

// RankAreaIn applies the In predicate on the "RankArea" field.
func RankAreaIn(vs ...int) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRankArea), v...))
	})
}

// RankAreaNotIn applies the NotIn predicate on the "RankArea" field.
func RankAreaNotIn(vs ...int) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRankArea), v...))
	})
}

// RankAreaGT applies the GT predicate on the "RankArea" field.
func RankAreaGT(v int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRankArea), v))
	})
}

// RankAreaGTE applies the GTE predicate on the "RankArea" field.
func RankAreaGTE(v int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRankArea), v))
	})
}

// RankAreaLT applies the LT predicate on the "RankArea" field.
func RankAreaLT(v int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRankArea), v))
	})
}

// RankAreaLTE applies the LTE predicate on the "RankArea" field.
func RankAreaLTE(v int) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRankArea), v))
	})
}

// RankAreaIsNil applies the IsNil predicate on the "RankArea" field.
func RankAreaIsNil() predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRankArea)))
	})
}

// RankAreaNotNil applies the NotNil predicate on the "RankArea" field.
func RankAreaNotNil() predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRankArea)))
	})
}

// DateCalRankEQ applies the EQ predicate on the "DateCalRank" field.
func DateCalRankEQ(v time.Time) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankNEQ applies the NEQ predicate on the "DateCalRank" field.
func DateCalRankNEQ(v time.Time) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankIn applies the In predicate on the "DateCalRank" field.
func DateCalRankIn(vs ...time.Time) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateCalRank), v...))
	})
}

// DateCalRankNotIn applies the NotIn predicate on the "DateCalRank" field.
func DateCalRankNotIn(vs ...time.Time) predicate.Areahistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Areahistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateCalRank), v...))
	})
}

// DateCalRankGT applies the GT predicate on the "DateCalRank" field.
func DateCalRankGT(v time.Time) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankGTE applies the GTE predicate on the "DateCalRank" field.
func DateCalRankGTE(v time.Time) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankLT applies the LT predicate on the "DateCalRank" field.
func DateCalRankLT(v time.Time) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankLTE applies the LTE predicate on the "DateCalRank" field.
func DateCalRankLTE(v time.Time) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateCalRank), v))
	})
}

// DateCalRankIsNil applies the IsNil predicate on the "DateCalRank" field.
func DateCalRankIsNil() predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateCalRank)))
	})
}

// DateCalRankNotNil applies the NotNil predicate on the "DateCalRank" field.
func DateCalRankNotNil() predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateCalRank)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Areahistory) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Areahistory) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Areahistory) predicate.Areahistory {
	return predicate.Areahistory(func(s *sql.Selector) {
		p(s.Not())
	})
}
