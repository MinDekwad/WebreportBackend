// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/loanbinding"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoanbindingUpdate is the builder for updating Loanbinding entities.
type LoanbindingUpdate struct {
	config
	hooks    []Hook
	mutation *LoanbindingMutation
}

// Where adds a new predicate for the LoanbindingUpdate builder.
func (lu *LoanbindingUpdate) Where(ps ...predicate.Loanbinding) *LoanbindingUpdate {
	lu.mutation.predicates = append(lu.mutation.predicates, ps...)
	return lu
}

// SetStatus sets the "Status" field.
func (lu *LoanbindingUpdate) SetStatus(s string) *LoanbindingUpdate {
	lu.mutation.SetStatus(s)
	return lu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (lu *LoanbindingUpdate) SetNillableStatus(s *string) *LoanbindingUpdate {
	if s != nil {
		lu.SetStatus(*s)
	}
	return lu
}

// ClearStatus clears the value of the "Status" field.
func (lu *LoanbindingUpdate) ClearStatus() *LoanbindingUpdate {
	lu.mutation.ClearStatus()
	return lu
}

// SetDateTime sets the "dateTime" field.
func (lu *LoanbindingUpdate) SetDateTime(t time.Time) *LoanbindingUpdate {
	lu.mutation.SetDateTime(t)
	return lu
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (lu *LoanbindingUpdate) SetNillableDateTime(t *time.Time) *LoanbindingUpdate {
	if t != nil {
		lu.SetDateTime(*t)
	}
	return lu
}

// ClearDateTime clears the value of the "dateTime" field.
func (lu *LoanbindingUpdate) ClearDateTime() *LoanbindingUpdate {
	lu.mutation.ClearDateTime()
	return lu
}

// SetWalletId sets the "WalletId" field.
func (lu *LoanbindingUpdate) SetWalletId(s string) *LoanbindingUpdate {
	lu.mutation.SetWalletId(s)
	return lu
}

// SetNillableWalletId sets the "WalletId" field if the given value is not nil.
func (lu *LoanbindingUpdate) SetNillableWalletId(s *string) *LoanbindingUpdate {
	if s != nil {
		lu.SetWalletId(*s)
	}
	return lu
}

// ClearWalletId clears the value of the "WalletId" field.
func (lu *LoanbindingUpdate) ClearWalletId() *LoanbindingUpdate {
	lu.mutation.ClearWalletId()
	return lu
}

// SetAccountReference sets the "AccountReference" field.
func (lu *LoanbindingUpdate) SetAccountReference(s string) *LoanbindingUpdate {
	lu.mutation.SetAccountReference(s)
	return lu
}

// SetNillableAccountReference sets the "AccountReference" field if the given value is not nil.
func (lu *LoanbindingUpdate) SetNillableAccountReference(s *string) *LoanbindingUpdate {
	if s != nil {
		lu.SetAccountReference(*s)
	}
	return lu
}

// ClearAccountReference clears the value of the "AccountReference" field.
func (lu *LoanbindingUpdate) ClearAccountReference() *LoanbindingUpdate {
	lu.mutation.ClearAccountReference()
	return lu
}

// SetLoanAccountNo sets the "LoanAccountNo" field.
func (lu *LoanbindingUpdate) SetLoanAccountNo(s string) *LoanbindingUpdate {
	lu.mutation.SetLoanAccountNo(s)
	return lu
}

// SetNillableLoanAccountNo sets the "LoanAccountNo" field if the given value is not nil.
func (lu *LoanbindingUpdate) SetNillableLoanAccountNo(s *string) *LoanbindingUpdate {
	if s != nil {
		lu.SetLoanAccountNo(*s)
	}
	return lu
}

// ClearLoanAccountNo clears the value of the "LoanAccountNo" field.
func (lu *LoanbindingUpdate) ClearLoanAccountNo() *LoanbindingUpdate {
	lu.mutation.ClearLoanAccountNo()
	return lu
}

// SetRequestDateTime sets the "RequestDateTime" field.
func (lu *LoanbindingUpdate) SetRequestDateTime(t time.Time) *LoanbindingUpdate {
	lu.mutation.SetRequestDateTime(t)
	return lu
}

// SetNillableRequestDateTime sets the "RequestDateTime" field if the given value is not nil.
func (lu *LoanbindingUpdate) SetNillableRequestDateTime(t *time.Time) *LoanbindingUpdate {
	if t != nil {
		lu.SetRequestDateTime(*t)
	}
	return lu
}

// ClearRequestDateTime clears the value of the "RequestDateTime" field.
func (lu *LoanbindingUpdate) ClearRequestDateTime() *LoanbindingUpdate {
	lu.mutation.ClearRequestDateTime()
	return lu
}

// SetFileimportID sets the "FileimportID" field.
func (lu *LoanbindingUpdate) SetFileimportID(i int) *LoanbindingUpdate {
	lu.mutation.ResetFileimportID()
	lu.mutation.SetFileimportID(i)
	return lu
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (lu *LoanbindingUpdate) SetNillableFileimportID(i *int) *LoanbindingUpdate {
	if i != nil {
		lu.SetFileimportID(*i)
	}
	return lu
}

// AddFileimportID adds i to the "FileimportID" field.
func (lu *LoanbindingUpdate) AddFileimportID(i int) *LoanbindingUpdate {
	lu.mutation.AddFileimportID(i)
	return lu
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (lu *LoanbindingUpdate) ClearFileimportID() *LoanbindingUpdate {
	lu.mutation.ClearFileimportID()
	return lu
}

// Mutation returns the LoanbindingMutation object of the builder.
func (lu *LoanbindingUpdate) Mutation() *LoanbindingMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LoanbindingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		if err = lu.check(); err != nil {
			return 0, err
		}
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoanbindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lu.check(); err != nil {
				return 0, err
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LoanbindingUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LoanbindingUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LoanbindingUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LoanbindingUpdate) check() error {
	if v, ok := lu.mutation.Status(); ok {
		if err := loanbinding.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := lu.mutation.WalletId(); ok {
		if err := loanbinding.WalletIdValidator(v); err != nil {
			return &ValidationError{Name: "WalletId", err: fmt.Errorf("ent: validator failed for field \"WalletId\": %w", err)}
		}
	}
	if v, ok := lu.mutation.AccountReference(); ok {
		if err := loanbinding.AccountReferenceValidator(v); err != nil {
			return &ValidationError{Name: "AccountReference", err: fmt.Errorf("ent: validator failed for field \"AccountReference\": %w", err)}
		}
	}
	if v, ok := lu.mutation.LoanAccountNo(); ok {
		if err := loanbinding.LoanAccountNoValidator(v); err != nil {
			return &ValidationError{Name: "LoanAccountNo", err: fmt.Errorf("ent: validator failed for field \"LoanAccountNo\": %w", err)}
		}
	}
	return nil
}

func (lu *LoanbindingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loanbinding.Table,
			Columns: loanbinding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: loanbinding.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldStatus,
		})
	}
	if lu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loanbinding.FieldStatus,
		})
	}
	if value, ok := lu.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loanbinding.FieldDateTime,
		})
	}
	if lu.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: loanbinding.FieldDateTime,
		})
	}
	if value, ok := lu.mutation.WalletId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldWalletId,
		})
	}
	if lu.mutation.WalletIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loanbinding.FieldWalletId,
		})
	}
	if value, ok := lu.mutation.AccountReference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldAccountReference,
		})
	}
	if lu.mutation.AccountReferenceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loanbinding.FieldAccountReference,
		})
	}
	if value, ok := lu.mutation.LoanAccountNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldLoanAccountNo,
		})
	}
	if lu.mutation.LoanAccountNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loanbinding.FieldLoanAccountNo,
		})
	}
	if value, ok := lu.mutation.RequestDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loanbinding.FieldRequestDateTime,
		})
	}
	if lu.mutation.RequestDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: loanbinding.FieldRequestDateTime,
		})
	}
	if value, ok := lu.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loanbinding.FieldFileimportID,
		})
	}
	if value, ok := lu.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loanbinding.FieldFileimportID,
		})
	}
	if lu.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: loanbinding.FieldFileimportID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loanbinding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LoanbindingUpdateOne is the builder for updating a single Loanbinding entity.
type LoanbindingUpdateOne struct {
	config
	hooks    []Hook
	mutation *LoanbindingMutation
}

// SetStatus sets the "Status" field.
func (luo *LoanbindingUpdateOne) SetStatus(s string) *LoanbindingUpdateOne {
	luo.mutation.SetStatus(s)
	return luo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (luo *LoanbindingUpdateOne) SetNillableStatus(s *string) *LoanbindingUpdateOne {
	if s != nil {
		luo.SetStatus(*s)
	}
	return luo
}

// ClearStatus clears the value of the "Status" field.
func (luo *LoanbindingUpdateOne) ClearStatus() *LoanbindingUpdateOne {
	luo.mutation.ClearStatus()
	return luo
}

// SetDateTime sets the "dateTime" field.
func (luo *LoanbindingUpdateOne) SetDateTime(t time.Time) *LoanbindingUpdateOne {
	luo.mutation.SetDateTime(t)
	return luo
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (luo *LoanbindingUpdateOne) SetNillableDateTime(t *time.Time) *LoanbindingUpdateOne {
	if t != nil {
		luo.SetDateTime(*t)
	}
	return luo
}

// ClearDateTime clears the value of the "dateTime" field.
func (luo *LoanbindingUpdateOne) ClearDateTime() *LoanbindingUpdateOne {
	luo.mutation.ClearDateTime()
	return luo
}

// SetWalletId sets the "WalletId" field.
func (luo *LoanbindingUpdateOne) SetWalletId(s string) *LoanbindingUpdateOne {
	luo.mutation.SetWalletId(s)
	return luo
}

// SetNillableWalletId sets the "WalletId" field if the given value is not nil.
func (luo *LoanbindingUpdateOne) SetNillableWalletId(s *string) *LoanbindingUpdateOne {
	if s != nil {
		luo.SetWalletId(*s)
	}
	return luo
}

// ClearWalletId clears the value of the "WalletId" field.
func (luo *LoanbindingUpdateOne) ClearWalletId() *LoanbindingUpdateOne {
	luo.mutation.ClearWalletId()
	return luo
}

// SetAccountReference sets the "AccountReference" field.
func (luo *LoanbindingUpdateOne) SetAccountReference(s string) *LoanbindingUpdateOne {
	luo.mutation.SetAccountReference(s)
	return luo
}

// SetNillableAccountReference sets the "AccountReference" field if the given value is not nil.
func (luo *LoanbindingUpdateOne) SetNillableAccountReference(s *string) *LoanbindingUpdateOne {
	if s != nil {
		luo.SetAccountReference(*s)
	}
	return luo
}

// ClearAccountReference clears the value of the "AccountReference" field.
func (luo *LoanbindingUpdateOne) ClearAccountReference() *LoanbindingUpdateOne {
	luo.mutation.ClearAccountReference()
	return luo
}

// SetLoanAccountNo sets the "LoanAccountNo" field.
func (luo *LoanbindingUpdateOne) SetLoanAccountNo(s string) *LoanbindingUpdateOne {
	luo.mutation.SetLoanAccountNo(s)
	return luo
}

// SetNillableLoanAccountNo sets the "LoanAccountNo" field if the given value is not nil.
func (luo *LoanbindingUpdateOne) SetNillableLoanAccountNo(s *string) *LoanbindingUpdateOne {
	if s != nil {
		luo.SetLoanAccountNo(*s)
	}
	return luo
}

// ClearLoanAccountNo clears the value of the "LoanAccountNo" field.
func (luo *LoanbindingUpdateOne) ClearLoanAccountNo() *LoanbindingUpdateOne {
	luo.mutation.ClearLoanAccountNo()
	return luo
}

// SetRequestDateTime sets the "RequestDateTime" field.
func (luo *LoanbindingUpdateOne) SetRequestDateTime(t time.Time) *LoanbindingUpdateOne {
	luo.mutation.SetRequestDateTime(t)
	return luo
}

// SetNillableRequestDateTime sets the "RequestDateTime" field if the given value is not nil.
func (luo *LoanbindingUpdateOne) SetNillableRequestDateTime(t *time.Time) *LoanbindingUpdateOne {
	if t != nil {
		luo.SetRequestDateTime(*t)
	}
	return luo
}

// ClearRequestDateTime clears the value of the "RequestDateTime" field.
func (luo *LoanbindingUpdateOne) ClearRequestDateTime() *LoanbindingUpdateOne {
	luo.mutation.ClearRequestDateTime()
	return luo
}

// SetFileimportID sets the "FileimportID" field.
func (luo *LoanbindingUpdateOne) SetFileimportID(i int) *LoanbindingUpdateOne {
	luo.mutation.ResetFileimportID()
	luo.mutation.SetFileimportID(i)
	return luo
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (luo *LoanbindingUpdateOne) SetNillableFileimportID(i *int) *LoanbindingUpdateOne {
	if i != nil {
		luo.SetFileimportID(*i)
	}
	return luo
}

// AddFileimportID adds i to the "FileimportID" field.
func (luo *LoanbindingUpdateOne) AddFileimportID(i int) *LoanbindingUpdateOne {
	luo.mutation.AddFileimportID(i)
	return luo
}

// ClearFileimportID clears the value of the "FileimportID" field.
func (luo *LoanbindingUpdateOne) ClearFileimportID() *LoanbindingUpdateOne {
	luo.mutation.ClearFileimportID()
	return luo
}

// Mutation returns the LoanbindingMutation object of the builder.
func (luo *LoanbindingUpdateOne) Mutation() *LoanbindingMutation {
	return luo.mutation
}

// Save executes the query and returns the updated Loanbinding entity.
func (luo *LoanbindingUpdateOne) Save(ctx context.Context) (*Loanbinding, error) {
	var (
		err  error
		node *Loanbinding
	)
	if len(luo.hooks) == 0 {
		if err = luo.check(); err != nil {
			return nil, err
		}
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoanbindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luo.check(); err != nil {
				return nil, err
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LoanbindingUpdateOne) SaveX(ctx context.Context) *Loanbinding {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LoanbindingUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LoanbindingUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LoanbindingUpdateOne) check() error {
	if v, ok := luo.mutation.Status(); ok {
		if err := loanbinding.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := luo.mutation.WalletId(); ok {
		if err := loanbinding.WalletIdValidator(v); err != nil {
			return &ValidationError{Name: "WalletId", err: fmt.Errorf("ent: validator failed for field \"WalletId\": %w", err)}
		}
	}
	if v, ok := luo.mutation.AccountReference(); ok {
		if err := loanbinding.AccountReferenceValidator(v); err != nil {
			return &ValidationError{Name: "AccountReference", err: fmt.Errorf("ent: validator failed for field \"AccountReference\": %w", err)}
		}
	}
	if v, ok := luo.mutation.LoanAccountNo(); ok {
		if err := loanbinding.LoanAccountNoValidator(v); err != nil {
			return &ValidationError{Name: "LoanAccountNo", err: fmt.Errorf("ent: validator failed for field \"LoanAccountNo\": %w", err)}
		}
	}
	return nil
}

func (luo *LoanbindingUpdateOne) sqlSave(ctx context.Context) (_node *Loanbinding, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loanbinding.Table,
			Columns: loanbinding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: loanbinding.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Loanbinding.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldStatus,
		})
	}
	if luo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loanbinding.FieldStatus,
		})
	}
	if value, ok := luo.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loanbinding.FieldDateTime,
		})
	}
	if luo.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: loanbinding.FieldDateTime,
		})
	}
	if value, ok := luo.mutation.WalletId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldWalletId,
		})
	}
	if luo.mutation.WalletIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loanbinding.FieldWalletId,
		})
	}
	if value, ok := luo.mutation.AccountReference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldAccountReference,
		})
	}
	if luo.mutation.AccountReferenceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loanbinding.FieldAccountReference,
		})
	}
	if value, ok := luo.mutation.LoanAccountNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loanbinding.FieldLoanAccountNo,
		})
	}
	if luo.mutation.LoanAccountNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: loanbinding.FieldLoanAccountNo,
		})
	}
	if value, ok := luo.mutation.RequestDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loanbinding.FieldRequestDateTime,
		})
	}
	if luo.mutation.RequestDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: loanbinding.FieldRequestDateTime,
		})
	}
	if value, ok := luo.mutation.FileimportID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loanbinding.FieldFileimportID,
		})
	}
	if value, ok := luo.mutation.AddedFileimportID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loanbinding.FieldFileimportID,
		})
	}
	if luo.mutation.FileimportIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: loanbinding.FieldFileimportID,
		})
	}
	_node = &Loanbinding{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loanbinding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
