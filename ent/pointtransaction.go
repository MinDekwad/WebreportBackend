// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/pointtransaction"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Pointtransaction is the model entity for the Pointtransaction schema.
type Pointtransaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "Date" field.
	Date time.Time `json:"Date,omitempty"`
	// WalletID holds the value of the "WalletID" field.
	WalletID string `json:"WalletID,omitempty"`
	// TransactionName holds the value of the "TransactionName" field.
	TransactionName string `json:"TransactionName,omitempty"`
	// Point holds the value of the "Point" field.
	Point int `json:"Point,omitempty"`
	// Reference holds the value of the "Reference" field.
	Reference string `json:"Reference,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pointtransaction) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pointtransaction.FieldID, pointtransaction.FieldPoint:
			values[i] = &sql.NullInt64{}
		case pointtransaction.FieldWalletID, pointtransaction.FieldTransactionName, pointtransaction.FieldReference:
			values[i] = &sql.NullString{}
		case pointtransaction.FieldDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pointtransaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pointtransaction fields.
func (po *Pointtransaction) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pointtransaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case pointtransaction.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Date", values[i])
			} else if value.Valid {
				po.Date = value.Time
			}
		case pointtransaction.FieldWalletID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WalletID", values[i])
			} else if value.Valid {
				po.WalletID = value.String
			}
		case pointtransaction.FieldTransactionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionName", values[i])
			} else if value.Valid {
				po.TransactionName = value.String
			}
		case pointtransaction.FieldPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Point", values[i])
			} else if value.Valid {
				po.Point = int(value.Int64)
			}
		case pointtransaction.FieldReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Reference", values[i])
			} else if value.Valid {
				po.Reference = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Pointtransaction.
// Note that you need to call Pointtransaction.Unwrap() before calling this method if this Pointtransaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Pointtransaction) Update() *PointtransactionUpdateOne {
	return (&PointtransactionClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Pointtransaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Pointtransaction) Unwrap() *Pointtransaction {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pointtransaction is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Pointtransaction) String() string {
	var builder strings.Builder
	builder.WriteString("Pointtransaction(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", Date=")
	builder.WriteString(po.Date.Format(time.ANSIC))
	builder.WriteString(", WalletID=")
	builder.WriteString(po.WalletID)
	builder.WriteString(", TransactionName=")
	builder.WriteString(po.TransactionName)
	builder.WriteString(", Point=")
	builder.WriteString(fmt.Sprintf("%v", po.Point))
	builder.WriteString(", Reference=")
	builder.WriteString(po.Reference)
	builder.WriteByte(')')
	return builder.String()
}

// Pointtransactions is a parsable slice of Pointtransaction.
type Pointtransactions []*Pointtransaction

func (po Pointtransactions) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
