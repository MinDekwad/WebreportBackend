// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/predicate"
	"go-api-report2/ent/reportwallettb"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReportwallettbUpdate is the builder for updating Reportwallettb entities.
type ReportwallettbUpdate struct {
	config
	hooks    []Hook
	mutation *ReportwallettbMutation
}

// Where adds a new predicate for the ReportwallettbUpdate builder.
func (ru *ReportwallettbUpdate) Where(ps ...predicate.Reportwallettb) *ReportwallettbUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetWalletid sets the "walletid" field.
func (ru *ReportwallettbUpdate) SetWalletid(s string) *ReportwallettbUpdate {
	ru.mutation.SetWalletid(s)
	return ru
}

// SetWalletTypeName sets the "WalletTypeName" field.
func (ru *ReportwallettbUpdate) SetWalletTypeName(s string) *ReportwallettbUpdate {
	ru.mutation.SetWalletTypeName(s)
	return ru
}

// SetNillableWalletTypeName sets the "WalletTypeName" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableWalletTypeName(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetWalletTypeName(*s)
	}
	return ru
}

// ClearWalletTypeName clears the value of the "WalletTypeName" field.
func (ru *ReportwallettbUpdate) ClearWalletTypeName() *ReportwallettbUpdate {
	ru.mutation.ClearWalletTypeName()
	return ru
}

// SetWalletPhoneno sets the "WalletPhoneno" field.
func (ru *ReportwallettbUpdate) SetWalletPhoneno(s string) *ReportwallettbUpdate {
	ru.mutation.SetWalletPhoneno(s)
	return ru
}

// SetNillableWalletPhoneno sets the "WalletPhoneno" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableWalletPhoneno(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetWalletPhoneno(*s)
	}
	return ru
}

// ClearWalletPhoneno clears the value of the "WalletPhoneno" field.
func (ru *ReportwallettbUpdate) ClearWalletPhoneno() *ReportwallettbUpdate {
	ru.mutation.ClearWalletPhoneno()
	return ru
}

// SetWalletName sets the "WalletName" field.
func (ru *ReportwallettbUpdate) SetWalletName(s string) *ReportwallettbUpdate {
	ru.mutation.SetWalletName(s)
	return ru
}

// SetNillableWalletName sets the "WalletName" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableWalletName(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetWalletName(*s)
	}
	return ru
}

// ClearWalletName clears the value of the "WalletName" field.
func (ru *ReportwallettbUpdate) ClearWalletName() *ReportwallettbUpdate {
	ru.mutation.ClearWalletName()
	return ru
}

// SetCitizenId sets the "CitizenId" field.
func (ru *ReportwallettbUpdate) SetCitizenId(s string) *ReportwallettbUpdate {
	ru.mutation.SetCitizenId(s)
	return ru
}

// SetNillableCitizenId sets the "CitizenId" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableCitizenId(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetCitizenId(*s)
	}
	return ru
}

// ClearCitizenId clears the value of the "CitizenId" field.
func (ru *ReportwallettbUpdate) ClearCitizenId() *ReportwallettbUpdate {
	ru.mutation.ClearCitizenId()
	return ru
}

// SetStatus sets the "Status" field.
func (ru *ReportwallettbUpdate) SetStatus(s string) *ReportwallettbUpdate {
	ru.mutation.SetStatus(s)
	return ru
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableStatus(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetStatus(*s)
	}
	return ru
}

// ClearStatus clears the value of the "Status" field.
func (ru *ReportwallettbUpdate) ClearStatus() *ReportwallettbUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// SetRegisterDate sets the "RegisterDate" field.
func (ru *ReportwallettbUpdate) SetRegisterDate(t time.Time) *ReportwallettbUpdate {
	ru.mutation.SetRegisterDate(t)
	return ru
}

// SetNillableRegisterDate sets the "RegisterDate" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableRegisterDate(t *time.Time) *ReportwallettbUpdate {
	if t != nil {
		ru.SetRegisterDate(*t)
	}
	return ru
}

// ClearRegisterDate clears the value of the "RegisterDate" field.
func (ru *ReportwallettbUpdate) ClearRegisterDate() *ReportwallettbUpdate {
	ru.mutation.ClearRegisterDate()
	return ru
}

// SetGroupUser sets the "GroupUser" field.
func (ru *ReportwallettbUpdate) SetGroupUser(i int) *ReportwallettbUpdate {
	ru.mutation.ResetGroupUser()
	ru.mutation.SetGroupUser(i)
	return ru
}

// SetNillableGroupUser sets the "GroupUser" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableGroupUser(i *int) *ReportwallettbUpdate {
	if i != nil {
		ru.SetGroupUser(*i)
	}
	return ru
}

// AddGroupUser adds i to the "GroupUser" field.
func (ru *ReportwallettbUpdate) AddGroupUser(i int) *ReportwallettbUpdate {
	ru.mutation.AddGroupUser(i)
	return ru
}

// ClearGroupUser clears the value of the "GroupUser" field.
func (ru *ReportwallettbUpdate) ClearGroupUser() *ReportwallettbUpdate {
	ru.mutation.ClearGroupUser()
	return ru
}

// SetUserAgent sets the "UserAgent" field.
func (ru *ReportwallettbUpdate) SetUserAgent(s string) *ReportwallettbUpdate {
	ru.mutation.SetUserAgent(s)
	return ru
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableUserAgent(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetUserAgent(*s)
	}
	return ru
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (ru *ReportwallettbUpdate) ClearUserAgent() *ReportwallettbUpdate {
	ru.mutation.ClearUserAgent()
	return ru
}

// SetKYCDate sets the "KYC_Date" field.
func (ru *ReportwallettbUpdate) SetKYCDate(t time.Time) *ReportwallettbUpdate {
	ru.mutation.SetKYCDate(t)
	return ru
}

// SetNillableKYCDate sets the "KYC_Date" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableKYCDate(t *time.Time) *ReportwallettbUpdate {
	if t != nil {
		ru.SetKYCDate(*t)
	}
	return ru
}

// ClearKYCDate clears the value of the "KYC_Date" field.
func (ru *ReportwallettbUpdate) ClearKYCDate() *ReportwallettbUpdate {
	ru.mutation.ClearKYCDate()
	return ru
}

// SetATMCard sets the "ATMCard" field.
func (ru *ReportwallettbUpdate) SetATMCard(s string) *ReportwallettbUpdate {
	ru.mutation.SetATMCard(s)
	return ru
}

// SetNillableATMCard sets the "ATMCard" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableATMCard(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetATMCard(*s)
	}
	return ru
}

// ClearATMCard clears the value of the "ATMCard" field.
func (ru *ReportwallettbUpdate) ClearATMCard() *ReportwallettbUpdate {
	ru.mutation.ClearATMCard()
	return ru
}

// SetAccountNo sets the "AccountNo" field.
func (ru *ReportwallettbUpdate) SetAccountNo(s string) *ReportwallettbUpdate {
	ru.mutation.SetAccountNo(s)
	return ru
}

// SetNillableAccountNo sets the "AccountNo" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableAccountNo(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetAccountNo(*s)
	}
	return ru
}

// ClearAccountNo clears the value of the "AccountNo" field.
func (ru *ReportwallettbUpdate) ClearAccountNo() *ReportwallettbUpdate {
	ru.mutation.ClearAccountNo()
	return ru
}

// SetAddressDetail sets the "AddressDetail" field.
func (ru *ReportwallettbUpdate) SetAddressDetail(s string) *ReportwallettbUpdate {
	ru.mutation.SetAddressDetail(s)
	return ru
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableAddressDetail(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetAddressDetail(*s)
	}
	return ru
}

// ClearAddressDetail clears the value of the "AddressDetail" field.
func (ru *ReportwallettbUpdate) ClearAddressDetail() *ReportwallettbUpdate {
	ru.mutation.ClearAddressDetail()
	return ru
}

// SetStreet sets the "Street" field.
func (ru *ReportwallettbUpdate) SetStreet(s string) *ReportwallettbUpdate {
	ru.mutation.SetStreet(s)
	return ru
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableStreet(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetStreet(*s)
	}
	return ru
}

// ClearStreet clears the value of the "Street" field.
func (ru *ReportwallettbUpdate) ClearStreet() *ReportwallettbUpdate {
	ru.mutation.ClearStreet()
	return ru
}

// SetDistrict sets the "District" field.
func (ru *ReportwallettbUpdate) SetDistrict(s string) *ReportwallettbUpdate {
	ru.mutation.SetDistrict(s)
	return ru
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableDistrict(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetDistrict(*s)
	}
	return ru
}

// ClearDistrict clears the value of the "District" field.
func (ru *ReportwallettbUpdate) ClearDistrict() *ReportwallettbUpdate {
	ru.mutation.ClearDistrict()
	return ru
}

// SetSubDistrict sets the "SubDistrict" field.
func (ru *ReportwallettbUpdate) SetSubDistrict(s string) *ReportwallettbUpdate {
	ru.mutation.SetSubDistrict(s)
	return ru
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableSubDistrict(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetSubDistrict(*s)
	}
	return ru
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (ru *ReportwallettbUpdate) ClearSubDistrict() *ReportwallettbUpdate {
	ru.mutation.ClearSubDistrict()
	return ru
}

// SetProvince sets the "Province" field.
func (ru *ReportwallettbUpdate) SetProvince(s string) *ReportwallettbUpdate {
	ru.mutation.SetProvince(s)
	return ru
}

// SetNillableProvince sets the "Province" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableProvince(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetProvince(*s)
	}
	return ru
}

// ClearProvince clears the value of the "Province" field.
func (ru *ReportwallettbUpdate) ClearProvince() *ReportwallettbUpdate {
	ru.mutation.ClearProvince()
	return ru
}

// SetPostalCode sets the "PostalCode" field.
func (ru *ReportwallettbUpdate) SetPostalCode(s string) *ReportwallettbUpdate {
	ru.mutation.SetPostalCode(s)
	return ru
}

// SetNillablePostalCode sets the "PostalCode" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillablePostalCode(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetPostalCode(*s)
	}
	return ru
}

// ClearPostalCode clears the value of the "PostalCode" field.
func (ru *ReportwallettbUpdate) ClearPostalCode() *ReportwallettbUpdate {
	ru.mutation.ClearPostalCode()
	return ru
}

// SetIsKYC sets the "isKYC" field.
func (ru *ReportwallettbUpdate) SetIsKYC(s string) *ReportwallettbUpdate {
	ru.mutation.SetIsKYC(s)
	return ru
}

// SetNillableIsKYC sets the "isKYC" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableIsKYC(s *string) *ReportwallettbUpdate {
	if s != nil {
		ru.SetIsKYC(*s)
	}
	return ru
}

// ClearIsKYC clears the value of the "isKYC" field.
func (ru *ReportwallettbUpdate) ClearIsKYC() *ReportwallettbUpdate {
	ru.mutation.ClearIsKYC()
	return ru
}

// SetUpdateDate sets the "UpdateDate" field.
func (ru *ReportwallettbUpdate) SetUpdateDate(t time.Time) *ReportwallettbUpdate {
	ru.mutation.SetUpdateDate(t)
	return ru
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (ru *ReportwallettbUpdate) SetNillableUpdateDate(t *time.Time) *ReportwallettbUpdate {
	if t != nil {
		ru.SetUpdateDate(*t)
	}
	return ru
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (ru *ReportwallettbUpdate) ClearUpdateDate() *ReportwallettbUpdate {
	ru.mutation.ClearUpdateDate()
	return ru
}

// Mutation returns the ReportwallettbMutation object of the builder.
func (ru *ReportwallettbUpdate) Mutation() *ReportwallettbMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReportwallettbUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportwallettbMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReportwallettbUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReportwallettbUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReportwallettbUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReportwallettbUpdate) check() error {
	if v, ok := ru.mutation.Walletid(); ok {
		if err := reportwallettb.WalletidValidator(v); err != nil {
			return &ValidationError{Name: "walletid", err: fmt.Errorf("ent: validator failed for field \"walletid\": %w", err)}
		}
	}
	if v, ok := ru.mutation.WalletTypeName(); ok {
		if err := reportwallettb.WalletTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletTypeName", err: fmt.Errorf("ent: validator failed for field \"WalletTypeName\": %w", err)}
		}
	}
	if v, ok := ru.mutation.WalletPhoneno(); ok {
		if err := reportwallettb.WalletPhonenoValidator(v); err != nil {
			return &ValidationError{Name: "WalletPhoneno", err: fmt.Errorf("ent: validator failed for field \"WalletPhoneno\": %w", err)}
		}
	}
	if v, ok := ru.mutation.WalletName(); ok {
		if err := reportwallettb.WalletNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletName", err: fmt.Errorf("ent: validator failed for field \"WalletName\": %w", err)}
		}
	}
	if v, ok := ru.mutation.CitizenId(); ok {
		if err := reportwallettb.CitizenIdValidator(v); err != nil {
			return &ValidationError{Name: "CitizenId", err: fmt.Errorf("ent: validator failed for field \"CitizenId\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Status(); ok {
		if err := reportwallettb.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := ru.mutation.UserAgent(); ok {
		if err := reportwallettb.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "UserAgent", err: fmt.Errorf("ent: validator failed for field \"UserAgent\": %w", err)}
		}
	}
	if v, ok := ru.mutation.ATMCard(); ok {
		if err := reportwallettb.ATMCardValidator(v); err != nil {
			return &ValidationError{Name: "ATMCard", err: fmt.Errorf("ent: validator failed for field \"ATMCard\": %w", err)}
		}
	}
	if v, ok := ru.mutation.AccountNo(); ok {
		if err := reportwallettb.AccountNoValidator(v); err != nil {
			return &ValidationError{Name: "AccountNo", err: fmt.Errorf("ent: validator failed for field \"AccountNo\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Province(); ok {
		if err := reportwallettb.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "Province", err: fmt.Errorf("ent: validator failed for field \"Province\": %w", err)}
		}
	}
	if v, ok := ru.mutation.PostalCode(); ok {
		if err := reportwallettb.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "PostalCode", err: fmt.Errorf("ent: validator failed for field \"PostalCode\": %w", err)}
		}
	}
	if v, ok := ru.mutation.IsKYC(); ok {
		if err := reportwallettb.IsKYCValidator(v); err != nil {
			return &ValidationError{Name: "isKYC", err: fmt.Errorf("ent: validator failed for field \"isKYC\": %w", err)}
		}
	}
	return nil
}

func (ru *ReportwallettbUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reportwallettb.Table,
			Columns: reportwallettb.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reportwallettb.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Walletid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletid,
		})
	}
	if value, ok := ru.mutation.WalletTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletTypeName,
		})
	}
	if ru.mutation.WalletTypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldWalletTypeName,
		})
	}
	if value, ok := ru.mutation.WalletPhoneno(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletPhoneno,
		})
	}
	if ru.mutation.WalletPhonenoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldWalletPhoneno,
		})
	}
	if value, ok := ru.mutation.WalletName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletName,
		})
	}
	if ru.mutation.WalletNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldWalletName,
		})
	}
	if value, ok := ru.mutation.CitizenId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldCitizenId,
		})
	}
	if ru.mutation.CitizenIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldCitizenId,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldStatus,
		})
	}
	if ru.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldStatus,
		})
	}
	if value, ok := ru.mutation.RegisterDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallettb.FieldRegisterDate,
		})
	}
	if ru.mutation.RegisterDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reportwallettb.FieldRegisterDate,
		})
	}
	if value, ok := ru.mutation.GroupUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reportwallettb.FieldGroupUser,
		})
	}
	if value, ok := ru.mutation.AddedGroupUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reportwallettb.FieldGroupUser,
		})
	}
	if ru.mutation.GroupUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: reportwallettb.FieldGroupUser,
		})
	}
	if value, ok := ru.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldUserAgent,
		})
	}
	if ru.mutation.UserAgentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldUserAgent,
		})
	}
	if value, ok := ru.mutation.KYCDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallettb.FieldKYCDate,
		})
	}
	if ru.mutation.KYCDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reportwallettb.FieldKYCDate,
		})
	}
	if value, ok := ru.mutation.ATMCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldATMCard,
		})
	}
	if ru.mutation.ATMCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldATMCard,
		})
	}
	if value, ok := ru.mutation.AccountNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldAccountNo,
		})
	}
	if ru.mutation.AccountNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldAccountNo,
		})
	}
	if value, ok := ru.mutation.AddressDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldAddressDetail,
		})
	}
	if ru.mutation.AddressDetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldAddressDetail,
		})
	}
	if value, ok := ru.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldStreet,
		})
	}
	if ru.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldStreet,
		})
	}
	if value, ok := ru.mutation.District(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldDistrict,
		})
	}
	if ru.mutation.DistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldDistrict,
		})
	}
	if value, ok := ru.mutation.SubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldSubDistrict,
		})
	}
	if ru.mutation.SubDistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldSubDistrict,
		})
	}
	if value, ok := ru.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldProvince,
		})
	}
	if ru.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldProvince,
		})
	}
	if value, ok := ru.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldPostalCode,
		})
	}
	if ru.mutation.PostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldPostalCode,
		})
	}
	if value, ok := ru.mutation.IsKYC(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldIsKYC,
		})
	}
	if ru.mutation.IsKYCCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldIsKYC,
		})
	}
	if value, ok := ru.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallettb.FieldUpdateDate,
		})
	}
	if ru.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reportwallettb.FieldUpdateDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportwallettb.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ReportwallettbUpdateOne is the builder for updating a single Reportwallettb entity.
type ReportwallettbUpdateOne struct {
	config
	hooks    []Hook
	mutation *ReportwallettbMutation
}

// SetWalletid sets the "walletid" field.
func (ruo *ReportwallettbUpdateOne) SetWalletid(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetWalletid(s)
	return ruo
}

// SetWalletTypeName sets the "WalletTypeName" field.
func (ruo *ReportwallettbUpdateOne) SetWalletTypeName(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetWalletTypeName(s)
	return ruo
}

// SetNillableWalletTypeName sets the "WalletTypeName" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableWalletTypeName(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetWalletTypeName(*s)
	}
	return ruo
}

// ClearWalletTypeName clears the value of the "WalletTypeName" field.
func (ruo *ReportwallettbUpdateOne) ClearWalletTypeName() *ReportwallettbUpdateOne {
	ruo.mutation.ClearWalletTypeName()
	return ruo
}

// SetWalletPhoneno sets the "WalletPhoneno" field.
func (ruo *ReportwallettbUpdateOne) SetWalletPhoneno(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetWalletPhoneno(s)
	return ruo
}

// SetNillableWalletPhoneno sets the "WalletPhoneno" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableWalletPhoneno(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetWalletPhoneno(*s)
	}
	return ruo
}

// ClearWalletPhoneno clears the value of the "WalletPhoneno" field.
func (ruo *ReportwallettbUpdateOne) ClearWalletPhoneno() *ReportwallettbUpdateOne {
	ruo.mutation.ClearWalletPhoneno()
	return ruo
}

// SetWalletName sets the "WalletName" field.
func (ruo *ReportwallettbUpdateOne) SetWalletName(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetWalletName(s)
	return ruo
}

// SetNillableWalletName sets the "WalletName" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableWalletName(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetWalletName(*s)
	}
	return ruo
}

// ClearWalletName clears the value of the "WalletName" field.
func (ruo *ReportwallettbUpdateOne) ClearWalletName() *ReportwallettbUpdateOne {
	ruo.mutation.ClearWalletName()
	return ruo
}

// SetCitizenId sets the "CitizenId" field.
func (ruo *ReportwallettbUpdateOne) SetCitizenId(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetCitizenId(s)
	return ruo
}

// SetNillableCitizenId sets the "CitizenId" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableCitizenId(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetCitizenId(*s)
	}
	return ruo
}

// ClearCitizenId clears the value of the "CitizenId" field.
func (ruo *ReportwallettbUpdateOne) ClearCitizenId() *ReportwallettbUpdateOne {
	ruo.mutation.ClearCitizenId()
	return ruo
}

// SetStatus sets the "Status" field.
func (ruo *ReportwallettbUpdateOne) SetStatus(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetStatus(s)
	return ruo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableStatus(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetStatus(*s)
	}
	return ruo
}

// ClearStatus clears the value of the "Status" field.
func (ruo *ReportwallettbUpdateOne) ClearStatus() *ReportwallettbUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// SetRegisterDate sets the "RegisterDate" field.
func (ruo *ReportwallettbUpdateOne) SetRegisterDate(t time.Time) *ReportwallettbUpdateOne {
	ruo.mutation.SetRegisterDate(t)
	return ruo
}

// SetNillableRegisterDate sets the "RegisterDate" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableRegisterDate(t *time.Time) *ReportwallettbUpdateOne {
	if t != nil {
		ruo.SetRegisterDate(*t)
	}
	return ruo
}

// ClearRegisterDate clears the value of the "RegisterDate" field.
func (ruo *ReportwallettbUpdateOne) ClearRegisterDate() *ReportwallettbUpdateOne {
	ruo.mutation.ClearRegisterDate()
	return ruo
}

// SetGroupUser sets the "GroupUser" field.
func (ruo *ReportwallettbUpdateOne) SetGroupUser(i int) *ReportwallettbUpdateOne {
	ruo.mutation.ResetGroupUser()
	ruo.mutation.SetGroupUser(i)
	return ruo
}

// SetNillableGroupUser sets the "GroupUser" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableGroupUser(i *int) *ReportwallettbUpdateOne {
	if i != nil {
		ruo.SetGroupUser(*i)
	}
	return ruo
}

// AddGroupUser adds i to the "GroupUser" field.
func (ruo *ReportwallettbUpdateOne) AddGroupUser(i int) *ReportwallettbUpdateOne {
	ruo.mutation.AddGroupUser(i)
	return ruo
}

// ClearGroupUser clears the value of the "GroupUser" field.
func (ruo *ReportwallettbUpdateOne) ClearGroupUser() *ReportwallettbUpdateOne {
	ruo.mutation.ClearGroupUser()
	return ruo
}

// SetUserAgent sets the "UserAgent" field.
func (ruo *ReportwallettbUpdateOne) SetUserAgent(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetUserAgent(s)
	return ruo
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableUserAgent(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetUserAgent(*s)
	}
	return ruo
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (ruo *ReportwallettbUpdateOne) ClearUserAgent() *ReportwallettbUpdateOne {
	ruo.mutation.ClearUserAgent()
	return ruo
}

// SetKYCDate sets the "KYC_Date" field.
func (ruo *ReportwallettbUpdateOne) SetKYCDate(t time.Time) *ReportwallettbUpdateOne {
	ruo.mutation.SetKYCDate(t)
	return ruo
}

// SetNillableKYCDate sets the "KYC_Date" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableKYCDate(t *time.Time) *ReportwallettbUpdateOne {
	if t != nil {
		ruo.SetKYCDate(*t)
	}
	return ruo
}

// ClearKYCDate clears the value of the "KYC_Date" field.
func (ruo *ReportwallettbUpdateOne) ClearKYCDate() *ReportwallettbUpdateOne {
	ruo.mutation.ClearKYCDate()
	return ruo
}

// SetATMCard sets the "ATMCard" field.
func (ruo *ReportwallettbUpdateOne) SetATMCard(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetATMCard(s)
	return ruo
}

// SetNillableATMCard sets the "ATMCard" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableATMCard(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetATMCard(*s)
	}
	return ruo
}

// ClearATMCard clears the value of the "ATMCard" field.
func (ruo *ReportwallettbUpdateOne) ClearATMCard() *ReportwallettbUpdateOne {
	ruo.mutation.ClearATMCard()
	return ruo
}

// SetAccountNo sets the "AccountNo" field.
func (ruo *ReportwallettbUpdateOne) SetAccountNo(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetAccountNo(s)
	return ruo
}

// SetNillableAccountNo sets the "AccountNo" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableAccountNo(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetAccountNo(*s)
	}
	return ruo
}

// ClearAccountNo clears the value of the "AccountNo" field.
func (ruo *ReportwallettbUpdateOne) ClearAccountNo() *ReportwallettbUpdateOne {
	ruo.mutation.ClearAccountNo()
	return ruo
}

// SetAddressDetail sets the "AddressDetail" field.
func (ruo *ReportwallettbUpdateOne) SetAddressDetail(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetAddressDetail(s)
	return ruo
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableAddressDetail(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetAddressDetail(*s)
	}
	return ruo
}

// ClearAddressDetail clears the value of the "AddressDetail" field.
func (ruo *ReportwallettbUpdateOne) ClearAddressDetail() *ReportwallettbUpdateOne {
	ruo.mutation.ClearAddressDetail()
	return ruo
}

// SetStreet sets the "Street" field.
func (ruo *ReportwallettbUpdateOne) SetStreet(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetStreet(s)
	return ruo
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableStreet(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetStreet(*s)
	}
	return ruo
}

// ClearStreet clears the value of the "Street" field.
func (ruo *ReportwallettbUpdateOne) ClearStreet() *ReportwallettbUpdateOne {
	ruo.mutation.ClearStreet()
	return ruo
}

// SetDistrict sets the "District" field.
func (ruo *ReportwallettbUpdateOne) SetDistrict(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetDistrict(s)
	return ruo
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableDistrict(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetDistrict(*s)
	}
	return ruo
}

// ClearDistrict clears the value of the "District" field.
func (ruo *ReportwallettbUpdateOne) ClearDistrict() *ReportwallettbUpdateOne {
	ruo.mutation.ClearDistrict()
	return ruo
}

// SetSubDistrict sets the "SubDistrict" field.
func (ruo *ReportwallettbUpdateOne) SetSubDistrict(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetSubDistrict(s)
	return ruo
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableSubDistrict(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetSubDistrict(*s)
	}
	return ruo
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (ruo *ReportwallettbUpdateOne) ClearSubDistrict() *ReportwallettbUpdateOne {
	ruo.mutation.ClearSubDistrict()
	return ruo
}

// SetProvince sets the "Province" field.
func (ruo *ReportwallettbUpdateOne) SetProvince(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetProvince(s)
	return ruo
}

// SetNillableProvince sets the "Province" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableProvince(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetProvince(*s)
	}
	return ruo
}

// ClearProvince clears the value of the "Province" field.
func (ruo *ReportwallettbUpdateOne) ClearProvince() *ReportwallettbUpdateOne {
	ruo.mutation.ClearProvince()
	return ruo
}

// SetPostalCode sets the "PostalCode" field.
func (ruo *ReportwallettbUpdateOne) SetPostalCode(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetPostalCode(s)
	return ruo
}

// SetNillablePostalCode sets the "PostalCode" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillablePostalCode(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetPostalCode(*s)
	}
	return ruo
}

// ClearPostalCode clears the value of the "PostalCode" field.
func (ruo *ReportwallettbUpdateOne) ClearPostalCode() *ReportwallettbUpdateOne {
	ruo.mutation.ClearPostalCode()
	return ruo
}

// SetIsKYC sets the "isKYC" field.
func (ruo *ReportwallettbUpdateOne) SetIsKYC(s string) *ReportwallettbUpdateOne {
	ruo.mutation.SetIsKYC(s)
	return ruo
}

// SetNillableIsKYC sets the "isKYC" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableIsKYC(s *string) *ReportwallettbUpdateOne {
	if s != nil {
		ruo.SetIsKYC(*s)
	}
	return ruo
}

// ClearIsKYC clears the value of the "isKYC" field.
func (ruo *ReportwallettbUpdateOne) ClearIsKYC() *ReportwallettbUpdateOne {
	ruo.mutation.ClearIsKYC()
	return ruo
}

// SetUpdateDate sets the "UpdateDate" field.
func (ruo *ReportwallettbUpdateOne) SetUpdateDate(t time.Time) *ReportwallettbUpdateOne {
	ruo.mutation.SetUpdateDate(t)
	return ruo
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (ruo *ReportwallettbUpdateOne) SetNillableUpdateDate(t *time.Time) *ReportwallettbUpdateOne {
	if t != nil {
		ruo.SetUpdateDate(*t)
	}
	return ruo
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (ruo *ReportwallettbUpdateOne) ClearUpdateDate() *ReportwallettbUpdateOne {
	ruo.mutation.ClearUpdateDate()
	return ruo
}

// Mutation returns the ReportwallettbMutation object of the builder.
func (ruo *ReportwallettbUpdateOne) Mutation() *ReportwallettbMutation {
	return ruo.mutation
}

// Save executes the query and returns the updated Reportwallettb entity.
func (ruo *ReportwallettbUpdateOne) Save(ctx context.Context) (*Reportwallettb, error) {
	var (
		err  error
		node *Reportwallettb
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportwallettbMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReportwallettbUpdateOne) SaveX(ctx context.Context) *Reportwallettb {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReportwallettbUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReportwallettbUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReportwallettbUpdateOne) check() error {
	if v, ok := ruo.mutation.Walletid(); ok {
		if err := reportwallettb.WalletidValidator(v); err != nil {
			return &ValidationError{Name: "walletid", err: fmt.Errorf("ent: validator failed for field \"walletid\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.WalletTypeName(); ok {
		if err := reportwallettb.WalletTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletTypeName", err: fmt.Errorf("ent: validator failed for field \"WalletTypeName\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.WalletPhoneno(); ok {
		if err := reportwallettb.WalletPhonenoValidator(v); err != nil {
			return &ValidationError{Name: "WalletPhoneno", err: fmt.Errorf("ent: validator failed for field \"WalletPhoneno\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.WalletName(); ok {
		if err := reportwallettb.WalletNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletName", err: fmt.Errorf("ent: validator failed for field \"WalletName\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.CitizenId(); ok {
		if err := reportwallettb.CitizenIdValidator(v); err != nil {
			return &ValidationError{Name: "CitizenId", err: fmt.Errorf("ent: validator failed for field \"CitizenId\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Status(); ok {
		if err := reportwallettb.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.UserAgent(); ok {
		if err := reportwallettb.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "UserAgent", err: fmt.Errorf("ent: validator failed for field \"UserAgent\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.ATMCard(); ok {
		if err := reportwallettb.ATMCardValidator(v); err != nil {
			return &ValidationError{Name: "ATMCard", err: fmt.Errorf("ent: validator failed for field \"ATMCard\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.AccountNo(); ok {
		if err := reportwallettb.AccountNoValidator(v); err != nil {
			return &ValidationError{Name: "AccountNo", err: fmt.Errorf("ent: validator failed for field \"AccountNo\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Province(); ok {
		if err := reportwallettb.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "Province", err: fmt.Errorf("ent: validator failed for field \"Province\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.PostalCode(); ok {
		if err := reportwallettb.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "PostalCode", err: fmt.Errorf("ent: validator failed for field \"PostalCode\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.IsKYC(); ok {
		if err := reportwallettb.IsKYCValidator(v); err != nil {
			return &ValidationError{Name: "isKYC", err: fmt.Errorf("ent: validator failed for field \"isKYC\": %w", err)}
		}
	}
	return nil
}

func (ruo *ReportwallettbUpdateOne) sqlSave(ctx context.Context) (_node *Reportwallettb, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reportwallettb.Table,
			Columns: reportwallettb.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reportwallettb.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Reportwallettb.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Walletid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletid,
		})
	}
	if value, ok := ruo.mutation.WalletTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletTypeName,
		})
	}
	if ruo.mutation.WalletTypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldWalletTypeName,
		})
	}
	if value, ok := ruo.mutation.WalletPhoneno(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletPhoneno,
		})
	}
	if ruo.mutation.WalletPhonenoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldWalletPhoneno,
		})
	}
	if value, ok := ruo.mutation.WalletName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldWalletName,
		})
	}
	if ruo.mutation.WalletNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldWalletName,
		})
	}
	if value, ok := ruo.mutation.CitizenId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldCitizenId,
		})
	}
	if ruo.mutation.CitizenIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldCitizenId,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldStatus,
		})
	}
	if ruo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.RegisterDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallettb.FieldRegisterDate,
		})
	}
	if ruo.mutation.RegisterDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reportwallettb.FieldRegisterDate,
		})
	}
	if value, ok := ruo.mutation.GroupUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reportwallettb.FieldGroupUser,
		})
	}
	if value, ok := ruo.mutation.AddedGroupUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reportwallettb.FieldGroupUser,
		})
	}
	if ruo.mutation.GroupUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: reportwallettb.FieldGroupUser,
		})
	}
	if value, ok := ruo.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldUserAgent,
		})
	}
	if ruo.mutation.UserAgentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldUserAgent,
		})
	}
	if value, ok := ruo.mutation.KYCDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallettb.FieldKYCDate,
		})
	}
	if ruo.mutation.KYCDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reportwallettb.FieldKYCDate,
		})
	}
	if value, ok := ruo.mutation.ATMCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldATMCard,
		})
	}
	if ruo.mutation.ATMCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldATMCard,
		})
	}
	if value, ok := ruo.mutation.AccountNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldAccountNo,
		})
	}
	if ruo.mutation.AccountNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldAccountNo,
		})
	}
	if value, ok := ruo.mutation.AddressDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldAddressDetail,
		})
	}
	if ruo.mutation.AddressDetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldAddressDetail,
		})
	}
	if value, ok := ruo.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldStreet,
		})
	}
	if ruo.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldStreet,
		})
	}
	if value, ok := ruo.mutation.District(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldDistrict,
		})
	}
	if ruo.mutation.DistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldDistrict,
		})
	}
	if value, ok := ruo.mutation.SubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldSubDistrict,
		})
	}
	if ruo.mutation.SubDistrictCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldSubDistrict,
		})
	}
	if value, ok := ruo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldProvince,
		})
	}
	if ruo.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldProvince,
		})
	}
	if value, ok := ruo.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldPostalCode,
		})
	}
	if ruo.mutation.PostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldPostalCode,
		})
	}
	if value, ok := ruo.mutation.IsKYC(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallettb.FieldIsKYC,
		})
	}
	if ruo.mutation.IsKYCCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reportwallettb.FieldIsKYC,
		})
	}
	if value, ok := ruo.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallettb.FieldUpdateDate,
		})
	}
	if ruo.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reportwallettb.FieldUpdateDate,
		})
	}
	_node = &Reportwallettb{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportwallettb.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
