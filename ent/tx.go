// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// Agentkyc is the client for interacting with the Agentkyc builders.
	Agentkyc *AgentkycClient
	// Agenttype is the client for interacting with the Agenttype builders.
	Agenttype *AgenttypeClient
	// Areahistory is the client for interacting with the Areahistory builders.
	Areahistory *AreahistoryClient
	// Bankdetail is the client for interacting with the Bankdetail builders.
	Bankdetail *BankdetailClient
	// Bulk is the client for interacting with the Bulk builders.
	Bulk *BulkClient
	// Configarea is the client for interacting with the Configarea builders.
	Configarea *ConfigareaClient
	// Configdatecalculaterank is the client for interacting with the Configdatecalculaterank builders.
	Configdatecalculaterank *ConfigdatecalculaterankClient
	// Configoccupation is the client for interacting with the Configoccupation builders.
	Configoccupation *ConfigoccupationClient
	// Configpoint is the client for interacting with the Configpoint builders.
	Configpoint *ConfigpointClient
	// Consumer is the client for interacting with the Consumer builders.
	Consumer *ConsumerClient
	// Fileimport is the client for interacting with the Fileimport builders.
	Fileimport *FileimportClient
	// Fileinsert is the client for interacting with the Fileinsert builders.
	Fileinsert *FileinsertClient
	// Limitpoint is the client for interacting with the Limitpoint builders.
	Limitpoint *LimitpointClient
	// Loanbinding is the client for interacting with the Loanbinding builders.
	Loanbinding *LoanbindingClient
	// Logexport is the client for interacting with the Logexport builders.
	Logexport *LogexportClient
	// MerchantTransaction is the client for interacting with the MerchantTransaction builders.
	MerchantTransaction *MerchantTransactionClient
	// Occupationhistory is the client for interacting with the Occupationhistory builders.
	Occupationhistory *OccupationhistoryClient
	// Pendingkyc is the client for interacting with the Pendingkyc builders.
	Pendingkyc *PendingkycClient
	// Pendingloanbinding is the client for interacting with the Pendingloanbinding builders.
	Pendingloanbinding *PendingloanbindingClient
	// Pointcsv is the client for interacting with the Pointcsv builders.
	Pointcsv *PointcsvClient
	// Pointkycrv is the client for interacting with the Pointkycrv builders.
	Pointkycrv *PointkycrvClient
	// Pointpendingkyctransaction is the client for interacting with the Pointpendingkyctransaction builders.
	Pointpendingkyctransaction *PointpendingkyctransactionClient
	// Pointpendinglbtransaction is the client for interacting with the Pointpendinglbtransaction builders.
	Pointpendinglbtransaction *PointpendinglbtransactionClient
	// Pointtransaction is the client for interacting with the Pointtransaction builders.
	Pointtransaction *PointtransactionClient
	// Ranking is the client for interacting with the Ranking builders.
	Ranking *RankingClient
	// ReportWallet is the client for interacting with the ReportWallet builders.
	ReportWallet *ReportWalletClient
	// Reportwallettb is the client for interacting with the Reportwallettb builders.
	Reportwallettb *ReportwallettbClient
	// StatementEndingBalanc is the client for interacting with the StatementEndingBalanc builders.
	StatementEndingBalanc *StatementEndingBalancClient
	// Transactionfactor is the client for interacting with the Transactionfactor builders.
	Transactionfactor *TransactionfactorClient
	// Transactionfactorhistory is the client for interacting with the Transactionfactorhistory builders.
	Transactionfactorhistory *TransactionfactorhistoryClient
	// Transactionfactoritem is the client for interacting with the Transactionfactoritem builders.
	Transactionfactoritem *TransactionfactoritemClient
	// Transactionfactoritemtmp is the client for interacting with the Transactionfactoritemtmp builders.
	Transactionfactoritemtmp *TransactionfactoritemtmpClient
	// Userprofile is the client for interacting with the Userprofile builders.
	Userprofile *UserprofileClient
	// Userwallet is the client for interacting with the Userwallet builders.
	Userwallet *UserwalletClient
	// Watchlist is the client for interacting with the Watchlist builders.
	Watchlist *WatchlistClient
	// Watchlisthistory is the client for interacting with the Watchlisthistory builders.
	Watchlisthistory *WatchlisthistoryClient
	// Watchlisttype is the client for interacting with the Watchlisttype builders.
	Watchlisttype *WatchlisttypeClient
	// Writelog is the client for interacting with the Writelog builders.
	Writelog *WritelogClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once

	// completion callbacks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook

	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Committer method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	tx.mu.Lock()
	hooks := append([]CommitHook(nil), tx.onCommit...)
	tx.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onCommit = append(tx.onCommit, f)
}

type (
	// Rollbacker is the interface that wraps the Rollbacker method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	tx.mu.Lock()
	hooks := append([]RollbackHook(nil), tx.onRollback...)
	tx.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onRollback = append(tx.onRollback, f)
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.Agentkyc = NewAgentkycClient(tx.config)
	tx.Agenttype = NewAgenttypeClient(tx.config)
	tx.Areahistory = NewAreahistoryClient(tx.config)
	tx.Bankdetail = NewBankdetailClient(tx.config)
	tx.Bulk = NewBulkClient(tx.config)
	tx.Configarea = NewConfigareaClient(tx.config)
	tx.Configdatecalculaterank = NewConfigdatecalculaterankClient(tx.config)
	tx.Configoccupation = NewConfigoccupationClient(tx.config)
	tx.Configpoint = NewConfigpointClient(tx.config)
	tx.Consumer = NewConsumerClient(tx.config)
	tx.Fileimport = NewFileimportClient(tx.config)
	tx.Fileinsert = NewFileinsertClient(tx.config)
	tx.Limitpoint = NewLimitpointClient(tx.config)
	tx.Loanbinding = NewLoanbindingClient(tx.config)
	tx.Logexport = NewLogexportClient(tx.config)
	tx.MerchantTransaction = NewMerchantTransactionClient(tx.config)
	tx.Occupationhistory = NewOccupationhistoryClient(tx.config)
	tx.Pendingkyc = NewPendingkycClient(tx.config)
	tx.Pendingloanbinding = NewPendingloanbindingClient(tx.config)
	tx.Pointcsv = NewPointcsvClient(tx.config)
	tx.Pointkycrv = NewPointkycrvClient(tx.config)
	tx.Pointpendingkyctransaction = NewPointpendingkyctransactionClient(tx.config)
	tx.Pointpendinglbtransaction = NewPointpendinglbtransactionClient(tx.config)
	tx.Pointtransaction = NewPointtransactionClient(tx.config)
	tx.Ranking = NewRankingClient(tx.config)
	tx.ReportWallet = NewReportWalletClient(tx.config)
	tx.Reportwallettb = NewReportwallettbClient(tx.config)
	tx.StatementEndingBalanc = NewStatementEndingBalancClient(tx.config)
	tx.Transactionfactor = NewTransactionfactorClient(tx.config)
	tx.Transactionfactorhistory = NewTransactionfactorhistoryClient(tx.config)
	tx.Transactionfactoritem = NewTransactionfactoritemClient(tx.config)
	tx.Transactionfactoritemtmp = NewTransactionfactoritemtmpClient(tx.config)
	tx.Userprofile = NewUserprofileClient(tx.config)
	tx.Userwallet = NewUserwalletClient(tx.config)
	tx.Watchlist = NewWatchlistClient(tx.config)
	tx.Watchlisthistory = NewWatchlisthistoryClient(tx.config)
	tx.Watchlisttype = NewWatchlisttypeClient(tx.config)
	tx.Writelog = NewWritelogClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: Agentkyc.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)
