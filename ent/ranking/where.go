// Code generated by entc, DO NOT EDIT.

package ranking

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WalletID applies equality check predicate on the "WalletID" field. It's identical to WalletIDEQ.
func WalletID(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletID), v))
	})
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// TaxID applies equality check predicate on the "TaxID" field. It's identical to TaxIDEQ.
func TaxID(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxID), v))
	})
}

// ProvinceNameTH applies equality check predicate on the "ProvinceNameTH" field. It's identical to ProvinceNameTHEQ.
func ProvinceNameTH(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvinceNameTH), v))
	})
}

// DistrictNameTH applies equality check predicate on the "DistrictNameTH" field. It's identical to DistrictNameTHEQ.
func DistrictNameTH(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameEN applies equality check predicate on the "DistrictNameEN" field. It's identical to DistrictNameENEQ.
func DistrictNameEN(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictNameEN), v))
	})
}

// OccupationName applies equality check predicate on the "OccupationName" field. It's identical to OccupationNameEQ.
func OccupationName(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOccupationName), v))
	})
}

// LastRank applies equality check predicate on the "LastRank" field. It's identical to LastRankEQ.
func LastRank(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastRank), v))
	})
}

// CurrentRank applies equality check predicate on the "CurrentRank" field. It's identical to CurrentRankEQ.
func CurrentRank(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentRank), v))
	})
}

// StatusRanking applies equality check predicate on the "StatusRanking" field. It's identical to StatusRankingEQ.
func StatusRanking(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusRanking), v))
	})
}

// LastDateCalRank applies equality check predicate on the "LastDateCalRank" field. It's identical to LastDateCalRankEQ.
func LastDateCalRank(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastDateCalRank), v))
	})
}

// NextDateCalRank applies equality check predicate on the "NextDateCalRank" field. It's identical to NextDateCalRankEQ.
func NextDateCalRank(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextDateCalRank), v))
	})
}

// StateCal applies equality check predicate on the "StateCal" field. It's identical to StateCalEQ.
func StateCal(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStateCal), v))
	})
}

// ZipCode applies equality check predicate on the "ZipCode" field. It's identical to ZipCodeEQ.
func ZipCode(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZipCode), v))
	})
}

// TransactionFactorRank applies equality check predicate on the "TransactionFactorRank" field. It's identical to TransactionFactorRankEQ.
func TransactionFactorRank(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionFactorRank), v))
	})
}

// RegisDate applies equality check predicate on the "RegisDate" field. It's identical to RegisDateEQ.
func RegisDate(v time.Time) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisDate), v))
	})
}

// SubDistrict applies equality check predicate on the "SubDistrict" field. It's identical to SubDistrictEQ.
func SubDistrict(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubDistrict), v))
	})
}

// Phoneno applies equality check predicate on the "Phoneno" field. It's identical to PhonenoEQ.
func Phoneno(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneno), v))
	})
}

// AddressDetail applies equality check predicate on the "AddressDetail" field. It's identical to AddressDetailEQ.
func AddressDetail(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddressDetail), v))
	})
}

// Street applies equality check predicate on the "Street" field. It's identical to StreetEQ.
func Street(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreet), v))
	})
}

// WalletIDEQ applies the EQ predicate on the "WalletID" field.
func WalletIDEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletID), v))
	})
}

// WalletIDNEQ applies the NEQ predicate on the "WalletID" field.
func WalletIDNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletID), v))
	})
}

// WalletIDIn applies the In predicate on the "WalletID" field.
func WalletIDIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWalletID), v...))
	})
}

// WalletIDNotIn applies the NotIn predicate on the "WalletID" field.
func WalletIDNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWalletID), v...))
	})
}

// WalletIDGT applies the GT predicate on the "WalletID" field.
func WalletIDGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletID), v))
	})
}

// WalletIDGTE applies the GTE predicate on the "WalletID" field.
func WalletIDGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletID), v))
	})
}

// WalletIDLT applies the LT predicate on the "WalletID" field.
func WalletIDLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletID), v))
	})
}

// WalletIDLTE applies the LTE predicate on the "WalletID" field.
func WalletIDLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletID), v))
	})
}

// WalletIDContains applies the Contains predicate on the "WalletID" field.
func WalletIDContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletID), v))
	})
}

// WalletIDHasPrefix applies the HasPrefix predicate on the "WalletID" field.
func WalletIDHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletID), v))
	})
}

// WalletIDHasSuffix applies the HasSuffix predicate on the "WalletID" field.
func WalletIDHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletID), v))
	})
}

// WalletIDEqualFold applies the EqualFold predicate on the "WalletID" field.
func WalletIDEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletID), v))
	})
}

// WalletIDContainsFold applies the ContainsFold predicate on the "WalletID" field.
func WalletIDContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletID), v))
	})
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "Name" field.
func NameIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "Name" field.
func NameNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TaxIDEQ applies the EQ predicate on the "TaxID" field.
func TaxIDEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxID), v))
	})
}

// TaxIDNEQ applies the NEQ predicate on the "TaxID" field.
func TaxIDNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxID), v))
	})
}

// TaxIDIn applies the In predicate on the "TaxID" field.
func TaxIDIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxID), v...))
	})
}

// TaxIDNotIn applies the NotIn predicate on the "TaxID" field.
func TaxIDNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxID), v...))
	})
}

// TaxIDGT applies the GT predicate on the "TaxID" field.
func TaxIDGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxID), v))
	})
}

// TaxIDGTE applies the GTE predicate on the "TaxID" field.
func TaxIDGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxID), v))
	})
}

// TaxIDLT applies the LT predicate on the "TaxID" field.
func TaxIDLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxID), v))
	})
}

// TaxIDLTE applies the LTE predicate on the "TaxID" field.
func TaxIDLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxID), v))
	})
}

// TaxIDContains applies the Contains predicate on the "TaxID" field.
func TaxIDContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaxID), v))
	})
}

// TaxIDHasPrefix applies the HasPrefix predicate on the "TaxID" field.
func TaxIDHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaxID), v))
	})
}

// TaxIDHasSuffix applies the HasSuffix predicate on the "TaxID" field.
func TaxIDHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaxID), v))
	})
}

// TaxIDIsNil applies the IsNil predicate on the "TaxID" field.
func TaxIDIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaxID)))
	})
}

// TaxIDNotNil applies the NotNil predicate on the "TaxID" field.
func TaxIDNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaxID)))
	})
}

// TaxIDEqualFold applies the EqualFold predicate on the "TaxID" field.
func TaxIDEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaxID), v))
	})
}

// TaxIDContainsFold applies the ContainsFold predicate on the "TaxID" field.
func TaxIDContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaxID), v))
	})
}

// ProvinceNameTHEQ applies the EQ predicate on the "ProvinceNameTH" field.
func ProvinceNameTHEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHNEQ applies the NEQ predicate on the "ProvinceNameTH" field.
func ProvinceNameTHNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHIn applies the In predicate on the "ProvinceNameTH" field.
func ProvinceNameTHIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvinceNameTH), v...))
	})
}

// ProvinceNameTHNotIn applies the NotIn predicate on the "ProvinceNameTH" field.
func ProvinceNameTHNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvinceNameTH), v...))
	})
}

// ProvinceNameTHGT applies the GT predicate on the "ProvinceNameTH" field.
func ProvinceNameTHGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHGTE applies the GTE predicate on the "ProvinceNameTH" field.
func ProvinceNameTHGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHLT applies the LT predicate on the "ProvinceNameTH" field.
func ProvinceNameTHLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHLTE applies the LTE predicate on the "ProvinceNameTH" field.
func ProvinceNameTHLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHContains applies the Contains predicate on the "ProvinceNameTH" field.
func ProvinceNameTHContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHHasPrefix applies the HasPrefix predicate on the "ProvinceNameTH" field.
func ProvinceNameTHHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHHasSuffix applies the HasSuffix predicate on the "ProvinceNameTH" field.
func ProvinceNameTHHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHIsNil applies the IsNil predicate on the "ProvinceNameTH" field.
func ProvinceNameTHIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProvinceNameTH)))
	})
}

// ProvinceNameTHNotNil applies the NotNil predicate on the "ProvinceNameTH" field.
func ProvinceNameTHNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProvinceNameTH)))
	})
}

// ProvinceNameTHEqualFold applies the EqualFold predicate on the "ProvinceNameTH" field.
func ProvinceNameTHEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvinceNameTH), v))
	})
}

// ProvinceNameTHContainsFold applies the ContainsFold predicate on the "ProvinceNameTH" field.
func ProvinceNameTHContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvinceNameTH), v))
	})
}

// DistrictNameTHEQ applies the EQ predicate on the "DistrictNameTH" field.
func DistrictNameTHEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHNEQ applies the NEQ predicate on the "DistrictNameTH" field.
func DistrictNameTHNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHIn applies the In predicate on the "DistrictNameTH" field.
func DistrictNameTHIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrictNameTH), v...))
	})
}

// DistrictNameTHNotIn applies the NotIn predicate on the "DistrictNameTH" field.
func DistrictNameTHNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrictNameTH), v...))
	})
}

// DistrictNameTHGT applies the GT predicate on the "DistrictNameTH" field.
func DistrictNameTHGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHGTE applies the GTE predicate on the "DistrictNameTH" field.
func DistrictNameTHGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHLT applies the LT predicate on the "DistrictNameTH" field.
func DistrictNameTHLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHLTE applies the LTE predicate on the "DistrictNameTH" field.
func DistrictNameTHLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHContains applies the Contains predicate on the "DistrictNameTH" field.
func DistrictNameTHContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHHasPrefix applies the HasPrefix predicate on the "DistrictNameTH" field.
func DistrictNameTHHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHHasSuffix applies the HasSuffix predicate on the "DistrictNameTH" field.
func DistrictNameTHHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHIsNil applies the IsNil predicate on the "DistrictNameTH" field.
func DistrictNameTHIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistrictNameTH)))
	})
}

// DistrictNameTHNotNil applies the NotNil predicate on the "DistrictNameTH" field.
func DistrictNameTHNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistrictNameTH)))
	})
}

// DistrictNameTHEqualFold applies the EqualFold predicate on the "DistrictNameTH" field.
func DistrictNameTHEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameTHContainsFold applies the ContainsFold predicate on the "DistrictNameTH" field.
func DistrictNameTHContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrictNameTH), v))
	})
}

// DistrictNameENEQ applies the EQ predicate on the "DistrictNameEN" field.
func DistrictNameENEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENNEQ applies the NEQ predicate on the "DistrictNameEN" field.
func DistrictNameENNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENIn applies the In predicate on the "DistrictNameEN" field.
func DistrictNameENIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrictNameEN), v...))
	})
}

// DistrictNameENNotIn applies the NotIn predicate on the "DistrictNameEN" field.
func DistrictNameENNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrictNameEN), v...))
	})
}

// DistrictNameENGT applies the GT predicate on the "DistrictNameEN" field.
func DistrictNameENGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENGTE applies the GTE predicate on the "DistrictNameEN" field.
func DistrictNameENGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENLT applies the LT predicate on the "DistrictNameEN" field.
func DistrictNameENLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENLTE applies the LTE predicate on the "DistrictNameEN" field.
func DistrictNameENLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENContains applies the Contains predicate on the "DistrictNameEN" field.
func DistrictNameENContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENHasPrefix applies the HasPrefix predicate on the "DistrictNameEN" field.
func DistrictNameENHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENHasSuffix applies the HasSuffix predicate on the "DistrictNameEN" field.
func DistrictNameENHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENIsNil applies the IsNil predicate on the "DistrictNameEN" field.
func DistrictNameENIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistrictNameEN)))
	})
}

// DistrictNameENNotNil applies the NotNil predicate on the "DistrictNameEN" field.
func DistrictNameENNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistrictNameEN)))
	})
}

// DistrictNameENEqualFold applies the EqualFold predicate on the "DistrictNameEN" field.
func DistrictNameENEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrictNameEN), v))
	})
}

// DistrictNameENContainsFold applies the ContainsFold predicate on the "DistrictNameEN" field.
func DistrictNameENContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrictNameEN), v))
	})
}

// OccupationNameEQ applies the EQ predicate on the "OccupationName" field.
func OccupationNameEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOccupationName), v))
	})
}

// OccupationNameNEQ applies the NEQ predicate on the "OccupationName" field.
func OccupationNameNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOccupationName), v))
	})
}

// OccupationNameIn applies the In predicate on the "OccupationName" field.
func OccupationNameIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOccupationName), v...))
	})
}

// OccupationNameNotIn applies the NotIn predicate on the "OccupationName" field.
func OccupationNameNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOccupationName), v...))
	})
}

// OccupationNameGT applies the GT predicate on the "OccupationName" field.
func OccupationNameGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOccupationName), v))
	})
}

// OccupationNameGTE applies the GTE predicate on the "OccupationName" field.
func OccupationNameGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOccupationName), v))
	})
}

// OccupationNameLT applies the LT predicate on the "OccupationName" field.
func OccupationNameLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOccupationName), v))
	})
}

// OccupationNameLTE applies the LTE predicate on the "OccupationName" field.
func OccupationNameLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOccupationName), v))
	})
}

// OccupationNameContains applies the Contains predicate on the "OccupationName" field.
func OccupationNameContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOccupationName), v))
	})
}

// OccupationNameHasPrefix applies the HasPrefix predicate on the "OccupationName" field.
func OccupationNameHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOccupationName), v))
	})
}

// OccupationNameHasSuffix applies the HasSuffix predicate on the "OccupationName" field.
func OccupationNameHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOccupationName), v))
	})
}

// OccupationNameIsNil applies the IsNil predicate on the "OccupationName" field.
func OccupationNameIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOccupationName)))
	})
}

// OccupationNameNotNil applies the NotNil predicate on the "OccupationName" field.
func OccupationNameNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOccupationName)))
	})
}

// OccupationNameEqualFold applies the EqualFold predicate on the "OccupationName" field.
func OccupationNameEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOccupationName), v))
	})
}

// OccupationNameContainsFold applies the ContainsFold predicate on the "OccupationName" field.
func OccupationNameContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOccupationName), v))
	})
}

// LastRankEQ applies the EQ predicate on the "LastRank" field.
func LastRankEQ(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastRank), v))
	})
}

// LastRankNEQ applies the NEQ predicate on the "LastRank" field.
func LastRankNEQ(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastRank), v))
	})
}

// LastRankIn applies the In predicate on the "LastRank" field.
func LastRankIn(vs ...int) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastRank), v...))
	})
}

// LastRankNotIn applies the NotIn predicate on the "LastRank" field.
func LastRankNotIn(vs ...int) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastRank), v...))
	})
}

// LastRankGT applies the GT predicate on the "LastRank" field.
func LastRankGT(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastRank), v))
	})
}

// LastRankGTE applies the GTE predicate on the "LastRank" field.
func LastRankGTE(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastRank), v))
	})
}

// LastRankLT applies the LT predicate on the "LastRank" field.
func LastRankLT(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastRank), v))
	})
}

// LastRankLTE applies the LTE predicate on the "LastRank" field.
func LastRankLTE(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastRank), v))
	})
}

// LastRankIsNil applies the IsNil predicate on the "LastRank" field.
func LastRankIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastRank)))
	})
}

// LastRankNotNil applies the NotNil predicate on the "LastRank" field.
func LastRankNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastRank)))
	})
}

// CurrentRankEQ applies the EQ predicate on the "CurrentRank" field.
func CurrentRankEQ(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentRank), v))
	})
}

// CurrentRankNEQ applies the NEQ predicate on the "CurrentRank" field.
func CurrentRankNEQ(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentRank), v))
	})
}

// CurrentRankIn applies the In predicate on the "CurrentRank" field.
func CurrentRankIn(vs ...int) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrentRank), v...))
	})
}

// CurrentRankNotIn applies the NotIn predicate on the "CurrentRank" field.
func CurrentRankNotIn(vs ...int) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrentRank), v...))
	})
}

// CurrentRankGT applies the GT predicate on the "CurrentRank" field.
func CurrentRankGT(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentRank), v))
	})
}

// CurrentRankGTE applies the GTE predicate on the "CurrentRank" field.
func CurrentRankGTE(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentRank), v))
	})
}

// CurrentRankLT applies the LT predicate on the "CurrentRank" field.
func CurrentRankLT(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentRank), v))
	})
}

// CurrentRankLTE applies the LTE predicate on the "CurrentRank" field.
func CurrentRankLTE(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentRank), v))
	})
}

// CurrentRankIsNil applies the IsNil predicate on the "CurrentRank" field.
func CurrentRankIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrentRank)))
	})
}

// CurrentRankNotNil applies the NotNil predicate on the "CurrentRank" field.
func CurrentRankNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrentRank)))
	})
}

// StatusRankingEQ applies the EQ predicate on the "StatusRanking" field.
func StatusRankingEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusRanking), v))
	})
}

// StatusRankingNEQ applies the NEQ predicate on the "StatusRanking" field.
func StatusRankingNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusRanking), v))
	})
}

// StatusRankingIn applies the In predicate on the "StatusRanking" field.
func StatusRankingIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusRanking), v...))
	})
}

// StatusRankingNotIn applies the NotIn predicate on the "StatusRanking" field.
func StatusRankingNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusRanking), v...))
	})
}

// StatusRankingGT applies the GT predicate on the "StatusRanking" field.
func StatusRankingGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusRanking), v))
	})
}

// StatusRankingGTE applies the GTE predicate on the "StatusRanking" field.
func StatusRankingGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusRanking), v))
	})
}

// StatusRankingLT applies the LT predicate on the "StatusRanking" field.
func StatusRankingLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusRanking), v))
	})
}

// StatusRankingLTE applies the LTE predicate on the "StatusRanking" field.
func StatusRankingLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusRanking), v))
	})
}

// StatusRankingContains applies the Contains predicate on the "StatusRanking" field.
func StatusRankingContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatusRanking), v))
	})
}

// StatusRankingHasPrefix applies the HasPrefix predicate on the "StatusRanking" field.
func StatusRankingHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatusRanking), v))
	})
}

// StatusRankingHasSuffix applies the HasSuffix predicate on the "StatusRanking" field.
func StatusRankingHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatusRanking), v))
	})
}

// StatusRankingIsNil applies the IsNil predicate on the "StatusRanking" field.
func StatusRankingIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusRanking)))
	})
}

// StatusRankingNotNil applies the NotNil predicate on the "StatusRanking" field.
func StatusRankingNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusRanking)))
	})
}

// StatusRankingEqualFold applies the EqualFold predicate on the "StatusRanking" field.
func StatusRankingEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatusRanking), v))
	})
}

// StatusRankingContainsFold applies the ContainsFold predicate on the "StatusRanking" field.
func StatusRankingContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatusRanking), v))
	})
}

// LastDateCalRankEQ applies the EQ predicate on the "LastDateCalRank" field.
func LastDateCalRankEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastDateCalRank), v))
	})
}

// LastDateCalRankNEQ applies the NEQ predicate on the "LastDateCalRank" field.
func LastDateCalRankNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastDateCalRank), v))
	})
}

// LastDateCalRankIn applies the In predicate on the "LastDateCalRank" field.
func LastDateCalRankIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastDateCalRank), v...))
	})
}

// LastDateCalRankNotIn applies the NotIn predicate on the "LastDateCalRank" field.
func LastDateCalRankNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastDateCalRank), v...))
	})
}

// LastDateCalRankGT applies the GT predicate on the "LastDateCalRank" field.
func LastDateCalRankGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastDateCalRank), v))
	})
}

// LastDateCalRankGTE applies the GTE predicate on the "LastDateCalRank" field.
func LastDateCalRankGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastDateCalRank), v))
	})
}

// LastDateCalRankLT applies the LT predicate on the "LastDateCalRank" field.
func LastDateCalRankLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastDateCalRank), v))
	})
}

// LastDateCalRankLTE applies the LTE predicate on the "LastDateCalRank" field.
func LastDateCalRankLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastDateCalRank), v))
	})
}

// LastDateCalRankContains applies the Contains predicate on the "LastDateCalRank" field.
func LastDateCalRankContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastDateCalRank), v))
	})
}

// LastDateCalRankHasPrefix applies the HasPrefix predicate on the "LastDateCalRank" field.
func LastDateCalRankHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastDateCalRank), v))
	})
}

// LastDateCalRankHasSuffix applies the HasSuffix predicate on the "LastDateCalRank" field.
func LastDateCalRankHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastDateCalRank), v))
	})
}

// LastDateCalRankIsNil applies the IsNil predicate on the "LastDateCalRank" field.
func LastDateCalRankIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastDateCalRank)))
	})
}

// LastDateCalRankNotNil applies the NotNil predicate on the "LastDateCalRank" field.
func LastDateCalRankNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastDateCalRank)))
	})
}

// LastDateCalRankEqualFold applies the EqualFold predicate on the "LastDateCalRank" field.
func LastDateCalRankEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastDateCalRank), v))
	})
}

// LastDateCalRankContainsFold applies the ContainsFold predicate on the "LastDateCalRank" field.
func LastDateCalRankContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastDateCalRank), v))
	})
}

// NextDateCalRankEQ applies the EQ predicate on the "NextDateCalRank" field.
func NextDateCalRankEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextDateCalRank), v))
	})
}

// NextDateCalRankNEQ applies the NEQ predicate on the "NextDateCalRank" field.
func NextDateCalRankNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNextDateCalRank), v))
	})
}

// NextDateCalRankIn applies the In predicate on the "NextDateCalRank" field.
func NextDateCalRankIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNextDateCalRank), v...))
	})
}

// NextDateCalRankNotIn applies the NotIn predicate on the "NextDateCalRank" field.
func NextDateCalRankNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNextDateCalRank), v...))
	})
}

// NextDateCalRankGT applies the GT predicate on the "NextDateCalRank" field.
func NextDateCalRankGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNextDateCalRank), v))
	})
}

// NextDateCalRankGTE applies the GTE predicate on the "NextDateCalRank" field.
func NextDateCalRankGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNextDateCalRank), v))
	})
}

// NextDateCalRankLT applies the LT predicate on the "NextDateCalRank" field.
func NextDateCalRankLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNextDateCalRank), v))
	})
}

// NextDateCalRankLTE applies the LTE predicate on the "NextDateCalRank" field.
func NextDateCalRankLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNextDateCalRank), v))
	})
}

// NextDateCalRankContains applies the Contains predicate on the "NextDateCalRank" field.
func NextDateCalRankContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNextDateCalRank), v))
	})
}

// NextDateCalRankHasPrefix applies the HasPrefix predicate on the "NextDateCalRank" field.
func NextDateCalRankHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNextDateCalRank), v))
	})
}

// NextDateCalRankHasSuffix applies the HasSuffix predicate on the "NextDateCalRank" field.
func NextDateCalRankHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNextDateCalRank), v))
	})
}

// NextDateCalRankIsNil applies the IsNil predicate on the "NextDateCalRank" field.
func NextDateCalRankIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNextDateCalRank)))
	})
}

// NextDateCalRankNotNil applies the NotNil predicate on the "NextDateCalRank" field.
func NextDateCalRankNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNextDateCalRank)))
	})
}

// NextDateCalRankEqualFold applies the EqualFold predicate on the "NextDateCalRank" field.
func NextDateCalRankEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNextDateCalRank), v))
	})
}

// NextDateCalRankContainsFold applies the ContainsFold predicate on the "NextDateCalRank" field.
func NextDateCalRankContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNextDateCalRank), v))
	})
}

// StateCalEQ applies the EQ predicate on the "StateCal" field.
func StateCalEQ(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStateCal), v))
	})
}

// StateCalNEQ applies the NEQ predicate on the "StateCal" field.
func StateCalNEQ(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStateCal), v))
	})
}

// StateCalIn applies the In predicate on the "StateCal" field.
func StateCalIn(vs ...int) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStateCal), v...))
	})
}

// StateCalNotIn applies the NotIn predicate on the "StateCal" field.
func StateCalNotIn(vs ...int) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStateCal), v...))
	})
}

// StateCalGT applies the GT predicate on the "StateCal" field.
func StateCalGT(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStateCal), v))
	})
}

// StateCalGTE applies the GTE predicate on the "StateCal" field.
func StateCalGTE(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStateCal), v))
	})
}

// StateCalLT applies the LT predicate on the "StateCal" field.
func StateCalLT(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStateCal), v))
	})
}

// StateCalLTE applies the LTE predicate on the "StateCal" field.
func StateCalLTE(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStateCal), v))
	})
}

// StateCalIsNil applies the IsNil predicate on the "StateCal" field.
func StateCalIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStateCal)))
	})
}

// StateCalNotNil applies the NotNil predicate on the "StateCal" field.
func StateCalNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStateCal)))
	})
}

// ZipCodeEQ applies the EQ predicate on the "ZipCode" field.
func ZipCodeEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZipCode), v))
	})
}

// ZipCodeNEQ applies the NEQ predicate on the "ZipCode" field.
func ZipCodeNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZipCode), v))
	})
}

// ZipCodeIn applies the In predicate on the "ZipCode" field.
func ZipCodeIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldZipCode), v...))
	})
}

// ZipCodeNotIn applies the NotIn predicate on the "ZipCode" field.
func ZipCodeNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldZipCode), v...))
	})
}

// ZipCodeGT applies the GT predicate on the "ZipCode" field.
func ZipCodeGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldZipCode), v))
	})
}

// ZipCodeGTE applies the GTE predicate on the "ZipCode" field.
func ZipCodeGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldZipCode), v))
	})
}

// ZipCodeLT applies the LT predicate on the "ZipCode" field.
func ZipCodeLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldZipCode), v))
	})
}

// ZipCodeLTE applies the LTE predicate on the "ZipCode" field.
func ZipCodeLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldZipCode), v))
	})
}

// ZipCodeContains applies the Contains predicate on the "ZipCode" field.
func ZipCodeContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldZipCode), v))
	})
}

// ZipCodeHasPrefix applies the HasPrefix predicate on the "ZipCode" field.
func ZipCodeHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldZipCode), v))
	})
}

// ZipCodeHasSuffix applies the HasSuffix predicate on the "ZipCode" field.
func ZipCodeHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldZipCode), v))
	})
}

// ZipCodeIsNil applies the IsNil predicate on the "ZipCode" field.
func ZipCodeIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldZipCode)))
	})
}

// ZipCodeNotNil applies the NotNil predicate on the "ZipCode" field.
func ZipCodeNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldZipCode)))
	})
}

// ZipCodeEqualFold applies the EqualFold predicate on the "ZipCode" field.
func ZipCodeEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldZipCode), v))
	})
}

// ZipCodeContainsFold applies the ContainsFold predicate on the "ZipCode" field.
func ZipCodeContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldZipCode), v))
	})
}

// TransactionFactorRankEQ applies the EQ predicate on the "TransactionFactorRank" field.
func TransactionFactorRankEQ(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionFactorRank), v))
	})
}

// TransactionFactorRankNEQ applies the NEQ predicate on the "TransactionFactorRank" field.
func TransactionFactorRankNEQ(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionFactorRank), v))
	})
}

// TransactionFactorRankIn applies the In predicate on the "TransactionFactorRank" field.
func TransactionFactorRankIn(vs ...int) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransactionFactorRank), v...))
	})
}

// TransactionFactorRankNotIn applies the NotIn predicate on the "TransactionFactorRank" field.
func TransactionFactorRankNotIn(vs ...int) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransactionFactorRank), v...))
	})
}

// TransactionFactorRankGT applies the GT predicate on the "TransactionFactorRank" field.
func TransactionFactorRankGT(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionFactorRank), v))
	})
}

// TransactionFactorRankGTE applies the GTE predicate on the "TransactionFactorRank" field.
func TransactionFactorRankGTE(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionFactorRank), v))
	})
}

// TransactionFactorRankLT applies the LT predicate on the "TransactionFactorRank" field.
func TransactionFactorRankLT(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionFactorRank), v))
	})
}

// TransactionFactorRankLTE applies the LTE predicate on the "TransactionFactorRank" field.
func TransactionFactorRankLTE(v int) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionFactorRank), v))
	})
}

// TransactionFactorRankIsNil applies the IsNil predicate on the "TransactionFactorRank" field.
func TransactionFactorRankIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransactionFactorRank)))
	})
}

// TransactionFactorRankNotNil applies the NotNil predicate on the "TransactionFactorRank" field.
func TransactionFactorRankNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransactionFactorRank)))
	})
}

// RegisDateEQ applies the EQ predicate on the "RegisDate" field.
func RegisDateEQ(v time.Time) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisDate), v))
	})
}

// RegisDateNEQ applies the NEQ predicate on the "RegisDate" field.
func RegisDateNEQ(v time.Time) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegisDate), v))
	})
}

// RegisDateIn applies the In predicate on the "RegisDate" field.
func RegisDateIn(vs ...time.Time) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegisDate), v...))
	})
}

// RegisDateNotIn applies the NotIn predicate on the "RegisDate" field.
func RegisDateNotIn(vs ...time.Time) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegisDate), v...))
	})
}

// RegisDateGT applies the GT predicate on the "RegisDate" field.
func RegisDateGT(v time.Time) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegisDate), v))
	})
}

// RegisDateGTE applies the GTE predicate on the "RegisDate" field.
func RegisDateGTE(v time.Time) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegisDate), v))
	})
}

// RegisDateLT applies the LT predicate on the "RegisDate" field.
func RegisDateLT(v time.Time) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegisDate), v))
	})
}

// RegisDateLTE applies the LTE predicate on the "RegisDate" field.
func RegisDateLTE(v time.Time) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegisDate), v))
	})
}

// RegisDateIsNil applies the IsNil predicate on the "RegisDate" field.
func RegisDateIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRegisDate)))
	})
}

// RegisDateNotNil applies the NotNil predicate on the "RegisDate" field.
func RegisDateNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRegisDate)))
	})
}

// SubDistrictEQ applies the EQ predicate on the "SubDistrict" field.
func SubDistrictEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictNEQ applies the NEQ predicate on the "SubDistrict" field.
func SubDistrictNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictIn applies the In predicate on the "SubDistrict" field.
func SubDistrictIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubDistrict), v...))
	})
}

// SubDistrictNotIn applies the NotIn predicate on the "SubDistrict" field.
func SubDistrictNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubDistrict), v...))
	})
}

// SubDistrictGT applies the GT predicate on the "SubDistrict" field.
func SubDistrictGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictGTE applies the GTE predicate on the "SubDistrict" field.
func SubDistrictGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictLT applies the LT predicate on the "SubDistrict" field.
func SubDistrictLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictLTE applies the LTE predicate on the "SubDistrict" field.
func SubDistrictLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictContains applies the Contains predicate on the "SubDistrict" field.
func SubDistrictContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictHasPrefix applies the HasPrefix predicate on the "SubDistrict" field.
func SubDistrictHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictHasSuffix applies the HasSuffix predicate on the "SubDistrict" field.
func SubDistrictHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictIsNil applies the IsNil predicate on the "SubDistrict" field.
func SubDistrictIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubDistrict)))
	})
}

// SubDistrictNotNil applies the NotNil predicate on the "SubDistrict" field.
func SubDistrictNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubDistrict)))
	})
}

// SubDistrictEqualFold applies the EqualFold predicate on the "SubDistrict" field.
func SubDistrictEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubDistrict), v))
	})
}

// SubDistrictContainsFold applies the ContainsFold predicate on the "SubDistrict" field.
func SubDistrictContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubDistrict), v))
	})
}

// PhonenoEQ applies the EQ predicate on the "Phoneno" field.
func PhonenoEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneno), v))
	})
}

// PhonenoNEQ applies the NEQ predicate on the "Phoneno" field.
func PhonenoNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneno), v))
	})
}

// PhonenoIn applies the In predicate on the "Phoneno" field.
func PhonenoIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhoneno), v...))
	})
}

// PhonenoNotIn applies the NotIn predicate on the "Phoneno" field.
func PhonenoNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhoneno), v...))
	})
}

// PhonenoGT applies the GT predicate on the "Phoneno" field.
func PhonenoGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneno), v))
	})
}

// PhonenoGTE applies the GTE predicate on the "Phoneno" field.
func PhonenoGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneno), v))
	})
}

// PhonenoLT applies the LT predicate on the "Phoneno" field.
func PhonenoLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneno), v))
	})
}

// PhonenoLTE applies the LTE predicate on the "Phoneno" field.
func PhonenoLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneno), v))
	})
}

// PhonenoContains applies the Contains predicate on the "Phoneno" field.
func PhonenoContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoneno), v))
	})
}

// PhonenoHasPrefix applies the HasPrefix predicate on the "Phoneno" field.
func PhonenoHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoneno), v))
	})
}

// PhonenoHasSuffix applies the HasSuffix predicate on the "Phoneno" field.
func PhonenoHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoneno), v))
	})
}

// PhonenoIsNil applies the IsNil predicate on the "Phoneno" field.
func PhonenoIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhoneno)))
	})
}

// PhonenoNotNil applies the NotNil predicate on the "Phoneno" field.
func PhonenoNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhoneno)))
	})
}

// PhonenoEqualFold applies the EqualFold predicate on the "Phoneno" field.
func PhonenoEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoneno), v))
	})
}

// PhonenoContainsFold applies the ContainsFold predicate on the "Phoneno" field.
func PhonenoContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoneno), v))
	})
}

// AddressDetailEQ applies the EQ predicate on the "AddressDetail" field.
func AddressDetailEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailNEQ applies the NEQ predicate on the "AddressDetail" field.
func AddressDetailNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailIn applies the In predicate on the "AddressDetail" field.
func AddressDetailIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddressDetail), v...))
	})
}

// AddressDetailNotIn applies the NotIn predicate on the "AddressDetail" field.
func AddressDetailNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddressDetail), v...))
	})
}

// AddressDetailGT applies the GT predicate on the "AddressDetail" field.
func AddressDetailGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailGTE applies the GTE predicate on the "AddressDetail" field.
func AddressDetailGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailLT applies the LT predicate on the "AddressDetail" field.
func AddressDetailLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailLTE applies the LTE predicate on the "AddressDetail" field.
func AddressDetailLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailContains applies the Contains predicate on the "AddressDetail" field.
func AddressDetailContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailHasPrefix applies the HasPrefix predicate on the "AddressDetail" field.
func AddressDetailHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailHasSuffix applies the HasSuffix predicate on the "AddressDetail" field.
func AddressDetailHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailIsNil applies the IsNil predicate on the "AddressDetail" field.
func AddressDetailIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddressDetail)))
	})
}

// AddressDetailNotNil applies the NotNil predicate on the "AddressDetail" field.
func AddressDetailNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddressDetail)))
	})
}

// AddressDetailEqualFold applies the EqualFold predicate on the "AddressDetail" field.
func AddressDetailEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddressDetail), v))
	})
}

// AddressDetailContainsFold applies the ContainsFold predicate on the "AddressDetail" field.
func AddressDetailContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddressDetail), v))
	})
}

// StreetEQ applies the EQ predicate on the "Street" field.
func StreetEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreet), v))
	})
}

// StreetNEQ applies the NEQ predicate on the "Street" field.
func StreetNEQ(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStreet), v))
	})
}

// StreetIn applies the In predicate on the "Street" field.
func StreetIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStreet), v...))
	})
}

// StreetNotIn applies the NotIn predicate on the "Street" field.
func StreetNotIn(vs ...string) predicate.Ranking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ranking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStreet), v...))
	})
}

// StreetGT applies the GT predicate on the "Street" field.
func StreetGT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStreet), v))
	})
}

// StreetGTE applies the GTE predicate on the "Street" field.
func StreetGTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStreet), v))
	})
}

// StreetLT applies the LT predicate on the "Street" field.
func StreetLT(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStreet), v))
	})
}

// StreetLTE applies the LTE predicate on the "Street" field.
func StreetLTE(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStreet), v))
	})
}

// StreetContains applies the Contains predicate on the "Street" field.
func StreetContains(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStreet), v))
	})
}

// StreetHasPrefix applies the HasPrefix predicate on the "Street" field.
func StreetHasPrefix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStreet), v))
	})
}

// StreetHasSuffix applies the HasSuffix predicate on the "Street" field.
func StreetHasSuffix(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStreet), v))
	})
}

// StreetIsNil applies the IsNil predicate on the "Street" field.
func StreetIsNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStreet)))
	})
}

// StreetNotNil applies the NotNil predicate on the "Street" field.
func StreetNotNil() predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStreet)))
	})
}

// StreetEqualFold applies the EqualFold predicate on the "Street" field.
func StreetEqualFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStreet), v))
	})
}

// StreetContainsFold applies the ContainsFold predicate on the "Street" field.
func StreetContainsFold(v string) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStreet), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ranking) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ranking) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ranking) predicate.Ranking {
	return predicate.Ranking(func(s *sql.Selector) {
		p(s.Not())
	})
}
