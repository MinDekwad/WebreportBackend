// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/configpoint"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Configpoint is the model entity for the Configpoint schema.
type Configpoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TransactionName holds the value of the "TransactionName" field.
	TransactionName string `json:"TransactionName,omitempty"`
	// TransactionType holds the value of the "TransactionType" field.
	TransactionType *string `json:"TransactionType,omitempty"`
	// PaymentChannel holds the value of the "PaymentChannel" field.
	PaymentChannel *string `json:"PaymentChannel,omitempty"`
	// PaymentType holds the value of the "PaymentType" field.
	PaymentType *string `json:"PaymentType,omitempty"`
	// DummyWallet holds the value of the "DummyWallet" field.
	DummyWallet *string `json:"DummyWallet,omitempty"`
	// Amount holds the value of the "Amount" field.
	Amount int `json:"Amount,omitempty"`
	// Point holds the value of the "Point" field.
	Point int `json:"Point,omitempty"`
	// Expire holds the value of the "Expire" field.
	Expire int `json:"Expire,omitempty"`
	// UpdateDate holds the value of the "UpdateDate" field.
	UpdateDate time.Time `json:"UpdateDate,omitempty"`
	// ExpireDate holds the value of the "ExpireDate" field.
	ExpireDate time.Time `json:"ExpireDate,omitempty"`
	// StatusTransaction holds the value of the "StatusTransaction" field.
	StatusTransaction *string `json:"StatusTransaction,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Configpoint) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case configpoint.FieldID, configpoint.FieldAmount, configpoint.FieldPoint, configpoint.FieldExpire:
			values[i] = &sql.NullInt64{}
		case configpoint.FieldTransactionName, configpoint.FieldTransactionType, configpoint.FieldPaymentChannel, configpoint.FieldPaymentType, configpoint.FieldDummyWallet, configpoint.FieldStatusTransaction:
			values[i] = &sql.NullString{}
		case configpoint.FieldUpdateDate, configpoint.FieldExpireDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Configpoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Configpoint fields.
func (c *Configpoint) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case configpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case configpoint.FieldTransactionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionName", values[i])
			} else if value.Valid {
				c.TransactionName = value.String
			}
		case configpoint.FieldTransactionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionType", values[i])
			} else if value.Valid {
				c.TransactionType = new(string)
				*c.TransactionType = value.String
			}
		case configpoint.FieldPaymentChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaymentChannel", values[i])
			} else if value.Valid {
				c.PaymentChannel = new(string)
				*c.PaymentChannel = value.String
			}
		case configpoint.FieldPaymentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaymentType", values[i])
			} else if value.Valid {
				c.PaymentType = new(string)
				*c.PaymentType = value.String
			}
		case configpoint.FieldDummyWallet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DummyWallet", values[i])
			} else if value.Valid {
				c.DummyWallet = new(string)
				*c.DummyWallet = value.String
			}
		case configpoint.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Amount", values[i])
			} else if value.Valid {
				c.Amount = int(value.Int64)
			}
		case configpoint.FieldPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Point", values[i])
			} else if value.Valid {
				c.Point = int(value.Int64)
			}
		case configpoint.FieldExpire:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Expire", values[i])
			} else if value.Valid {
				c.Expire = int(value.Int64)
			}
		case configpoint.FieldUpdateDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdateDate", values[i])
			} else if value.Valid {
				c.UpdateDate = value.Time
			}
		case configpoint.FieldExpireDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ExpireDate", values[i])
			} else if value.Valid {
				c.ExpireDate = value.Time
			}
		case configpoint.FieldStatusTransaction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field StatusTransaction", values[i])
			} else if value.Valid {
				c.StatusTransaction = new(string)
				*c.StatusTransaction = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Configpoint.
// Note that you need to call Configpoint.Unwrap() before calling this method if this Configpoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Configpoint) Update() *ConfigpointUpdateOne {
	return (&ConfigpointClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Configpoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Configpoint) Unwrap() *Configpoint {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Configpoint is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Configpoint) String() string {
	var builder strings.Builder
	builder.WriteString("Configpoint(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", TransactionName=")
	builder.WriteString(c.TransactionName)
	if v := c.TransactionType; v != nil {
		builder.WriteString(", TransactionType=")
		builder.WriteString(*v)
	}
	if v := c.PaymentChannel; v != nil {
		builder.WriteString(", PaymentChannel=")
		builder.WriteString(*v)
	}
	if v := c.PaymentType; v != nil {
		builder.WriteString(", PaymentType=")
		builder.WriteString(*v)
	}
	if v := c.DummyWallet; v != nil {
		builder.WriteString(", DummyWallet=")
		builder.WriteString(*v)
	}
	builder.WriteString(", Amount=")
	builder.WriteString(fmt.Sprintf("%v", c.Amount))
	builder.WriteString(", Point=")
	builder.WriteString(fmt.Sprintf("%v", c.Point))
	builder.WriteString(", Expire=")
	builder.WriteString(fmt.Sprintf("%v", c.Expire))
	builder.WriteString(", UpdateDate=")
	builder.WriteString(c.UpdateDate.Format(time.ANSIC))
	builder.WriteString(", ExpireDate=")
	builder.WriteString(c.ExpireDate.Format(time.ANSIC))
	if v := c.StatusTransaction; v != nil {
		builder.WriteString(", StatusTransaction=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Configpoints is a parsable slice of Configpoint.
type Configpoints []*Configpoint

func (c Configpoints) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
