// Code generated by entc, DO NOT EDIT.

package agentkyc

import (
	"go-api-report2/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// KYCDate applies equality check predicate on the "KYCDate" field. It's identical to KYCDateEQ.
func KYCDate(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCDate), v))
	})
}

// KYCTime applies equality check predicate on the "KYCTime" field. It's identical to KYCTimeEQ.
func KYCTime(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCTime), v))
	})
}

// AgentID applies equality check predicate on the "AgentID" field. It's identical to AgentIDEQ.
func AgentID(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentID), v))
	})
}

// Agentemail applies equality check predicate on the "Agentemail" field. It's identical to AgentemailEQ.
func Agentemail(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentemail), v))
	})
}

// AgentNameLastname applies equality check predicate on the "AgentNameLastname" field. It's identical to AgentNameLastnameEQ.
func AgentNameLastname(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentNameLastname), v))
	})
}

// KYCStatus applies equality check predicate on the "KYCStatus" field. It's identical to KYCStatusEQ.
func KYCStatus(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCStatus), v))
	})
}

// Consumerwalletid applies equality check predicate on the "Consumerwalletid" field. It's identical to ConsumerwalletidEQ.
func Consumerwalletid(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConsumerwalletid), v))
	})
}

// KYCRespond applies equality check predicate on the "KYCRespond" field. It's identical to KYCRespondEQ.
func KYCRespond(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCRespond), v))
	})
}

// DOPARespond applies equality check predicate on the "DOPARespond" field. It's identical to DOPARespondEQ.
func DOPARespond(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDOPARespond), v))
	})
}

// AgentType applies equality check predicate on the "AgentType" field. It's identical to AgentTypeEQ.
func AgentType(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentType), v))
	})
}

// FileimportID applies equality check predicate on the "FileimportID" field. It's identical to FileimportIDEQ.
func FileimportID(v int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileimportID), v))
	})
}

// KYCDateEQ applies the EQ predicate on the "KYCDate" field.
func KYCDateEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCDate), v))
	})
}

// KYCDateNEQ applies the NEQ predicate on the "KYCDate" field.
func KYCDateNEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKYCDate), v))
	})
}

// KYCDateIn applies the In predicate on the "KYCDate" field.
func KYCDateIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKYCDate), v...))
	})
}

// KYCDateNotIn applies the NotIn predicate on the "KYCDate" field.
func KYCDateNotIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKYCDate), v...))
	})
}

// KYCDateGT applies the GT predicate on the "KYCDate" field.
func KYCDateGT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKYCDate), v))
	})
}

// KYCDateGTE applies the GTE predicate on the "KYCDate" field.
func KYCDateGTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKYCDate), v))
	})
}

// KYCDateLT applies the LT predicate on the "KYCDate" field.
func KYCDateLT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKYCDate), v))
	})
}

// KYCDateLTE applies the LTE predicate on the "KYCDate" field.
func KYCDateLTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKYCDate), v))
	})
}

// KYCDateContains applies the Contains predicate on the "KYCDate" field.
func KYCDateContains(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKYCDate), v))
	})
}

// KYCDateHasPrefix applies the HasPrefix predicate on the "KYCDate" field.
func KYCDateHasPrefix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKYCDate), v))
	})
}

// KYCDateHasSuffix applies the HasSuffix predicate on the "KYCDate" field.
func KYCDateHasSuffix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKYCDate), v))
	})
}

// KYCDateIsNil applies the IsNil predicate on the "KYCDate" field.
func KYCDateIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKYCDate)))
	})
}

// KYCDateNotNil applies the NotNil predicate on the "KYCDate" field.
func KYCDateNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKYCDate)))
	})
}

// KYCDateEqualFold applies the EqualFold predicate on the "KYCDate" field.
func KYCDateEqualFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKYCDate), v))
	})
}

// KYCDateContainsFold applies the ContainsFold predicate on the "KYCDate" field.
func KYCDateContainsFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKYCDate), v))
	})
}

// KYCTimeEQ applies the EQ predicate on the "KYCTime" field.
func KYCTimeEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCTime), v))
	})
}

// KYCTimeNEQ applies the NEQ predicate on the "KYCTime" field.
func KYCTimeNEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKYCTime), v))
	})
}

// KYCTimeIn applies the In predicate on the "KYCTime" field.
func KYCTimeIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKYCTime), v...))
	})
}

// KYCTimeNotIn applies the NotIn predicate on the "KYCTime" field.
func KYCTimeNotIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKYCTime), v...))
	})
}

// KYCTimeGT applies the GT predicate on the "KYCTime" field.
func KYCTimeGT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKYCTime), v))
	})
}

// KYCTimeGTE applies the GTE predicate on the "KYCTime" field.
func KYCTimeGTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKYCTime), v))
	})
}

// KYCTimeLT applies the LT predicate on the "KYCTime" field.
func KYCTimeLT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKYCTime), v))
	})
}

// KYCTimeLTE applies the LTE predicate on the "KYCTime" field.
func KYCTimeLTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKYCTime), v))
	})
}

// KYCTimeContains applies the Contains predicate on the "KYCTime" field.
func KYCTimeContains(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKYCTime), v))
	})
}

// KYCTimeHasPrefix applies the HasPrefix predicate on the "KYCTime" field.
func KYCTimeHasPrefix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKYCTime), v))
	})
}

// KYCTimeHasSuffix applies the HasSuffix predicate on the "KYCTime" field.
func KYCTimeHasSuffix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKYCTime), v))
	})
}

// KYCTimeIsNil applies the IsNil predicate on the "KYCTime" field.
func KYCTimeIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKYCTime)))
	})
}

// KYCTimeNotNil applies the NotNil predicate on the "KYCTime" field.
func KYCTimeNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKYCTime)))
	})
}

// KYCTimeEqualFold applies the EqualFold predicate on the "KYCTime" field.
func KYCTimeEqualFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKYCTime), v))
	})
}

// KYCTimeContainsFold applies the ContainsFold predicate on the "KYCTime" field.
func KYCTimeContainsFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKYCTime), v))
	})
}

// AgentIDEQ applies the EQ predicate on the "AgentID" field.
func AgentIDEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentID), v))
	})
}

// AgentIDNEQ applies the NEQ predicate on the "AgentID" field.
func AgentIDNEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgentID), v))
	})
}

// AgentIDIn applies the In predicate on the "AgentID" field.
func AgentIDIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgentID), v...))
	})
}

// AgentIDNotIn applies the NotIn predicate on the "AgentID" field.
func AgentIDNotIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgentID), v...))
	})
}

// AgentIDGT applies the GT predicate on the "AgentID" field.
func AgentIDGT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgentID), v))
	})
}

// AgentIDGTE applies the GTE predicate on the "AgentID" field.
func AgentIDGTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgentID), v))
	})
}

// AgentIDLT applies the LT predicate on the "AgentID" field.
func AgentIDLT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgentID), v))
	})
}

// AgentIDLTE applies the LTE predicate on the "AgentID" field.
func AgentIDLTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgentID), v))
	})
}

// AgentIDContains applies the Contains predicate on the "AgentID" field.
func AgentIDContains(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAgentID), v))
	})
}

// AgentIDHasPrefix applies the HasPrefix predicate on the "AgentID" field.
func AgentIDHasPrefix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAgentID), v))
	})
}

// AgentIDHasSuffix applies the HasSuffix predicate on the "AgentID" field.
func AgentIDHasSuffix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAgentID), v))
	})
}

// AgentIDIsNil applies the IsNil predicate on the "AgentID" field.
func AgentIDIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgentID)))
	})
}

// AgentIDNotNil applies the NotNil predicate on the "AgentID" field.
func AgentIDNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgentID)))
	})
}

// AgentIDEqualFold applies the EqualFold predicate on the "AgentID" field.
func AgentIDEqualFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAgentID), v))
	})
}

// AgentIDContainsFold applies the ContainsFold predicate on the "AgentID" field.
func AgentIDContainsFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAgentID), v))
	})
}

// AgentemailEQ applies the EQ predicate on the "Agentemail" field.
func AgentemailEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentemail), v))
	})
}

// AgentemailNEQ applies the NEQ predicate on the "Agentemail" field.
func AgentemailNEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgentemail), v))
	})
}

// AgentemailIn applies the In predicate on the "Agentemail" field.
func AgentemailIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgentemail), v...))
	})
}

// AgentemailNotIn applies the NotIn predicate on the "Agentemail" field.
func AgentemailNotIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgentemail), v...))
	})
}

// AgentemailGT applies the GT predicate on the "Agentemail" field.
func AgentemailGT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgentemail), v))
	})
}

// AgentemailGTE applies the GTE predicate on the "Agentemail" field.
func AgentemailGTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgentemail), v))
	})
}

// AgentemailLT applies the LT predicate on the "Agentemail" field.
func AgentemailLT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgentemail), v))
	})
}

// AgentemailLTE applies the LTE predicate on the "Agentemail" field.
func AgentemailLTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgentemail), v))
	})
}

// AgentemailContains applies the Contains predicate on the "Agentemail" field.
func AgentemailContains(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAgentemail), v))
	})
}

// AgentemailHasPrefix applies the HasPrefix predicate on the "Agentemail" field.
func AgentemailHasPrefix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAgentemail), v))
	})
}

// AgentemailHasSuffix applies the HasSuffix predicate on the "Agentemail" field.
func AgentemailHasSuffix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAgentemail), v))
	})
}

// AgentemailIsNil applies the IsNil predicate on the "Agentemail" field.
func AgentemailIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgentemail)))
	})
}

// AgentemailNotNil applies the NotNil predicate on the "Agentemail" field.
func AgentemailNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgentemail)))
	})
}

// AgentemailEqualFold applies the EqualFold predicate on the "Agentemail" field.
func AgentemailEqualFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAgentemail), v))
	})
}

// AgentemailContainsFold applies the ContainsFold predicate on the "Agentemail" field.
func AgentemailContainsFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAgentemail), v))
	})
}

// AgentNameLastnameEQ applies the EQ predicate on the "AgentNameLastname" field.
func AgentNameLastnameEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameNEQ applies the NEQ predicate on the "AgentNameLastname" field.
func AgentNameLastnameNEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameIn applies the In predicate on the "AgentNameLastname" field.
func AgentNameLastnameIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgentNameLastname), v...))
	})
}

// AgentNameLastnameNotIn applies the NotIn predicate on the "AgentNameLastname" field.
func AgentNameLastnameNotIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgentNameLastname), v...))
	})
}

// AgentNameLastnameGT applies the GT predicate on the "AgentNameLastname" field.
func AgentNameLastnameGT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameGTE applies the GTE predicate on the "AgentNameLastname" field.
func AgentNameLastnameGTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameLT applies the LT predicate on the "AgentNameLastname" field.
func AgentNameLastnameLT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameLTE applies the LTE predicate on the "AgentNameLastname" field.
func AgentNameLastnameLTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameContains applies the Contains predicate on the "AgentNameLastname" field.
func AgentNameLastnameContains(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameHasPrefix applies the HasPrefix predicate on the "AgentNameLastname" field.
func AgentNameLastnameHasPrefix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameHasSuffix applies the HasSuffix predicate on the "AgentNameLastname" field.
func AgentNameLastnameHasSuffix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameIsNil applies the IsNil predicate on the "AgentNameLastname" field.
func AgentNameLastnameIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgentNameLastname)))
	})
}

// AgentNameLastnameNotNil applies the NotNil predicate on the "AgentNameLastname" field.
func AgentNameLastnameNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgentNameLastname)))
	})
}

// AgentNameLastnameEqualFold applies the EqualFold predicate on the "AgentNameLastname" field.
func AgentNameLastnameEqualFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAgentNameLastname), v))
	})
}

// AgentNameLastnameContainsFold applies the ContainsFold predicate on the "AgentNameLastname" field.
func AgentNameLastnameContainsFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAgentNameLastname), v))
	})
}

// KYCStatusEQ applies the EQ predicate on the "KYCStatus" field.
func KYCStatusEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCStatus), v))
	})
}

// KYCStatusNEQ applies the NEQ predicate on the "KYCStatus" field.
func KYCStatusNEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKYCStatus), v))
	})
}

// KYCStatusIn applies the In predicate on the "KYCStatus" field.
func KYCStatusIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKYCStatus), v...))
	})
}

// KYCStatusNotIn applies the NotIn predicate on the "KYCStatus" field.
func KYCStatusNotIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKYCStatus), v...))
	})
}

// KYCStatusGT applies the GT predicate on the "KYCStatus" field.
func KYCStatusGT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKYCStatus), v))
	})
}

// KYCStatusGTE applies the GTE predicate on the "KYCStatus" field.
func KYCStatusGTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKYCStatus), v))
	})
}

// KYCStatusLT applies the LT predicate on the "KYCStatus" field.
func KYCStatusLT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKYCStatus), v))
	})
}

// KYCStatusLTE applies the LTE predicate on the "KYCStatus" field.
func KYCStatusLTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKYCStatus), v))
	})
}

// KYCStatusContains applies the Contains predicate on the "KYCStatus" field.
func KYCStatusContains(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKYCStatus), v))
	})
}

// KYCStatusHasPrefix applies the HasPrefix predicate on the "KYCStatus" field.
func KYCStatusHasPrefix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKYCStatus), v))
	})
}

// KYCStatusHasSuffix applies the HasSuffix predicate on the "KYCStatus" field.
func KYCStatusHasSuffix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKYCStatus), v))
	})
}

// KYCStatusIsNil applies the IsNil predicate on the "KYCStatus" field.
func KYCStatusIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKYCStatus)))
	})
}

// KYCStatusNotNil applies the NotNil predicate on the "KYCStatus" field.
func KYCStatusNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKYCStatus)))
	})
}

// KYCStatusEqualFold applies the EqualFold predicate on the "KYCStatus" field.
func KYCStatusEqualFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKYCStatus), v))
	})
}

// KYCStatusContainsFold applies the ContainsFold predicate on the "KYCStatus" field.
func KYCStatusContainsFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKYCStatus), v))
	})
}

// ConsumerwalletidEQ applies the EQ predicate on the "Consumerwalletid" field.
func ConsumerwalletidEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConsumerwalletid), v))
	})
}

// ConsumerwalletidNEQ applies the NEQ predicate on the "Consumerwalletid" field.
func ConsumerwalletidNEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConsumerwalletid), v))
	})
}

// ConsumerwalletidIn applies the In predicate on the "Consumerwalletid" field.
func ConsumerwalletidIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConsumerwalletid), v...))
	})
}

// ConsumerwalletidNotIn applies the NotIn predicate on the "Consumerwalletid" field.
func ConsumerwalletidNotIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConsumerwalletid), v...))
	})
}

// ConsumerwalletidGT applies the GT predicate on the "Consumerwalletid" field.
func ConsumerwalletidGT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConsumerwalletid), v))
	})
}

// ConsumerwalletidGTE applies the GTE predicate on the "Consumerwalletid" field.
func ConsumerwalletidGTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConsumerwalletid), v))
	})
}

// ConsumerwalletidLT applies the LT predicate on the "Consumerwalletid" field.
func ConsumerwalletidLT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConsumerwalletid), v))
	})
}

// ConsumerwalletidLTE applies the LTE predicate on the "Consumerwalletid" field.
func ConsumerwalletidLTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConsumerwalletid), v))
	})
}

// ConsumerwalletidContains applies the Contains predicate on the "Consumerwalletid" field.
func ConsumerwalletidContains(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConsumerwalletid), v))
	})
}

// ConsumerwalletidHasPrefix applies the HasPrefix predicate on the "Consumerwalletid" field.
func ConsumerwalletidHasPrefix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConsumerwalletid), v))
	})
}

// ConsumerwalletidHasSuffix applies the HasSuffix predicate on the "Consumerwalletid" field.
func ConsumerwalletidHasSuffix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConsumerwalletid), v))
	})
}

// ConsumerwalletidIsNil applies the IsNil predicate on the "Consumerwalletid" field.
func ConsumerwalletidIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConsumerwalletid)))
	})
}

// ConsumerwalletidNotNil applies the NotNil predicate on the "Consumerwalletid" field.
func ConsumerwalletidNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConsumerwalletid)))
	})
}

// ConsumerwalletidEqualFold applies the EqualFold predicate on the "Consumerwalletid" field.
func ConsumerwalletidEqualFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConsumerwalletid), v))
	})
}

// ConsumerwalletidContainsFold applies the ContainsFold predicate on the "Consumerwalletid" field.
func ConsumerwalletidContainsFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConsumerwalletid), v))
	})
}

// KYCRespondEQ applies the EQ predicate on the "KYCRespond" field.
func KYCRespondEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKYCRespond), v))
	})
}

// KYCRespondNEQ applies the NEQ predicate on the "KYCRespond" field.
func KYCRespondNEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKYCRespond), v))
	})
}

// KYCRespondIn applies the In predicate on the "KYCRespond" field.
func KYCRespondIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKYCRespond), v...))
	})
}

// KYCRespondNotIn applies the NotIn predicate on the "KYCRespond" field.
func KYCRespondNotIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKYCRespond), v...))
	})
}

// KYCRespondGT applies the GT predicate on the "KYCRespond" field.
func KYCRespondGT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKYCRespond), v))
	})
}

// KYCRespondGTE applies the GTE predicate on the "KYCRespond" field.
func KYCRespondGTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKYCRespond), v))
	})
}

// KYCRespondLT applies the LT predicate on the "KYCRespond" field.
func KYCRespondLT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKYCRespond), v))
	})
}

// KYCRespondLTE applies the LTE predicate on the "KYCRespond" field.
func KYCRespondLTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKYCRespond), v))
	})
}

// KYCRespondContains applies the Contains predicate on the "KYCRespond" field.
func KYCRespondContains(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKYCRespond), v))
	})
}

// KYCRespondHasPrefix applies the HasPrefix predicate on the "KYCRespond" field.
func KYCRespondHasPrefix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKYCRespond), v))
	})
}

// KYCRespondHasSuffix applies the HasSuffix predicate on the "KYCRespond" field.
func KYCRespondHasSuffix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKYCRespond), v))
	})
}

// KYCRespondIsNil applies the IsNil predicate on the "KYCRespond" field.
func KYCRespondIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKYCRespond)))
	})
}

// KYCRespondNotNil applies the NotNil predicate on the "KYCRespond" field.
func KYCRespondNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKYCRespond)))
	})
}

// KYCRespondEqualFold applies the EqualFold predicate on the "KYCRespond" field.
func KYCRespondEqualFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKYCRespond), v))
	})
}

// KYCRespondContainsFold applies the ContainsFold predicate on the "KYCRespond" field.
func KYCRespondContainsFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKYCRespond), v))
	})
}

// DOPARespondEQ applies the EQ predicate on the "DOPARespond" field.
func DOPARespondEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDOPARespond), v))
	})
}

// DOPARespondNEQ applies the NEQ predicate on the "DOPARespond" field.
func DOPARespondNEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDOPARespond), v))
	})
}

// DOPARespondIn applies the In predicate on the "DOPARespond" field.
func DOPARespondIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDOPARespond), v...))
	})
}

// DOPARespondNotIn applies the NotIn predicate on the "DOPARespond" field.
func DOPARespondNotIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDOPARespond), v...))
	})
}

// DOPARespondGT applies the GT predicate on the "DOPARespond" field.
func DOPARespondGT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDOPARespond), v))
	})
}

// DOPARespondGTE applies the GTE predicate on the "DOPARespond" field.
func DOPARespondGTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDOPARespond), v))
	})
}

// DOPARespondLT applies the LT predicate on the "DOPARespond" field.
func DOPARespondLT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDOPARespond), v))
	})
}

// DOPARespondLTE applies the LTE predicate on the "DOPARespond" field.
func DOPARespondLTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDOPARespond), v))
	})
}

// DOPARespondContains applies the Contains predicate on the "DOPARespond" field.
func DOPARespondContains(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDOPARespond), v))
	})
}

// DOPARespondHasPrefix applies the HasPrefix predicate on the "DOPARespond" field.
func DOPARespondHasPrefix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDOPARespond), v))
	})
}

// DOPARespondHasSuffix applies the HasSuffix predicate on the "DOPARespond" field.
func DOPARespondHasSuffix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDOPARespond), v))
	})
}

// DOPARespondIsNil applies the IsNil predicate on the "DOPARespond" field.
func DOPARespondIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDOPARespond)))
	})
}

// DOPARespondNotNil applies the NotNil predicate on the "DOPARespond" field.
func DOPARespondNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDOPARespond)))
	})
}

// DOPARespondEqualFold applies the EqualFold predicate on the "DOPARespond" field.
func DOPARespondEqualFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDOPARespond), v))
	})
}

// DOPARespondContainsFold applies the ContainsFold predicate on the "DOPARespond" field.
func DOPARespondContainsFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDOPARespond), v))
	})
}

// AgentTypeEQ applies the EQ predicate on the "AgentType" field.
func AgentTypeEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgentType), v))
	})
}

// AgentTypeNEQ applies the NEQ predicate on the "AgentType" field.
func AgentTypeNEQ(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgentType), v))
	})
}

// AgentTypeIn applies the In predicate on the "AgentType" field.
func AgentTypeIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgentType), v...))
	})
}

// AgentTypeNotIn applies the NotIn predicate on the "AgentType" field.
func AgentTypeNotIn(vs ...string) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgentType), v...))
	})
}

// AgentTypeGT applies the GT predicate on the "AgentType" field.
func AgentTypeGT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgentType), v))
	})
}

// AgentTypeGTE applies the GTE predicate on the "AgentType" field.
func AgentTypeGTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgentType), v))
	})
}

// AgentTypeLT applies the LT predicate on the "AgentType" field.
func AgentTypeLT(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgentType), v))
	})
}

// AgentTypeLTE applies the LTE predicate on the "AgentType" field.
func AgentTypeLTE(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgentType), v))
	})
}

// AgentTypeContains applies the Contains predicate on the "AgentType" field.
func AgentTypeContains(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAgentType), v))
	})
}

// AgentTypeHasPrefix applies the HasPrefix predicate on the "AgentType" field.
func AgentTypeHasPrefix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAgentType), v))
	})
}

// AgentTypeHasSuffix applies the HasSuffix predicate on the "AgentType" field.
func AgentTypeHasSuffix(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAgentType), v))
	})
}

// AgentTypeIsNil applies the IsNil predicate on the "AgentType" field.
func AgentTypeIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgentType)))
	})
}

// AgentTypeNotNil applies the NotNil predicate on the "AgentType" field.
func AgentTypeNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgentType)))
	})
}

// AgentTypeEqualFold applies the EqualFold predicate on the "AgentType" field.
func AgentTypeEqualFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAgentType), v))
	})
}

// AgentTypeContainsFold applies the ContainsFold predicate on the "AgentType" field.
func AgentTypeContainsFold(v string) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAgentType), v))
	})
}

// FileimportIDEQ applies the EQ predicate on the "FileimportID" field.
func FileimportIDEQ(v int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileimportID), v))
	})
}

// FileimportIDNEQ applies the NEQ predicate on the "FileimportID" field.
func FileimportIDNEQ(v int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileimportID), v))
	})
}

// FileimportIDIn applies the In predicate on the "FileimportID" field.
func FileimportIDIn(vs ...int) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileimportID), v...))
	})
}

// FileimportIDNotIn applies the NotIn predicate on the "FileimportID" field.
func FileimportIDNotIn(vs ...int) predicate.Agentkyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agentkyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileimportID), v...))
	})
}

// FileimportIDGT applies the GT predicate on the "FileimportID" field.
func FileimportIDGT(v int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileimportID), v))
	})
}

// FileimportIDGTE applies the GTE predicate on the "FileimportID" field.
func FileimportIDGTE(v int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileimportID), v))
	})
}

// FileimportIDLT applies the LT predicate on the "FileimportID" field.
func FileimportIDLT(v int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileimportID), v))
	})
}

// FileimportIDLTE applies the LTE predicate on the "FileimportID" field.
func FileimportIDLTE(v int) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileimportID), v))
	})
}

// FileimportIDIsNil applies the IsNil predicate on the "FileimportID" field.
func FileimportIDIsNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFileimportID)))
	})
}

// FileimportIDNotNil applies the NotNil predicate on the "FileimportID" field.
func FileimportIDNotNil() predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFileimportID)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Agentkyc) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Agentkyc) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Agentkyc) predicate.Agentkyc {
	return predicate.Agentkyc(func(s *sql.Selector) {
		p(s.Not())
	})
}
