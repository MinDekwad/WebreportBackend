// Code generated by entc, DO NOT EDIT.

package watchlist

const (
	// Label holds the string label denoting the watchlist type in the database.
	Label = "watchlist"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "Name"
	// FieldTaxID holds the string denoting the taxid field in the database.
	FieldTaxID = "TaxID"
	// FieldRankWatchlist holds the string denoting the rankwatchlist field in the database.
	FieldRankWatchlist = "RankWatchlist"
	// FieldFileimportID holds the string denoting the fileimportid field in the database.
	FieldFileimportID = "FileimportID"
	// FieldIsDeleted holds the string denoting the isdeleted field in the database.
	FieldIsDeleted = "IsDeleted"
	// FieldImportDate holds the string denoting the importdate field in the database.
	FieldImportDate = "ImportDate"
	// FieldUserUpload holds the string denoting the userupload field in the database.
	FieldUserUpload = "UserUpload"

	// EdgeRelated holds the string denoting the related edge name in mutations.
	EdgeRelated = "related"

	// Table holds the table name of the watchlist in the database.
	Table = "watchlist"
	// RelatedTable is the table the holds the related relation/edge.
	RelatedTable = "watchlist"
	// RelatedInverseTable is the table name for the Watchlisttype entity.
	// It exists in this package in order to avoid circular dependency with the "watchlisttype" package.
	RelatedInverseTable = "watchlist_type"
	// RelatedColumn is the table column denoting the related relation/edge.
	RelatedColumn = "TypeID"
)

// Columns holds all SQL columns for watchlist fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTaxID,
	FieldRankWatchlist,
	FieldFileimportID,
	FieldIsDeleted,
	FieldImportDate,
	FieldUserUpload,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Watchlist type.
var ForeignKeys = []string{
	"TypeID",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TaxIDValidator is a validator for the "TaxID" field. It is called by the builders before save.
	TaxIDValidator func(string) error
	// DefaultIsDeleted holds the default value on creation for the "IsDeleted" field.
	DefaultIsDeleted bool
	// UserUploadValidator is a validator for the "UserUpload" field. It is called by the builders before save.
	UserUploadValidator func(string) error
)
