// Code generated by entc, DO NOT EDIT.

package watchlist

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// TaxID applies equality check predicate on the "TaxID" field. It's identical to TaxIDEQ.
func TaxID(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxID), v))
	})
}

// RankWatchlist applies equality check predicate on the "RankWatchlist" field. It's identical to RankWatchlistEQ.
func RankWatchlist(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankWatchlist), v))
	})
}

// FileimportID applies equality check predicate on the "FileimportID" field. It's identical to FileimportIDEQ.
func FileimportID(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileimportID), v))
	})
}

// IsDeleted applies equality check predicate on the "IsDeleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// ImportDate applies equality check predicate on the "ImportDate" field. It's identical to ImportDateEQ.
func ImportDate(v time.Time) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImportDate), v))
	})
}

// UserUpload applies equality check predicate on the "UserUpload" field. It's identical to UserUploadEQ.
func UserUpload(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserUpload), v))
	})
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TaxIDEQ applies the EQ predicate on the "TaxID" field.
func TaxIDEQ(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxID), v))
	})
}

// TaxIDNEQ applies the NEQ predicate on the "TaxID" field.
func TaxIDNEQ(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxID), v))
	})
}

// TaxIDIn applies the In predicate on the "TaxID" field.
func TaxIDIn(vs ...string) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxID), v...))
	})
}

// TaxIDNotIn applies the NotIn predicate on the "TaxID" field.
func TaxIDNotIn(vs ...string) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxID), v...))
	})
}

// TaxIDGT applies the GT predicate on the "TaxID" field.
func TaxIDGT(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxID), v))
	})
}

// TaxIDGTE applies the GTE predicate on the "TaxID" field.
func TaxIDGTE(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxID), v))
	})
}

// TaxIDLT applies the LT predicate on the "TaxID" field.
func TaxIDLT(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxID), v))
	})
}

// TaxIDLTE applies the LTE predicate on the "TaxID" field.
func TaxIDLTE(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxID), v))
	})
}

// TaxIDContains applies the Contains predicate on the "TaxID" field.
func TaxIDContains(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaxID), v))
	})
}

// TaxIDHasPrefix applies the HasPrefix predicate on the "TaxID" field.
func TaxIDHasPrefix(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaxID), v))
	})
}

// TaxIDHasSuffix applies the HasSuffix predicate on the "TaxID" field.
func TaxIDHasSuffix(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaxID), v))
	})
}

// TaxIDEqualFold applies the EqualFold predicate on the "TaxID" field.
func TaxIDEqualFold(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaxID), v))
	})
}

// TaxIDContainsFold applies the ContainsFold predicate on the "TaxID" field.
func TaxIDContainsFold(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaxID), v))
	})
}

// RankWatchlistEQ applies the EQ predicate on the "RankWatchlist" field.
func RankWatchlistEQ(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistNEQ applies the NEQ predicate on the "RankWatchlist" field.
func RankWatchlistNEQ(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistIn applies the In predicate on the "RankWatchlist" field.
func RankWatchlistIn(vs ...int) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRankWatchlist), v...))
	})
}

// RankWatchlistNotIn applies the NotIn predicate on the "RankWatchlist" field.
func RankWatchlistNotIn(vs ...int) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRankWatchlist), v...))
	})
}

// RankWatchlistGT applies the GT predicate on the "RankWatchlist" field.
func RankWatchlistGT(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistGTE applies the GTE predicate on the "RankWatchlist" field.
func RankWatchlistGTE(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistLT applies the LT predicate on the "RankWatchlist" field.
func RankWatchlistLT(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistLTE applies the LTE predicate on the "RankWatchlist" field.
func RankWatchlistLTE(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRankWatchlist), v))
	})
}

// RankWatchlistIsNil applies the IsNil predicate on the "RankWatchlist" field.
func RankWatchlistIsNil() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRankWatchlist)))
	})
}

// RankWatchlistNotNil applies the NotNil predicate on the "RankWatchlist" field.
func RankWatchlistNotNil() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRankWatchlist)))
	})
}

// FileimportIDEQ applies the EQ predicate on the "FileimportID" field.
func FileimportIDEQ(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileimportID), v))
	})
}

// FileimportIDNEQ applies the NEQ predicate on the "FileimportID" field.
func FileimportIDNEQ(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileimportID), v))
	})
}

// FileimportIDIn applies the In predicate on the "FileimportID" field.
func FileimportIDIn(vs ...int) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileimportID), v...))
	})
}

// FileimportIDNotIn applies the NotIn predicate on the "FileimportID" field.
func FileimportIDNotIn(vs ...int) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileimportID), v...))
	})
}

// FileimportIDGT applies the GT predicate on the "FileimportID" field.
func FileimportIDGT(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileimportID), v))
	})
}

// FileimportIDGTE applies the GTE predicate on the "FileimportID" field.
func FileimportIDGTE(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileimportID), v))
	})
}

// FileimportIDLT applies the LT predicate on the "FileimportID" field.
func FileimportIDLT(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileimportID), v))
	})
}

// FileimportIDLTE applies the LTE predicate on the "FileimportID" field.
func FileimportIDLTE(v int) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileimportID), v))
	})
}

// FileimportIDIsNil applies the IsNil predicate on the "FileimportID" field.
func FileimportIDIsNil() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFileimportID)))
	})
}

// FileimportIDNotNil applies the NotNil predicate on the "FileimportID" field.
func FileimportIDNotNil() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFileimportID)))
	})
}

// IsDeletedEQ applies the EQ predicate on the "IsDeleted" field.
func IsDeletedEQ(v bool) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "IsDeleted" field.
func IsDeletedNEQ(v bool) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIsNil applies the IsNil predicate on the "IsDeleted" field.
func IsDeletedIsNil() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDeleted)))
	})
}

// IsDeletedNotNil applies the NotNil predicate on the "IsDeleted" field.
func IsDeletedNotNil() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDeleted)))
	})
}

// ImportDateEQ applies the EQ predicate on the "ImportDate" field.
func ImportDateEQ(v time.Time) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImportDate), v))
	})
}

// ImportDateNEQ applies the NEQ predicate on the "ImportDate" field.
func ImportDateNEQ(v time.Time) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImportDate), v))
	})
}

// ImportDateIn applies the In predicate on the "ImportDate" field.
func ImportDateIn(vs ...time.Time) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImportDate), v...))
	})
}

// ImportDateNotIn applies the NotIn predicate on the "ImportDate" field.
func ImportDateNotIn(vs ...time.Time) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImportDate), v...))
	})
}

// ImportDateGT applies the GT predicate on the "ImportDate" field.
func ImportDateGT(v time.Time) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImportDate), v))
	})
}

// ImportDateGTE applies the GTE predicate on the "ImportDate" field.
func ImportDateGTE(v time.Time) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImportDate), v))
	})
}

// ImportDateLT applies the LT predicate on the "ImportDate" field.
func ImportDateLT(v time.Time) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImportDate), v))
	})
}

// ImportDateLTE applies the LTE predicate on the "ImportDate" field.
func ImportDateLTE(v time.Time) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImportDate), v))
	})
}

// ImportDateIsNil applies the IsNil predicate on the "ImportDate" field.
func ImportDateIsNil() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImportDate)))
	})
}

// ImportDateNotNil applies the NotNil predicate on the "ImportDate" field.
func ImportDateNotNil() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImportDate)))
	})
}

// UserUploadEQ applies the EQ predicate on the "UserUpload" field.
func UserUploadEQ(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserUpload), v))
	})
}

// UserUploadNEQ applies the NEQ predicate on the "UserUpload" field.
func UserUploadNEQ(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserUpload), v))
	})
}

// UserUploadIn applies the In predicate on the "UserUpload" field.
func UserUploadIn(vs ...string) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserUpload), v...))
	})
}

// UserUploadNotIn applies the NotIn predicate on the "UserUpload" field.
func UserUploadNotIn(vs ...string) predicate.Watchlist {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Watchlist(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserUpload), v...))
	})
}

// UserUploadGT applies the GT predicate on the "UserUpload" field.
func UserUploadGT(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserUpload), v))
	})
}

// UserUploadGTE applies the GTE predicate on the "UserUpload" field.
func UserUploadGTE(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserUpload), v))
	})
}

// UserUploadLT applies the LT predicate on the "UserUpload" field.
func UserUploadLT(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserUpload), v))
	})
}

// UserUploadLTE applies the LTE predicate on the "UserUpload" field.
func UserUploadLTE(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserUpload), v))
	})
}

// UserUploadContains applies the Contains predicate on the "UserUpload" field.
func UserUploadContains(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserUpload), v))
	})
}

// UserUploadHasPrefix applies the HasPrefix predicate on the "UserUpload" field.
func UserUploadHasPrefix(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserUpload), v))
	})
}

// UserUploadHasSuffix applies the HasSuffix predicate on the "UserUpload" field.
func UserUploadHasSuffix(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserUpload), v))
	})
}

// UserUploadIsNil applies the IsNil predicate on the "UserUpload" field.
func UserUploadIsNil() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserUpload)))
	})
}

// UserUploadNotNil applies the NotNil predicate on the "UserUpload" field.
func UserUploadNotNil() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserUpload)))
	})
}

// UserUploadEqualFold applies the EqualFold predicate on the "UserUpload" field.
func UserUploadEqualFold(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserUpload), v))
	})
}

// UserUploadContainsFold applies the ContainsFold predicate on the "UserUpload" field.
func UserUploadContainsFold(v string) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserUpload), v))
	})
}

// HasRelated applies the HasEdge predicate on the "related" edge.
func HasRelated() predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RelatedTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RelatedTable, RelatedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelatedWith applies the HasEdge predicate on the "related" edge with a given conditions (other predicates).
func HasRelatedWith(preds ...predicate.Watchlisttype) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RelatedInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RelatedTable, RelatedColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Watchlist) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Watchlist) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Watchlist) predicate.Watchlist {
	return predicate.Watchlist(func(s *sql.Selector) {
		p(s.Not())
	})
}
