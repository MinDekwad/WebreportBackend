// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/watchlisthistory"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Watchlisthistory is the model entity for the Watchlisthistory schema.
type Watchlisthistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// TaxID holds the value of the "TaxID" field.
	TaxID string `json:"TaxID,omitempty"`
	// TypeName holds the value of the "TypeName" field.
	TypeName string `json:"TypeName,omitempty"`
	// RankWatchlist holds the value of the "RankWatchlist" field.
	RankWatchlist int `json:"RankWatchlist,omitempty"`
	// StatusDel holds the value of the "StatusDel" field.
	StatusDel int `json:"StatusDel,omitempty"`
	// DateCalRank holds the value of the "DateCalRank" field.
	DateCalRank *time.Time `json:"DateCalRank,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Watchlisthistory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case watchlisthistory.FieldID, watchlisthistory.FieldRankWatchlist, watchlisthistory.FieldStatusDel:
			values[i] = &sql.NullInt64{}
		case watchlisthistory.FieldName, watchlisthistory.FieldTaxID, watchlisthistory.FieldTypeName:
			values[i] = &sql.NullString{}
		case watchlisthistory.FieldDateCalRank:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Watchlisthistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Watchlisthistory fields.
func (w *Watchlisthistory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case watchlisthistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case watchlisthistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case watchlisthistory.FieldTaxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TaxID", values[i])
			} else if value.Valid {
				w.TaxID = value.String
			}
		case watchlisthistory.FieldTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TypeName", values[i])
			} else if value.Valid {
				w.TypeName = value.String
			}
		case watchlisthistory.FieldRankWatchlist:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RankWatchlist", values[i])
			} else if value.Valid {
				w.RankWatchlist = int(value.Int64)
			}
		case watchlisthistory.FieldStatusDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field StatusDel", values[i])
			} else if value.Valid {
				w.StatusDel = int(value.Int64)
			}
		case watchlisthistory.FieldDateCalRank:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DateCalRank", values[i])
			} else if value.Valid {
				w.DateCalRank = new(time.Time)
				*w.DateCalRank = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Watchlisthistory.
// Note that you need to call Watchlisthistory.Unwrap() before calling this method if this Watchlisthistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Watchlisthistory) Update() *WatchlisthistoryUpdateOne {
	return (&WatchlisthistoryClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Watchlisthistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Watchlisthistory) Unwrap() *Watchlisthistory {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Watchlisthistory is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Watchlisthistory) String() string {
	var builder strings.Builder
	builder.WriteString("Watchlisthistory(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", Name=")
	builder.WriteString(w.Name)
	builder.WriteString(", TaxID=")
	builder.WriteString(w.TaxID)
	builder.WriteString(", TypeName=")
	builder.WriteString(w.TypeName)
	builder.WriteString(", RankWatchlist=")
	builder.WriteString(fmt.Sprintf("%v", w.RankWatchlist))
	builder.WriteString(", StatusDel=")
	builder.WriteString(fmt.Sprintf("%v", w.StatusDel))
	if v := w.DateCalRank; v != nil {
		builder.WriteString(", DateCalRank=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Watchlisthistories is a parsable slice of Watchlisthistory.
type Watchlisthistories []*Watchlisthistory

func (w Watchlisthistories) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
