// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-api-report2/ent/fileinsert"
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileinsertUpdate is the builder for updating Fileinsert entities.
type FileinsertUpdate struct {
	config
	hooks    []Hook
	mutation *FileinsertMutation
}

// Where adds a new predicate for the FileinsertUpdate builder.
func (fu *FileinsertUpdate) Where(ps ...predicate.Fileinsert) *FileinsertUpdate {
	fu.mutation.predicates = append(fu.mutation.predicates, ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FileinsertUpdate) SetName(s string) *FileinsertUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FileinsertUpdate) SetNillableName(s *string) *FileinsertUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// ClearName clears the value of the "name" field.
func (fu *FileinsertUpdate) ClearName() *FileinsertUpdate {
	fu.mutation.ClearName()
	return fu
}

// SetImportdate sets the "importdate" field.
func (fu *FileinsertUpdate) SetImportdate(t time.Time) *FileinsertUpdate {
	fu.mutation.SetImportdate(t)
	return fu
}

// SetNillableImportdate sets the "importdate" field if the given value is not nil.
func (fu *FileinsertUpdate) SetNillableImportdate(t *time.Time) *FileinsertUpdate {
	if t != nil {
		fu.SetImportdate(*t)
	}
	return fu
}

// ClearImportdate clears the value of the "importdate" field.
func (fu *FileinsertUpdate) ClearImportdate() *FileinsertUpdate {
	fu.mutation.ClearImportdate()
	return fu
}

// SetIsSuccess sets the "IsSuccess" field.
func (fu *FileinsertUpdate) SetIsSuccess(b bool) *FileinsertUpdate {
	fu.mutation.SetIsSuccess(b)
	return fu
}

// SetNillableIsSuccess sets the "IsSuccess" field if the given value is not nil.
func (fu *FileinsertUpdate) SetNillableIsSuccess(b *bool) *FileinsertUpdate {
	if b != nil {
		fu.SetIsSuccess(*b)
	}
	return fu
}

// ClearIsSuccess clears the value of the "IsSuccess" field.
func (fu *FileinsertUpdate) ClearIsSuccess() *FileinsertUpdate {
	fu.mutation.ClearIsSuccess()
	return fu
}

// SetUpdateDate sets the "UpdateDate" field.
func (fu *FileinsertUpdate) SetUpdateDate(t time.Time) *FileinsertUpdate {
	fu.mutation.SetUpdateDate(t)
	return fu
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (fu *FileinsertUpdate) SetNillableUpdateDate(t *time.Time) *FileinsertUpdate {
	if t != nil {
		fu.SetUpdateDate(*t)
	}
	return fu
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (fu *FileinsertUpdate) ClearUpdateDate() *FileinsertUpdate {
	fu.mutation.ClearUpdateDate()
	return fu
}

// Mutation returns the FileinsertMutation object of the builder.
func (fu *FileinsertUpdate) Mutation() *FileinsertMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileinsertUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileinsertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileinsertUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileinsertUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileinsertUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileinsertUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := fileinsert.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (fu *FileinsertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileinsert.Table,
			Columns: fileinsert.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileinsert.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileinsert.FieldName,
		})
	}
	if fu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fileinsert.FieldName,
		})
	}
	if value, ok := fu.mutation.Importdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileinsert.FieldImportdate,
		})
	}
	if fu.mutation.ImportdateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fileinsert.FieldImportdate,
		})
	}
	if value, ok := fu.mutation.IsSuccess(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: fileinsert.FieldIsSuccess,
		})
	}
	if fu.mutation.IsSuccessCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: fileinsert.FieldIsSuccess,
		})
	}
	if value, ok := fu.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileinsert.FieldUpdateDate,
		})
	}
	if fu.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fileinsert.FieldUpdateDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileinsert.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FileinsertUpdateOne is the builder for updating a single Fileinsert entity.
type FileinsertUpdateOne struct {
	config
	hooks    []Hook
	mutation *FileinsertMutation
}

// SetName sets the "name" field.
func (fuo *FileinsertUpdateOne) SetName(s string) *FileinsertUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FileinsertUpdateOne) SetNillableName(s *string) *FileinsertUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// ClearName clears the value of the "name" field.
func (fuo *FileinsertUpdateOne) ClearName() *FileinsertUpdateOne {
	fuo.mutation.ClearName()
	return fuo
}

// SetImportdate sets the "importdate" field.
func (fuo *FileinsertUpdateOne) SetImportdate(t time.Time) *FileinsertUpdateOne {
	fuo.mutation.SetImportdate(t)
	return fuo
}

// SetNillableImportdate sets the "importdate" field if the given value is not nil.
func (fuo *FileinsertUpdateOne) SetNillableImportdate(t *time.Time) *FileinsertUpdateOne {
	if t != nil {
		fuo.SetImportdate(*t)
	}
	return fuo
}

// ClearImportdate clears the value of the "importdate" field.
func (fuo *FileinsertUpdateOne) ClearImportdate() *FileinsertUpdateOne {
	fuo.mutation.ClearImportdate()
	return fuo
}

// SetIsSuccess sets the "IsSuccess" field.
func (fuo *FileinsertUpdateOne) SetIsSuccess(b bool) *FileinsertUpdateOne {
	fuo.mutation.SetIsSuccess(b)
	return fuo
}

// SetNillableIsSuccess sets the "IsSuccess" field if the given value is not nil.
func (fuo *FileinsertUpdateOne) SetNillableIsSuccess(b *bool) *FileinsertUpdateOne {
	if b != nil {
		fuo.SetIsSuccess(*b)
	}
	return fuo
}

// ClearIsSuccess clears the value of the "IsSuccess" field.
func (fuo *FileinsertUpdateOne) ClearIsSuccess() *FileinsertUpdateOne {
	fuo.mutation.ClearIsSuccess()
	return fuo
}

// SetUpdateDate sets the "UpdateDate" field.
func (fuo *FileinsertUpdateOne) SetUpdateDate(t time.Time) *FileinsertUpdateOne {
	fuo.mutation.SetUpdateDate(t)
	return fuo
}

// SetNillableUpdateDate sets the "UpdateDate" field if the given value is not nil.
func (fuo *FileinsertUpdateOne) SetNillableUpdateDate(t *time.Time) *FileinsertUpdateOne {
	if t != nil {
		fuo.SetUpdateDate(*t)
	}
	return fuo
}

// ClearUpdateDate clears the value of the "UpdateDate" field.
func (fuo *FileinsertUpdateOne) ClearUpdateDate() *FileinsertUpdateOne {
	fuo.mutation.ClearUpdateDate()
	return fuo
}

// Mutation returns the FileinsertMutation object of the builder.
func (fuo *FileinsertUpdateOne) Mutation() *FileinsertMutation {
	return fuo.mutation
}

// Save executes the query and returns the updated Fileinsert entity.
func (fuo *FileinsertUpdateOne) Save(ctx context.Context) (*Fileinsert, error) {
	var (
		err  error
		node *Fileinsert
	)
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileinsertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileinsertUpdateOne) SaveX(ctx context.Context) *Fileinsert {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileinsertUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileinsertUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileinsertUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := fileinsert.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (fuo *FileinsertUpdateOne) sqlSave(ctx context.Context) (_node *Fileinsert, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileinsert.Table,
			Columns: fileinsert.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileinsert.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Fileinsert.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileinsert.FieldName,
		})
	}
	if fuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fileinsert.FieldName,
		})
	}
	if value, ok := fuo.mutation.Importdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileinsert.FieldImportdate,
		})
	}
	if fuo.mutation.ImportdateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fileinsert.FieldImportdate,
		})
	}
	if value, ok := fuo.mutation.IsSuccess(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: fileinsert.FieldIsSuccess,
		})
	}
	if fuo.mutation.IsSuccessCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: fileinsert.FieldIsSuccess,
		})
	}
	if value, ok := fuo.mutation.UpdateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileinsert.FieldUpdateDate,
		})
	}
	if fuo.mutation.UpdateDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fileinsert.FieldUpdateDate,
		})
	}
	_node = &Fileinsert{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileinsert.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
