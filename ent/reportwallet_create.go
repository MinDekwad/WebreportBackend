// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-report2/ent/reportwallet"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReportWalletCreate is the builder for creating a ReportWallet entity.
type ReportWalletCreate struct {
	config
	mutation *ReportWalletMutation
	hooks    []Hook
}

// SetWalletid sets the "walletid" field.
func (rwc *ReportWalletCreate) SetWalletid(s string) *ReportWalletCreate {
	rwc.mutation.SetWalletid(s)
	return rwc
}

// SetWalletTypeName sets the "WalletTypeName" field.
func (rwc *ReportWalletCreate) SetWalletTypeName(s string) *ReportWalletCreate {
	rwc.mutation.SetWalletTypeName(s)
	return rwc
}

// SetNillableWalletTypeName sets the "WalletTypeName" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableWalletTypeName(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetWalletTypeName(*s)
	}
	return rwc
}

// SetWalletPhoneno sets the "WalletPhoneno" field.
func (rwc *ReportWalletCreate) SetWalletPhoneno(s string) *ReportWalletCreate {
	rwc.mutation.SetWalletPhoneno(s)
	return rwc
}

// SetNillableWalletPhoneno sets the "WalletPhoneno" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableWalletPhoneno(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetWalletPhoneno(*s)
	}
	return rwc
}

// SetWalletName sets the "WalletName" field.
func (rwc *ReportWalletCreate) SetWalletName(s string) *ReportWalletCreate {
	rwc.mutation.SetWalletName(s)
	return rwc
}

// SetNillableWalletName sets the "WalletName" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableWalletName(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetWalletName(*s)
	}
	return rwc
}

// SetCitizenId sets the "CitizenId" field.
func (rwc *ReportWalletCreate) SetCitizenId(s string) *ReportWalletCreate {
	rwc.mutation.SetCitizenId(s)
	return rwc
}

// SetNillableCitizenId sets the "CitizenId" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableCitizenId(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetCitizenId(*s)
	}
	return rwc
}

// SetStatus sets the "Status" field.
func (rwc *ReportWalletCreate) SetStatus(s string) *ReportWalletCreate {
	rwc.mutation.SetStatus(s)
	return rwc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableStatus(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetStatus(*s)
	}
	return rwc
}

// SetDateTime sets the "dateTime" field.
func (rwc *ReportWalletCreate) SetDateTime(t time.Time) *ReportWalletCreate {
	rwc.mutation.SetDateTime(t)
	return rwc
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableDateTime(t *time.Time) *ReportWalletCreate {
	if t != nil {
		rwc.SetDateTime(*t)
	}
	return rwc
}

// SetBalance sets the "Balance" field.
func (rwc *ReportWalletCreate) SetBalance(f float64) *ReportWalletCreate {
	rwc.mutation.SetBalance(f)
	return rwc
}

// SetNillableBalance sets the "Balance" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableBalance(f *float64) *ReportWalletCreate {
	if f != nil {
		rwc.SetBalance(*f)
	}
	return rwc
}

// SetEmail sets the "Email" field.
func (rwc *ReportWalletCreate) SetEmail(s string) *ReportWalletCreate {
	rwc.mutation.SetEmail(s)
	return rwc
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableEmail(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetEmail(*s)
	}
	return rwc
}

// SetIsForgetPin sets the "IsForgetPin" field.
func (rwc *ReportWalletCreate) SetIsForgetPin(s string) *ReportWalletCreate {
	rwc.mutation.SetIsForgetPin(s)
	return rwc
}

// SetNillableIsForgetPin sets the "IsForgetPin" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableIsForgetPin(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetIsForgetPin(*s)
	}
	return rwc
}

// SetATMCard sets the "ATMCard" field.
func (rwc *ReportWalletCreate) SetATMCard(s string) *ReportWalletCreate {
	rwc.mutation.SetATMCard(s)
	return rwc
}

// SetNillableATMCard sets the "ATMCard" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableATMCard(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetATMCard(*s)
	}
	return rwc
}

// SetAccountNo sets the "AccountNo" field.
func (rwc *ReportWalletCreate) SetAccountNo(s string) *ReportWalletCreate {
	rwc.mutation.SetAccountNo(s)
	return rwc
}

// SetNillableAccountNo sets the "AccountNo" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableAccountNo(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetAccountNo(*s)
	}
	return rwc
}

// SetAddressDetail sets the "AddressDetail" field.
func (rwc *ReportWalletCreate) SetAddressDetail(s string) *ReportWalletCreate {
	rwc.mutation.SetAddressDetail(s)
	return rwc
}

// SetNillableAddressDetail sets the "AddressDetail" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableAddressDetail(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetAddressDetail(*s)
	}
	return rwc
}

// SetStreet sets the "Street" field.
func (rwc *ReportWalletCreate) SetStreet(s string) *ReportWalletCreate {
	rwc.mutation.SetStreet(s)
	return rwc
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableStreet(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetStreet(*s)
	}
	return rwc
}

// SetDistrict sets the "District" field.
func (rwc *ReportWalletCreate) SetDistrict(s string) *ReportWalletCreate {
	rwc.mutation.SetDistrict(s)
	return rwc
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableDistrict(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetDistrict(*s)
	}
	return rwc
}

// SetSubDistrict sets the "SubDistrict" field.
func (rwc *ReportWalletCreate) SetSubDistrict(s string) *ReportWalletCreate {
	rwc.mutation.SetSubDistrict(s)
	return rwc
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableSubDistrict(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetSubDistrict(*s)
	}
	return rwc
}

// SetProvince sets the "Province" field.
func (rwc *ReportWalletCreate) SetProvince(s string) *ReportWalletCreate {
	rwc.mutation.SetProvince(s)
	return rwc
}

// SetNillableProvince sets the "Province" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableProvince(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetProvince(*s)
	}
	return rwc
}

// SetPostalCode sets the "PostalCode" field.
func (rwc *ReportWalletCreate) SetPostalCode(s string) *ReportWalletCreate {
	rwc.mutation.SetPostalCode(s)
	return rwc
}

// SetNillablePostalCode sets the "PostalCode" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillablePostalCode(s *string) *ReportWalletCreate {
	if s != nil {
		rwc.SetPostalCode(*s)
	}
	return rwc
}

// SetRegisterDateTime sets the "RegisterDateTime" field.
func (rwc *ReportWalletCreate) SetRegisterDateTime(t time.Time) *ReportWalletCreate {
	rwc.mutation.SetRegisterDateTime(t)
	return rwc
}

// SetNillableRegisterDateTime sets the "RegisterDateTime" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableRegisterDateTime(t *time.Time) *ReportWalletCreate {
	if t != nil {
		rwc.SetRegisterDateTime(*t)
	}
	return rwc
}

// SetFileimportID sets the "FileimportID" field.
func (rwc *ReportWalletCreate) SetFileimportID(i int) *ReportWalletCreate {
	rwc.mutation.SetFileimportID(i)
	return rwc
}

// SetNillableFileimportID sets the "FileimportID" field if the given value is not nil.
func (rwc *ReportWalletCreate) SetNillableFileimportID(i *int) *ReportWalletCreate {
	if i != nil {
		rwc.SetFileimportID(*i)
	}
	return rwc
}

// SetID sets the "id" field.
func (rwc *ReportWalletCreate) SetID(i int) *ReportWalletCreate {
	rwc.mutation.SetID(i)
	return rwc
}

// Mutation returns the ReportWalletMutation object of the builder.
func (rwc *ReportWalletCreate) Mutation() *ReportWalletMutation {
	return rwc.mutation
}

// Save creates the ReportWallet in the database.
func (rwc *ReportWalletCreate) Save(ctx context.Context) (*ReportWallet, error) {
	var (
		err  error
		node *ReportWallet
	)
	if len(rwc.hooks) == 0 {
		if err = rwc.check(); err != nil {
			return nil, err
		}
		node, err = rwc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReportWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rwc.check(); err != nil {
				return nil, err
			}
			rwc.mutation = mutation
			node, err = rwc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rwc.hooks) - 1; i >= 0; i-- {
			mut = rwc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rwc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rwc *ReportWalletCreate) SaveX(ctx context.Context) *ReportWallet {
	v, err := rwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rwc *ReportWalletCreate) check() error {
	if _, ok := rwc.mutation.Walletid(); !ok {
		return &ValidationError{Name: "walletid", err: errors.New("ent: missing required field \"walletid\"")}
	}
	if v, ok := rwc.mutation.Walletid(); ok {
		if err := reportwallet.WalletidValidator(v); err != nil {
			return &ValidationError{Name: "walletid", err: fmt.Errorf("ent: validator failed for field \"walletid\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.WalletTypeName(); ok {
		if err := reportwallet.WalletTypeNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletTypeName", err: fmt.Errorf("ent: validator failed for field \"WalletTypeName\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.WalletPhoneno(); ok {
		if err := reportwallet.WalletPhonenoValidator(v); err != nil {
			return &ValidationError{Name: "WalletPhoneno", err: fmt.Errorf("ent: validator failed for field \"WalletPhoneno\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.WalletName(); ok {
		if err := reportwallet.WalletNameValidator(v); err != nil {
			return &ValidationError{Name: "WalletName", err: fmt.Errorf("ent: validator failed for field \"WalletName\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.CitizenId(); ok {
		if err := reportwallet.CitizenIdValidator(v); err != nil {
			return &ValidationError{Name: "CitizenId", err: fmt.Errorf("ent: validator failed for field \"CitizenId\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.Status(); ok {
		if err := reportwallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.Email(); ok {
		if err := reportwallet.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf("ent: validator failed for field \"Email\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.IsForgetPin(); ok {
		if err := reportwallet.IsForgetPinValidator(v); err != nil {
			return &ValidationError{Name: "IsForgetPin", err: fmt.Errorf("ent: validator failed for field \"IsForgetPin\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.ATMCard(); ok {
		if err := reportwallet.ATMCardValidator(v); err != nil {
			return &ValidationError{Name: "ATMCard", err: fmt.Errorf("ent: validator failed for field \"ATMCard\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.AccountNo(); ok {
		if err := reportwallet.AccountNoValidator(v); err != nil {
			return &ValidationError{Name: "AccountNo", err: fmt.Errorf("ent: validator failed for field \"AccountNo\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.Street(); ok {
		if err := reportwallet.StreetValidator(v); err != nil {
			return &ValidationError{Name: "Street", err: fmt.Errorf("ent: validator failed for field \"Street\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.District(); ok {
		if err := reportwallet.DistrictValidator(v); err != nil {
			return &ValidationError{Name: "District", err: fmt.Errorf("ent: validator failed for field \"District\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.SubDistrict(); ok {
		if err := reportwallet.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf("ent: validator failed for field \"SubDistrict\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.Province(); ok {
		if err := reportwallet.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "Province", err: fmt.Errorf("ent: validator failed for field \"Province\": %w", err)}
		}
	}
	if v, ok := rwc.mutation.PostalCode(); ok {
		if err := reportwallet.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "PostalCode", err: fmt.Errorf("ent: validator failed for field \"PostalCode\": %w", err)}
		}
	}
	return nil
}

func (rwc *ReportWalletCreate) sqlSave(ctx context.Context) (*ReportWallet, error) {
	_node, _spec := rwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rwc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (rwc *ReportWalletCreate) createSpec() (*ReportWallet, *sqlgraph.CreateSpec) {
	var (
		_node = &ReportWallet{config: rwc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reportwallet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reportwallet.FieldID,
			},
		}
	)
	if id, ok := rwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rwc.mutation.Walletid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletid,
		})
		_node.Walletid = value
	}
	if value, ok := rwc.mutation.WalletTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletTypeName,
		})
		_node.WalletTypeName = &value
	}
	if value, ok := rwc.mutation.WalletPhoneno(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletPhoneno,
		})
		_node.WalletPhoneno = &value
	}
	if value, ok := rwc.mutation.WalletName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldWalletName,
		})
		_node.WalletName = &value
	}
	if value, ok := rwc.mutation.CitizenId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldCitizenId,
		})
		_node.CitizenId = &value
	}
	if value, ok := rwc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldStatus,
		})
		_node.Status = &value
	}
	if value, ok := rwc.mutation.DateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallet.FieldDateTime,
		})
		_node.DateTime = &value
	}
	if value, ok := rwc.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reportwallet.FieldBalance,
		})
		_node.Balance = &value
	}
	if value, ok := rwc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldEmail,
		})
		_node.Email = &value
	}
	if value, ok := rwc.mutation.IsForgetPin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldIsForgetPin,
		})
		_node.IsForgetPin = &value
	}
	if value, ok := rwc.mutation.ATMCard(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldATMCard,
		})
		_node.ATMCard = &value
	}
	if value, ok := rwc.mutation.AccountNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldAccountNo,
		})
		_node.AccountNo = &value
	}
	if value, ok := rwc.mutation.AddressDetail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldAddressDetail,
		})
		_node.AddressDetail = &value
	}
	if value, ok := rwc.mutation.Street(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldStreet,
		})
		_node.Street = &value
	}
	if value, ok := rwc.mutation.District(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldDistrict,
		})
		_node.District = &value
	}
	if value, ok := rwc.mutation.SubDistrict(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldSubDistrict,
		})
		_node.SubDistrict = &value
	}
	if value, ok := rwc.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldProvince,
		})
		_node.Province = &value
	}
	if value, ok := rwc.mutation.PostalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reportwallet.FieldPostalCode,
		})
		_node.PostalCode = &value
	}
	if value, ok := rwc.mutation.RegisterDateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reportwallet.FieldRegisterDateTime,
		})
		_node.RegisterDateTime = &value
	}
	if value, ok := rwc.mutation.FileimportID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reportwallet.FieldFileimportID,
		})
		_node.FileimportID = &value
	}
	return _node, _spec
}

// ReportWalletCreateBulk is the builder for creating many ReportWallet entities in bulk.
type ReportWalletCreateBulk struct {
	config
	builders []*ReportWalletCreate
}

// Save creates the ReportWallet entities in the database.
func (rwcb *ReportWalletCreateBulk) Save(ctx context.Context) ([]*ReportWallet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rwcb.builders))
	nodes := make([]*ReportWallet, len(rwcb.builders))
	mutators := make([]Mutator, len(rwcb.builders))
	for i := range rwcb.builders {
		func(i int, root context.Context) {
			builder := rwcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportWalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rwcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rwcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rwcb *ReportWalletCreateBulk) SaveX(ctx context.Context) []*ReportWallet {
	v, err := rwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
