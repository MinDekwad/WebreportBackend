// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/limitpoint"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Limitpoint is the model entity for the Limitpoint schema.
type Limitpoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LimitPoint holds the value of the "LimitPoint" field.
	LimitPoint int `json:"LimitPoint,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Limitpoint) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case limitpoint.FieldID, limitpoint.FieldLimitPoint:
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Limitpoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Limitpoint fields.
func (l *Limitpoint) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case limitpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case limitpoint.FieldLimitPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field LimitPoint", values[i])
			} else if value.Valid {
				l.LimitPoint = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Limitpoint.
// Note that you need to call Limitpoint.Unwrap() before calling this method if this Limitpoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Limitpoint) Update() *LimitpointUpdateOne {
	return (&LimitpointClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Limitpoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Limitpoint) Unwrap() *Limitpoint {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Limitpoint is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Limitpoint) String() string {
	var builder strings.Builder
	builder.WriteString("Limitpoint(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", LimitPoint=")
	builder.WriteString(fmt.Sprintf("%v", l.LimitPoint))
	builder.WriteByte(')')
	return builder.String()
}

// Limitpoints is a parsable slice of Limitpoint.
type Limitpoints []*Limitpoint

func (l Limitpoints) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
