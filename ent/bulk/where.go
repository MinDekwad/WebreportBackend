// Code generated by entc, DO NOT EDIT.

package bulk

import (
	"go-api-report2/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// BulkCreditSameday applies equality check predicate on the "bulkCreditSameday" field. It's identical to BulkCreditSamedayEQ.
func BulkCreditSameday(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBulkCreditSameday), v))
	})
}

// BulkCreditSamedayFee applies equality check predicate on the "bulkCreditSamedayFee" field. It's identical to BulkCreditSamedayFeeEQ.
func BulkCreditSamedayFee(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBulkCreditSamedayFee), v))
	})
}

// Transfertobankaccount applies equality check predicate on the "transfertobankaccount" field. It's identical to TransfertobankaccountEQ.
func Transfertobankaccount(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransfertobankaccount), v))
	})
}

// DateTime applies equality check predicate on the "dateTime" field. It's identical to DateTimeEQ.
func DateTime(v time.Time) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateTime), v))
	})
}

// BulkCreditSamedayEQ applies the EQ predicate on the "bulkCreditSameday" field.
func BulkCreditSamedayEQ(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBulkCreditSameday), v))
	})
}

// BulkCreditSamedayNEQ applies the NEQ predicate on the "bulkCreditSameday" field.
func BulkCreditSamedayNEQ(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBulkCreditSameday), v))
	})
}

// BulkCreditSamedayIn applies the In predicate on the "bulkCreditSameday" field.
func BulkCreditSamedayIn(vs ...float64) predicate.Bulk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bulk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBulkCreditSameday), v...))
	})
}

// BulkCreditSamedayNotIn applies the NotIn predicate on the "bulkCreditSameday" field.
func BulkCreditSamedayNotIn(vs ...float64) predicate.Bulk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bulk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBulkCreditSameday), v...))
	})
}

// BulkCreditSamedayGT applies the GT predicate on the "bulkCreditSameday" field.
func BulkCreditSamedayGT(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBulkCreditSameday), v))
	})
}

// BulkCreditSamedayGTE applies the GTE predicate on the "bulkCreditSameday" field.
func BulkCreditSamedayGTE(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBulkCreditSameday), v))
	})
}

// BulkCreditSamedayLT applies the LT predicate on the "bulkCreditSameday" field.
func BulkCreditSamedayLT(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBulkCreditSameday), v))
	})
}

// BulkCreditSamedayLTE applies the LTE predicate on the "bulkCreditSameday" field.
func BulkCreditSamedayLTE(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBulkCreditSameday), v))
	})
}

// BulkCreditSamedayIsNil applies the IsNil predicate on the "bulkCreditSameday" field.
func BulkCreditSamedayIsNil() predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBulkCreditSameday)))
	})
}

// BulkCreditSamedayNotNil applies the NotNil predicate on the "bulkCreditSameday" field.
func BulkCreditSamedayNotNil() predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBulkCreditSameday)))
	})
}

// BulkCreditSamedayFeeEQ applies the EQ predicate on the "bulkCreditSamedayFee" field.
func BulkCreditSamedayFeeEQ(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBulkCreditSamedayFee), v))
	})
}

// BulkCreditSamedayFeeNEQ applies the NEQ predicate on the "bulkCreditSamedayFee" field.
func BulkCreditSamedayFeeNEQ(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBulkCreditSamedayFee), v))
	})
}

// BulkCreditSamedayFeeIn applies the In predicate on the "bulkCreditSamedayFee" field.
func BulkCreditSamedayFeeIn(vs ...float64) predicate.Bulk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bulk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBulkCreditSamedayFee), v...))
	})
}

// BulkCreditSamedayFeeNotIn applies the NotIn predicate on the "bulkCreditSamedayFee" field.
func BulkCreditSamedayFeeNotIn(vs ...float64) predicate.Bulk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bulk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBulkCreditSamedayFee), v...))
	})
}

// BulkCreditSamedayFeeGT applies the GT predicate on the "bulkCreditSamedayFee" field.
func BulkCreditSamedayFeeGT(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBulkCreditSamedayFee), v))
	})
}

// BulkCreditSamedayFeeGTE applies the GTE predicate on the "bulkCreditSamedayFee" field.
func BulkCreditSamedayFeeGTE(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBulkCreditSamedayFee), v))
	})
}

// BulkCreditSamedayFeeLT applies the LT predicate on the "bulkCreditSamedayFee" field.
func BulkCreditSamedayFeeLT(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBulkCreditSamedayFee), v))
	})
}

// BulkCreditSamedayFeeLTE applies the LTE predicate on the "bulkCreditSamedayFee" field.
func BulkCreditSamedayFeeLTE(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBulkCreditSamedayFee), v))
	})
}

// BulkCreditSamedayFeeIsNil applies the IsNil predicate on the "bulkCreditSamedayFee" field.
func BulkCreditSamedayFeeIsNil() predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBulkCreditSamedayFee)))
	})
}

// BulkCreditSamedayFeeNotNil applies the NotNil predicate on the "bulkCreditSamedayFee" field.
func BulkCreditSamedayFeeNotNil() predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBulkCreditSamedayFee)))
	})
}

// TransfertobankaccountEQ applies the EQ predicate on the "transfertobankaccount" field.
func TransfertobankaccountEQ(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransfertobankaccount), v))
	})
}

// TransfertobankaccountNEQ applies the NEQ predicate on the "transfertobankaccount" field.
func TransfertobankaccountNEQ(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransfertobankaccount), v))
	})
}

// TransfertobankaccountIn applies the In predicate on the "transfertobankaccount" field.
func TransfertobankaccountIn(vs ...float64) predicate.Bulk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bulk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransfertobankaccount), v...))
	})
}

// TransfertobankaccountNotIn applies the NotIn predicate on the "transfertobankaccount" field.
func TransfertobankaccountNotIn(vs ...float64) predicate.Bulk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bulk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransfertobankaccount), v...))
	})
}

// TransfertobankaccountGT applies the GT predicate on the "transfertobankaccount" field.
func TransfertobankaccountGT(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransfertobankaccount), v))
	})
}

// TransfertobankaccountGTE applies the GTE predicate on the "transfertobankaccount" field.
func TransfertobankaccountGTE(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransfertobankaccount), v))
	})
}

// TransfertobankaccountLT applies the LT predicate on the "transfertobankaccount" field.
func TransfertobankaccountLT(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransfertobankaccount), v))
	})
}

// TransfertobankaccountLTE applies the LTE predicate on the "transfertobankaccount" field.
func TransfertobankaccountLTE(v float64) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransfertobankaccount), v))
	})
}

// TransfertobankaccountIsNil applies the IsNil predicate on the "transfertobankaccount" field.
func TransfertobankaccountIsNil() predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransfertobankaccount)))
	})
}

// TransfertobankaccountNotNil applies the NotNil predicate on the "transfertobankaccount" field.
func TransfertobankaccountNotNil() predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransfertobankaccount)))
	})
}

// DateTimeEQ applies the EQ predicate on the "dateTime" field.
func DateTimeEQ(v time.Time) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateTime), v))
	})
}

// DateTimeNEQ applies the NEQ predicate on the "dateTime" field.
func DateTimeNEQ(v time.Time) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateTime), v))
	})
}

// DateTimeIn applies the In predicate on the "dateTime" field.
func DateTimeIn(vs ...time.Time) predicate.Bulk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bulk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateTime), v...))
	})
}

// DateTimeNotIn applies the NotIn predicate on the "dateTime" field.
func DateTimeNotIn(vs ...time.Time) predicate.Bulk {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bulk(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateTime), v...))
	})
}

// DateTimeGT applies the GT predicate on the "dateTime" field.
func DateTimeGT(v time.Time) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateTime), v))
	})
}

// DateTimeGTE applies the GTE predicate on the "dateTime" field.
func DateTimeGTE(v time.Time) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateTime), v))
	})
}

// DateTimeLT applies the LT predicate on the "dateTime" field.
func DateTimeLT(v time.Time) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateTime), v))
	})
}

// DateTimeLTE applies the LTE predicate on the "dateTime" field.
func DateTimeLTE(v time.Time) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateTime), v))
	})
}

// DateTimeIsNil applies the IsNil predicate on the "dateTime" field.
func DateTimeIsNil() predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateTime)))
	})
}

// DateTimeNotNil applies the NotNil predicate on the "dateTime" field.
func DateTimeNotNil() predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateTime)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bulk) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bulk) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bulk) predicate.Bulk {
	return predicate.Bulk(func(s *sql.Selector) {
		p(s.Not())
	})
}
