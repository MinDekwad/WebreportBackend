// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-report2/ent/bankdetail"
	"go-api-report2/ent/statementendingbalanc"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// StatementEndingBalanc is the model entity for the StatementEndingBalanc schema.
type StatementEndingBalanc struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StatementBalance holds the value of the "Statement_Balance" field.
	StatementBalance *float64 `json:"Statement_Balance,omitempty"`
	// StatementDate holds the value of the "Statement_Date" field.
	StatementDate *time.Time `json:"Statement_Date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatementEndingBalancQuery when eager-loading is set.
	Edges     StatementEndingBalancEdges `json:"edges"`
	_Bank_UID *int
}

// StatementEndingBalancEdges holds the relations/edges for other nodes in the graph.
type StatementEndingBalancEdges struct {
	// Bank holds the value of the bank edge.
	Bank *Bankdetail `json:"bank,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BankOrErr returns the Bank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatementEndingBalancEdges) BankOrErr() (*Bankdetail, error) {
	if e.loadedTypes[0] {
		if e.Bank == nil {
			// The edge bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: bankdetail.Label}
		}
		return e.Bank, nil
	}
	return nil, &NotLoadedError{edge: "bank"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatementEndingBalanc) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case statementendingbalanc.FieldStatementBalance:
			values[i] = &sql.NullFloat64{}
		case statementendingbalanc.FieldID:
			values[i] = &sql.NullInt64{}
		case statementendingbalanc.FieldStatementDate:
			values[i] = &sql.NullTime{}
		case statementendingbalanc.ForeignKeys[0]: // _Bank_UID
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type StatementEndingBalanc", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatementEndingBalanc fields.
func (seb *StatementEndingBalanc) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statementendingbalanc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			seb.ID = int(value.Int64)
		case statementendingbalanc.FieldStatementBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Statement_Balance", values[i])
			} else if value.Valid {
				seb.StatementBalance = new(float64)
				*seb.StatementBalance = value.Float64
			}
		case statementendingbalanc.FieldStatementDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Statement_Date", values[i])
			} else if value.Valid {
				seb.StatementDate = new(time.Time)
				*seb.StatementDate = value.Time
			}
		case statementendingbalanc.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Bank_UID", value)
			} else if value.Valid {
				seb._Bank_UID = new(int)
				*seb._Bank_UID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryBank queries the "bank" edge of the StatementEndingBalanc entity.
func (seb *StatementEndingBalanc) QueryBank() *BankdetailQuery {
	return (&StatementEndingBalancClient{config: seb.config}).QueryBank(seb)
}

// Update returns a builder for updating this StatementEndingBalanc.
// Note that you need to call StatementEndingBalanc.Unwrap() before calling this method if this StatementEndingBalanc
// was returned from a transaction, and the transaction was committed or rolled back.
func (seb *StatementEndingBalanc) Update() *StatementEndingBalancUpdateOne {
	return (&StatementEndingBalancClient{config: seb.config}).UpdateOne(seb)
}

// Unwrap unwraps the StatementEndingBalanc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (seb *StatementEndingBalanc) Unwrap() *StatementEndingBalanc {
	tx, ok := seb.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatementEndingBalanc is not a transactional entity")
	}
	seb.config.driver = tx.drv
	return seb
}

// String implements the fmt.Stringer.
func (seb *StatementEndingBalanc) String() string {
	var builder strings.Builder
	builder.WriteString("StatementEndingBalanc(")
	builder.WriteString(fmt.Sprintf("id=%v", seb.ID))
	if v := seb.StatementBalance; v != nil {
		builder.WriteString(", Statement_Balance=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := seb.StatementDate; v != nil {
		builder.WriteString(", Statement_Date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// StatementEndingBalancs is a parsable slice of StatementEndingBalanc.
type StatementEndingBalancs []*StatementEndingBalanc

func (seb StatementEndingBalancs) config(cfg config) {
	for _i := range seb {
		seb[_i].config = cfg
	}
}
